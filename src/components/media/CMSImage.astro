---
export interface Props {
  src: string
  alt: string
  class?: string
  wrapperClass?: string
  loading?: 'eager' | 'lazy'
  width?: number
  height?: number
  aspectRatio?: string
  quality?: number
  format?: 'webp' | 'avif' | 'jpg' | 'png'
  placeholder?: boolean
  focalPoint?: string
  sizes?: string
  breakpoints?: number[]
}

const {
  src,
  alt,
  class: className = '',
  wrapperClass = '',
  loading = 'lazy',
  width,
  height,
  aspectRatio,
  quality = 80,
  format = 'webp',
  placeholder = true,
  focalPoint = 'center',
  sizes = '(min-width: 1536px) 1536px, (min-width: 1280px) 1280px, (min-width: 1024px) 1024px, (min-width: 768px) 768px, (min-width: 640px) 640px, 100vw',
  breakpoints = [320, 640, 768, 1024, 1280, 1536, 1920],
} = Astro.props

// Parse aspect ratio if provided (e.g., "16:9" -> 16/9)
let aspectRatioValue: number | undefined
if (aspectRatio) {
  const [width, height] = aspectRatio.split(':').map(Number)
  if (width && height) {
    aspectRatioValue = width / height
  }
}

// Calculate dimensions based on aspect ratio
let computedWidth = width
let computedHeight = height

if (aspectRatioValue) {
  if (width && !height) {
    computedHeight = Math.round(width / aspectRatioValue)
  } else if (height && !width) {
    computedWidth = Math.round(height * aspectRatioValue)
  }
}

// For srcset generation
const generateSrcSet = (format: string) => {
  return breakpoints
    .map(
      (bp) =>
        `${src}?w=${bp}&format=${format}&q=${quality}&crop=entropy&fit=max ${bp}w`,
    )
    .join(', ')
}
---

<div
  class={`cms-image-wrapper ${wrapperClass}`}
  style={aspectRatioValue ? `aspect-ratio: ${aspectRatioValue};` : ''}
>
  <picture>
    {
      format === 'avif' && (
        <source
          type="image/avif"
          srcset={generateSrcSet('avif')}
          sizes={sizes}
        />
      )
    }
    {
      (format === 'webp' || format === 'avif') && (
        <source
          type="image/webp"
          srcset={generateSrcSet('webp')}
          sizes={sizes}
        />
      )
    }
    <img
      src={`${src}?w=${computedWidth || 1200}&format=${format === 'avif' || format === 'webp' ? 'jpg' : format}&q=${quality}&crop=entropy&fit=max`}
      srcset={generateSrcSet(
        format === 'avif' || format === 'webp' ? 'jpg' : format,
      )}
      {alt}
      width={computedWidth}
      height={computedHeight}
      {loading}
      class={`cms-image ${className} ${placeholder ? 'blur-up' : ''}`}
      style={`object-position: ${focalPoint};`}
    />
  </picture>

  {
    placeholder && (
      <div class="blur-placeholder" aria-hidden="true">
        <img
          src={`${src}?w=20&format=webp&q=30&blur=100`}
          alt=""
          width="20"
          aria-hidden="true"
          style={`object-position: ${focalPoint};`}
        />
      </div>
    )
  }
</div>

<style>
  .cms-image-wrapper {
    position: relative;
    overflow: hidden;
    width: 100%;
    background-color: rgba(0, 0, 0, 0.05);
  }

  .cms-image {
    display: block;
    width: 100%;
    height: auto;
    position: relative;
    z-index: 1;
    object-fit: cover;
  }

  .blur-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 0;
    overflow: hidden;
  }

  .blur-placeholder img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Blur-up animation */
  .blur-up {
    opacity: 0;
    transition: opacity 300ms ease-in;
  }

  .blur-up.loaded {
    opacity: 1;
  }
</style>

<script>
  // Handle blur-up loading effect
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.blur-up')

    images.forEach((img) => {
      if (img instanceof HTMLImageElement) {
        if (img.complete) {
          img.classList.add('loaded')
        } else {
          img.addEventListener('load', () => {
            img.classList.add('loaded')
          })
        }
      }
    })
  })
</script>
