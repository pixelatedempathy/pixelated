# Wrangler Configuration for Pixelated Empathy
# https://developers.cloudflare.com/workers/wrangler/configuration/

name = "pixelated-empathy"
main = "dist/server/entry.mjs"
compatibility_date = "2024-10-31"
compatibility_flags = ["nodejs_compat"]

# Account details (set via environment or CLI)
# account_id = "" # Set via CLOUDFLARE_ACCOUNT_ID env var
# workers_dev = true # Enable for development

[build]
command = "pnpm build"
cwd = "."
watch_dirs = ["src"]

[build.upload]
format = "modules"
dir = "dist"
main = "./server/entry.mjs"

[assets]
directory = "dist/client"

# Node.js compatibility
node_compat = true

# Environment Variables
[vars]
NODE_ENV = "production"
PUBLIC_SITE_URL = "https://pixelatedempathy.com"

# KV Namespaces for caching and sessions
[[kv_namespaces]]
binding = "CACHE"
id = "" # Set this after creating KV namespace
preview_id = "" # Set this for preview environment

[[kv_namespaces]]
binding = "SESSIONS"
id = "" # Set this after creating KV namespace
preview_id = "" # Set this for preview environment

# Durable Objects (if needed for real-time features)
# [[durable_objects.bindings]]
# name = "CHAT_ROOMS"
# class_name = "ChatRoom"
# script_name = "pixelated-empathy"

# R2 Buckets for file storage
[[r2_buckets]]
binding = "ASSETS"
bucket_name = "pixelated-assets"
preview_bucket_name = "pixelated-assets-preview"

[[r2_buckets]]
binding = "UPLOADS"
bucket_name = "pixelated-uploads"
preview_bucket_name = "pixelated-uploads-preview"

# D1 Database (Cloudflare's SQL database)
# [[d1_databases]]
# binding = "DB"
# database_name = "pixelated-db"
# database_id = "" # Set after creating D1 database
# preview_database_id = "" # Set for preview

# Analytics Engine
[analytics_engine_datasets]
# binding = "ANALYTICS"

# Observability
[observability]
enabled = true
head_sampling_rate = 1.0

# Limits and Performance
limits = { cpu_ms = 50000 }
logpush = false

# Routes and Custom Domains
# [[routes]]
# pattern = "pixelatedempathy.com/*"
# custom_domain = true

# [[routes]]
# pattern = "www.pixelatedempathy.com/*"
# custom_domain = true

# Workers AI Binding (for AI features)
[ai]
binding = "AI"

# Vectorize for embeddings (if using vector search)
# [[vectorize]]
# binding = "VECTORIZE"
# index_name = "pixelated-embeddings"

# Browser Rendering (for screenshots, PDFs)
# [browser]
# binding = "BROWSER"

# Queue bindings (for background jobs)
# [[queues.producers]]
# binding = "JOBS_QUEUE"
# queue = "pixelated-jobs"

# [[queues.consumers]]
# queue = "pixelated-jobs"
# max_batch_size = 10
# max_batch_timeout = 30
# max_retries = 3
# dead_letter_queue = "pixelated-jobs-dlq"

# Service bindings (for microservices architecture)
# [[services]]
# binding = "AI_SERVICE"
# service = "pixelated-ai-service"
# environment = "production"

# Hyperdrive for database connections (PostgreSQL)
# [[hyperdrive]]
# binding = "HYPERDRIVE"
# id = "" # Set after creating Hyperdrive config

# Tail Consumers for logging
# [[tail_consumers]]
# service = "pixelated-logger"

# Unsafe bindings (use with caution)
# [unsafe]
# bindings = [
#   { name = "CUSTOM_BINDING", type = "plain_text", text = "value" }
# ]

# Miniflare configuration for local development
[miniflare]
kv_persist = true
cache_persist = true
d1_persist = true
r2_persist = true

# Development environment
[env.development]
name = "pixelated-empathy-dev"
vars = { NODE_ENV = "development", PUBLIC_SITE_URL = "http://localhost:4321" }

# Staging environment
[env.staging]
name = "pixelated-empathy-staging"
vars = { NODE_ENV = "staging", PUBLIC_SITE_URL = "https://staging.pixelatedempathy.com" }

# Production environment
[env.production]
name = "pixelated-empathy"
vars = { NODE_ENV = "production", PUBLIC_SITE_URL = "https://pixelatedempathy.com" }
routes = [
  { pattern = "pixelatedempathy.com/*", custom_domain = true },
  { pattern = "www.pixelatedempathy.com/*", custom_domain = true }
]

# Site configuration (for Pages)
[site]
bucket = "./dist/client"

# Placement (for regional deployment)
# [placement]
# mode = "smart" # Options: "smart" or specific regions

# Logfwdr for external logging
# [logfwdr]
# enabled = true
# destination = "https://logs.example.com"

# Triggers (Cron for scheduled tasks)
[triggers]
crons = [
  # "0 0 * * *",  # Daily at midnight UTC
  # "*/15 * * * *" # Every 15 minutes
]

# Compatibility settings
[compatibility_flags]
# nodejs_compat_v2 = true
# streams_enable_constructors = true
