---
import AdminLayout from '../../../layouts/AdminLayout.astro'
import { emotionValidationPipeline } from '../../../lib/ai/emotions/EmotionValidationPipeline'
import { validationRunner } from '../../../lib/ai/validation/ContinuousValidationRunner'

// Check if we need to initialize the pipeline
let validationInitError = null
let validationStats = null
let runnerState = null

try {
  await validationRunner.initialize()
  validationStats = emotionValidationPipeline.getValidationStats()
  runnerState = validationRunner.getState()
} catch (error) {
  validationInitError = error.message
}

// Page meta
const title = 'AI Validation Pipeline'
const description =
  'Manage and monitor the continuous validation pipeline for AI models'

// Common cron schedules for UI
const cronSchedules = [
  { value: '0 0 * * *', label: 'Daily at midnight' },
  { value: '0 */12 * * *', label: 'Every 12 hours' },
  { value: '0 */6 * * *', label: 'Every 6 hours' },
  { value: '0 */2 * * *', label: 'Every 2 hours' },
  { value: '*/30 * * * *', label: 'Every 30 minutes (dev only)' },
]
---

<AdminLayout {title} {description}>
  <main class="px-6 py-8 max-w-6xl mx-auto">
    <div class="mb-8 flex justify-between items-center">
      <div>
        <h1 class="text-3xl font-bold mb-2">{title}</h1>
        <p class="text-gray-600 dark:text-gray-400">{description}</p>
      </div>

      <div class="flex gap-4">
        <button
          id="run-validation"
          class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
        >
          Run Validation
        </button>

        <button
          id="start-continuous"
          class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
        >
          Start Continuous
        </button>

        <button
          id="stop-continuous"
          class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
        >
          Stop Continuous
        </button>
      </div>
    </div>

    {
      validationInitError && (
        <div class="bg-red-100 dark:bg-red-900/30 border border-red-300 dark:border-red-800 rounded-md p-4 mb-6">
          <div class="flex items-start">
            <div class="flex-shrink-0">
              <svg
                class="h-5 w-5 text-red-500"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                  clip-rule="evenodd"
                />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800 dark:text-red-200">
                Validation Pipeline Error
              </h3>
              <div class="mt-2 text-sm text-red-700 dark:text-red-300">
                <p>{validationInitError}</p>
              </div>
            </div>
          </div>
        </div>
      )
    }

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
      <!-- Validation Status -->
      <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
        <h2 class="text-xl font-semibold mb-4">Validation Status</h2>

        <div id="status-indicator" class="flex items-center mb-6">
          <div class="h-4 w-4 rounded-full bg-green-500 mr-2"></div>
          <span>Pipeline Initialized</span>
        </div>

        <div class="grid grid-cols-2 gap-4">
          <div>
            <p class="text-sm text-gray-500 dark:text-gray-400">Last Run</p>
            <p id="last-run" class="font-medium">
              {
                validationStats?.lastRun
                  ? new Date(validationStats.lastRun).toLocaleString()
                  : 'Never'
              }
            </p>
          </div>

          <div>
            <p class="text-sm text-gray-500 dark:text-gray-400">Run Count</p>
            <p id="run-count" class="font-medium">
              {validationStats?.runCount || 0}
            </p>
          </div>
        </div>
      </div>

      <!-- Test Coverage -->
      <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
        <h2 class="text-xl font-semibold mb-4">Test Coverage</h2>

        <div class="grid grid-cols-2 gap-4">
          <div>
            <p class="text-sm text-gray-500 dark:text-gray-400">Total Tests</p>
            <p id="total-tests" class="font-medium">
              {validationStats?.totalTests || 0}
            </p>
          </div>

          <div>
            <p class="text-sm text-gray-500 dark:text-gray-400">
              Models Covered
            </p>
            <p id="models-count" class="font-medium">
              {Object.keys(validationStats?.byModel || {}).length || 0}
            </p>
          </div>
        </div>
      </div>

      <!-- Overall Performance -->
      <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
        <h2 class="text-xl font-semibold mb-4">Overall Performance</h2>

        <div class="grid grid-cols-2 gap-4">
          <div>
            <p class="text-sm text-gray-500 dark:text-gray-400">Passed Tests</p>
            <p id="passed-tests" class="font-medium">
              {validationStats?.passedTests || 0}
            </p>
          </div>

          <div>
            <p class="text-sm text-gray-500 dark:text-gray-400">Pass Rate</p>
            <p id="pass-rate" class="font-medium">
              {
                validationStats?.totalTests
                  ? `${Math.round((validationStats.passedTests / validationStats.totalTests) * 100)}%`
                  : 'N/A'
              }
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- Validation Results -->
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow mb-8">
      <h2 class="text-xl font-semibold mb-4">Validation Results</h2>

      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead>
            <tr>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Test ID
              </th>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Model
              </th>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Provider
              </th>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Result
              </th>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Score
              </th>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Timestamp
              </th>
            </tr>
          </thead>
          <tbody
            id="results-body"
            class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700"
          >
            <tr>
              <td class="px-6 py-4 text-gray-500 dark:text-gray-400" colspan="6"
                >No validation results yet</td
              >
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Continuous Validation Settings -->
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow mb-8">
      <h2 class="text-xl font-semibold mb-4">Continuous Validation</h2>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div>
          <h3 class="text-lg font-medium mb-3">Schedule Settings</h3>

          <div class="mb-4">
            <label
              for="cron-schedule"
              class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
            >
              Schedule Frequency
            </label>
            <select
              id="cron-schedule"
              class="w-full rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200"
            >
              {
                cronSchedules.map((schedule) => (
                  <option value={schedule.value}>{schedule.label}</option>
                ))
              }
              <option value="custom">Custom schedule...</option>
            </select>
          </div>

          <div id="custom-schedule-container" class="mb-4 hidden">
            <label
              for="custom-cron"
              class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
            >
              Custom Cron Expression
            </label>
            <input
              type="text"
              id="custom-cron"
              placeholder="0 0 * * *"
              class="w-full rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200"
            />
            <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
              Format: minute hour day-of-month month day-of-week
            </p>
          </div>

          <div class="flex space-x-4 mt-4">
            <button
              id="schedule-validation"
              class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
            >
              Set Schedule
            </button>

            <button
              id="unschedule-validation"
              class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
              disabled={!runnerState?.isScheduled}
            >
              Cancel Schedule
            </button>
          </div>
        </div>

        <div>
          <h3 class="text-lg font-medium mb-3">Current Schedule</h3>

          {
            runnerState?.isScheduled ? (
              <div class="rounded bg-green-100 dark:bg-green-900/30 border border-green-300 dark:border-green-800 p-4">
                <div class="flex items-center mb-2">
                  <div class="h-4 w-4 rounded-full bg-green-500 mr-2" />
                  <p class="font-medium">Schedule Active</p>
                </div>

                <div class="grid grid-cols-2 gap-4 mt-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                      Current Schedule
                    </p>
                    <p id="current-schedule" class="font-medium">
                      {runnerState?.schedule || 'Unknown'}
                    </p>
                  </div>

                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                      Next Run
                    </p>
                    <p id="next-run" class="font-medium">
                      {runnerState?.nextScheduledRun
                        ? new Date(
                            runnerState.nextScheduledRun,
                          ).toLocaleString()
                        : 'Not scheduled'}
                    </p>
                  </div>
                </div>
              </div>
            ) : (
              <div class="rounded bg-gray-100 dark:bg-gray-900/30 border border-gray-300 dark:border-gray-700 p-4">
                <div class="flex items-center mb-2">
                  <div class="h-4 w-4 rounded-full bg-gray-500 mr-2" />
                  <p class="font-medium">No Active Schedule</p>
                </div>

                <p class="text-gray-600 dark:text-gray-400 text-sm">
                  Set up a schedule to run validation automatically.
                </p>
              </div>
            )
          }
        </div>
      </div>
    </div>

    <!-- Validation History -->
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow mb-8">
      <h2 class="text-xl font-semibold mb-4">Run History</h2>

      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead>
            <tr>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Run ID
              </th>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Timestamp
              </th>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Status
              </th>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Tests
              </th>
              <th
                class="px-6 py-3 bg-gray-50 dark:bg-gray-900/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
              >
                Pass Rate
              </th>
            </tr>
          </thead>
          <tbody
            id="history-body"
            class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700"
          >
            <tr>
              <td class="px-6 py-4 text-gray-500 dark:text-gray-400" colspan="5"
                >No history available</td
              >
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Integration & Documentation -->
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
      <h2 class="text-xl font-semibold mb-4">CI/CD Integration</h2>

      <div class="mb-4">
        <p class="text-gray-700 dark:text-gray-300 mb-2">
          The continuous validation pipeline integrates with your CI/CD
          workflows for automated model validation.
        </p>

        <div
          class="rounded bg-gray-100 dark:bg-gray-900/30 border border-gray-300 dark:border-gray-700 p-4 mt-2"
        >
          <h3 class="font-medium mb-2">GitHub Actions Integration</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
            A GitHub Actions workflow is included at <code
              class="bg-gray-200 dark:bg-gray-800 px-1 py-0.5 rounded"
              >.github/workflows/ai-validation.yml</code
            >
          </p>
          <ul
            class="list-disc list-inside text-sm text-gray-600 dark:text-gray-400"
          >
            <li>Runs validation daily at midnight UTC</li>
            <li>Triggers validation on successful deployments</li>
            <li>Creates GitHub issues for failed validations</li>
            <li>Generates validation result summaries</li>
          </ul>
        </div>
      </div>

      <div class="mb-4">
        <h3 class="font-medium mb-2">Webhook API</h3>
        <p class="text-sm text-gray-600 dark:text-gray-400">
          Validation can be triggered via webhook:
        </p>
        <pre
          class="bg-gray-100 dark:bg-gray-900/30 p-2 rounded text-xs overflow-auto mt-2">
POST /api/ai/validation/webhook
Headers: Content-Type: application/json, x-github-event: workflow_dispatch
Body: JSON with action and environment
        </pre>
      </div>
    </div>
  </main>
</AdminLayout>

<script>
  // Client-side functionality for the validation pipeline
  document.addEventListener('DOMContentLoaded', () => {
    const runValidationBtn = document.getElementById('run-validation')
    const startContinuousBtn = document.getElementById('start-continuous')
    const stopContinuousBtn = document.getElementById('stop-continuous')
    const scheduleValidationBtn = document.getElementById('schedule-validation')
    const unscheduleValidationBtn = document.getElementById(
      'unschedule-validation',
    )
    const cronScheduleSelect = document.getElementById('cron-schedule')
    const customScheduleContainer = document.getElementById(
      'custom-schedule-container',
    )
    const customCronInput = document.getElementById('custom-cron')

    // Get history on page load
    fetchValidationHistory()

    // Handle custom cron schedule
    cronScheduleSelect?.addEventListener('change', (e) => {
      if (e.target.value === 'custom') {
        customScheduleContainer?.classList.remove('hidden')
      } else {
        customScheduleContainer?.classList.add('hidden')
      }
    })

    // Run validation
    runValidationBtn?.addEventListener('click', async () => {
      try {
        runValidationBtn.disabled = true
        runValidationBtn.textContent = 'Running...'

        const response = await fetch('/api/ai/validation/run', {
          method: 'POST',
        })

        if (!response.ok) {
          throw new Error('Failed to run validation')
        }

        // Refresh the page to show new results
        window.location.reload()
      } catch (error) {
        console.error('Error running validation:', error)
        alert(`Error running validation: ${error.message}`)
      } finally {
        runValidationBtn.disabled = false
        runValidationBtn.textContent = 'Run Validation'
      }
    })

    // Start continuous validation
    startContinuousBtn?.addEventListener('click', async () => {
      try {
        startContinuousBtn.disabled = true
        startContinuousBtn.textContent = 'Starting...'

        const response = await fetch('/api/ai/validation/start', {
          method: 'POST',
        })

        if (!response.ok) {
          throw new Error('Failed to start continuous validation')
        }

        // Refresh the page
        window.location.reload()
      } catch (error) {
        console.error('Error starting continuous validation:', error)
        alert(`Error starting continuous validation: ${error.message}`)
      } finally {
        startContinuousBtn.disabled = false
        startContinuousBtn.textContent = 'Start Continuous'
      }
    })

    // Stop continuous validation
    stopContinuousBtn?.addEventListener('click', async () => {
      try {
        stopContinuousBtn.disabled = true
        stopContinuousBtn.textContent = 'Stopping...'

        const response = await fetch('/api/ai/validation/stop', {
          method: 'POST',
        })

        if (!response.ok) {
          throw new Error('Failed to stop continuous validation')
        }

        // Refresh the page
        window.location.reload()
      } catch (error) {
        console.error('Error stopping continuous validation:', error)
        alert(`Error stopping continuous validation: ${error.message}`)
      } finally {
        stopContinuousBtn.disabled = false
        stopContinuousBtn.textContent = 'Stop Continuous'
      }
    })

    // Schedule validation
    scheduleValidationBtn?.addEventListener('click', async () => {
      try {
        scheduleValidationBtn.disabled = true
        scheduleValidationBtn.textContent = 'Setting Schedule...'

        // Get selected schedule
        let schedule
        if (cronScheduleSelect?.value === 'custom') {
          schedule = customCronInput?.value?.trim()
          if (!schedule) {
            throw new Error('Please enter a custom cron schedule')
          }
        } else {
          schedule = cronScheduleSelect?.value
        }

        const response = await fetch('/api/ai/validation/schedule', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'schedule',
            schedule,
          }),
        })

        if (!response.ok) {
          const data = await response.json()
          throw new Error(data.message || 'Failed to set schedule')
        }

        // Refresh the page
        window.location.reload()
      } catch (error) {
        console.error('Error setting schedule:', error)
        alert(`Error setting schedule: ${error.message}`)
      } finally {
        scheduleValidationBtn.disabled = false
        scheduleValidationBtn.textContent = 'Set Schedule'
      }
    })

    // Unschedule validation
    unscheduleValidationBtn?.addEventListener('click', async () => {
      try {
        unscheduleValidationBtn.disabled = true
        unscheduleValidationBtn.textContent = 'Canceling...'

        const response = await fetch('/api/ai/validation/schedule', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'stop',
          }),
        })

        if (!response.ok) {
          const data = await response.json()
          throw new Error(data.message || 'Failed to cancel schedule')
        }

        // Refresh the page
        window.location.reload()
      } catch (error) {
        console.error('Error canceling schedule:', error)
        alert(`Error canceling schedule: ${error.message}`)
      } finally {
        unscheduleValidationBtn.disabled = false
        unscheduleValidationBtn.textContent = 'Cancel Schedule'
      }
    })

    // Function to fetch validation history
    async function fetchValidationHistory() {
      try {
        const response = await fetch('/api/ai/validation/history')

        if (!response.ok) {
          console.error('Failed to fetch validation history')
          return
        }

        const data = await response.json()
        if (data.success && data.history && data.history.length > 0) {
          // Clear previous content and show history
          const historyBody = document.getElementById('history-body')
          if (historyBody) {
            historyBody.innerHTML = ''

            data.history.forEach((entry) => {
              const passRate =
                entry.resultsCount > 0
                  ? Math.round((entry.passedCount / entry.resultsCount) * 100)
                  : 0

              const row = document.createElement('tr')
              row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
                  ${entry.runId}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                  ${new Date(entry.timestamp).toLocaleString()}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                  ${
                    entry.success
                      ? '<span class="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">Success</span>'
                      : '<span class="px-2 py-1 text-xs rounded-full bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">Failed</span>'
                  }
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                  ${entry.passedCount} / ${entry.resultsCount}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                  <div class="flex items-center">
                    <div class="w-16 bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mr-2">
                      <div class="bg-blue-600 h-2.5 rounded-full" style="width: ${passRate}%"></div>
                    </div>
                    <span>${passRate}%</span>
                  </div>
                </td>
              `

              historyBody.appendChild(row)
            })
          }
        }
      } catch (error) {
        console.error('Error fetching validation history:', error)
      }
    }
  })
</script>
