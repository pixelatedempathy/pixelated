name: Deployment Rollback

on:
  push:
    branches:
    - master
    - staging

env:
  NODE_VERSION: 24.8.0
  PNPM_VERSION: 10.17.1
  NODE_ENV: production

jobs:
  rollback-staging:
    name: Rollback Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    permissions:
      contents: write
      deployments: write
      actions: read
      id-token: write
    concurrency:
      group: staging_environment
      cancel-in-progress: true
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Fetch all tags
      run: git fetch --tags --force

    - name: Setup Node.js
      uses: actions/setup-node@v4.4.0
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4.1.0
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      id: pnpm-store
      shell: bash
      run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v4.2.3
      with:
        path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Determine rollback tag
      id: get-tag
      run: |
        # Use the tag manager to validate and get rollback tag
        if node scripts/tag-manager.cjs validate staging; then
          TAGS=$(git tag -l "staging-*" --sort=-committerdate)
          TAG=$(echo "$TAGS" | sed -n '2p')
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Rolling back to: $TAG"
          git checkout $TAG
        else
          echo "::warning::Cannot rollback - insufficient staging tags"
          echo "::notice::Creating initial staging tags for future rollbacks"
          node scripts/tag-manager.cjs create staging --message="Initial staging tag for rollback capability" --push
          echo "::error::Rollback not possible - this appears to be the first deployment"
          exit 1
        fi

    - name: Build application
      run: pnpm build

    - name: Debug Token Permissions
      run: |
        echo "Checking token permissions..."
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/user

    - name: Compute unique rollback tag for staging
      id: compute-tag-staging
      shell: bash
      run: |
        # Compute a tag with a two-digit counter suffix to avoid collisions
        TIMESTAMP=$(date +%Y%m)
        BASE="rollback-staging-$TIMESTAMP"
        # List existing tags that start with the base (only look for suffix -NN)
        EXISTING=$(git tag -l "${BASE}-[0-9][0-9]")
        if [ -z "${EXISTING}" ]; then
          COUNTER=1
        else
          MAX=$(echo "${EXISTING}" | sed -n "s/^${BASE}-\([0-9]\{2\}\)$/\1/p" | sort -n | tail -n1)
          if [ -z "${MAX}" ]; then
            COUNTER=1
          else
            COUNTER=$((10#$MAX + 1))
          fi
        fi
        COUNTER_PAD=$(printf "%02d" ${COUNTER})
        TAG_NAME="${BASE}-${COUNTER_PAD}"
        echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "Computed tag: ${TAG_NAME}"

    - name: Dry Run Git Push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use the computed tag from the previous step
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        TAG_NAME=${{ steps.compute-tag-staging.outputs.tag }}
        echo "Dry run for git push using tag: $TAG_NAME"
        git tag "$TAG_NAME"
        git push --dry-run https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/pixelatedempathy/pixelated.git "$TAG_NAME" || true
        # Remove the temporary local tag created for the dry-run to avoid collisions later
        git tag -d "$TAG_NAME" || true

    - name: Create rollback tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Push the previously computed tag
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        TAG_NAME=${{ steps.compute-tag-staging.outputs.tag }}
        # Only create the tag if it doesn't already exist locally
        if git rev-parse -q --verify "refs/tags/$TAG_NAME" >/dev/null; then
          echo "Tag $TAG_NAME already exists locally - skipping tag creation"
        else
          git tag "$TAG_NAME"
        fi
        # Push the tag (will error if remote already has it, so use --force-with-lease to be safe only if needed)
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/pixelatedempathy/pixelated.git "$TAG_NAME" || {
          echo "Push failed - checking if remote already has tag"
          if git ls-remote --tags https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/pixelatedempathy/pixelated.git | grep -q "refs/tags/$TAG_NAME"; then
            echo "Remote already has tag $TAG_NAME - nothing to do"
          else
            echo "Remote does not have tag and push failed - failing"
            exit 1
          fi
        }

  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    concurrency:
      group: production_environment
      cancel-in-progress: true
    permissions:
      contents: write
      deployments: write
      actions: read
      id-token: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Fetch all tags
      run: git fetch --tags --force

    - name: Setup Node.js
      uses: actions/setup-node@v4.4.0
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4.1.0
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      id: pnpm-store
      shell: bash
      run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v4.2.3
      with:
        path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install

    - name: Determine rollback tag
      id: get-tag
      run: |
        # Use the tag manager to validate and get rollback tag
        if node scripts/tag-manager.cjs validate production; then
          TAGS=$(git tag -l "production-*" --sort=-committerdate)
          TAG=$(echo "$TAGS" | sed -n '2p')
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Rolling back to: $TAG"
          git checkout $TAG
        else
          echo "::warning::Cannot rollback - insufficient production tags"
          echo "::notice::Creating initial production tags for future rollbacks"
          node scripts/tag-manager.cjs create production --message="Initial production tag for rollback capability" --push
          echo "::error::Rollback not possible - this appears to be the first deployment"
          exit 1
        fi

    - name: Build application
      run: pnpm build

    - name: Debug Token Permissions
      run: |
        echo "Checking token permissions..."
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/user
    - name: Compute unique rollback tag for production
      id: compute-tag-prod
      shell: bash
      run: |
        # Compute a tag with a two-digit counter suffix to avoid collisions
        TIMESTAMP=$(date +%Y%m%d)
        BASE="prod-rollback-$TIMESTAMP"
        # List existing tags that start with the base (only look for suffix -NN)
        EXISTING=$(git tag -l "${BASE}-[0-9][0-9]")
        if [ -z "${EXISTING}" ]; then
          COUNTER=1
        else
          MAX=$(echo "${EXISTING}" | sed -n "s/^${BASE}-\([0-9]\{2\}\)$/\1/p" | sort -n | tail -n1)
          if [ -z "${MAX}" ]; then
            COUNTER=1
          else
            COUNTER=$((10#$MAX + 1))
          fi
        fi
        COUNTER_PAD=$(printf "%02d" ${COUNTER})
        TAG_NAME="${BASE}-${COUNTER_PAD}"
        echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "Computed tag: ${TAG_NAME}"

    - name: Dry Run Git Push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        TAG_NAME=${{ steps.compute-tag-prod.outputs.tag }}
        echo "Dry run for git push using tag: $TAG_NAME"
        git tag "$TAG_NAME"
        git push --dry-run https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/pixelatedempathy/pixelated.git "$TAG_NAME" || true
        # Remove the temporary local tag created during dry-run to avoid collisions
        git tag -d "$TAG_NAME" || true

    - name: Create rollback tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        TAG_NAME=${{ steps.compute-tag-prod.outputs.tag }}
        # Only create the tag if it doesn't already exist locally
        if git rev-parse -q --verify "refs/tags/$TAG_NAME" >/dev/null; then
          echo "Tag $TAG_NAME already exists locally - skipping tag creation"
        else
          git tag "$TAG_NAME"
        fi
        # Ensure remote URL uses token and push; if push fails because remote already has tag, tolerate it
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/pixelatedempathy/pixelated.git
        git push origin "$TAG_NAME" || {
          echo "Push failed - checking if remote already has tag"
          if git ls-remote --tags https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/pixelatedempathy/pixelated.git | grep -q "refs/tags/$TAG_NAME"; then
            echo "Remote already has tag $TAG_NAME - nothing to do"
          else
            echo "Remote does not have tag and push failed - failing"
            exit 1
          fi
        }
