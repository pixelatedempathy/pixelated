---
import { getUrl } from '~/utils/common'

/**
 * Search component using FlexSearch
 *
 * This component provides search functionality via the FlexSearch integration.
 * We previously used pagefind but replaced it due to compatibility issues with
 * Apple Silicon and other architectures.
 *
 * Note: There's a known issue with @astrojs/vercel where it tries to run pagefind
 * during build. We handle this with a cleanup script that creates dummy files to
 * prevent runtime errors.
 */
---

<button
  id="search-switch"
  class="op-60 hover:op-100 op-transition"
  title="Search"
  aria-label="Search"
>
  <div u-i-grommet-icons-search></div>
</button>

<div
  transition:persist
  id="search-panel"
  class="z-200 fixed top-20 right-8
    grid grid-rows-[auto_1fr]
    w-30rem max-h-82vh p-2 rounded-lg lt-lgp:(w-90% left-5% right-5%)
    bg-[var(--c-bg)] shadow-custom_0_0_20_0"
>
  <div
    id="search-bar"
    class="grid grid-cols-[auto_1fr] items-center
      h-10 px-3 rounded-md
      bg-[#88888811] dark:bg-[#88888822]"
  >
    <div u-i-grommet-icons-search id="search-icon" class="op-60"></div>
    <label class="sr-only" for="search-input">Search</label>
    <input
      type="search"
      id="search-input"
      class="h-full pl-2 bg-transparent outline-0"
      placeholder="Search"
      autocomplete="off"
    />
  </div>
  <div id="search-results" class="overflow-y-auto" data-base={getUrl('/')}></div>
</div>

<script>
  import { toggleFadeEffect } from '~/utils/animation'

  /* Handle click on search switch to open or close */
  document.addEventListener('astro:page-load', (_event: Event) => {
    const handleToggle = () => {
      const searchPanel = document.getElementById('search-panel')
      const isClosed = searchPanel?.classList.contains('hidden')
      const isWidthUnder1128 = window.innerWidth < 1128

      if (searchPanel && isClosed) {
        if (isWidthUnder1128) toggleFadeEffect('backdrop', true, 'hidden')
        toggleFadeEffect('search-panel', true, 'hidden')
      } else if (searchPanel && !isClosed && !isWidthUnder1128) {
        toggleFadeEffect('search-panel', false, 'hidden')
      }
    }

    const searchSwitch = document.getElementById('search-switch')
    searchSwitch?.addEventListener('click', handleToggle)
  })

  /* Handle click on link or outside search panel to close */
  const handleClose = (event: Event) => {
    const searchPanel = document.getElementById('search-panel')
    if (!searchPanel || searchPanel.classList.contains('hidden')) return

    const isWidthUnder1128 = window.innerWidth < 1128
    const target = event.target as HTMLElement | null

    const isClickedOutsideOnDesktop =
      !isWidthUnder1128 &&
      target instanceof Node &&
      !searchPanel.contains(target) &&
      !document.getElementById('search-switch')?.contains(target)

    if (isClickedOutsideOnDesktop) {
      toggleFadeEffect('search-panel', false, 'hidden')
      return
    }

    const isClickedOnLinkInSearchResults =
      target instanceof HTMLElement &&
      target.closest('#search-results') &&
      target.closest('a')

    if (isClickedOnLinkInSearchResults) {
      if (isWidthUnder1128) toggleFadeEffect('backdrop', false, 'hidden')
      if (!window.matchMedia('(prefers-reduced-motion)').matches)
        searchPanel.classList.remove('fade-in')
      searchPanel.classList.add('hidden')
    }
  }

  document.addEventListener('click', (event) => handleClose(event))
</script>

<script>

  const fakeResults = [
    {
      meta: {
        title: 'Simulated Search Result in Dev Env',
      },
      excerpt: 'Mock data is used to simulate FlexSearch <mark>in development</mark>, where files required for indexing exist only in memory.',
    },
    {
      meta: {
        title: 'Testing Search Functionality in Prod Env',
      },
      excerpt: 'Try running <mark>pnpm build && pnpm preview</mark> instead.',
    },
  ]

  /* Handle user input */
  const handleInput = async (event: Event) => {
    const searchResults = document.getElementById('search-results')
    if (searchResults) searchResults.innerHTML = ''

    if (import.meta.env.PROD) {
      const query = (event.target as HTMLInputElement).value

      if (window.searchClient && query.trim()) {
        const results = window.searchClient.search(query)
        const searchResults = document.getElementById('search-results')

        if (searchResults) {
          searchResults.innerHTML = ''

          for (const result of results) {
            const a = document.createElement('a')
            a.href = result.url || '#'
            a.className = 'search-results-item'

            const titleDiv = document.createElement('div')
            titleDiv.className = 'search-results-title'
            titleDiv.textContent = result.title || ''

            const excerptDiv = document.createElement('div')
            excerptDiv.className = 'search-results-excerpt'
            const excerptText = (result.content || '').substring(0, 150) + '...'
            excerptDiv.textContent = excerptText

            a.appendChild(titleDiv)
            a.appendChild(excerptDiv)
            searchResults.appendChild(a)
          }
        }
      }
    } else {
      const searchResults = document.getElementById('search-results')
      if (searchResults) {
        for (const data of fakeResults) {
          const a = document.createElement('a')
          a.href = searchResults.dataset['base'] || '#'
          a.className = 'search-results-item'

          const titleDiv = document.createElement('div')
          titleDiv.className = 'search-results-title'
          titleDiv.textContent = data.meta.title || ''

          const excerptDiv = document.createElement('div')
          excerptDiv.className = 'search-results-excerpt'
          excerptDiv.textContent = data.excerpt || ''

          a.appendChild(titleDiv)
          a.appendChild(excerptDiv)
          searchResults.appendChild(a)
        }
      }
    }
  }

  const searchInput = document.getElementById('search-input')
  searchInput?.addEventListener('input', (event: Event) => handleInput(event))

  window.addEventListener('search:ready', (event: Event) => {
    console.log('Search is ready with', (event as CustomEvent).detail.size, 'documents')
  })
</script>

<script is:inline>
  document.addEventListener('DOMContentLoaded', (_event) => {
    if (window.searchClient && window.searchIndex) {
      console.log('Search initialized with', window.searchIndex.length, 'documents')
    }
  })
</script>
