# Dockerfile without BuildKit dependencies (GCP Cloud Build compatible)
# This is a fallback for environments that don't support BuildKit features
ARG NODE_VERSION=24

# Base stage with optimized package installation
FROM node:${NODE_VERSION}-alpine AS base

LABEL org.opencontainers.image.description="Pixelated Empathy - Secure Astro Application"
LABEL org.opencontainers.image.authors="Vivi <vivi@pixelatedempathy.com>"
LABEL org.opencontainers.image.title="Pixelated Empathy Node"
LABEL org.opencontainers.image.description="Secure Node.js app using a minimal base image for reduced vulnerabilities."

# Install system dependencies in a single layer with cleanup
RUN apk add --no-cache \
    build-base \
    python3 \
    make \
    g++ \
    git \
    curl \
    tini \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Install pnpm with optimized configuration
ARG PNPM_VERSION=10.19.0
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-timeout 300000 && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm install -g pnpm@$PNPM_VERSION && \
    npm cache clean --force

# Create non-root user early
RUN addgroup -g 1001 astro && \
    adduser -u 1001 -G astro -s /bin/sh -D astro

# Set working directory and ownership
WORKDIR /app
RUN chown astro:astro /app

# Environment variables for optimization
ENV NODE_ENV="production"
ENV ASTRO_TELEMETRY_DISABLED=1
ENV ASTRO_CACHE_DIR=/tmp/.astro
ENV VITE_CACHE_DIR=/tmp/.vite
ENV PORT=4321
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV XDG_CACHE_HOME=/tmp/.cache
RUN mkdir -p /tmp/.cache && \
    mkdir -p /tmp/.cache/node/corepack/v1 && \
    chown -R 1001:1001 /tmp/.cache || true && \
    chmod -R 0777 /tmp/.cache || true && \
    corepack enable pnpm

# Dependencies stage - optimized for caching
FROM base AS deps

COPY --chown=astro:astro package.json pnpm-lock.yaml* ./

RUN mkdir -p /tmp/.cache/node/corepack/v1 /app/.pnpm-store && \
    chown -R 1001:1001 /tmp/.cache /app/.pnpm-store || true && \
    chmod -R 0777 /tmp/.cache || true && \
    chmod -R 0755 /app/.pnpm-store || true

USER astro

ENV XDG_CACHE_HOME=/tmp/.cache
RUN pnpm config set store-dir /app/.pnpm-store && \
    pnpm config set package-import-method copy && \
    pnpm config set registry https://registry.npmjs.org/ && \
    pnpm config set fetch-timeout 300000 && \
    pnpm config set fetch-retry-mintimeout 20000 && \
    pnpm config set fetch-retry-maxtimeout 120000 && \
    pnpm install --prefer-offline --reporter=silent --ignore-scripts && \
    pnpm audit --audit-level moderate || true

# Build stage - NO BuildKit secret mounts (uses ARGs instead)
FROM base AS build

# Build arguments for secrets (passed at build time)
ARG SENTRY_RELEASE=""
ARG PUBLIC_SENTRY_DSN=""
ARG SENTRY_DSN=""
ARG SENTRY_AUTH_TOKEN=""
ARG BETTER_AUTH_SECRET=""

# Set environment variables from build args
ENV SENTRY_RELEASE=${SENTRY_RELEASE}
ENV PUBLIC_SENTRY_DSN=${PUBLIC_SENTRY_DSN}
ENV SENTRY_DSN=${SENTRY_DSN}
ENV SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
ENV BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}

USER astro

COPY --from=deps --chown=astro:astro /app/node_modules ./node_modules
COPY --from=deps --chown=astro:astro /app/.pnpm-store ./.pnpm-store
COPY --from=deps --chown=astro:astro /tmp/.cache /tmp/.cache
COPY --chown=astro:astro package.json ./
COPY --chown=astro:astro pnpm-lock.yaml* ./

COPY --chown=astro:astro astro.config.mjs tsconfig.json uno.config.ts ./
COPY --chown=astro:astro instrument.mjs ./
COPY --chown=astro:astro astro ./astro
COPY --chown=astro:astro scripts ./scripts
COPY --chown=astro:astro public ./public
COPY --chown=astro:astro src ./src

COPY --chown=astro:astro .env* ./
COPY --chown=astro:astro *.config.* ./

RUN mkdir -p /tmp/.astro /app/node_modules/.astro /tmp/.cache/node/corepack/v1 && \
    chmod -R 755 /tmp/.astro /app/node_modules/.astro

ENV NODE_OPTIONS="--max-old-space-size=4096 --no-experimental-strip-types"

# Build without secret mounts (secrets are in ENV from ARGs)
RUN echo "🏗️ Starting optimized build process..." && \
    echo "Node: $(node --version), pnpm: $(pnpm --version)" && \
    echo "Memory available: $(cat /proc/meminfo | grep MemAvailable)" && \
    pnpm build --verbose 2>&1 | tee /tmp/build.log && \
    echo "✅ Build completed successfully"

# Production cleanup - remove dev dependencies and unnecessary files
RUN pnpm prune --prod && \
    rm -rf /app/.pnpm-store /tmp/.cache ~/.npm ~/.cache && \
    find /app/node_modules -name "*.map" -delete && \
    find /app/dist -name "*.map" -delete

# Production stage - minimal runtime image
FROM node:${NODE_VERSION}-alpine AS production

RUN apk add --no-cache tini ca-certificates dumb-init && \
    rm -rf /var/cache/apk/*

RUN addgroup -g 1001 astro && \
    adduser -u 1001 -G astro -s /bin/sh -D astro

WORKDIR /app

ENV NODE_ENV="production"
ENV ASTRO_TELEMETRY_DISABLED=1
ENV PORT=4321
ENV HOST="0.0.0.0"

USER astro

COPY --from=build --chown=astro:astro /app/dist ./dist
COPY --from=build --chown=astro:astro /app/node_modules ./node_modules
COPY --from=build --chown=astro:astro /app/package.json ./package.json

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD node -e "require('http').get('http://localhost:${PORT}', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"

EXPOSE 4321

ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "./dist/server/entry.mjs"]
