---
// DLPActivityLogs.astro
// Displays the DLP activity logs

import Card from '../../ui/Card.astro';
import CardHeader from '../../ui/CardHeader.astro';
import CardContent from '../../ui/CardContent.astro';
import CardTitle from '../../ui/CardTitle.astro';
import Badge from '../../ui/Badge.astro'
import { AuditEventType } from '../../../lib/audit'

interface DLPActivityLog {
  id: string
  timestamp: string
  userId: string
  action: string
  eventType:
    | typeof AuditEventType.DLP_ALLOWED
    | typeof AuditEventType.DLP_BLOCKED
    | typeof AuditEventType.SECURITY_ALERT
  triggeredRules: string[]
  destination?: string
  reason?: string
  allowed: boolean
}

interface Props {
  logs: DLPActivityLog[]
}

const { logs } = Astro.props

// Format date helper
const formatDate = (dateString: string) => {
  const date = new Date(dateString)
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: true,
  }).format(date)
}

// Define the allowed badge variants locally
type BadgeVariant = 'default' | 'secondary' | 'destructive' | 'outline'

// Get badge for event type
const getEventBadge = (
  eventType: string,
): { variant: BadgeVariant; text: string } => {
  switch (eventType) {
    case AuditEventType.DLP_ALLOWED:
      return { variant: 'secondary', text: 'Allowed (Redacted)' }
    case AuditEventType.DLP_BLOCKED:
      return { variant: 'destructive', text: 'Blocked' }
    case AuditEventType.SECURITY_ALERT:
      return { variant: 'destructive', text: 'Alert' }
    default:
      return { variant: 'outline', text: eventType }
  }
}
---

<div>
  <h2 class="text-xl font-semibold">DLP Activity Log</h2>

  {
    logs.length === 0 ? (
      <Card class="mt-4">
        <CardContent class="py-8">
          <p class="text-center text-muted-foreground">
            No DLP activity logs found.
          </p>
        </CardContent>
      </Card>
    ) : (
      <div class="space-y-4 mt-4">
        {logs.map((log: DLPActivityLog) => {
          const eventBadge = getEventBadge(log.eventType)
          return (
            <Card>
              <CardHeader class="pb-2">
                <div class="flex justify-between items-start">
                  <div>
                    <CardTitle class="text-base font-medium">
                      {log.action}
                    </CardTitle>
                    <div class="text-sm text-muted-foreground">
                      {formatDate(log.timestamp)} â€¢ User: {log.userId}
                    </div>
                  </div>
                  <Badge variant={eventBadge.variant}>{eventBadge.text}</Badge>
                </div>
              </CardHeader>
              <CardContent class="pt-0">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-2">
                  <div>
                    <p class="text-sm font-medium">Triggered Rules:</p>
                    <div class="flex flex-wrap gap-1 mt-1">
                      {log.triggeredRules.map((rule: string) => (
                        <span>
                          <Badge variant="outline">{rule}</Badge>
                        </span>
                      ))}
                    </div>
                  </div>
                  {log.destination && (
                    <div>
                      <p class="text-sm font-medium">Destination:</p>
                      <p class="text-sm">{log.destination}</p>
                    </div>
                  )}
                  {log.reason && (
                    <div class="md:col-span-2">
                      <p class="text-sm font-medium">Reason:</p>
                      <p class="text-sm">{log.reason}</p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          )
        })}
      </div>
    )
  }
</div>
