---
// ConsentDashboard.astro - Admin dashboard for consent management
import Card from '@/components/ui/Card.astro';
import CardHeader from '@/components/ui/CardHeader.astro';
import CardContent from '@/components/ui/CardContent.astro';
import CardTitle from '@/components/ui/CardTitle.astro';
import Badge from '@/components/ui/Badge.astro'
import { supabase } from '@/lib/supabase'
import { Icon } from 'astro-icon/components'
function formatDate(dateInput: any, options: any = {}) {
  if (!dateInput) return '-';
  const date = new Date(dateInput);
  const defaultOptions = { year: 'numeric', month: 'long', day: 'numeric' } as any;
  return date.toLocaleDateString('en-US', { ...defaultOptions, ...options });
}

// Define interfaces for data structures
interface ConsentType {
  id: string
  name: string
  scope: string
  is_active: boolean
}

// Base types for database tables
interface ConsentType {
  id: string
  name: string
  scope: string
  is_active: boolean
  created_at?: string
  updated_at?: string
}

// Fetch consent statistics
interface ActiveConsentResponse {
  id: string
  consent_version_id: string
  consent_versions: {
    consent_type_id: string
    consent_types: {
      name: string
    }
  }
}

interface WithdrawnConsentResponse {
  id: string
  withdrawal_date: string
  withdrawal_reason: string | null
  consent_version_id: string
  consent_versions: {
    consent_type_id: string
    consent_types: {
      name: string
    }
  }
}

interface ConsentVersionResponse {
  id: string
  version: string
  consent_type_id: string
  consent_types: {
    name: string
  }
  is_current: boolean
  effective_date: string
}

// Fetch data with proper typing
const { data: activeConsents, error: activeConsentsError } = await supabase
  .from('user_consents')
  .select('id, consent_version_id, consent_versions(consent_type_id, consent_types(name))')
  .eq('is_active', true) as { data: ActiveConsentResponse[] | null, error: any }

const { data: withdrawnConsents, error: withdrawnConsentsError } = await supabase
  .from('user_consents')
  .select('id, withdrawal_date, withdrawal_reason, consent_version_id, consent_versions(consent_type_id, consent_types(name))')
  .eq('is_active', false)
  .not('withdrawal_date', 'is', null) as { data: WithdrawnConsentResponse[] | null, error: any }

const { data: consentTypes, error: consentTypesError } = await supabase
  .from('consent_types')
  .select('id, name, scope, is_active') as { data: ConsentType[] | null, error: any }

const { data: consentVersions, error: consentVersionsError } = await supabase
  .from('consent_versions')
  .select('id, version, consent_type_id, consent_types(name), is_current, effective_date')
  .order('consent_type_id', { ascending: true })
  .order('effective_date', { ascending: false }) as { data: ConsentVersionResponse[] | null, error: any }

// Type for consent version with joined data from consent_types
interface ConsentVersionWithTypeName {
  id: string
  version: string
  consent_type_id: string
  is_current: boolean
  effective_date: string
  consent_types: {
    name: string
    id: string
  }
}

// Type for user consent with joined version and type data
interface UserConsentWithDetails {
  id: string
  consent_version_id: string
  is_active: boolean
  withdrawal_date: string | null
  withdrawal_reason: string | null
  consent_versions: {
    consent_type_id: string
    consent_types: {
      name: string
      id: string
    }
  }
}

// Type assertions for the data
const typedConsentVersions = consentVersions as unknown as ConsentVersionWithTypeName[] | null;
const typedActiveConsents  = activeConsents    as unknown as UserConsentWithDetails[]     | null;
const typedWithdrawnConsents = withdrawnConsents as unknown as UserConsentWithDetails[]  | null;

// Calculate overall stats
const totalActiveConsents    = (typedActiveConsents    || []).length;
const totalWithdrawnConsents = (typedWithdrawnConsents || []).length;
const totalConsentTypes      = consentTypes?.length       || 0;
const totalConsentVersions   = typedConsentVersions?.length || 0;

// Group consents by type
const consentsByType: Record<string, number> = {};
;(typedActiveConsents || []).forEach((consent) => {
  const typeName = consent.consent_versions?.consent_types?.name;
  if (typeName) {
    consentsByType[typeName] = (consentsByType[typeName] || 0) + 1;
  }
});

// Group withdrawals by type
const withdrawalsByType: Record<string, number> = {};
;(typedWithdrawnConsents || []).forEach((consent) => {
  const typeName = consent.consent_versions?.consent_types?.name;
  if (typeName) {
    withdrawalsByType[typeName] = (withdrawalsByType[typeName] || 0) + 1;
  }
});



// Handle errors
const hasErrors = Boolean(
  activeConsentsError ||
  withdrawnConsentsError ||
  consentTypesError ||
  consentVersionsError
)
---

<div class="space-y-6">
  <div class="flex justify-between items-center">
    <h1 class="text-2xl font-bold tracking-tight">Consent Management</h1>
    <div class="flex space-x-2">
      <a
        href="/admin/consent/types"
        class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
      >
        <Icon name="tabler:settings" class="mr-2 h-4 w-4" />
        Manage Types
      </a>
      <a
        href="/admin/consent/versions"
        class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
      >
        <Icon name="tabler:versions" class="mr-2 h-4 w-4" />
        Manage Versions
      </a>
    </div>
  </div>

  {
    hasErrors && (
      <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <Icon name="tabler:alert-triangle" class="h-5 w-5 text-red-500" />
          </div>
          <div class="ml-3">
            <p class="text-sm text-red-700">
              Error loading consent data. Please try refreshing the page.
            </p>
          </div>
        </div>
      </div>
    )
  }

  <!-- Dashboard Stats Cards -->
  <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
    <Card>
      <CardHeader
        class="flex flex-row items-center justify-between space-y-0 pb-2"
      >
        <CardTitle class="text-sm font-medium">Active Consents</CardTitle>
        <Icon name="tabler:check-circle" class="h-4 w-4 text-green-500" />
      </CardHeader>
      <CardContent>
        <div class="text-2xl font-bold">{totalActiveConsents}</div>
        <p class="text-xs text-muted-foreground">
          Active user consents across all types
        </p>
      </CardContent>
    </Card>

    <Card>
      <CardHeader
        class="flex flex-row items-center justify-between space-y-0 pb-2"
      >
        <CardTitle class="text-sm font-medium">Withdrawn Consents</CardTitle
        >
        <Icon name="tabler:circle-x" class="h-4 w-4 text-red-500" />
      </CardHeader>
      <CardContent>
        <div class="text-2xl font-bold">{totalWithdrawnConsents}</div>
        <p class="text-xs text-muted-foreground">Total withdrawals recorded</p>
      </CardContent>
    </Card>

    <Card>
      <CardHeader
        class="flex flex-row items-center justify-between space-y-0 pb-2"
      >
        <CardTitle class="text-sm font-medium">Consent Types</CardTitle>
        <Icon name="tabler:category" class="h-4 w-4 text-blue-500" />
      </CardHeader>
      <CardContent>
        <div class="text-2xl font-bold">{totalConsentTypes}</div>
        <p class="text-xs text-muted-foreground">Consent categories defined</p>
      </CardContent>
    </Card>

    <Card>
      <CardHeader
        class="flex flex-row items-center justify-between space-y-0 pb-2"
      >
        <CardTitle class="text-sm font-medium">Consent Versions</CardTitle>
        <Icon name="tabler:versions" class="h-4 w-4 text-purple-500" />
      </CardHeader>
      <CardContent>
        <div class="text-2xl font-bold">{totalConsentVersions}</div>
        <p class="text-xs text-muted-foreground">Total document versions</p>
      </CardContent>
    </Card>
  </div>

  <!-- Consent Types and Versions -->
  <div class="grid gap-4 md:grid-cols-2">
    <Card>
      <CardHeader>
        <CardTitle>Consent Types</CardTitle>
      </CardHeader>
      <CardContent>
        <div class="space-y-4">
          {
            consentTypes &&
              consentTypes.map((type: ConsentType) => (
                <div class="flex items-center justify-between border-b pb-2">
                  <div>
                    <p class="font-medium">{type.name}</p>
                    <p class="text-xs text-muted-foreground">
                      Scope: {type.scope}
                    </p>
                  </div>
                  <div class="flex items-center space-x-2">
                    <Badge variant={type.is_active ? 'default' : 'secondary'}>
                      {type.is_active ? 'Active' : 'Inactive'}
                    </Badge>
                    <span class="text-sm font-medium">
                      {consentsByType[type.name] || 0} active
                    </span>
                  </div>
                </div>
              ))
          }

          {
            (!consentTypes || consentTypes.length === 0) && (
              <p class="text-center text-muted-foreground py-4">
                No consent types defined
              </p>
            )
          }
        </div>
      </CardContent>
    </Card>

    <Card>
      <CardHeader>
        <CardTitle>Current Versions</CardTitle>
      </CardHeader>
      <CardContent>
        <div class="space-y-4">
          {
            typedConsentVersions &&
              typedConsentVersions
                .filter((v): v is ConsentVersionWithTypeName => 
                  v.is_current && !!v.consent_types?.name
                )
                .map((version) => (
                  <div class="flex items-center justify-between border-b pb-2">
                    <div>
                      <p class="font-medium">{version.consent_types?.name || 'Unknown'}</p>
                      <p class="text-xs text-muted-foreground">
                        Version {version.version} • Effective:{' '}
                        {formatDate(version.effective_date, { month: 'short' })}
                      </p>
                    </div>
                    <Badge variant="outline">Current</Badge>
                  </div>
                ))
          }

          {
            (!typedConsentVersions ||
              typedConsentVersions.filter(v => v.is_current).length === 0) && (
              <p class="text-center text-muted-foreground py-4">
                No current versions found
              </p>
            )
          }
      </CardContent>
    </Card>
  </div>

  <!-- Consent Analytics -->
  <Card>
    <CardHeader>
      <CardTitle>Consent Analytics</CardTitle>
    </CardHeader>
    <CardContent>
      {
        Object.keys(consentsByType).length > 0 ? (
          <div class="space-y-8">
            <div>
              <h3 class="text-sm font-medium mb-2">Active Consents by Type</h3>
              <div class="space-y-2">
                {Object.entries(consentsByType).map(([typeName, count]) => (
                  <div>
                    <div class="flex items-center justify-between">
                      <span class="text-sm">{typeName}</span>
                      <span class="text-sm font-medium">{count}</span>
                    </div>
                    <div class="h-2 w-full mt-1 bg-gray-100 rounded-full overflow-hidden">
                      <div
                        class="bg-green-500 h-full rounded-full"
                        style={`width: ${Math.min(100, Math.round((count / totalActiveConsents) * 100))}%`}
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {Object.keys(withdrawalsByType).length > 0 && (
              <div>
                <h3 class="text-sm font-medium mb-2">Withdrawals by Type</h3>
                <div class="space-y-2">
                  {Object.entries(withdrawalsByType).map(
                    ([typeName, count]) => (
                      <div>
                        <div class="flex items-center justify-between">
                          <span class="text-sm">{typeName}</span>
                          <span class="text-sm font-medium">{count}</span>
                        </div>
                        <div class="h-2 w-full mt-1 bg-gray-100 rounded-full overflow-hidden">
                          <div
                            class="bg-red-500 h-full rounded-full"
                            style={`width: ${Math.min(100, Math.round((count / totalWithdrawnConsents) * 100))}%`}
                          />
                        </div>
                      </div>
                    ),
                  )}
                </div>
              </div>
            )}
          </div>
        ) : (
          <div class="text-center py-8">
            <Icon
              name="tabler:chart-bar"
              class="h-12 w-12 text-gray-300 mx-auto mb-3"
            />
            <p class="text-muted-foreground">
              No consent data available for analysis
            </p>
          </div>
        )
      }
    </CardContent>
  </Card>

  <!-- Recent Withdrawals -->
  {typedWithdrawnConsents && typedWithdrawnConsents.length > 0 && (
    <Card>
      <CardHeader>
        <CardTitle>Recent Consent Withdrawals</CardTitle>
      </CardHeader>
      <CardContent>
        <div class="space-y-4">
          {typedWithdrawnConsents.slice(0, 5).map((consent) => (
            <div class="border-b pb-4">
              <div class="flex items-center justify-between mb-2">
                <div>
                  <Badge variant="outline">
                    {consent.consent_versions?.consent_types?.name || 'Unknown'}
                  </Badge>
                  <span class="text-xs text-muted-foreground ml-2">
                    Withdrawn on {formatDate(consent.withdrawal_date, { month: 'short' })}
                  </span>
                </div>
              </div>
              {consent.withdrawal_reason && (
                <p class="text-sm border-l-2 border-red-200 pl-3 text-gray-600 italic">
                  "{consent.withdrawal_reason}"
                </p>
              )}
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  )}
</div>