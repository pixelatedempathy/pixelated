---
// import { ViewTransitions } from 'astro:transitions'
import PageTransitions from '../transitions/PageTransitions.astro'
import { getUrl } from '~/utils/common'
import { SITE } from '~/config'

interface Props {
  title?: string | undefined
  description?: string | undefined
  ogImage?: string | boolean | undefined
  pubDate?: string | undefined
  lastModDate?: string | undefined
  transitionMode?:
    | 'default'
    | 'fade'
    | 'slide'
    | 'slide-up'
    | 'slide-down'
    | 'zoom'
    | undefined
}

const {
  title,
  description,
  pubDate,
  lastModDate,
  transitionMode = 'slide',
} = Astro.props

const pageTitle =
  title && title !== SITE.title ? `${title} - ${SITE.title}` : SITE.title

const pageDescription = description || SITE.description

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

// OG image generation disabled
const ogImageURL = getUrl('og-images', 'og-image.png')

// https://jsonld.com/blog-post/
const blogPostingData = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  'headline': pageTitle,
  'image': ogImageURL,
  'url': canonicalURL,
  'datePublished': pubDate,
  ...(lastModDate && { dateModified: lastModDate }),
  ...(description && { description: description }),
  'author': {
    '@type': 'Person',
    'name': SITE.author,
    'url': SITE.website,
  },
}

// https://jsonld.com/web-page/
const webPageData = {
  '@context': 'https://schema.org',
  '@type': 'webPage',
  'name': `${title || SITE.title}`,
  ...(description && { description: description }),
  'publisher': {
    '@type': 'ProfilePage',
    'name': `${SITE.author}'s Personal Website`,
  },
}
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="generator" content={Astro.generator} />

<!-- Primary Metadata -->
<title>{pageTitle}</title>
<meta name="title" content={pageTitle} />
<meta name="description" content={pageDescription} />
<meta name="author" content={SITE.author} />

<!-- Color -->
<meta name="theme-color" content="#4a9a95" />
<meta name="color-scheme" content="light dark" />

<!-- Fonts and Styles -->
<link rel="stylesheet" href={getUrl('/css/fonts.css')} />

<!-- Three.js is imported dynamically in components that need it -->

<!-- Open Graph / Facebook -->
<meta property="og:type" content={pubDate ? 'article' : 'website'} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={pageTitle} />
<meta property="og:description" content={pageDescription} />
<meta property="og:image" content={ogImageURL} />
<meta property="og:site_name" content={SITE.title} />
<meta property="og:locale" content={SITE.ogLocale} />
{
  pubDate && (
    <>
      <meta property="article:author" content={SITE.author} />
      <meta property="article:published_time" content={pubDate} />
      <meta property="article:modified_time" content={lastModDate} />
    </>
  )
}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={pageTitle} />
<meta property="twitter:description" content={pageDescription} />
<meta property="twitter:image" content={ogImageURL} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Icon -->
<link rel="icon" sizes="any" href={getUrl('/favicon.ico')} />
<link rel="icon" type="image/svg+xml" href={getUrl('/favicon.svg')} />
<link rel="apple-touch-icon" href={getUrl('/apple-touch-icon.png')} />

<!-- Manifest -->
<link rel="manifest" href={getUrl('/manifest.webmanifest')} />
<link
  rel="alternate"
  type="application/manifest+json"
  href={getUrl('/manifest.json')}
/>

<!-- Sitemap -->
<link rel="sitemap" href={getUrl('/sitemap-index.xml')} />

<!-- RSS -->
<link
  rel="alternate"
  type="application/rss+xml"
  title={getUrl('/rss.xml')}
  href="/rss.xml"
/>

<!-- Google JSON-LD Structured Data -->
{
  pubDate ? (
    <script
      is:inline
      type="application/ld+json"
      set:html={JSON.stringify(blogPostingData)}
    />
  ) : (
    <script
      is:inline
      type="application/ld+json"
      set:html={JSON.stringify(webPageData)}
    />
  )
}

<!-- Page Transitions Component -->
<PageTransitions mode={transitionMode} duration={350} />

<!-- Replace external polyfill.io with local polyfills -->
<script is:inline src="/js/feature-detector.js"></script>
