name: Security & Compliance Pipeline

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

on:
  workflow_call:
    inputs:
      risk_level:
        required: true
        type: string
      complexity_score:
        required: true
        type: string
    outputs:
      security_status:
        description: "Security validation status"
        value: ${{ jobs.security-summary.outputs.status }}
      compliance_status:
        description: "Compliance validation status"
        value: ${{ jobs.compliance-validation.outputs.status }}

env:
  NODE_VERSION: 22.16.0
  PYTHON_VERSION: 3.11
  PNPM_VERSION: 

jobs:
  # HIPAA Compliance Validation
  hipaa-compliance:
    name: HIPAA Compliance Validation
    runs-on: ubuntu-latest
    outputs:
      compliance_score: ${{ steps.hipaa-check.outputs.score }}
      violations: ${{ steps.hipaa-check.outputs.violations }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: HIPAA Compliance Check
        id: hipaa-check
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');
          
          console.log('🏥 Running HIPAA Compliance Validation...');
          
          let complianceScore = 100;
          let violations = [];
          
          // Check for encryption implementation
          const encryptionFiles = [
            'src/lib/fhe/',
            'src/lib/crypto/',
            'src/lib/security/'
          ];
          
          let encryptionImplemented = false;
          for (const dir of encryptionFiles) {
            if (fs.existsSync(dir)) {
              const files = fs.readdirSync(dir, { recursive: true });
              if (files.some(f => f.includes('encrypt') || f.includes('fhe'))) {
                encryptionImplemented = true;
                break;
              }
            }
          }
          
          if (!encryptionImplemented) {
            complianceScore -= 30;
            violations.push('Missing encryption implementation for PHI data');
          }
          
          // Check for audit logging
          const auditLogFiles = [
            'src/lib/audit/',
            'src/pages/api/audit/',
            'src/components/admin/audit'
          ];
          
          let auditLoggingImplemented = false;
          for (const dir of auditLogFiles) {
            if (fs.existsSync(dir)) {
              auditLoggingImplemented = true;
              break;
            }
          }
          
          if (!auditLoggingImplemented) {
            complianceScore -= 25;
            violations.push('Missing comprehensive audit logging system');
          }
          
          // Check for access controls
          const authFiles = [
            'src/lib/auth/',
            'src/pages/api/auth/',
            'src/middleware/'
          ];
          
          let accessControlsImplemented = false;
          for (const dir of authFiles) {
            if (fs.existsExists(dir)) {
              const files = fs.readdirSync(dir, { recursive: true });
              if (files.some(f => f.includes('auth') || f.includes('permission'))) {
                accessControlsImplemented = true;
                break;
              }
            }
          }
          
          if (!accessControlsImplemented) {
            complianceScore -= 20;
            violations.push('Insufficient access control mechanisms');
          }
          
          // Check for data retention policies
          const retentionFiles = [
            'src/lib/data-retention/',
            'src/pages/admin/data-retention.astro'
          ];
          
          let dataRetentionImplemented = false;
          for (const file of retentionFiles) {
            if (fs.existsSync(file)) {
              dataRetentionImplemented = true;
              break;
            }
          }
          
          if (!dataRetentionImplemented) {
            complianceScore -= 15;
            violations.push('Missing data retention policy implementation');
          }
          
          // Check for patient rights implementation
          const patientRightsFiles = [
            'src/pages/admin/patient-rights.astro',
            'src/lib/patient-rights/',
            'src/pages/api/patient-rights/'
          ];
          
          let patientRightsImplemented = false;
          for (const file of patientRightsFiles) {
            if (fs.existsSync(file)) {
              patientRightsImplemented = true;
              break;
            }
          }
          
          if (!patientRightsImplemented) {
            complianceScore -= 10;
            violations.push('Missing patient rights management system');
          }
          
          console.log('HIPAA Compliance Score:', complianceScore);
          console.log('Violations:', violations);
          
          execSync(\`echo 'score=\${complianceScore}' >> \$GITHUB_OUTPUT\`);
          execSync(\`echo 'violations=' + JSON.stringify(violations) + ' >> \$GITHUB_OUTPUT\`);
          "

      - name: Generate HIPAA Compliance Report
        run: |
          echo "## 🏥 HIPAA Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "**Compliance Score:** ${{ steps.hipaa-check.outputs.score }}/100" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.hipaa-check.outputs.score }}" -lt "85" ]]; then
            echo "⚠️ **HIPAA Compliance Issues:**" >> $GITHUB_STEP_SUMMARY
            echo '${{ steps.hipaa-check.outputs.violations }}' | jq -r '.[]' | while read violation; do
              echo "- $violation" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "✅ **Excellent HIPAA compliance!**" >> $GITHUB_STEP_SUMMARY
          fi

  # Mental Health Data Protection Validation
  mental-health-data-protection:
    name: Mental Health Data Protection
    runs-on: ubuntu-latest
    outputs:
      protection_score: ${{ steps.data-protection.outputs.score }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Mental Health Data Protection Check
        id: data-protection
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');
          
          console.log('🧠 Validating Mental Health Data Protection...');
          
          let protectionScore = 100;
          let issues = [];
          
          // Check for FHE implementation
          const fheDir = 'src/lib/fhe/';
          if (fs.existsSync(fheDir)) {
            const fheFiles = fs.readdirSync(fheDir, { recursive: true });
            if (!fheFiles.some(f => f.includes('encrypt') || f.includes('homomorphic'))) {
              protectionScore -= 40;
              issues.push('FHE implementation incomplete');
            }
          } else {
            protectionScore -= 50;
            issues.push('Missing Fully Homomorphic Encryption implementation');
          }
          
          // Check for bias detection security
          const biasDetectionDir = 'src/lib/ai/bias-detection/';
          if (fs.existsSync(biasDetectionDir)) {
            const biasFiles = fs.readdirSync(biasDetectionDir, { recursive: true });
            const hasSecurityMeasures = biasFiles.some(f => 
              f.includes('security') || 
              f.includes('sanitize') || 
              f.includes('validate')
            );
            
            if (!hasSecurityMeasures) {
              protectionScore -= 25;
              issues.push('Bias detection lacks security measures');
            }
          }
          
          // Check for crisis intervention security
          const crisisFiles = [
            'src/pages/api/crisis/',
            'src/lib/crisis/'
          ];
          
          let crisisSecurityImplemented = false;
          for (const dir of crisisFiles) {
            if (fs.existsSync(dir)) {
              const files = fs.readdirSync(dir, { recursive: true });
              if (files.some(f => f.includes('security') || f.includes('encrypt'))) {
                crisisSecurityImplemented = true;
                break;
              }
            }
          }
          
          if (!crisisSecurityImplemented) {
            protectionScore -= 30;
            issues.push('Crisis intervention data lacks proper security');
          }
          
          // Check for data anonymization
          const anonymizationFiles = [
            'src/lib/anonymization/',
            'src/lib/privacy/'
          ];
          
          let anonymizationImplemented = false;
          for (const dir of anonymizationFiles) {
            if (fs.existsSync(dir)) {
              anonymizationImplemented = true;
              break;
            }
          }
          
          if (!anonymizationImplemented) {
            protectionScore -= 20;
            issues.push('Missing data anonymization capabilities');
          }
          
          console.log('Mental Health Data Protection Score:', protectionScore);
          console.log('Issues:', issues);
          
          execSync(\`echo 'score=\${protectionScore}' >> \$GITHUB_OUTPUT\`);
          execSync(\`echo 'issues=' + JSON.stringify(issues) + ' >> \$GITHUB_OUTPUT\`);
          "

  # Advanced Security Scanning
  advanced-security-scan:
    name: Advanced Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3.29.1
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Setup Node.js for security analysis
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run npm audit
        continue-on-error: true
        run: |
          echo "## 🔍 NPM Security Audit" >> $GITHUB_STEP_SUMMARY
          pnpm audit --audit-level moderate || {
            echo "⚠️ Security vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
            pnpm audit --audit-level moderate >> $GITHUB_STEP_SUMMARY
          }

      - name: Run custom security checks
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          console.log('🔒 Running custom security checks...');
          
          // Check for hardcoded secrets
          const checkForSecrets = (dir) => {
            const files = fs.readdirSync(dir, { recursive: true, withFileTypes: true });
            const issues = [];
            
            for (const file of files) {
              if (file.isFile() && (file.name.endsWith('.js') || file.name.endsWith('.ts') || file.name.endsWith('.astro'))) {
                const filePath = path.join(dir, file.name);
                const content = fs.readFileSync(filePath, 'utf8');
                
                // Check for potential secrets
                const secretPatterns = [
                  /password\s*=\s*['\"][^'\"]+['\"]/i,
                  /api[_-]?key\s*=\s*['\"][^'\"]+['\"]/i,
                  /secret\s*=\s*['\"][^'\"]+['\"]/i,
                  /token\s*=\s*['\"][^'\"]+['\"]/i
                ];
                
                for (const pattern of secretPatterns) {
                  if (pattern.test(content)) {
                    issues.push(\`Potential hardcoded secret in \${filePath}\`);
                  }
                }
              }
            }
            
            return issues;
          };
          
          const srcIssues = checkForSecrets('src');
          
          if (srcIssues.length > 0) {
            console.log('Security issues found:');
            srcIssues.forEach(issue => console.log('- ' + issue));
          } else {
            console.log('No hardcoded secrets detected');
          }
          "

  # Compliance Validation Summary
  compliance-validation:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: [hipaa-compliance, mental-health-data-protection, advanced-security-scan]
    if: always()
    outputs:
      status: ${{ steps.compliance-summary.outputs.status }}
      
    steps:
      - name: Generate Compliance Summary
        id: compliance-summary
        run: |
          HIPAA_SCORE="${{ needs.hipaa-compliance.outputs.compliance_score }}"
          PROTECTION_SCORE="${{ needs.mental-health-data-protection.outputs.protection_score }}"
          SECURITY_STATUS="${{ needs.advanced-security-scan.result }}"
          
          echo "## 🛡️ Security & Compliance Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance Area | Score/Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------|--------------|" >> $GITHUB_STEP_SUMMARY
          echo "| HIPAA Compliance | ${HIPAA_SCORE}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Mental Health Data Protection | ${PROTECTION_SCORE}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scanning | ${SECURITY_STATUS} |" >> $GITHUB_STEP_SUMMARY
          
          # Calculate overall compliance status
          OVERALL_STATUS="success"
          
          if [[ "$HIPAA_SCORE" -lt "80" ]] || [[ "$PROTECTION_SCORE" -lt "80" ]] || [[ "$SECURITY_STATUS" == "failure" ]]; then
            OVERALL_STATUS="failure"
          elif [[ "$HIPAA_SCORE" -lt "90" ]] || [[ "$PROTECTION_SCORE" -lt "90" ]]; then
            OVERALL_STATUS="warning"
          fi
          
          echo "status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          
          if [[ "$OVERALL_STATUS" == "success" ]]; then
            echo "## ✅ All compliance checks passed!" >> $GITHUB_STEP_SUMMARY
          elif [[ "$OVERALL_STATUS" == "warning" ]]; then
            echo "## ⚠️ Compliance warnings detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Compliance failures detected" >> $GITHUB_STEP_SUMMARY
          fi

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [compliance-validation]
    if: always()
    outputs:
      status: ${{ steps.security-status.outputs.status }}
      
    steps:
      - name: Determine Security Status
        id: security-status
        run: |
          COMPLIANCE_STATUS="${{ needs.compliance-validation.outputs.status }}"
          
          # Map compliance status to security status
          if [[ "$COMPLIANCE_STATUS" == "success" ]]; then
            SECURITY_STATUS="success"
          elif [[ "$COMPLIANCE_STATUS" == "warning" ]]; then
            SECURITY_STATUS="warning"
          else
            SECURITY_STATUS="failure"
          fi
          
          echo "status=$SECURITY_STATUS" >> $GITHUB_OUTPUT
          
          echo "## 🔐 Final Security Status: $SECURITY_STATUS" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$SECURITY_STATUS" == "success" ]]; then
            echo "🎉 All security and compliance checks passed successfully!" >> $GITHUB_STEP_SUMMARY
          elif [[ "$SECURITY_STATUS" == "warning" ]]; then
            echo "⚠️ Security checks passed with warnings. Review recommended." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security checks failed. Immediate attention required." >> $GITHUB_STEP_SUMMARY
          fi
