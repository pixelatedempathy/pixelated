name: VPS Deployment

on:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      vps_host:
        description: 'VPS Host IP'
        required: true
        default: '209.208.79.191'
      vps_user:
        description: 'VPS Username'
        required: true
        default: 'vivi'
      vps_port:
        description: 'SSH Port'
        required: true
        default: '22'
      domain:
        description: 'Domain name (optional)'
        required: false
        default: 'pixelatedempathy.com'
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - docker-only

env:
  NODE_VERSION: 22.16.0
  PNPM_VERSION: 10.14.0
  DOCKER_IMAGE: pixelated-empathy
  CONTAINER_NAME: pixelated-app
  APP_PORT: 4321
  REGISTRY: ${{ github.server_url }}/${{ github.repository }}

jobs:
  # Encrypt .env file for secure transfer
  encrypt-env:
    name: Encrypt Environment File
    runs-on: ubuntu-latest
    outputs:
      encrypted-env: ${{ steps.encrypt.outputs.encrypted-env }}
      env-hash: ${{ steps.hash.outputs.env-hash }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate encryption key
        id: keygen
        run: |
          # Generate a random encryption key
          ENCRYPTION_KEY=$(openssl rand -hex 32)
          echo "encryption-key=$ENCRYPTION_KEY" >> $GITHUB_OUTPUT
          
          # Store key in GitHub secrets for later use
          echo "$ENCRYPTION_KEY" > /tmp/encryption_key.txt

      - name: Encrypt .env file
        id: encrypt
        run: |
          if [ -f .env ]; then
            # Encrypt .env file using AES-256-GCM
            openssl enc -aes-256-gcm -salt -in .env -out /tmp/env.enc -k "${{ steps.keygen.outputs.encryption-key }}"
            
            # Convert to base64 for GitHub Actions
            ENCRYPTED_B64=$(base64 -w 0 /tmp/env.enc)
            echo "encrypted-env=$ENCRYPTED_B64" >> $GITHUB_OUTPUT
            
            echo "‚úÖ .env file encrypted successfully"
          else
            echo "‚ö†Ô∏è No .env file found, creating empty encrypted file"
            echo "" | openssl enc -aes-256-gcm -salt -out /tmp/env.enc -k "${{ steps.keygen.outputs.encryption-key }}"
            ENCRYPTED_B64=$(base64 -w 0 /tmp/env.enc)
            echo "encrypted-env=$ENCRYPTED_B64" >> $GITHUB_OUTPUT
          fi

      - name: Generate .env hash
        id: hash
        run: |
          if [ -f .env ]; then
            ENV_HASH=$(sha256sum .env | cut -d' ' -f1)
            echo "env-hash=$ENV_HASH" >> $GITHUB_OUTPUT
          else
            echo "env-hash=no-env-file" >> $GITHUB_OUTPUT
          fi

      - name: Store encryption key
        run: |
          # Store the encryption key as a secret for the deployment job
          echo "${{ steps.keygen.outputs.encryption-key }}" > /tmp/deploy_key.txt
          echo "Encryption key stored for deployment"

  # Build and prepare deployment artifacts
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [encrypt-env]
    outputs:
      build-artifacts: ${{ steps.upload.outputs.build-artifacts }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run linting
        continue-on-error: true
        run: pnpm run lint

      - name: Run type checking
        continue-on-error: true
        run: |
          echo "Running type checking..."
          pnpm run type-check || {
            echo "‚ùå Type checking found issues but continuing deployment"
            exit 0
          }
          echo "‚úÖ Type checking passed"

      - name: Run tests
        continue-on-error: true
        run: |
          echo "Running tests..."
          pnpm test || {
            echo "‚ùå Tests failed but continuing deployment"
            exit 0
          }
          echo "‚úÖ Tests passed"

      - name: Build application
        run: |
          export NODE_ENV=production
          export NODE_OPTIONS="--max-old-space-size=8192"
          pnpm build

      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy built application
          cp -r dist/ deployment/
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/
          cp Dockerfile deployment/
          cp docker-compose.yml deployment/ 2>/dev/null || true
          
          # Copy configuration files
          cp astro.config.mjs deployment/ 2>/dev/null || true
          cp astro.config.ts deployment/ 2>/dev/null || true
          cp tsconfig.json deployment/ 2>/dev/null || true
          
          # Copy scripts and configs
          cp -r scripts/ deployment/ 2>/dev/null || true
          cp -r docker/ deployment/ 2>/dev/null || true
          cp -r infra/ deployment/ 2>/dev/null || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Forgejo Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Upload build artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment/
          retention-days: 1

  # Deploy to VPS
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build, encrypt-env]
    environment: vps-production
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: deployment/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H -p ${{ github.event.inputs.vps_port || '22' }} ${{ github.event.inputs.vps_host || '209.208.79.191' }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -p ${{ github.event.inputs.vps_port || '22' }} ${{ github.event.inputs.vps_user || 'vivi' }}@${{ github.event.inputs.vps_host || '209.208.79.191' }} "echo 'SSH connection successful'"

      - name: Copy deployment package to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          source: "deployment/"
          target: "/home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated/"
          strip_components: 1

      - name: Update system packages (full deployment)
        uses: appleboy/ssh-action@v1.0.3
        if: github.event.inputs.deploy_type == 'full'
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            echo "üîÑ Updating system packages..."
            sudo apt-get update -y
            sudo apt-get upgrade -y
            
            echo "üîí Installing security packages..."
            sudo apt-get install -y ufw fail2ban unattended-upgrades
            
            echo "üî• Configuring UFW firewall..."
            sudo ufw allow ${{ github.event.inputs.vps_port || '22' }}/tcp
            sudo ufw allow 80/tcp
            sudo ufw allow 443/tcp
            sudo ufw default deny incoming
            sudo ufw default allow outgoing
            sudo ufw --force enable
            
            echo "üõ°Ô∏è Enabling fail2ban..."
            sudo systemctl enable fail2ban
            sudo systemctl start fail2ban

      - name: Install Docker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "üê≥ Installing Docker..."
              curl -fsSL https://get.docker.com | sudo sh
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ${{ github.event.inputs.vps_user || 'vivi' }} 2>/dev/null || true
            else
              echo "‚úÖ Docker already installed"
            fi

      - name: Install Node.js and pnpm
        uses: appleboy/ssh-action@v1.0.3
        if: github.event.inputs.deploy_type != 'docker-only'
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            cd /home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated
            
            # Install Node.js 22 if needed
            NODE_VERSION=$(command -v node && node --version || echo "none")
            if [[ "$NODE_VERSION" != "v22"* ]]; then
              echo "üì¶ Installing Node.js 22..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              nvm install 22
              nvm use 22
              nvm alias default 22
            else
              echo "‚úÖ Node.js already installed"
            fi
            
            # Install pnpm if needed
            if ! command -v pnpm &> /dev/null; then
              echo "üì¶ Installing pnpm..."
              npm install -g pnpm
            else
              echo "‚úÖ pnpm already installed"
            fi

      - name: Build application on VPS
        uses: appleboy/ssh-action@v1.0.3
        if: github.event.inputs.deploy_type != 'docker-only'
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            cd /home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated
            
            echo "üì¶ Installing dependencies..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 22
            pnpm install --no-frozen-lockfile
            
            echo "üî® Building application..."
            export NODE_ENV=production
            export NODE_OPTIONS="--max-old-space-size=8192"
            pnpm build

      - name: Login to Forgejo Container Registry on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            echo "üîê Logging in to Forgejo Container Registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Pull and deploy Docker image
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            cd /home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated
            
            echo "üõë Stopping existing container..."
            docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            
            echo "üì• Pulling Docker image from registry..."
            docker pull ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
            
            echo "üßπ Cleaning up old images..."
            docker image prune -f

      - name: Deploy container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            cd /home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated
            
            # Set up environment variables
            PUBLIC_URL="http://${{ github.event.inputs.vps_host || '209.208.79.191' }}"
            CORS_ORIGINS="http://${{ github.event.inputs.vps_host || '209.208.79.191' }},https://${{ github.event.inputs.vps_host || '209.208.79.191' }}"
            
            if [[ -n "${{ github.event.inputs.domain }}" ]]; then
              PUBLIC_URL="https://${{ github.event.inputs.domain }}"
              CORS_ORIGINS="$CORS_ORIGINS,http://${{ github.event.inputs.domain }},https://${{ github.event.inputs.domain }}"
            fi
            
                         echo "üöÄ Starting new container..."
             docker run -d \
               --name ${{ env.CONTAINER_NAME }} \
               --restart unless-stopped \
               -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
               -e NODE_ENV=production \
               -e PORT=${{ env.APP_PORT }} \
               -e WEB_PORT=${{ env.APP_PORT }} \
               -e LOG_LEVEL=info \
               -e ENABLE_RATE_LIMITING=true \
               -e RATE_LIMIT_WINDOW=60 \
               -e RATE_LIMIT_MAX_REQUESTS=100 \
               -e ENABLE_HIPAA_COMPLIANCE=true \
               -e ENABLE_AUDIT_LOGGING=true \
               -e ENABLE_DATA_MASKING=true \
               -e ASTRO_TELEMETRY_DISABLED=1 \
               -e PUBLIC_URL="$PUBLIC_URL" \
               -e CORS_ORIGINS="$CORS_ORIGINS" \
               ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
            
            echo "‚è≥ Waiting for container to start..."
            sleep 15
            
            if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
              echo "‚úÖ Container is running"
              docker logs --tail 10 ${{ env.CONTAINER_NAME }}
            else
              echo "‚ùå Container failed to start"
              docker logs ${{ env.CONTAINER_NAME }}
              exit 1
            fi

      - name: Install and configure Caddy
        uses: appleboy/ssh-action@v1.0.3
        if: github.event.inputs.domain != ''
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            if ! command -v caddy &> /dev/null; then
              echo "üåê Installing Caddy..."
              sudo apt-get install -y debian-keyring debian-archive-keyring apt-transport-https
              curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
              curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
              sudo apt-get update
              sudo apt-get install -y caddy
              sudo systemctl enable caddy
            fi
            
            echo "‚öôÔ∏è Configuring Caddy for domain: ${{ github.event.inputs.domain }}"
            sudo tee /etc/caddy/Caddyfile > /dev/null << 'CADDY_EOF'
            ${{ github.event.inputs.domain }} {
                reverse_proxy localhost:${{ env.APP_PORT }}
                
                # Enable compression
                encode gzip
                
                # Security headers
                header {
                    # Enable HSTS
                    Strict-Transport-Security max-age=31536000;
                    # Prevent MIME sniffing
                    X-Content-Type-Options nosniff
                    # Prevent clickjacking
                    X-Frame-Options DENY
                    # XSS protection
                    X-XSS-Protection "1; mode=block"
                    # Referrer policy
                    Referrer-Policy strict-origin-when-cross-origin
                }
                
                # Health check endpoint
                handle /api/health* {
                    reverse_proxy localhost:${{ env.APP_PORT }}
                }
                
                # Static assets with long cache
                handle /assets/* {
                    reverse_proxy localhost:${{ env.APP_PORT }}
                    header Cache-Control "public, max-age=31536000, immutable"
                }
                
                # All other requests
                handle {
                    reverse_proxy localhost:${{ env.APP_PORT }}
                }
            }
            
            goat.pixelatedempathy.tech {
                reverse_proxy localhost:11434
            }
            CADDY_EOF
            
            echo "üîç Testing Caddy configuration..."
            sudo caddy validate --config /etc/caddy/Caddyfile
            
            echo "üîÑ Starting Caddy..."
            sudo systemctl restart caddy

      - name: Deploy environment file
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            cd /home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated
            
            # Create .env file
            cat > .env << 'EOF'
            # Environment variables for Pixelated Empathy
            NODE_ENV=production
            PORT=${{ env.APP_PORT }}
            WEB_PORT=${{ env.APP_PORT }}
            LOG_LEVEL=info
            ENABLE_RATE_LIMITING=true
            RATE_LIMIT_WINDOW=60
            RATE_LIMIT_MAX_REQUESTS=100
            ENABLE_HIPAA_COMPLIANCE=true
            ENABLE_AUDIT_LOGGING=true
            ENABLE_DATA_MASKING=true
            ASTRO_TELEMETRY_DISABLED=1
            EOF
            
            # Restart container to pick up new environment
            docker restart ${{ env.CONTAINER_NAME }}
            
            echo "‚úÖ Environment file deployed and container restarted"

      - name: Health check
        run: |
          VPS_HOST="${{ github.event.inputs.vps_host || '209.208.79.191' }}"
          VPS_PORT="${{ github.event.inputs.vps_port || '22' }}"
          VPS_USER="${{ github.event.inputs.vps_user || 'vivi' }}"
          DOMAIN="${{ github.event.inputs.domain || 'pixelatedempathy.com' }}"
          APP_PORT="${{ env.APP_PORT }}"
          
          echo "üîç Performing health check..."
          
          # Wait for application to be ready
          sleep 30
          
          # Test direct access
          if curl -f -s "http://$VPS_HOST:$APP_PORT/api/health" > /dev/null; then
            echo "‚úÖ Direct access health check passed"
          else
            echo "‚ùå Direct access health check failed"
            exit 1
          fi
          
          # Test domain access if configured
          if [[ -n "$DOMAIN" ]]; then
            if curl -f -s "https://$DOMAIN/api/health" > /dev/null; then
              echo "‚úÖ Domain access health check passed"
            else
              echo "‚ùå Domain access health check failed"
              exit 1
            fi
          fi
          
          echo "üéâ All health checks passed!"

  # Post-deployment verification
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: Check application status
        run: |
          VPS_HOST="${{ github.event.inputs.vps_host || '209.208.79.191' }}"
          VPS_PORT="${{ github.event.inputs.vps_port || '22' }}"
          VPS_USER="${{ github.event.inputs.vps_user || 'vivi' }}"
          DOMAIN="${{ github.event.inputs.domain || 'pixelatedempathy.com' }}"
          APP_PORT="${{ env.APP_PORT }}"
          
          echo "üîç Final deployment verification..."
          
          # Check container status
          ssh -p $VPS_PORT $VPS_USER@$VPS_HOST "docker ps | grep ${{ env.CONTAINER_NAME }}"
          
          # Check application logs
          ssh -p $VPS_PORT $VPS_USER@$VPS_HOST "docker logs --tail 20 ${{ env.CONTAINER_NAME }}"
          
          # Check Caddy status if domain is configured
          if [[ -n "$DOMAIN" ]]; then
            ssh -p $VPS_PORT $VPS_USER@$VPS_HOST "sudo systemctl status caddy"
          fi
          
          echo "‚úÖ Deployment verification completed"
          echo ""
          echo "üåê Application URLs:"
          echo "  Direct: http://$VPS_HOST:$APP_PORT"
          if [[ -n "$DOMAIN" ]]; then
            echo "  Domain: https://$DOMAIN"
          fi
          echo ""
          echo "üîß SSH Access:"
          echo "  ssh -p $VPS_PORT $VPS_USER@$VPS_HOST"
