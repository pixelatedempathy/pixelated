name: Infrastructure CI/CD Pipeline

permissions:
  contents: read
  actions: write
  checks: write
  pull-requests: write
  id-token: write

on:
  workflow_call:
    inputs:
      deployment_strategy:
        required: true
        type: string
    outputs:
      infrastructure_status:
        description: "Infrastructure validation status"
        value: ${{ jobs.infrastructure-summary.outputs.status }}

env:
  NODE_VERSION: 22.16.0
  PNPM_VERSION: 
  TERRAFORM_VERSION: 1.6.0
  DOCKER_BUILDKIT: 1

jobs:
  # Infrastructure Validation
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    outputs:
      validation_status: ${{ steps.validate.outputs.status }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Validate Infrastructure Configuration
        id: validate
        run: |
          echo "🏗️ Validating infrastructure configuration..."
          
          # Check for infrastructure files
          INFRA_FILES_FOUND=false
          
          if [[ -d "infra/" ]]; then
            echo "Found infrastructure directory"
            INFRA_FILES_FOUND=true
            
            # Validate Terraform files if they exist
            if find infra/ -name "*.tf" -type f | grep -q .; then
              echo "Validating Terraform configuration..."
              cd infra/
              terraform init -backend=false
              terraform validate
              cd ..
            fi
          fi
          
          # Check Docker configuration
          if [[ -f "Dockerfile" ]] || [[ -f "Dockerfile.azure" ]]; then
            echo "Found Docker configuration"
            INFRA_FILES_FOUND=true
            
            # Validate Dockerfile
            if [[ -f "Dockerfile" ]]; then
              echo "Validating Dockerfile..."
              docker build --dry-run -f Dockerfile . || echo "Dockerfile validation failed"
            fi
            
            if [[ -f "Dockerfile.azure" ]]; then
              echo "Validating Azure Dockerfile..."
              docker build --dry-run -f Dockerfile.azure . || echo "Azure Dockerfile validation failed"
            fi
          fi
          
          # Check Azure Pipelines
          if [[ -f "azure-pipelines.yml" ]]; then
            echo "Found Azure Pipelines configuration"
            INFRA_FILES_FOUND=true
          fi
          
          # Check GitHub Actions workflows
          if [[ -d ".github/workflows/" ]]; then
            echo "Found GitHub Actions workflows"
            INFRA_FILES_FOUND=true
            
            # Validate workflow syntax
            for workflow in .github/workflows/*.yml .github/workflows/*.yaml; do
              if [[ -f "$workflow" ]]; then
                echo "Validating $workflow"
                # Basic YAML syntax check
                python3 -c "import yaml; yaml.safe_load(open('$workflow'))" || echo "YAML syntax error in $workflow"
              fi
            done
          fi
          
          if [[ "$INFRA_FILES_FOUND" == "true" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ Infrastructure validation completed successfully"
          else
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "⚠️ No infrastructure files found to validate"
          fi

      - name: Generate Infrastructure Report
        run: |
          echo "## 🏗️ Infrastructure Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.validate.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ -d "infra/" ]]; then
            echo "- ✅ Infrastructure directory found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -f "Dockerfile" ]]; then
            echo "- ✅ Dockerfile found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -f "Dockerfile.azure" ]]; then
            echo "- ✅ Azure Dockerfile found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -f "azure-pipelines.yml" ]]; then
            echo "- ✅ Azure Pipelines configuration found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -d ".github/workflows/" ]]; then
            WORKFLOW_COUNT=$(find .github/workflows/ -name "*.yml" -o -name "*.yaml" | wc -l)
            echo "- ✅ GitHub Actions workflows found ($WORKFLOW_COUNT files)" >> $GITHUB_STEP_SUMMARY
          fi

  # Container Security Scanning
  container-security:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    needs: infrastructure-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        run: |
          if [[ -f "Dockerfile" ]]; then
            echo "Building Docker image from Dockerfile..."
            docker build -t pixelated-empathy:scan .
          elif [[ -f "Dockerfile.azure" ]]; then
            echo "Building Docker image from Dockerfile.azure..."
            docker build -t pixelated-empathy:scan -f Dockerfile.azure .
          else
            echo "No Dockerfile found, skipping container security scan"
            exit 0
          fi

      - name: Run Trivy container scan
        if: success()
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: pixelated-empathy:scan
          format: sarif
          output: container-trivy-results.sarif

      - name: Upload container scan results
        if: success()
        uses: github/codeql-action/upload-sarif@v3.29.1
        with:
          sarif_file: container-trivy-results.sarif

      - name: Container Security Summary
        if: success()
        run: |
          echo "## 🐳 Container Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "✅ Container security scan completed" >> $GITHUB_STEP_SUMMARY
          echo "Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY

  # Infrastructure Testing
  infrastructure-testing:
    name: Infrastructure Testing
    runs-on: ubuntu-latest
    needs: infrastructure-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Test Docker Build
        run: |
          echo "🐳 Testing Docker build process..."
          
          if [[ -f "Dockerfile" ]]; then
            echo "Testing standard Dockerfile build..."
            docker build --no-cache -t pixelated-empathy:test .
            
            # Test container startup
            echo "Testing container startup..."
            docker run -d --name test-container -p 4321:4321 pixelated-empathy:test
            sleep 30
            
            # Check if container is running
            if docker ps | grep -q test-container; then
              echo "✅ Container started successfully"
              
              # Test health endpoint if available
              if curl -f http://localhost:4321/api/health 2>/dev/null; then
                echo "✅ Health endpoint responding"
              else
                echo "⚠️ Health endpoint not responding (may be expected)"
              fi
            else
              echo "❌ Container failed to start"
              docker logs test-container
              exit 1
            fi
            
            # Cleanup
            docker stop test-container
            docker rm test-container
          else
            echo "No Dockerfile found, skipping Docker build test"
          fi

      - name: Test Application Build
        run: |
          echo "🔨 Testing application build process..."
          
          # Test production build
          pnpm build
          
          # Check if build artifacts exist
          if [[ -d "dist/" ]]; then
            echo "✅ Build artifacts created successfully"
            
            # Check build size
            BUILD_SIZE=$(du -sh dist/ | cut -f1)
            echo "Build size: $BUILD_SIZE"
            
            # Basic build validation
            if [[ -f "dist/index.html" ]]; then
              echo "✅ Main HTML file generated"
            else
              echo "⚠️ Main HTML file not found"
            fi
            
            # Check for critical assets
            if find dist/ -name "*.js" | grep -q .; then
              echo "✅ JavaScript assets found"
            else
              echo "⚠️ No JavaScript assets found"
            fi
            
            if find dist/ -name "*.css" | grep -q .; then
              echo "✅ CSS assets found"
            else
              echo "⚠️ No CSS assets found"
            fi
          else
            echo "❌ Build failed - no dist directory created"
            exit 1
          fi

      - name: Infrastructure Testing Summary
        run: |
          echo "## 🧪 Infrastructure Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker build test completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Application build test completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ All infrastructure tests passed" >> $GITHUB_STEP_SUMMARY

  # Deployment Strategy Validation
  deployment-strategy-validation:
    name: Deployment Strategy Validation
    runs-on: ubuntu-latest
    needs: [infrastructure-validation, container-security, infrastructure-testing]
    
    steps:
      - name: Validate Deployment Strategy
        run: |
          STRATEGY="${{ inputs.deployment_strategy }}"
          
          echo "## 🚀 Deployment Strategy Validation" >> $GITHUB_STEP_SUMMARY
          echo "**Selected Strategy:** $STRATEGY" >> $GITHUB_STEP_SUMMARY
          
          case $STRATEGY in
            "canary")
              echo "✅ Canary deployment strategy selected" >> $GITHUB_STEP_SUMMARY
              echo "- Gradual traffic shifting" >> $GITHUB_STEP_SUMMARY
              echo "- Automated rollback on failure" >> $GITHUB_STEP_SUMMARY
              echo "- Real-time monitoring" >> $GITHUB_STEP_SUMMARY
              ;;
            "blue-green")
              echo "✅ Blue-Green deployment strategy selected" >> $GITHUB_STEP_SUMMARY
              echo "- Zero-downtime deployment" >> $GITHUB_STEP_SUMMARY
              echo "- Instant rollback capability" >> $GITHUB_STEP_SUMMARY
              echo "- Full environment validation" >> $GITHUB_STEP_SUMMARY
              ;;
            "standard")
              echo "✅ Standard deployment strategy selected" >> $GITHUB_STEP_SUMMARY
              echo "- Traditional deployment approach" >> $GITHUB_STEP_SUMMARY
              echo "- Suitable for low-risk changes" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "⚠️ Unknown deployment strategy: $STRATEGY" >> $GITHUB_STEP_SUMMARY
              echo "Defaulting to standard deployment" >> $GITHUB_STEP_SUMMARY
              ;;
          esac

  # Infrastructure Summary
  infrastructure-summary:
    name: Infrastructure Summary
    runs-on: ubuntu-latest
    needs: [infrastructure-validation, container-security, infrastructure-testing, deployment-strategy-validation]
    if: always()
    outputs:
      status: ${{ steps.summary.outputs.status }}
      
    steps:
      - name: Generate Infrastructure Summary
        id: summary
        run: |
          VALIDATION_STATUS="${{ needs.infrastructure-validation.outputs.validation_status }}"
          SECURITY_STATUS="${{ needs.container-security.result }}"
          TESTING_STATUS="${{ needs.infrastructure-testing.result }}"
          DEPLOYMENT_STATUS="${{ needs.deployment-strategy-validation.result }}"
          
          echo "## 🏗️ Infrastructure Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Validation | $VALIDATION_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | $SECURITY_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Testing | $TESTING_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Strategy | $DEPLOYMENT_STATUS |" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          OVERALL_STATUS="success"
          
          if [[ "$SECURITY_STATUS" == "failure" ]] || [[ "$TESTING_STATUS" == "failure" ]] || [[ "$DEPLOYMENT_STATUS" == "failure" ]]; then
            OVERALL_STATUS="failure"
          elif [[ "$VALIDATION_STATUS" == "warning" ]] || [[ "$SECURITY_STATUS" == "cancelled" ]] || [[ "$TESTING_STATUS" == "cancelled" ]]; then
            OVERALL_STATUS="warning"
          fi
          
          echo "status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          
          if [[ "$OVERALL_STATUS" == "success" ]]; then
            echo "## ✅ Infrastructure pipeline completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "Ready for deployment with strategy: ${{ inputs.deployment_strategy }}" >> $GITHUB_STEP_SUMMARY
          elif [[ "$OVERALL_STATUS" == "warning" ]]; then
            echo "## ⚠️ Infrastructure pipeline completed with warnings" >> $GITHUB_STEP_SUMMARY
            echo "Review recommended before deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Infrastructure pipeline failed" >> $GITHUB_STEP_SUMMARY
            echo "Deployment blocked until issues are resolved" >> $GITHUB_STEP_SUMMARY
          fi
