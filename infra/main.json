{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "6097672299355249911"
    }
  },
  "parameters": {
    "azureLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "environment": {
      "type": "string",
      "defaultValue": "production"
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "production"
    },
    "containerRegistryName": {
      "type": "string",
      "defaultValue": "pixelatedbox"
    },
    "appServiceName": {
      "type": "string",
      "defaultValue": "pixelated"
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[format('{0}-kv', parameters('appServiceName'))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-07-01",
      "name": "[parameters('containerRegistryName')]",
      "location": "[parameters('azureLocation')]",
      "sku": {
        "name": "Premium"
      },
      "properties": {
        "adminUserEnabled": false,
        "publicNetworkAccess": "Disabled",
        "policies": {
          "quarantinePolicy": {
            "status": "enabled"
          },
          "retentionPolicy": {
            "status": "enabled",
            "days": 30
          },
          "trustPolicy": {
            "status": "enabled",
            "type": "Notary"
          }
        }
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-01-01",
      "name": "[format('{0}-plan', parameters('appServiceName'))]",
      "location": "[parameters('azureLocation')]",
      "sku": {
        "name": "P1v3",
        "tier": "PremiumV3",
        "size": "P1v3",
        "capacity": 2
      },
      "kind": "linux",
      "properties": {
        "reserved": true,
        "zoneRedundant": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('azureLocation')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "enableRbacAuthorization": true,
        "publicNetworkAccess": "Disabled",
        "enablePurgeProtection": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Deny",
          "ipRules": [],
          "virtualNetworkRules": []
        }
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-01-01",
      "name": "[parameters('appServiceName')]",
      "location": "[parameters('azureLocation')]",
      "kind": "app,linux,container",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-plan', parameters('appServiceName')))]",
        "httpsOnly": true,
        "clientCertEnabled": true,
        "publicNetworkAccess": "Disabled",
        "siteConfig": {
          "minTlsVersion": "1.2",
          "http20Enabled": true,
          "appSettings": [
            {
              "name": "NODE_ENV",
              "value": "[parameters('environment')]"
            },
            {
              "name": "PORT",
              "value": "3000"
            },
            {
              "name": "WEBSITES_PORT",
              "value": "3000"
            },
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[format('https://{0}.azurecr.io', parameters('containerRegistryName'))]"
            }
          ],
          "linuxFxVersion": "[format('DOCKER|{0}.azurecr.io/pixelated:latest', parameters('containerRegistryName'))]",
          "alwaysOn": true,
          "healthCheckPath": "/api/health",
          "ftpsState": "Disabled",
          "acrUseManagedIdentityCreds": true,
          "minimumElasticInstanceCount": 2
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('{0}-plan', parameters('appServiceName')))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), resourceId('Microsoft.Web/sites', parameters('appServiceName')), '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceName')), '2023-01-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]",
        "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
      ]
    }
  ],
  "outputs": {
    "containerRegistryEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-07-01').loginServer]"
    },
    "appServiceDefaultHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceName')), '2023-01-01').defaultHostName]"
    },
    "appServiceName": {
      "type": "string",
      "value": "[parameters('appServiceName')]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[parameters('containerRegistryName')]"
    },
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-07-01').loginServer]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[parameters('keyVaultName')]"
    }
  }
}
