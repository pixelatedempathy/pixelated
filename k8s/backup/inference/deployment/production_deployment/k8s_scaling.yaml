# Kubernetes Scaling Configuration for Pixelated Empathy AI

# Horizontal Pod Autoscaler (HPA)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pixelated-empathy-ai-hpa
  namespace: pixelated-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pixelated-empathy-ai
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min

---

# Vertical Pod Autoscaler (VPA)
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: pixelated-empathy-ai-vpa
  namespace: pixelated-prod
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pixelated-empathy-ai
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: pixelated-empathy-ai
      minAllowed:
        cpu: 100m
        memory: 128Mi
      maxAllowed:
        cpu: 4000m
        memory: 8Gi
      controlledResources: ["cpu", "memory"]

---

# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pixelated-empathy-ai-pdb
  namespace: pixelated-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: pixelated-empathy-ai

---

# Custom Resource Definition for Advanced Scaling
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: advancedscalers.scaling.pixelated.ai
spec:
  group: scaling.pixelated.ai
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              targetRef:
                type: object
                properties:
                  apiVersion:
                    type: string
                  kind:
                    type: string
                  name:
                    type: string
              minReplicas:
                type: integer
                minimum: 1
              maxReplicas:
                type: integer
                minimum: 1
              scalingRules:
                type: array
                items:
                  type: object
                  properties:
                    metricName:
                      type: string
                    threshold:
                      type: number
                    scaleDirection:
                      type: string
                      enum: ["up", "down"]
                    adjustment:
                      type: integer
          status:
            type: object
            properties:
              currentReplicas:
                type: integer
              desiredReplicas:
                type: integer
              lastScaleTime:
                type: string
                format: date-time
  scope: Namespaced
  names:
    plural: advancedscalers
    singular: advancedscaler
    kind: AdvancedScaler

---

# Advanced Scaler Instance
apiVersion: scaling.pixelated.ai/v1
kind: AdvancedScaler
metadata:
  name: pixelated-empathy-ai-advanced
  namespace: pixelated-prod
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pixelated-empathy-ai
  minReplicas: 3
  maxReplicas: 50
  scalingRules:
  - metricName: "ai_inference_queue_depth"
    threshold: 100
    scaleDirection: "up"
    adjustment: 3
  - metricName: "ai_inference_queue_depth"
    threshold: 10
    scaleDirection: "down"
    adjustment: 1
  - metricName: "response_time_p95"
    threshold: 2000  # 2 seconds
    scaleDirection: "up"
    adjustment: 2
  - metricName: "error_rate"
    threshold: 0.05  # 5%
    scaleDirection: "up"
    adjustment: 2

---

# ServiceMonitor for Prometheus metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: pixelated-empathy-ai-scaling-metrics
  namespace: pixelated-prod
spec:
  selector:
    matchLabels:
      app: pixelated-empathy-ai
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---

# PrometheusRule for scaling alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: pixelated-empathy-ai-scaling-rules
  namespace: pixelated-prod
spec:
  groups:
  - name: scaling.rules
    rules:
    - alert: HighCPUUsage
      expr: avg(rate(container_cpu_usage_seconds_total{pod=~"pixelated-empathy-ai-.*"}[5m])) > 0.8
      for: 2m
      labels:
        severity: warning
        component: scaling
      annotations:
        summary: "High CPU usage detected"
        description: "CPU usage is above 80% for more than 2 minutes"
    
    - alert: HighMemoryUsage
      expr: avg(container_memory_usage_bytes{pod=~"pixelated-empathy-ai-.*"} / container_spec_memory_limit_bytes{pod=~"pixelated-empathy-ai-.*"}) > 0.9
      for: 2m
      labels:
        severity: warning
        component: scaling
      annotations:
        summary: "High memory usage detected"
        description: "Memory usage is above 90% for more than 2 minutes"
    
    - alert: HighRequestRate
      expr: sum(rate(http_requests_total{job="pixelated-empathy-ai"}[5m])) > 1000
      for: 1m
      labels:
        severity: info
        component: scaling
      annotations:
        summary: "High request rate detected"
        description: "Request rate is above 1000 req/s"
    
    - alert: ScalingEventFrequent
      expr: increase(kube_hpa_status_current_replicas{hpa="pixelated-empathy-ai-hpa"}[10m]) > 5
      for: 0m
      labels:
        severity: warning
        component: scaling
      annotations:
        summary: "Frequent scaling events detected"
        description: "HPA has scaled more than 5 times in 10 minutes"

---

# ConfigMap for scaling configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: scaling-config
  namespace: pixelated-prod
data:
  scaling.yaml: |
    scaling:
      horizontal:
        enabled: true
        min_replicas: 3
        max_replicas: 20
        target_cpu_utilization: 70
        target_memory_utilization: 80
        scale_up_cooldown: 60
        scale_down_cooldown: 300
        
      vertical:
        enabled: true
        update_mode: "Auto"
        min_cpu: "100m"
        max_cpu: "4000m"
        min_memory: "128Mi"
        max_memory: "8Gi"
        
      load_balancing:
        algorithm: "least_connections"
        health_check_interval: 30
        health_check_timeout: 5
        session_affinity: false
        
      metrics:
        collection_interval: 30
        retention_period: "7d"
        custom_metrics:
          - name: "ai_inference_latency"
            query: "histogram_quantile(0.95, rate(ai_inference_duration_seconds_bucket[5m]))"
            threshold: 2.0
          - name: "queue_depth"
            query: "ai_inference_queue_depth"
            threshold: 100
          - name: "error_rate"
            query: "rate(http_requests_total{status=~'5..'}[5m]) / rate(http_requests_total[5m])"
            threshold: 0.05

---

# KEDA ScaledObject for advanced scaling
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: pixelated-empathy-ai-keda
  namespace: pixelated-prod
spec:
  scaleTargetRef:
    name: pixelated-empathy-ai
  minReplicaCount: 3
  maxReplicaCount: 50
  pollingInterval: 30
  cooldownPeriod: 300
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://prometheus:9090
      metricName: http_requests_per_second
      threshold: '100'
      query: sum(rate(http_requests_total{job="pixelated-empathy-ai"}[1m]))
  - type: prometheus
    metadata:
      serverAddress: http://prometheus:9090
      metricName: ai_inference_queue_depth
      threshold: '50'
      query: ai_inference_queue_depth
  - type: prometheus
    metadata:
      serverAddress: http://prometheus:9090
      metricName: response_time_p95
      threshold: '1.5'
      query: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))

---

# Network Policy for scaled pods
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pixelated-empathy-ai-scaling-netpol
  namespace: pixelated-prod
spec:
  podSelector:
    matchLabels:
      app: pixelated-empathy-ai
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: load-balancer
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: redis
    ports:
    - protocol: TCP
      port: 6379
