name: Deployment Rollback

on:
  push:
    branches:
      - master
      - staging

env:
  NODE_VERSION: 24.8.0
  PNPM_VERSION: 10.20.0
  NODE_ENV: production

jobs:
  rollback-staging:
    name: Rollback Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    permissions:
      contents: write
      deployments: write
      actions: read
      id-token: write
    concurrency:
      group: staging_environment
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4.2.3
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Determine rollback tag
        id: get-tag
        run: |
          if node scripts/tag-manager.cjs validate staging; then
            TAGS=$(git tag -l "staging-*" --sort=-committerdate)
            TAG=$(echo "$TAGS" | sed -n '2p')
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "Rolling back to: $TAG"
            git checkout $TAG
          else
            echo "::warning::Cannot rollback - insufficient staging tags"
            echo "::notice::Creating initial staging tags for future rollbacks"
            node scripts/tag-manager.cjs create staging --message="Initial staging tag for rollback capability" --push
            echo "::error::Rollback not possible - this appears to be the first deployment"
            exit 1
          fi

      - name: Compute unique rollback tag for staging
        id: compute-tag-staging
        shell: bash
        run: |
          TIMESTAMP=$(date +%Y%m)
          BASE="rollback-staging-$TIMESTAMP"
          EXISTING=$(git tag -l "${BASE}-[0-9][0-9]")
          if [ -z "${EXISTING}" ]; then
            COUNTER=1
          else
            MAX=$(echo "${EXISTING}" | sed -n "s/^${BASE}-\([0-9]\{2\}\)$/\1/p" | sort -n | tail -n1)
            if [ -z "${MAX}" ]; then
              COUNTER=1
            else
              COUNTER=$((10#$MAX + 1))
            fi
          fi
          COUNTER_PAD=$(printf "%02d" ${COUNTER})
          TAG_NAME="${BASE}-${COUNTER_PAD}"
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Computed tag: ${TAG_NAME}"

      - name: Dry Run Git Push
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          TAG_NAME=${{ steps.compute-tag-staging.outputs.tag }}
          echo "Dry run for git push using tag: $TAG_NAME"
          git tag "$TAG_NAME"
          GIT_PUSH_REMOTE=${{ env.GIT_PUSH_REMOTE || 'origin' }}
          git push --dry-run "$GIT_PUSH_REMOTE" "$TAG_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Create rollback tag
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          TAG_BASE=${{ steps.compute-tag-staging.outputs.tag }}
          TAG_NAME="$TAG_BASE"
          git fetch --tags --force
          COUNT=0
          while git rev-parse -q --verify "refs/tags/$TAG_NAME" >/dev/null 2>&1 || git ls-remote --tags "$GIT_PUSH_REMOTE" refs/tags/$TAG_NAME | grep -q "$TAG_NAME"; do
            COUNT=$((COUNT+1))
            if [ "$COUNT" -gt 50 ]; then
              echo "::error::Unable to compute unique tag after 50 attempts: $TAG_NAME"
              exit 1
            fi
            printf -v PAD "%02d" "$COUNT"
            TAG_NAME="${TAG_BASE}-$PAD"
          done
          GIT_PUSH_REMOTE=${{ env.GIT_PUSH_REMOTE || 'origin' }}
          echo "Creating and pushing tag: $TAG_NAME to $GIT_PUSH_REMOTE"
          git tag "$TAG_NAME"
          git push "$GIT_PUSH_REMOTE" "$TAG_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}

  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    concurrency:
      group: production_environment
      cancel-in-progress: true
    permissions:
      contents: write
      deployments: write
      actions: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4.2.3
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Determine rollback tag
        id: get-tag
        run: |
          if node scripts/tag-manager.cjs validate production; then
            TAGS=$(git tag -l "production-*" --sort=-committerdate)
            TAG=$(echo "$TAGS" | sed -n '2p')
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "Rolling back to: $TAG"
            git checkout $TAG
          else
            echo "::warning::Cannot rollback - insufficient production tags"
            echo "::notice::Creating initial production tags for future rollbacks"
            node scripts/tag-manager.cjs create production --message="Initial production tag for rollback capability" --push
            echo "::error::Rollback not possible - this appears to be the first deployment"
            exit 1
          fi

      - name: Compute unique rollback tag for production
        id: compute-tag-prod
        shell: bash
        run: |
          TIMESTAMP=$(date +%Y%m%d)
          BASE="prod-rollback-$TIMESTAMP"
          EXISTING=$(git tag -l "${BASE}-[0-9][0-9]")
          if [ -z "${EXISTING}" ]; then
            COUNTER=1
          else
            MAX=$(echo "${EXISTING}" | sed -n "s/^${BASE}-\([0-9]\{2\}\)$/\1/p" | sort -n | tail -n1)
            if [ -z "${MAX}" ]; then
              COUNTER=1
            else
              COUNTER=$((10#$MAX + 1))
            fi
          fi
          COUNTER_PAD=$(printf "%02d" ${COUNTER})
          TAG_NAME="${BASE}-${COUNTER_PAD}"
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Computed tag: ${TAG_NAME}"

      - name: Dry Run Git Push
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          TAG_NAME=${{ steps.compute-tag-prod.outputs.tag }}
          echo "Dry run for git push using tag: $TAG_NAME"
          GIT_PUSH_REMOTE=${{ env.GIT_PUSH_REMOTE || 'origin' }}
          git tag "$TAG_NAME"
          git push --dry-run "$GIT_PUSH_REMOTE" "$TAG_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Create rollback tag
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          TAG_BASE=${{ steps.compute-tag-prod.outputs.tag }}
          TAG_NAME="$TAG_BASE"
          git fetch --tags --force
          COUNT=0
          while git rev-parse -q --verify "refs/tags/$TAG_NAME" >/dev/null 2>&1 || git ls-remote --tags "$GIT_PUSH_REMOTE" refs/tags/$TAG_NAME | grep -q "$TAG_NAME"; do
            COUNT=$((COUNT+1))
            if [ "$COUNT" -gt 100 ]; then
              echo "::error::Unable to compute unique production tag after 100 attempts: $TAG_NAME"
              exit 1
            fi
            printf -v PAD "%02d" "$COUNT"
            TAG_NAME="${TAG_BASE}-$PAD"
          done
          GIT_PUSH_REMOTE=${{ env.GIT_PUSH_REMOTE || 'origin' }}
          echo "Creating and pushing production tag: $TAG_NAME to $GIT_PUSH_REMOTE"
          git tag "$TAG_NAME"
          git push "$GIT_PUSH_REMOTE" "$TAG_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
