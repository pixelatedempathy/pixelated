AWSTemplateFormatVersion: '2010-09-09'
Description: 'Pixelated Astro App - Static S3 + CloudFront Deployment'

Parameters:
  DeploymentBucket:
    Type: String
    Description: 'S3 bucket containing the deployment package'

  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['development', 'staging', 'production']
    Description: 'Environment name'

Resources:
  # S3 Bucket for static website hosting
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-website'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html

  # Bucket policy to allow CloudFront access
  StaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticWebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${StaticWebsiteBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
          - Sid: AllowPublicRead
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${StaticWebsiteBucket.Arn}/*'

  # CloudFront Origin Access Control
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        PriceClass: PriceClass_100
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt StaticWebsiteBucket.RegionalDomainName
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd # Managed-SimpleCORS
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
        Comment: !Sub 'CloudFront distribution for ${AWS::StackName}'

  # Lambda function to copy deployment files to S3
  DeploymentCopyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-deploy-copy'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt DeploymentCopyRole.Arn
      Timeout: 300
      MemorySize: 512
      Code:
        ZipFile: |
          import boto3
          import json
          import zipfile
          import tempfile
          import os
          import mimetypes

          s3 = boto3.client('s3')

          def handler(event, context):
              try:
                  source_bucket = event['SourceBucket']
                  source_key = event['SourceKey']
                  target_bucket = event['TargetBucket']
                  
                  print(f"Copying from s3://{source_bucket}/{source_key} to s3://{target_bucket}")
                  
                  # Download the deployment zip
                  with tempfile.NamedTemporaryFile() as temp_file:
                      s3.download_file(source_bucket, source_key, temp_file.name)
                      
                      # Extract and upload files
                      with zipfile.ZipFile(temp_file.name, 'r') as zip_file:
                          for file_info in zip_file.infolist():
                              if not file_info.is_dir():
                                  # Extract file
                                  content = zip_file.read(file_info.filename)
                                  
                                  # Determine content type
                                  content_type, _ = mimetypes.guess_type(file_info.filename)
                                  if not content_type:
                                      content_type = 'application/octet-stream'
                                  
                                  # Upload to target bucket
                                  s3.put_object(
                                      Bucket=target_bucket,
                                      Key=file_info.filename,
                                      Body=content,
                                      ContentType=content_type
                                  )
                                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Deployment copied successfully')
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  raise

  # IAM Role for deployment copy function
  DeploymentCopyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-deploy-copy-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${DeploymentBucket}/*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:DeleteObject
                Resource: !Sub '${StaticWebsiteBucket.Arn}/*'

  # Custom resource to trigger deployment copy
  DeploymentCopyTrigger:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt DeploymentCopyFunction.Arn
      SourceBucket: !Ref DeploymentBucket
      SourceKey: 'static-deployment.zip'
      TargetBucket: !Ref StaticWebsiteBucket

Outputs:
  WebsiteBucket:
    Description: 'S3 bucket for static website'
    Value: !Ref StaticWebsiteBucket

  CloudFrontDistributionID:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution

  CloudFrontDistributionURL:
    Description: 'CloudFront Distribution URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'

  WebsiteURL:
    Description: 'Website URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
