---
import { getCollection, getEntry, render } from 'astro:content'

import Categorizer from '@/components/base/Categorizer.astro'
import ListItem from '@/components/views/ListItem.astro'
import Toc from '@/components/toc/Toc.astro'
import Warning from '@/components/base/Warning.astro'

import { FEATURES } from '@/config'
import { isSameYear, getYear } from '@/utils/datetime'

import type {
  CollectionEntry,
  ContentCollectionKey,
  DataCollectionKey,
} from 'astro:content'
import type { StreamGroupsSchema } from '@/content/schema'
import type { PostCollectionType } from '@/utils/post'

interface Props {
  collectionType: ContentCollectionKey | DataCollectionKey
  pageToc: boolean
}

const { collectionType, pageToc } = Astro.props

/* Toc */
const { toc } = FEATURES
const tocEnabled = Array.isArray(toc) && toc[0] && pageToc
let years: string[] = []

/* Posts */
let blogItems: CollectionEntry<PostCollectionType>[] = []
let sortedBlogItems: CollectionEntry<PostCollectionType>[] = []

if (collectionType === 'blog' || collectionType === 'changelog') {
  const postType =
    collectionType === 'blog' ? 'blog' : ('docs' as PostCollectionType)
  blogItems = await getCollection(postType)
  sortedBlogItems = blogItems.sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
  )

  if (tocEnabled) {
    const yearsSet = new Set<number>()
    sortedBlogItems.forEach((item) => {
      const year = getYear(item.data.pubDate)
      yearsSet.add(year)
    })

    years = Array.from(yearsSet)
      .sort((a, b) => b - a)
      .map((year) => year.toString())
  }
}

/* Streams */
let streamItems: StreamGroupsSchema = []
let sortedStreamItems: StreamGroupsSchema = []

if (collectionType === 'streams') {
  const streamData = await getEntry('streams', 'data')
  if (streamData) {
    streamItems = streamData.data.streams

    sortedStreamItems = streamItems.sort(
      (a, b) => b.pubDate.valueOf() - a.pubDate.valueOf(),
    )

    if (tocEnabled) {
      const yearsSet = new Set<number>()
      sortedStreamItems.forEach((item) => {
        const year = getYear(item.pubDate)
        yearsSet.add(year)
      })

      years = Array.from(yearsSet)
        .sort((a, b) => b - a)
        .map((year) => year.toString())
    }
  }
}

// Define the feed item type based on config.ts
interface FeedItem {
  title: string
  link: string
  pubDate: string
  description?: string
  author?: string
}

/* Feeds */
let feedItems: CollectionEntry<'feeds'>[] = []
let sortedFeedItems: FeedItem[] = []

if (collectionType === 'feeds') {
  feedItems = await getCollection('feeds')

  // Access the data correctly - the feed collection returns an array in the first item's data
  const feedsData = feedItems.length > 0 ? feedItems[0].data : undefined // Keep it potentially undefined or not an array

  // Sort the feed data only if it's an array
  if (Array.isArray(feedsData)) {
    sortedFeedItems = [...feedsData].sort((a, b) => {
      if (!a.pubDate || !b.pubDate)
        throw new Error("Feed item is missing 'pubDate' field.")

      return new Date(b.pubDate).valueOf() - new Date(a.pubDate).valueOf()
    })
  } else {
    // If feedsData is not an array (or undefined), default to empty
    sortedFeedItems = []
    // Optionally, log a warning if feedsData is present but not an array
    if (feedsData !== undefined) {
      console.warn(
        `Expected feedsData to be an array, but got: ${typeof feedsData}. Check the structure of your 'feeds' collection.`,
      )
    }
  }

  if (tocEnabled && sortedFeedItems.length > 0) {
    // Check sortedFeedItems.length too
    const yearsSet = new Set<number>()
    sortedFeedItems.forEach((item) => {
      const year = getYear(new Date(item.pubDate))
      yearsSet.add(year)
    })

    years = Array.from(yearsSet)
      .sort((a, b) => b - a)
      .map((year) => year.toString())
  }
}

/* Exception */
const warningHTML = `The '${collectionType}' collection type does no
  belong to the built-in types 'blog', 'feeds', or 'streams'. You may
  need to modify the <code>ListView.astro</code> logic for your defined
  collection types to render the list.`
---

{tocEnabled && <Toc {years} />}

{
  (collectionType === 'blog' || collectionType === 'changelog') && (
    <div aria-label="Post list">
      {sortedBlogItems.length === 0 ? (
        <div class="py-2 op-50">nothing here yet</div>
      ) : (
        sortedBlogItems.map(async (item, idx) => {
          const data = item.data
          const slug = item.id
          const rendered = await render(item)
          const remarkPluginFrontmatter = rendered.remarkPluginFrontmatter

          const minutesRead =
            'minutesRead' in data
              ? data.minutesRead
              : remarkPluginFrontmatter &&
                  'minutesRead' in remarkPluginFrontmatter
                ? remarkPluginFrontmatter.minutesRead
                : undefined

          return (
            <>
              {!isSameYear(
                data.pubDate,
                sortedBlogItems[idx - 1]?.data.pubDate,
              ) && (
                <Categorizer
                  {idx}
                  needId={tocEnabled}
                  text={getYear(data.pubDate).toString()}
                />
              )}
              <ListItem
                idx={idx}
                collectionType={collectionType}
                redirect={
                  'redirect' in data ? (data.redirect as string) : undefined
                }
                postSlug={slug}
                title={data.title}
                video={'video' in data ? (data.video as boolean) : undefined}
                radio={'radio' in data ? (data.radio as boolean) : undefined}
                date={data.pubDate}
                minutesRead={minutesRead || undefined}
                platform={
                  'platform' in data ? (data.platform as string) : undefined
                }
              />
            </>
          )
        })
      )}
    </div>
  )
}

{
  collectionType === 'streams' && (
    <div aria-label="Stream list">
      {sortedStreamItems.length === 0 ? (
        <div class="py-2 op-50">nothing here yet</div>
      ) : (
        sortedStreamItems.map((item, idx) => {
          return (
            <>
              {!isSameYear(
                item.pubDate,
                sortedStreamItems[idx - 1]?.pubDate,
              ) && (
                <Categorizer
                  {idx}
                  needId={tocEnabled}
                  text={getYear(item.pubDate).toString()}
                />
              )}
              <ListItem
                {idx}
                {collectionType}
                redirect={item.link}
                title={item.id}
                video={item.video}
                radio={item.radio}
                date={item.pubDate}
                platform={item.platform}
              />
            </>
          )
        })
      )}
    </div>
  )
}

{
  collectionType === 'feeds' && (
    <div aria-label="Feed list">
      {sortedFeedItems.length === 0 ? (
        <div class="py-2 op-50">nothing here yet</div>
      ) : (
        sortedFeedItems.map((item, idx) => {
          if (!item.link) throw new Error(`Feed item is missing 'link' field.`)
          if (!item.title)
            throw new Error(`Feed item is missing 'title' field.`)

          return (
            <>
              {idx > 0 &&
                !isSameYear(
                  new Date(item.pubDate),
                  new Date(sortedFeedItems[idx - 1]?.pubDate || ''),
                ) && (
                  <Categorizer
                    {idx}
                    needId={tocEnabled}
                    text={getYear(new Date(item.pubDate)).toString()}
                  />
                )}
              <ListItem
                {idx}
                {collectionType}
                redirect={item.link}
                title={item.title}
                date={item.pubDate}
              />
            </>
          )
        })
      )}
    </div>
  )
}
{
  !['blog', 'changelog', 'feeds', 'streams'].includes(collectionType) && (
    <Warning rawHTMLString={warningHTML} />
  )
}
