---
export const prerender = false

import Layout from '@/layouts/AuthLayout.astro'
import { isAuthenticated } from '@/lib/auth'
import { AuthService } from '@/services/auth.service'
import { ResetPasswordForm } from '@/components/auth/ResetPasswordForm'

let error: string | null = null
let success = false

const token = Astro.cookies.get('auth_recovery_token')?.value
const email = Astro.cookies.get('auth_recovery_email')?.value
const type = 'recovery' // For password reset flow, type is always recovery

const urlToken = Astro.url.searchParams.get('token')
const urlType = Astro.url.searchParams.get('type')
if (urlToken && urlType === 'recovery') {
  const callbackUrl = new URL('/auth-callback', Astro.url.origin)
  callbackUrl.searchParams.set('token', urlToken)
  callbackUrl.searchParams.set('type', urlType)
  if (email) {
    callbackUrl.searchParams.set('email', email)
  }
  return Astro.redirect(callbackUrl.toString())
}

const alreadyAuthenticated = await isAuthenticated(Astro.cookies)
if (alreadyAuthenticated) {
  return Astro.redirect('/dashboard')
}

let validToken = false
if (token && email) {
  try {
    validToken = true
  } catch (err) {
    console.error('Token verification error:', err)
    error = 'Invalid or expired token'
  }
} else if (!token) {
  error = 'Missing recovery token. Please use the link from your email.'
}
---

<Layout title="Reset Password - Pixelated Empathy" transitionMode="slide-down">
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto">
      <div class="text-center mb-8">
        <h1 class="text-2xl font-bold">Reset Your Password</h1>
        <p class="text-muted-foreground mt-2">
          Create a new password for your account
        </p>
      </div>

      {
        error && (
          <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )
      }

      {
        validToken && !success && token && email && (
          <ResetPasswordForm token={token} email={email} client:load />
        )
      }
    </div>
  </main>
</Layout>

<style>
  main {
    min-height: calc(100vh - 200px);
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
</style>

<script>
  import { toast } from '@/components/ui/toast'

  document.addEventListener('password-reset-success', () => {
    toast.success('Password successfully reset!', {
      duration: 5000,
    })

    document.cookie =
      'auth_recovery_token=; Max-Age=0; path=/; secure; samesite=lax'
    document.cookie =
      'auth_recovery_email=; Max-Age=0; path=/; secure; samesite=lax'

    setTimeout(() => {
      window.location.href = '/login'
    }, 3000)
  })

  document.addEventListener('password-reset-error', (event) => {
    const message =
      (event as CustomEvent).detail?.message ||
      'An error occurred during password reset'
    toast.error(message)
  })
</script>
