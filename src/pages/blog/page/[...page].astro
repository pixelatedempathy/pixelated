---
import { getCollection } from 'astro:content'
import BaseLayout from '@/layouts/BaseLayout.astro'

export const prerender = true

export async function getStaticPaths() {
  // Define paginate helper (must be in scope for this function)
  function paginate(data: any[], options: { pageSize: number }) {
    const { pageSize } = options
    const totalPages = Math.ceil(data.length / pageSize)
    const pages = []
    let i = 0
    while (i !== totalPages) {
      const start = i * pageSize
      const end = start + pageSize
      const isNotFirst = i !== 0
      const isNotLast = i !== totalPages - 1
      pages.push({
        params: { page: (i + 1).toString() },
        props: {
          page: {
            data: data.slice(start, end),
            currentPage: i + 1,
            lastPage: totalPages,
            size: pageSize,
            total: data.length,
            url: {
              current: `/blog/page/${i + 1}`,
              prev: isNotFirst ? `/blog/page/${i}` : undefined,
              next: isNotLast ? `/blog/page/${i + 2}` : undefined,
            },
          },
        },
      })
      i++
    }
    return pages
  }

  // Get all blog posts
  const posts = await getCollection('blog', (entry: any) => {
    return import.meta.env.PROD ? !entry.data.draft : true
  })

  // Sort by date - newest first
  const sortedPosts = posts.sort((postA: any, postB: any) => {
    return postB.data.pubDate.valueOf() - postA.data.pubDate.valueOf()
  })

  // Generate pagination paths
  return paginate(sortedPosts, { pageSize: 20 })
}

const { page } = Astro.props

function formatDate(date: Date) {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

function getReadingTime(content: string) {
  const wordsPerMinute = 200;
  const words = content.split(/\s+/).length;
  const minutes = Math.ceil(words / wordsPerMinute);
  return `${minutes} min read`;
}

const title = page.currentPage === 1 ? 'All Posts' : `All Posts - Page ${page.currentPage}`
const description = 'All articles about therapy, technology, and digital empathy'
---

<BaseLayout {title} {description}>
  <div class="max-w-4xl mx-auto px-4 py-12">
    <header class="mb-12">
      <div class="flex items-center gap-2 mb-4 text-sm text-slate-400">
        <a href="/blog" class="hover:text-green-400 transition-colors">Blog</a>
        <span>/</span>
        <span class="text-green-400">All Posts</span>
      </div>
      <h1 class="text-3xl font-bold mb-4">All Posts</h1>
      <p class="text-slate-400">
        {page.total} articles about therapy, technology, and digital empathy
      </p>
    </header>

    <div class="space-y-8 mb-12">
      {page.data.map((post: any) => (
        <article class="group">
          <div class="flex flex-col sm:flex-row gap-4">
            <div class="flex-shrink-0 text-sm text-slate-400 sm:w-32">
              {formatDate(new Date(post.data.pubDate))}
              <span class="hidden sm:block mt-1">
                {getReadingTime(post.body)}
              </span>
            </div>

            <div class="flex-1">
              <h3 class="text-xl font-bold mb-2 group-hover:text-green-400 transition-colors">
                <a href={`/blog/${post.slug}`} class="block">
                  {post.data.title}
                </a>
              </h3>

              <p class="text-slate-300 mb-3 leading-relaxed">
                {post.data.description}
              </p>

              {post.data.tags && post.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-3">
                  {post.data.tags.map((tag: string) => (
                    <a
                      href={`/blog/tags/${tag}`}
                      class="text-xs text-green-400 hover:text-green-300 transition-colors"
                    >
                      #{tag}
                    </a>
                  ))}
                </div>
              )}

              <a
                href={`/blog/${post.slug}`}
                class="inline-flex items-center text-sm text-slate-400 hover:text-green-400 transition-colors group-hover:text-green-400"
              >
                Read article
                <span class="ml-1 group-hover:translate-x-1 transition-transform">→</span>
              </a>
            </div>
          </div>
        </article>
      ))}

    <!-- Pagination -->
    {(page.url.prev || page.url.next) && (
      <div class="border-t border-slate-700 pt-8">
        <div class="flex justify-between items-center">
          <div>
            {page.url.prev && (
              <a
                href={page.url.prev}
                class="inline-flex items-center text-slate-400 hover:text-green-400 transition-colors"
              >
                ← Previous page
              </a>
            )}
          </div>

          <span class="text-sm text-slate-400">
            Page {page.currentPage} of {page.lastPage}
          </span>

          <div>
            {page.url.next && (
              <a
                href={page.url.next}
                class="inline-flex items-center text-slate-400 hover:text-green-400 transition-colors"
              >
                Next page →
              </a>
            )}
          </div>
        </div>
      </div>
    )}

    <!-- Navigation -->
    <div class="border-t border-slate-700 pt-8 mt-8">
      <div class="flex flex-col sm:flex-row gap-4 justify-between">
        <div class="flex gap-4">
          <a
            href="/blog"
            class="text-slate-400 hover:text-green-400 transition-colors"
          >
            ← Blog home
          </a>
          <a
            href="/blog/tags"
            class="text-slate-400 hover:text-green-400 transition-colors"
          >
            All topics
          </a>
        </div>
        <a
          href="/rss.xml"
          class="text-slate-400 hover:text-green-400 transition-colors"
        >
          RSS feed
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  li {
    transition: transform 0.2s ease;
  }
  li:hover {
    transform: translateX(4px);
  }
</style>
