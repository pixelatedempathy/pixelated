2025-06-04T21:51:38.8183982Z Current runner version: '2.325.0'
2025-06-04T21:51:38.8208744Z ##[group]Runner Image Provisioner
2025-06-04T21:51:38.8209749Z Hosted Compute Agent
2025-06-04T21:51:38.8210373Z Version: 20250508.323
2025-06-04T21:51:38.8210975Z Commit: 81b259f29879f73b4213d199e42d8c3465dae986
2025-06-04T21:51:38.8211622Z Build Date: 2025-05-08T19:40:08Z
2025-06-04T21:51:38.8212281Z ##[endgroup]
2025-06-04T21:51:38.8212803Z ##[group]Operating System
2025-06-04T21:51:38.8213349Z Ubuntu
2025-06-04T21:51:38.8213855Z 24.04.2
2025-06-04T21:51:38.8214340Z LTS
2025-06-04T21:51:38.8214755Z ##[endgroup]
2025-06-04T21:51:38.8215277Z ##[group]Runner Image
2025-06-04T21:51:38.8215858Z Image: ubuntu-24.04
2025-06-04T21:51:38.8216303Z Version: 20250511.1.0
2025-06-04T21:51:38.8217372Z Included Software: https://github.com/actions/runner-images/blob/ubuntu24/20250511.1/images/ubuntu/Ubuntu2404-Readme.md
2025-06-04T21:51:38.8218868Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu24%2F20250511.1
2025-06-04T21:51:38.8220029Z ##[endgroup]
2025-06-04T21:51:38.8221470Z ##[group]GITHUB_TOKEN Permissions
2025-06-04T21:51:38.8223707Z Contents: read
2025-06-04T21:51:38.8224258Z Metadata: read
2025-06-04T21:51:38.8224691Z ##[endgroup]
2025-06-04T21:51:38.8227031Z Secret source: Actions
2025-06-04T21:51:38.8228000Z Prepare workflow directory
2025-06-04T21:51:38.8750712Z Prepare all required actions
2025-06-04T21:51:38.8787533Z Getting action download info
2025-06-04T21:51:39.1343699Z ##[group]Download immutable action package 'actions/checkout@v4'
2025-06-04T21:51:39.1344755Z Version: 4.2.2
2025-06-04T21:51:39.1345744Z Digest: sha256:ccb2698953eaebd21c7bf6268a94f9c26518a7e38e27e0b83c1fe1ad049819b1
2025-06-04T21:51:39.1346973Z Source commit SHA: 11bd71901bbe5b1630ceea73d27597364c9af683
2025-06-04T21:51:39.1347719Z ##[endgroup]
2025-06-04T21:51:39.2084820Z ##[group]Download immutable action package 'actions/setup-node@v4'
2025-06-04T21:51:39.2085701Z Version: 4.4.0
2025-06-04T21:51:39.2086494Z Digest: sha256:9427cefe82346e992fb5b949e3569b39d537ae41aa3086483b14eceebfc16bc1
2025-06-04T21:51:39.2087414Z Source commit SHA: 49933ea5288caeca8642d1e84afbd3f7d6820020
2025-06-04T21:51:39.2088165Z ##[endgroup]
2025-06-04T21:51:39.2952628Z Download action repository 'pnpm/action-setup@v4' (SHA:a7487c7e89a18df4991f7f222e4898a00d66ddda)
2025-06-04T21:51:39.5414892Z ##[group]Download immutable action package 'actions/cache@v4'
2025-06-04T21:51:39.5415548Z Version: 4.2.3
2025-06-04T21:51:39.5416177Z Digest: sha256:c8a3bb963e1f1826d8fcc8d1354f0dd29d8ac1db1d4f6f20247055ae11b81ed9
2025-06-04T21:51:39.5417016Z Source commit SHA: 5a3ec84eff668545956fd18022155c47e93e2684
2025-06-04T21:51:39.5417602Z ##[endgroup]
2025-06-04T21:51:39.7058340Z Complete job name: Lint
2025-06-04T21:51:39.7664953Z ##[group]Run actions/checkout@v4
2025-06-04T21:51:39.7665771Z with:
2025-06-04T21:51:39.7666153Z   submodules: recursive
2025-06-04T21:51:39.7666607Z   repository: nochadisfaction/pixelated
2025-06-04T21:51:39.7667263Z   token: ***
2025-06-04T21:51:39.7667634Z   ssh-strict: true
2025-06-04T21:51:39.7668087Z   ssh-user: git
2025-06-04T21:51:39.7668523Z   persist-credentials: true
2025-06-04T21:51:39.7669258Z   clean: true
2025-06-04T21:51:39.7669685Z   sparse-checkout-cone-mode: true
2025-06-04T21:51:39.7670157Z   fetch-depth: 1
2025-06-04T21:51:39.7670530Z   fetch-tags: false
2025-06-04T21:51:39.7670912Z   show-progress: true
2025-06-04T21:51:39.7671310Z   lfs: false
2025-06-04T21:51:39.7671675Z   set-safe-directory: true
2025-06-04T21:51:39.7672356Z env:
2025-06-04T21:51:39.7672802Z   PNPM_HOME: /home/runner/work/pixelated/pixelated/.pnpm
2025-06-04T21:51:39.7673403Z   REDIS_URL: redis://localhost:6379
2025-06-04T21:51:39.7673887Z   REDIS_KEY_PREFIX: test:
2025-06-04T21:51:39.7674336Z   VITEST_TIMEOUT: 30000
2025-06-04T21:51:39.7674746Z   SKIP_REDIS_TESTS: true
2025-06-04T21:51:39.7675152Z   SKIP_FHE_TESTS: true
2025-06-04T21:51:39.7675562Z   SKIP_BROWSER_COMPAT_TESTS: true
2025-06-04T21:51:39.7676012Z ##[endgroup]
2025-06-04T21:51:39.8770696Z Syncing repository: nochadisfaction/pixelated
2025-06-04T21:51:39.8772681Z ##[group]Getting Git version info
2025-06-04T21:51:39.8773851Z Working directory is '/home/runner/work/pixelated/pixelated'
2025-06-04T21:51:39.8775053Z [command]/usr/bin/git version
2025-06-04T21:51:39.8820545Z git version 2.49.0
2025-06-04T21:51:39.8847876Z ##[endgroup]
2025-06-04T21:51:39.8860723Z Temporarily overriding HOME='/home/runner/work/_temp/1dc9fe67-f0a9-4a31-a987-27f428aedf46' before making global git config changes
2025-06-04T21:51:39.8862100Z Adding repository directory to the temporary git global config as a safe directory
2025-06-04T21:51:39.8865585Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/pixelated/pixelated
2025-06-04T21:51:39.8898254Z Deleting the contents of '/home/runner/work/pixelated/pixelated'
2025-06-04T21:51:39.8901832Z ##[group]Initializing the repository
2025-06-04T21:51:39.8905782Z [command]/usr/bin/git init /home/runner/work/pixelated/pixelated
2025-06-04T21:51:39.9023341Z hint: Using 'master' as the name for the initial branch. This default branch name
2025-06-04T21:51:39.9024616Z hint: is subject to change. To configure the initial branch name to use in all
2025-06-04T21:51:39.9025640Z hint: of your new repositories, which will suppress this warning, call:
2025-06-04T21:51:39.9026572Z hint:
2025-06-04T21:51:39.9027465Z hint: 	git config --global init.defaultBranch <name>
2025-06-04T21:51:39.9028662Z hint:
2025-06-04T21:51:39.9029923Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2025-06-04T21:51:39.9031847Z hint: 'development'. The just-created branch can be renamed via this command:
2025-06-04T21:51:39.9033248Z hint:
2025-06-04T21:51:39.9034189Z hint: 	git branch -m <name>
2025-06-04T21:51:39.9035760Z Initialized empty Git repository in /home/runner/work/pixelated/pixelated/.git/
2025-06-04T21:51:39.9042336Z [command]/usr/bin/git remote add origin https://github.com/nochadisfaction/pixelated
2025-06-04T21:51:39.9076873Z ##[endgroup]
2025-06-04T21:51:39.9078363Z ##[group]Disabling automatic garbage collection
2025-06-04T21:51:39.9081771Z [command]/usr/bin/git config --local gc.auto 0
2025-06-04T21:51:39.9112640Z ##[endgroup]
2025-06-04T21:51:39.9113416Z ##[group]Setting up auth
2025-06-04T21:51:39.9123029Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-06-04T21:51:39.9158148Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-06-04T21:51:39.9462026Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-06-04T21:51:39.9492158Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-06-04T21:51:39.9705089Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2025-06-04T21:51:39.9746083Z ##[endgroup]
2025-06-04T21:51:39.9747543Z ##[group]Fetching the repository
2025-06-04T21:51:39.9756505Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +eee88bf9c2234d2ab50d5d867568ad2a7638a9ac:refs/remotes/pull/2/merge
2025-06-04T21:51:48.9130729Z From https://github.com/nochadisfaction/pixelated
2025-06-04T21:51:48.9132082Z  * [new ref]             eee88bf9c2234d2ab50d5d867568ad2a7638a9ac -> pull/2/merge
2025-06-04T21:51:48.9156085Z ##[endgroup]
2025-06-04T21:51:48.9157909Z ##[group]Determining the checkout info
2025-06-04T21:51:48.9160568Z ##[endgroup]
2025-06-04T21:51:48.9165653Z [command]/usr/bin/git sparse-checkout disable
2025-06-04T21:51:48.9205684Z [command]/usr/bin/git config --local --unset-all extensions.worktreeConfig
2025-06-04T21:51:48.9233812Z ##[group]Checking out the ref
2025-06-04T21:51:48.9238155Z [command]/usr/bin/git checkout --progress --force refs/remotes/pull/2/merge
2025-06-04T21:51:50.1836915Z Updating files:   8% (6931/83443)
2025-06-04T21:51:50.2441491Z Updating files:   9% (7510/83443)
2025-06-04T21:51:50.3327508Z Updating files:  10% (8345/83443)
2025-06-04T21:51:50.3866167Z Updating files:  11% (9179/83443)
2025-06-04T21:51:50.4231426Z Updating files:  12% (10014/83443)
2025-06-04T21:51:50.4690046Z Updating files:  13% (10848/83443)
2025-06-04T21:51:50.5326068Z Updating files:  14% (11683/83443)
2025-06-04T21:51:50.6423963Z Updating files:  15% (12517/83443)
2025-06-04T21:51:50.7348454Z Updating files:  16% (13351/83443)
2025-06-04T21:51:50.8671234Z Updating files:  17% (14186/83443)
2025-06-04T21:51:50.9407962Z Updating files:  18% (15020/83443)
2025-06-04T21:51:51.0037040Z Updating files:  19% (15855/83443)
2025-06-04T21:51:51.0100086Z Updating files:  19% (16638/83443)
2025-06-04T21:51:51.0887284Z Updating files:  20% (16689/83443)
2025-06-04T21:51:51.1678499Z Updating files:  21% (17524/83443)
2025-06-04T21:51:51.2526048Z Updating files:  22% (18358/83443)
2025-06-04T21:51:51.3430017Z Updating files:  23% (19192/83443)
2025-06-04T21:51:51.4204213Z Updating files:  24% (20027/83443)
2025-06-04T21:51:51.5224726Z Updating files:  25% (20861/83443)
2025-06-04T21:51:51.5941016Z Updating files:  26% (21696/83443)
2025-06-04T21:51:51.6720709Z Updating files:  27% (22530/83443)
2025-06-04T21:51:51.7319238Z Updating files:  28% (23365/83443)
2025-06-04T21:51:51.8182634Z Updating files:  29% (24199/83443)
2025-06-04T21:51:51.8843138Z Updating files:  30% (25033/83443)
2025-06-04T21:51:51.9291738Z Updating files:  31% (25868/83443)
2025-06-04T21:51:51.9723224Z Updating files:  32% (26702/83443)
2025-06-04T21:51:52.0197689Z Updating files:  33% (27537/83443)
2025-06-04T21:51:52.0683658Z Updating files:  33% (28105/83443)
2025-06-04T21:51:52.0962081Z Updating files:  34% (28371/83443)
2025-06-04T21:51:52.1236476Z Updating files:  35% (29206/83443)
2025-06-04T21:51:52.1510384Z Updating files:  36% (30040/83443)
2025-06-04T21:51:52.1780223Z Updating files:  37% (30874/83443)
2025-06-04T21:51:52.2045522Z Updating files:  38% (31709/83443)
2025-06-04T21:51:52.2304413Z Updating files:  39% (32543/83443)
2025-06-04T21:51:52.2567429Z Updating files:  40% (33378/83443)
2025-06-04T21:51:52.2845397Z Updating files:  41% (34212/83443)
2025-06-04T21:51:52.3150332Z Updating files:  42% (35047/83443)
2025-06-04T21:51:52.3418952Z Updating files:  43% (35881/83443)
2025-06-04T21:51:52.3691560Z Updating files:  44% (36715/83443)
2025-06-04T21:51:52.3963867Z Updating files:  45% (37550/83443)
2025-06-04T21:51:52.4242654Z Updating files:  46% (38384/83443)
2025-06-04T21:51:52.4513006Z Updating files:  47% (39219/83443)
2025-06-04T21:51:52.4784753Z Updating files:  48% (40053/83443)
2025-06-04T21:51:52.5052278Z Updating files:  49% (40888/83443)
2025-06-04T21:51:52.5321140Z Updating files:  50% (41722/83443)
2025-06-04T21:51:52.5588361Z Updating files:  51% (42556/83443)
2025-06-04T21:51:52.5852881Z Updating files:  52% (43391/83443)
2025-06-04T21:51:52.6124183Z Updating files:  53% (44225/83443)
2025-06-04T21:51:52.6390857Z Updating files:  54% (45060/83443)
2025-06-04T21:51:52.6660090Z Updating files:  55% (45894/83443)
2025-06-04T21:51:52.6925984Z Updating files:  56% (46729/83443)
2025-06-04T21:51:52.7225635Z Updating files:  57% (47563/83443)
2025-06-04T21:51:52.7494914Z Updating files:  58% (48397/83443)
2025-06-04T21:51:52.7810073Z Updating files:  59% (49232/83443)
2025-06-04T21:51:52.8084620Z Updating files:  60% (50066/83443)
2025-06-04T21:51:52.8392913Z Updating files:  61% (50901/83443)
2025-06-04T21:51:52.8660079Z Updating files:  62% (51735/83443)
2025-06-04T21:51:52.8942042Z Updating files:  63% (52570/83443)
2025-06-04T21:51:52.9215347Z Updating files:  64% (53404/83443)
2025-06-04T21:51:52.9605143Z Updating files:  65% (54238/83443)
2025-06-04T21:51:53.0046654Z Updating files:  66% (55073/83443)
2025-06-04T21:51:53.0634577Z Updating files:  66% (55454/83443)
2025-06-04T21:51:53.1448327Z Updating files:  67% (55907/83443)
2025-06-04T21:51:53.2207973Z Updating files:  68% (56742/83443)
2025-06-04T21:51:53.2659539Z Updating files:  69% (57576/83443)
2025-06-04T21:51:53.3542972Z Updating files:  70% (58411/83443)
2025-06-04T21:51:53.4336681Z Updating files:  71% (59245/83443)
2025-06-04T21:51:53.5447848Z Updating files:  72% (60079/83443)
2025-06-04T21:51:53.6377895Z Updating files:  73% (60914/83443)
2025-06-04T21:51:53.7205435Z Updating files:  74% (61748/83443)
2025-06-04T21:51:53.7937021Z Updating files:  75% (62583/83443)
2025-06-04T21:51:53.8876849Z Updating files:  76% (63417/83443)
2025-06-04T21:51:53.9675754Z Updating files:  77% (64252/83443)
2025-06-04T21:51:54.0035987Z Updating files:  78% (65086/83443)
2025-06-04T21:51:54.1106480Z Updating files:  78% (65647/83443)
2025-06-04T21:51:54.1995741Z Updating files:  79% (65920/83443)
2025-06-04T21:51:54.2762214Z Updating files:  80% (66755/83443)
2025-06-04T21:51:54.3849664Z Updating files:  81% (67589/83443)
2025-06-04T21:51:54.4501833Z Updating files:  82% (68424/83443)
2025-06-04T21:51:54.5153810Z Updating files:  83% (69258/83443)
2025-06-04T21:51:54.5975426Z Updating files:  84% (70093/83443)
2025-06-04T21:51:54.6891800Z Updating files:  85% (70927/83443)
2025-06-04T21:51:54.7740653Z Updating files:  86% (71761/83443)
2025-06-04T21:51:54.8784625Z Updating files:  87% (72596/83443)
2025-06-04T21:51:54.9590496Z Updating files:  88% (73430/83443)
2025-06-04T21:51:55.0038397Z Updating files:  89% (74265/83443)
2025-06-04T21:51:55.0204309Z Updating files:  89% (74838/83443)
2025-06-04T21:51:55.0756275Z Updating files:  90% (75099/83443)
2025-06-04T21:51:55.1360147Z Updating files:  91% (75934/83443)
2025-06-04T21:51:55.2209748Z Updating files:  92% (76768/83443)
2025-06-04T21:51:55.3129885Z Updating files:  93% (77602/83443)
2025-06-04T21:51:55.4434443Z Updating files:  94% (78437/83443)
2025-06-04T21:51:55.5169776Z Updating files:  95% (79271/83443)
2025-06-04T21:51:55.5920423Z Updating files:  96% (80106/83443)
2025-06-04T21:51:55.6302084Z Updating files:  97% (80940/83443)
2025-06-04T21:51:55.7683451Z Updating files:  98% (81775/83443)
2025-06-04T21:51:55.8221109Z Updating files:  99% (82609/83443)
2025-06-04T21:51:55.8229769Z Updating files: 100% (83443/83443)
2025-06-04T21:51:55.8230430Z Updating files: 100% (83443/83443), done.
2025-06-04T21:51:55.9300320Z Note: switching to 'refs/remotes/pull/2/merge'.
2025-06-04T21:51:55.9301104Z 
2025-06-04T21:51:55.9301491Z You are in 'detached HEAD' state. You can look around, make experimental
2025-06-04T21:51:55.9302559Z changes and commit them, and you can discard any commits you make in this
2025-06-04T21:51:55.9303339Z state without impacting any branches by switching back to a branch.
2025-06-04T21:51:55.9303872Z 
2025-06-04T21:51:55.9304544Z If you want to create a new branch to retain commits you create, you may
2025-06-04T21:51:55.9305401Z do so (now or later) by using -c with the switch command. Example:
2025-06-04T21:51:55.9305834Z 
2025-06-04T21:51:55.9306014Z   git switch -c <new-branch-name>
2025-06-04T21:51:55.9306325Z 
2025-06-04T21:51:55.9306552Z Or undo this operation with:
2025-06-04T21:51:55.9306850Z 
2025-06-04T21:51:55.9306998Z   git switch -
2025-06-04T21:51:55.9307243Z 
2025-06-04T21:51:55.9307585Z Turn off this advice by setting config variable advice.detachedHead to false
2025-06-04T21:51:55.9308076Z 
2025-06-04T21:51:55.9372224Z HEAD is now at eee88bf9c Merge a7ab312bee181441b3edbb4a374fb42bff08c442 into a01b55b8ccd924680002ffc57ed60baa1f256fdc
2025-06-04T21:51:56.0962927Z ##[endgroup]
2025-06-04T21:51:56.0963334Z ##[group]Setting up auth for fetching submodules
2025-06-04T21:51:56.0969382Z [command]/usr/bin/git config --global http.https://github.com/.extraheader AUTHORIZATION: basic ***
2025-06-04T21:51:56.1010705Z [command]/usr/bin/git config --global --unset-all url.https://github.com/.insteadOf
2025-06-04T21:51:56.1038277Z [command]/usr/bin/git config --global --add url.https://github.com/.insteadOf git@github.com:
2025-06-04T21:51:56.1066660Z [command]/usr/bin/git config --global --add url.https://github.com/.insteadOf org-150661001@github.com:
2025-06-04T21:51:56.1090946Z ##[endgroup]
2025-06-04T21:51:56.1091646Z ##[group]Fetching submodules
2025-06-04T21:51:56.1094910Z [command]/usr/bin/git submodule sync --recursive
2025-06-04T21:51:56.1389444Z [command]/usr/bin/git -c protocol.version=2 submodule update --init --force --depth=1 --recursive
2025-06-04T21:51:56.1702175Z [command]/usr/bin/git submodule foreach --recursive git config --local gc.auto 0
2025-06-04T21:51:56.1996626Z ##[endgroup]
2025-06-04T21:51:56.1997268Z ##[group]Persisting credentials for submodules
2025-06-04T21:51:56.2003994Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'url\.https\:\/\/github\.com\/\.insteadOf' && git config --local --unset-all 'url.https://github.com/.insteadOf' || :"
2025-06-04T21:51:56.2301018Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local 'http.https://github.com/.extraheader' 'AUTHORIZATION: basic ***' && git config --local --show-origin --name-only --get-regexp remote.origin.url"
2025-06-04T21:51:56.2613255Z [command]/usr/bin/git submodule foreach --recursive git config --local --add 'url.https://github.com/.insteadOf' 'git@github.com:'
2025-06-04T21:51:56.2910322Z [command]/usr/bin/git submodule foreach --recursive git config --local --add 'url.https://github.com/.insteadOf' 'org-150661001@github.com:'
2025-06-04T21:51:56.3209282Z ##[endgroup]
2025-06-04T21:51:56.3251221Z [command]/usr/bin/git log -1 --format=%H
2025-06-04T21:51:56.3273245Z eee88bf9c2234d2ab50d5d867568ad2a7638a9ac
2025-06-04T21:51:56.3476542Z ##[group]Run actions/setup-node@v4
2025-06-04T21:51:56.3476800Z with:
2025-06-04T21:51:56.3476979Z   node-version: 22.x
2025-06-04T21:51:56.3477172Z   always-auth: false
2025-06-04T21:51:56.3477364Z   check-latest: false
2025-06-04T21:51:56.3477678Z   token: ***
2025-06-04T21:51:56.3477852Z env:
2025-06-04T21:51:56.3478076Z   PNPM_HOME: /home/runner/work/pixelated/pixelated/.pnpm
2025-06-04T21:51:56.3478394Z   REDIS_URL: redis://localhost:6379
2025-06-04T21:51:56.3478659Z   REDIS_KEY_PREFIX: test:
2025-06-04T21:51:56.3478891Z   VITEST_TIMEOUT: 30000
2025-06-04T21:51:56.3479275Z   SKIP_REDIS_TESTS: true
2025-06-04T21:51:56.3479468Z   SKIP_FHE_TESTS: true
2025-06-04T21:51:56.3479656Z   SKIP_BROWSER_COMPAT_TESTS: true
2025-06-04T21:51:56.3479869Z ##[endgroup]
2025-06-04T21:51:56.5211366Z Found in cache @ /opt/hostedtoolcache/node/22.15.0/x64
2025-06-04T21:51:56.5218152Z ##[group]Environment details
2025-06-04T21:51:56.8660914Z node: v22.15.0
2025-06-04T21:51:56.8661318Z npm: 10.9.2
2025-06-04T21:51:56.8661714Z yarn: 1.22.22
2025-06-04T21:51:56.8662569Z ##[endgroup]
2025-06-04T21:51:56.8778574Z ##[group]Run corepack enable
2025-06-04T21:51:56.8778890Z [36;1mcorepack enable[0m
2025-06-04T21:51:56.8985586Z shell: /usr/bin/bash -e {0}
2025-06-04T21:51:56.8985839Z env:
2025-06-04T21:51:56.8986087Z   PNPM_HOME: /home/runner/work/pixelated/pixelated/.pnpm
2025-06-04T21:51:56.8986414Z   REDIS_URL: redis://localhost:6379
2025-06-04T21:51:56.8986667Z   REDIS_KEY_PREFIX: test:
2025-06-04T21:51:56.8986872Z   VITEST_TIMEOUT: 30000
2025-06-04T21:51:56.8987093Z   SKIP_REDIS_TESTS: true
2025-06-04T21:51:56.8987289Z   SKIP_FHE_TESTS: true
2025-06-04T21:51:56.8987494Z   SKIP_BROWSER_COMPAT_TESTS: true
2025-06-04T21:51:56.8987713Z ##[endgroup]
2025-06-04T21:51:57.0517151Z ##[group]Run pnpm/action-setup@v4
2025-06-04T21:51:57.0517418Z with:
2025-06-04T21:51:57.0517583Z   version: 10.11.0
2025-06-04T21:51:57.0517767Z   run_install: false
2025-06-04T21:51:57.0517951Z   dest: ~/setup-pnpm
2025-06-04T21:51:57.0518151Z   package_json_file: package.json
2025-06-04T21:51:57.0518378Z   standalone: false
2025-06-04T21:51:57.0518547Z env:
2025-06-04T21:51:57.0518767Z   PNPM_HOME: /home/runner/work/pixelated/pixelated/.pnpm
2025-06-04T21:51:57.0519286Z   REDIS_URL: redis://localhost:6379
2025-06-04T21:51:57.0519529Z   REDIS_KEY_PREFIX: test:
2025-06-04T21:51:57.0519723Z   VITEST_TIMEOUT: 30000
2025-06-04T21:51:57.0519919Z   SKIP_REDIS_TESTS: true
2025-06-04T21:51:57.0520104Z   SKIP_FHE_TESTS: true
2025-06-04T21:51:57.0520302Z   SKIP_BROWSER_COMPAT_TESTS: true
2025-06-04T21:51:57.0520756Z ##[endgroup]
2025-06-04T21:51:57.1060492Z ##[group]Running self-installer...
2025-06-04T21:51:57.6648533Z Progress: resolved 1, reused 0, downloaded 0, added 0
2025-06-04T21:51:57.6766064Z Packages: +1
2025-06-04T21:51:57.6766392Z +
2025-06-04T21:51:58.0822589Z Progress: resolved 1, reused 0, downloaded 1, added 1, done
2025-06-04T21:51:58.1153632Z 
2025-06-04T21:51:58.1154243Z dependencies:
2025-06-04T21:51:58.1154796Z + pnpm 10.11.0 (10.11.1 is available)
2025-06-04T21:51:58.1155067Z 
2025-06-04T21:51:58.1181806Z Done in 852ms
2025-06-04T21:51:58.1350819Z ##[endgroup]
2025-06-04T21:51:58.1354166Z Installation Completed!
2025-06-04T21:51:58.1426427Z ##[group]Run mkdir -p $PNPM_HOME
2025-06-04T21:51:58.1426709Z [36;1mmkdir -p $PNPM_HOME[0m
2025-06-04T21:51:58.1426957Z [36;1mecho "$PNPM_HOME" >> $GITHUB_PATH[0m
2025-06-04T21:51:58.1481082Z shell: /usr/bin/bash -e {0}
2025-06-04T21:51:58.1481302Z env:
2025-06-04T21:51:58.1481526Z   PNPM_HOME: /home/runner/setup-pnpm/node_modules/.bin
2025-06-04T21:51:58.1481851Z   REDIS_URL: redis://localhost:6379
2025-06-04T21:51:58.1482094Z   REDIS_KEY_PREFIX: test:
2025-06-04T21:51:58.1482292Z   VITEST_TIMEOUT: 30000
2025-06-04T21:51:58.1482488Z   SKIP_REDIS_TESTS: true
2025-06-04T21:51:58.1482681Z   SKIP_FHE_TESTS: true
2025-06-04T21:51:58.1482872Z   SKIP_BROWSER_COMPAT_TESTS: true
2025-06-04T21:51:58.1483089Z ##[endgroup]
2025-06-04T21:51:58.1588597Z ##[group]Run which pnpm || echo "pnpm not found in PATH"
2025-06-04T21:51:58.1588981Z [36;1mwhich pnpm || echo "pnpm not found in PATH"[0m
2025-06-04T21:51:58.1589562Z [36;1mpnpm --version[0m
2025-06-04T21:51:58.1589778Z [36;1mecho "PNPM_HOME: $PNPM_HOME"[0m
2025-06-04T21:51:58.1590018Z [36;1mecho "PATH: $PATH"[0m
2025-06-04T21:51:58.1637268Z shell: /usr/bin/bash -e {0}
2025-06-04T21:51:58.1637490Z env:
2025-06-04T21:51:58.1637713Z   PNPM_HOME: /home/runner/setup-pnpm/node_modules/.bin
2025-06-04T21:51:58.1638028Z   REDIS_URL: redis://localhost:6379
2025-06-04T21:51:58.1638276Z   REDIS_KEY_PREFIX: test:
2025-06-04T21:51:58.1638477Z   VITEST_TIMEOUT: 30000
2025-06-04T21:51:58.1638665Z   SKIP_REDIS_TESTS: true
2025-06-04T21:51:58.1638856Z   SKIP_FHE_TESTS: true
2025-06-04T21:51:58.1639247Z   SKIP_BROWSER_COMPAT_TESTS: true
2025-06-04T21:51:58.1639474Z ##[endgroup]
2025-06-04T21:51:58.1715514Z /home/runner/setup-pnpm/node_modules/.bin/pnpm
2025-06-04T21:51:58.5586109Z 10.11.0
2025-06-04T21:51:58.5670850Z PNPM_HOME: /home/runner/setup-pnpm/node_modules/.bin
2025-06-04T21:51:58.5675911Z PATH: /home/runner/setup-pnpm/node_modules/.bin:/opt/hostedtoolcache/node/22.15.0/x64/bin:/snap/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
2025-06-04T21:51:58.5707123Z ##[group]Run echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
2025-06-04T21:51:58.5707586Z [36;1mecho "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT[0m
2025-06-04T21:51:58.5760672Z shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}
2025-06-04T21:51:58.5760993Z env:
2025-06-04T21:51:58.5761217Z   PNPM_HOME: /home/runner/setup-pnpm/node_modules/.bin
2025-06-04T21:51:58.5761533Z   REDIS_URL: redis://localhost:6379
2025-06-04T21:51:58.5761777Z   REDIS_KEY_PREFIX: test:
2025-06-04T21:51:58.5761980Z   VITEST_TIMEOUT: 30000
2025-06-04T21:51:58.5762184Z   SKIP_REDIS_TESTS: true
2025-06-04T21:51:58.5762378Z   SKIP_FHE_TESTS: true
2025-06-04T21:51:58.5762575Z   SKIP_BROWSER_COMPAT_TESTS: true
2025-06-04T21:51:58.5762794Z ##[endgroup]
2025-06-04T21:52:05.4506718Z ##[group]Run actions/cache@v4
2025-06-04T21:52:05.4506970Z with:
2025-06-04T21:52:05.4507216Z   path: /home/runner/setup-pnpm/node_modules/.bin/store/v10
2025-06-04T21:52:05.4507706Z   key: Linux-pnpm-store-d40f7695f5fc24af859f4094fb70e2049dae2fa1d650dd8184c1fce824f04d32
2025-06-04T21:52:05.4508149Z   restore-keys: Linux-pnpm-store-

2025-06-04T21:52:05.4508588Z   enableCrossOsArchive: false
2025-06-04T21:52:05.4508816Z   fail-on-cache-miss: false
2025-06-04T21:52:05.4509182Z   lookup-only: false
2025-06-04T21:52:05.4509375Z   save-always: false
2025-06-04T21:52:05.4509544Z env:
2025-06-04T21:52:05.4509758Z   PNPM_HOME: /home/runner/setup-pnpm/node_modules/.bin
2025-06-04T21:52:05.4510065Z   REDIS_URL: redis://localhost:6379
2025-06-04T21:52:05.4510300Z   REDIS_KEY_PREFIX: test:
2025-06-04T21:52:05.4510504Z   VITEST_TIMEOUT: 30000
2025-06-04T21:52:05.4510703Z   SKIP_REDIS_TESTS: true
2025-06-04T21:52:05.4510901Z   SKIP_FHE_TESTS: true
2025-06-04T21:52:05.4511143Z   SKIP_BROWSER_COMPAT_TESTS: true
2025-06-04T21:52:05.4511359Z ##[endgroup]
2025-06-04T21:52:05.6623299Z Cache hit for: Linux-pnpm-store-d40f7695f5fc24af859f4094fb70e2049dae2fa1d650dd8184c1fce824f04d32
2025-06-04T21:52:06.7234903Z Received 243269632 of 650543306 (37.4%), 231.3 MBs/sec
2025-06-04T21:52:07.7227433Z Received 511705088 of 650543306 (78.7%), 243.8 MBs/sec
2025-06-04T21:52:08.3006555Z Received 650543306 of 650543306 (100.0%), 240.5 MBs/sec
2025-06-04T21:52:08.3009370Z Cache Size: ~620 MB (650543306 B)
2025-06-04T21:52:08.3118512Z [command]/usr/bin/tar -xf /home/runner/work/_temp/7cbaf4a3-5185-4fe6-9591-713c9893b4e4/cache.tzst -P -C /home/runner/work/pixelated/pixelated --use-compress-program unzstd
2025-06-04T21:52:15.8107337Z Cache restored successfully
2025-06-04T21:52:15.9330638Z Cache restored from key: Linux-pnpm-store-b3446d8c68abd51a30aaf9ae3f7360bf88b6376b2942c22c2944d55a191e2319
2025-06-04T21:52:15.9446616Z ##[group]Run pnpm install --no-frozen-lockfile
2025-06-04T21:52:15.9446963Z [36;1mpnpm install --no-frozen-lockfile[0m
2025-06-04T21:52:15.9499338Z shell: /usr/bin/bash -e {0}
2025-06-04T21:52:15.9499584Z env:
2025-06-04T21:52:15.9499823Z   PNPM_HOME: /home/runner/setup-pnpm/node_modules/.bin
2025-06-04T21:52:15.9500152Z   REDIS_URL: redis://localhost:6379
2025-06-04T21:52:15.9500401Z   REDIS_KEY_PREFIX: test:
2025-06-04T21:52:15.9500613Z   VITEST_TIMEOUT: 30000
2025-06-04T21:52:15.9500826Z   SKIP_REDIS_TESTS: true
2025-06-04T21:52:15.9501037Z   SKIP_FHE_TESTS: true
2025-06-04T21:52:15.9501244Z   SKIP_BROWSER_COMPAT_TESTS: true
2025-06-04T21:52:15.9501470Z ##[endgroup]
2025-06-04T21:52:16.3263220Z Lockfile is up to date, resolution step is skipped
2025-06-04T21:52:16.4525546Z Progress: resolved 1, reused 0, downloaded 0, added 0
2025-06-04T21:52:16.7319818Z Packages: +2697
2025-06-04T21:52:16.7320354Z ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
2025-06-04T21:52:17.4612348Z Progress: resolved 2697, reused 994, downloaded 0, added 0
2025-06-04T21:52:18.4589872Z Progress: resolved 2697, reused 2541, downloaded 8, added 4
2025-06-04T21:52:19.4621990Z Progress: resolved 2697, reused 2541, downloaded 152, added 190
2025-06-04T21:52:20.4627416Z Progress: resolved 2697, reused 2541, downloaded 154, added 1072
2025-06-04T21:52:21.4626607Z Progress: resolved 2697, reused 2541, downloaded 154, added 1583
2025-06-04T21:52:22.4625385Z Progress: resolved 2697, reused 2541, downloaded 154, added 2265
2025-06-04T21:52:22.7608982Z Progress: resolved 2697, reused 2541, downloaded 154, added 2697, done
2025-06-04T21:52:27.1987796Z 
2025-06-04T21:52:27.1988235Z dependencies:
2025-06-04T21:52:27.1988712Z + @ai-sdk/openai 1.3.22
2025-06-04T21:52:27.1989292Z + @astrojs/node 9.2.2
2025-06-04T21:52:27.1989683Z + @astrojs/react 4.3.0
2025-06-04T21:52:27.1990149Z + @aws-sdk/client-dynamodb 3.817.0
2025-06-04T21:52:27.1990610Z + @aws-sdk/client-kms 3.812.0
2025-06-04T21:52:27.1991071Z + @aws-sdk/client-s3 3.817.0
2025-06-04T21:52:27.1991526Z + @aws-sdk/lib-dynamodb 3.817.0
2025-06-04T21:52:27.1991941Z + @aws-sdk/util-dynamodb 3.817.0
2025-06-04T21:52:27.1992328Z + @axe-core/react 4.10.1
2025-06-04T21:52:27.1992691Z + @clerk/astro 2.8.1
2025-06-04T21:52:27.1993100Z + @cloudflare/workers-types 4.20250529.0
2025-06-04T21:52:27.1993535Z + @codesandbox/sdk 2.0.0-rc.3
2025-06-04T21:52:27.1993908Z + @emotion/react 11.14.0
2025-06-04T21:52:27.1994251Z + @emotion/styled 11.14.0
2025-06-04T21:52:27.1995006Z + @eslint/eslintrc 3.3.1
2025-06-04T21:52:27.1995399Z + @eslint/js 9.27.0
2025-06-04T21:52:27.1995821Z + @google-cloud/storage 7.16.0
2025-06-04T21:52:27.1996272Z + @iconify-json/lucide 1.2.44
2025-06-04T21:52:27.1996724Z + @langchain/openai 0.5.11
2025-06-04T21:52:27.1997141Z + @libsql/client 0.15.7
2025-06-04T21:52:27.1997593Z + @mem0/vercel-ai-provider 1.0.5
2025-06-04T21:52:27.1998005Z + @mui/material 7.1.0
2025-06-04T21:52:27.1998434Z + @neondatabase/serverless 1.0.0
2025-06-04T21:52:27.1998933Z + @next/font 14.2.15
2025-06-04T21:52:27.1999661Z + @radix-ui/react-accordion 1.2.11
2025-06-04T21:52:27.2000219Z + @radix-ui/react-alert-dialog 1.1.14
2025-06-04T21:52:27.2000783Z + @radix-ui/react-checkbox 1.3.2
2025-06-04T21:52:27.2001306Z + @radix-ui/react-dialog 1.1.14
2025-06-04T21:52:27.2001765Z + @radix-ui/react-label 2.1.7
2025-06-04T21:52:27.2002241Z + @radix-ui/react-popover 1.1.14
2025-06-04T21:52:27.2002807Z + @radix-ui/react-select 2.2.5
2025-06-04T21:52:27.2003277Z + @radix-ui/react-slider 1.3.5
2025-06-04T21:52:27.2003732Z + @radix-ui/react-slot 1.2.3
2025-06-04T21:52:27.2004212Z + @radix-ui/react-switch 1.2.5
2025-06-04T21:52:27.2004670Z + @radix-ui/react-tabs 1.1.12
2025-06-04T21:52:27.2005147Z + @radix-ui/react-tooltip 1.2.7
2025-06-04T21:52:27.2005592Z + @react-three/fiber 9.1.2
2025-06-04T21:52:27.2005999Z + @sentry/astro 9.15.0
2025-06-04T21:52:27.2006376Z + @supabase/ssr 0.6.1
2025-06-04T21:52:27.2006797Z + @supabase/supabase-js 2.49.8
2025-06-04T21:52:27.2007547Z + @tensorflow/tfjs 4.22.0
2025-06-04T21:52:27.2008062Z + @tensorflow/tfjs-layers 4.22.0
2025-06-04T21:52:27.2008559Z + @testing-library/dom 10.4.0
2025-06-04T21:52:27.2009228Z + @types/ws 8.18.1
2025-06-04T21:52:27.2009745Z + @typescript-eslint/eslint-plugin 8.32.1
2025-06-04T21:52:27.2010254Z + @unocss/reset 0.63.6
2025-06-04T21:52:27.2010661Z + @upstash/redis 1.34.9
2025-06-04T21:52:27.2011073Z + @vercel/analytics 1.5.0
2025-06-04T21:52:27.2011562Z + @vercel/speed-insights 1.2.0
2025-06-04T21:52:27.2011985Z + ai 4.3.16
2025-06-04T21:52:27.2012353Z + astro-compress 2.3.8
2025-06-04T21:52:27.2012741Z + astro-icon 1.1.5
2025-06-04T21:52:27.2013101Z + astro-seo 0.8.4
2025-06-04T21:52:27.2013482Z + aws-sdk 2.1692.0
2025-06-04T21:52:27.2013840Z + axios 1.9.0
2025-06-04T21:52:27.2014161Z + buffer 6.0.3
2025-06-04T21:52:27.2014494Z + chart.js 4.4.9
2025-06-04T21:52:27.2014842Z + circomlib 2.0.5
2025-06-04T21:52:27.2015262Z + class-variance-authority 0.7.1
2025-06-04T21:52:27.2015659Z + clsx 2.1.1
2025-06-04T21:52:27.2016014Z + commander 13.1.0
2025-06-04T21:52:27.2016393Z + composio-core 0.5.39
2025-06-04T21:52:27.2016747Z + convex 1.24.1
2025-06-04T21:52:27.2017078Z + crypto-js 4.2.0
2025-06-04T21:52:27.2017468Z + date-fns 4.1.0
2025-06-04T21:52:27.2017930Z + eslint-plugin-import-x 4.12.2
2025-06-04T21:52:27.2018395Z + eslint-plugin-pnpm 0.3.1
2025-06-04T21:52:27.2018849Z + eslint-plugin-react 7.37.5
2025-06-04T21:52:27.2019565Z + eslint-plugin-react-hooks 5.2.0
2025-06-04T21:52:27.2020080Z + eslint-plugin-unicorn 59.0.1
2025-06-04T21:52:27.2020558Z + eslint-plugin-vue 10.1.0
2025-06-04T21:52:27.2021063Z + eslint-processor-vue-blocks 2.0.0
2025-06-04T21:52:27.2021516Z + fast-glob 3.3.3
2025-06-04T21:52:27.2021883Z + flexsearch 0.8.204
2025-06-04T21:52:27.2022261Z + framer-motion 12.12.1
2025-06-04T21:52:27.2022669Z + gray-matter 4.0.3
2025-06-04T21:52:27.2023007Z + ioredis 5.6.1
2025-06-04T21:52:27.2023329Z + jotai 2.12.4
2025-06-04T21:52:27.2023691Z + lucide-react 0.511.0
2025-06-04T21:52:27.2024072Z + mem0ai 2.1.27
2025-06-04T21:52:27.2024407Z + nanoid 5.1.5
2025-06-04T21:52:27.2024767Z + newrelic 12.20.0
2025-06-04T21:52:27.2025142Z + node-cron 3.0.3
2025-06-04T21:52:27.2025509Z + node-seal 5.1.6
2025-06-04T21:52:27.2025865Z + nprogress 0.2.0
2025-06-04T21:52:27.2026209Z + openai 4.103.0
2025-06-04T21:52:27.2026557Z + pdfkit 0.17.1
2025-06-04T21:52:27.2026889Z + pg 8.16.0
2025-06-04T21:52:27.2027191Z + postgres 3.4.7
2025-06-04T21:52:27.2027526Z + preact 10.26.6
2025-06-04T21:52:27.2027865Z + prismjs 1.30.0
2025-06-04T21:52:27.2028266Z + promise-polyfill 8.3.0
2025-06-04T21:52:27.2028941Z + react 19.1.0
2025-06-04T21:52:27.2029527Z + react-chartjs-2 5.3.0
2025-06-04T21:52:27.2029947Z + react-dom 19.1.0
2025-06-04T21:52:27.2030334Z + react-hook-form 7.56.4
2025-06-04T21:52:27.2030761Z + react-hot-toast 2.5.2
2025-06-04T21:52:27.2031174Z + react-markdown 10.1.0
2025-06-04T21:52:27.2031590Z + react-router-dom 7.6.0
2025-06-04T21:52:27.2032078Z + react-syntax-highlighter 15.6.1
2025-06-04T21:52:27.2032551Z + recharts 2.15.3
2025-06-04T21:52:27.2032883Z + redis 5.1.0
2025-06-04T21:52:27.2033231Z + rehype-sanitize 6.0.0
2025-06-04T21:52:27.2033629Z + rehype-stringify 10.0.1
2025-06-04T21:52:27.2034004Z + remark 15.0.1
2025-06-04T21:52:27.2034335Z + remark-gfm 4.0.1
2025-06-04T21:52:27.2034687Z + remark-parse 11.0.0
2025-06-04T21:52:27.2035051Z + remark-rehype 11.1.2
2025-06-04T21:52:27.2035390Z + resend 4.5.1
2025-06-04T21:52:27.2035741Z + sanitize-html 2.17.0
2025-06-04T21:52:27.2036125Z + simple-git 3.27.0
2025-06-04T21:52:27.2036457Z + snarkjs 0.7.5
2025-06-04T21:52:27.2036836Z + sonner 2.0.3
2025-06-04T21:52:27.2037185Z + tailwind-merge 3.3.0
2025-06-04T21:52:27.2037556Z + task-master-ai 0.16.1
2025-06-04T21:52:27.2037876Z + three 0.176.0
2025-06-04T21:52:27.2038206Z + three-stdlib 2.36.0
2025-06-04T21:52:27.2038539Z + twilio 5.6.1
2025-06-04T21:52:27.2038873Z + unstorage 1.16.0
2025-06-04T21:52:27.2039391Z + uuid 11.1.0
2025-06-04T21:52:27.2039706Z + web-push 3.6.7
2025-06-04T21:52:27.2040063Z + whatwg-fetch 3.6.20
2025-06-04T21:52:27.2040626Z + ws 8.18.2
2025-06-04T21:52:27.2040928Z + zod 3.25.32
2025-06-04T21:52:27.2041300Z + zod-to-json-schema 3.24.5
2025-06-04T21:52:27.2041712Z + zustand 5.0.5
2025-06-04T21:52:27.2041902Z 
2025-06-04T21:52:27.2042042Z devDependencies:
2025-06-04T21:52:27.2042423Z + @antfu/eslint-config 4.13.2
2025-06-04T21:52:27.2042867Z + @ascorbic/feed-loader 1.0.4
2025-06-04T21:52:27.2043293Z + @astrojs/check 0.9.4
2025-06-04T21:52:27.2043681Z + @astrojs/cloudflare 12.5.3
2025-06-04T21:52:27.2044272Z + @astrojs/language-server 2.15.4
2025-06-04T21:52:27.2044827Z + @astrojs/markdown-remark 6.3.2
2025-06-04T21:52:27.2045283Z + @astrojs/mdx 4.3.0
2025-06-04T21:52:27.2045669Z + @astrojs/rss 4.0.11
2025-06-04T21:52:27.2046078Z + @astrojs/sitemap 3.4.0
2025-06-04T21:52:27.2046516Z + @astrojs/ts-plugin 1.10.4
2025-06-04T21:52:27.2046957Z + @astrojs/vercel 8.1.4
2025-06-04T21:52:27.2047414Z + @capacitor/preferences 7.0.1
2025-06-04T21:52:27.2048066Z + @expressive-code/plugin-collapsible-sections 0.41.2
2025-06-04T21:52:27.2048786Z + @expressive-code/plugin-line-numbers 0.41.2
2025-06-04T21:52:27.2049534Z + @flydotio/dockerfile 0.7.10
2025-06-04T21:52:27.2049985Z + @fontsource/dm-mono 5.2.5
2025-06-04T21:52:27.2050424Z + @fontsource/inter 5.2.5
2025-06-04T21:52:27.2050922Z + @fontsource/roboto-condensed 5.2.5
2025-06-04T21:52:27.2051395Z + @iconify/json 2.2.342
2025-06-04T21:52:27.2051871Z + @microsoft/eslint-formatter-sarif 3.1.0
2025-06-04T21:52:27.2052374Z + @playwright/test 1.52.0
2025-06-04T21:52:27.2052760Z + @shadcn/ui 0.0.4
2025-06-04T21:52:27.2053174Z + @testing-library/react 16.3.0
2025-06-04T21:52:27.2053661Z + @testing-library/user-event 14.6.1
2025-06-04T21:52:27.2054106Z + @trunkio/launcher 1.3.4
2025-06-04T21:52:27.2054494Z + @types/archiver 6.0.3
2025-06-04T21:52:27.2054860Z + @types/cheerio 0.22.35
2025-06-04T21:52:27.2055224Z + @types/k6 1.0.2
2025-06-04T21:52:27.2055558Z + @types/mdast 4.0.4
2025-06-04T21:52:27.2055912Z + @types/node 22.15.24
2025-06-04T21:52:27.2056280Z + @types/node-fetch 2.6.12
2025-06-04T21:52:27.2056679Z + @types/nprogress 0.2.3
2025-06-04T21:52:27.2057048Z + @types/p5 1.7.6
2025-06-04T21:52:27.2057408Z + @types/papaparse 5.3.16
2025-06-04T21:52:27.2057780Z + @types/pg 8.15.2
2025-06-04T21:52:27.2058109Z + @types/react 19.1.6
2025-06-04T21:52:27.2058456Z + @types/react-dom 19.1.5
2025-06-04T21:52:27.2058836Z + @types/sanitize-html 2.16.0
2025-06-04T21:52:27.2059395Z + @types/three 0.175.0
2025-06-04T21:52:27.2059730Z + @types/uuid 10.0.0
2025-06-04T21:52:27.2060060Z + @types/web-push 3.6.4
2025-06-04T21:52:27.2060713Z + @typescript-eslint/parser 8.32.1
2025-06-04T21:52:27.2061137Z + @unocss/astro 66.1.3
2025-06-04T21:52:27.2061480Z + @unocss/core 66.1.2
2025-06-04T21:52:27.2061894Z + @unocss/preset-attributify 66.1.2
2025-06-04T21:52:27.2062348Z + @unocss/preset-icons 66.1.2
2025-06-04T21:52:27.2062780Z + @unocss/preset-uno 66.1.2
2025-06-04T21:52:27.2063255Z + @unocss/preset-web-fonts 66.1.2
2025-06-04T21:52:27.2063765Z + @unocss/transformer-directives 66.1.2
2025-06-04T21:52:27.2064347Z + @unocss/transformer-variant-group 66.1.2
2025-06-04T21:52:27.2064827Z + @unocss/vite 66.1.3
2025-06-04T21:52:27.2065204Z + @vitest/coverage-v8 3.1.4
2025-06-04T21:52:27.2065592Z + @vitest/ui 3.1.4
2025-06-04T21:52:27.2065967Z + @vue/runtime-core 3.5.16
2025-06-04T21:52:27.2066456Z + @webcomponents/custom-elements 1.6.0
2025-06-04T21:52:27.2066899Z + archiver 7.0.1
2025-06-04T21:52:27.2067213Z + astro 5.8.0
2025-06-04T21:52:27.2067649Z + astro-expressive-code 0.41.2
2025-06-04T21:52:27.2068144Z + astro-loader-github-prs 1.2.1
2025-06-04T21:52:27.2068700Z + astro-loader-github-releases 2.0.1
2025-06-04T21:52:27.2069377Z + astro-robots-txt 1.0.0
2025-06-04T21:52:27.2069775Z + astro-vitesse 0.5.2
2025-06-04T21:52:27.2070147Z + autoprefixer 10.4.21
2025-06-04T21:52:27.2070505Z + axe-core 4.10.3
2025-06-04T21:52:27.2070816Z + braces 3.0.3
2025-06-04T21:52:27.2071193Z + chalk 5.4.1
2025-06-04T21:52:27.2071489Z + chokidar 4.0.3
2025-06-04T21:52:27.2071817Z + cross-env 7.0.3
2025-06-04T21:52:27.2072324Z + dayjs 1.11.13
2025-06-04T21:52:27.2072640Z + del-cli 6.0.0
2025-06-04T21:52:27.2072944Z + dotenv 16.5.0
2025-06-04T21:52:27.2073253Z + esbuild 0.25.4
2025-06-04T21:52:27.2073557Z + eslint 9.27.0
2025-06-04T21:52:27.2073966Z + eslint-config-prettier 9.1.0
2025-06-04T21:52:27.2074417Z + eslint-plugin-astro 1.3.1
2025-06-04T21:52:27.2074925Z + eslint-plugin-jsx-a11y 6.10.2
2025-06-04T21:52:27.2075421Z + eslint-plugin-oxlint 0.16.11
2025-06-04T21:52:27.2075947Z + eslint-plugin-vitest-globals 1.5.0
2025-06-04T21:52:27.2076382Z + espree 10.3.0
2025-06-04T21:52:27.2076709Z + fsevents 2.3.3
2025-06-04T21:52:27.2077016Z + glob 10.4.5
2025-06-04T21:52:27.2077344Z + glob-parent 6.0.2
2025-06-04T21:52:27.2077657Z + globals 16.1.0
2025-06-04T21:52:27.2077957Z + globby 14.1.0
2025-06-04T21:52:27.2078281Z + hastscript 9.0.1
2025-06-04T21:52:27.2078630Z + html-entities 2.6.0
2025-06-04T21:52:27.2079383Z + intersection-observer 0.12.2
2025-06-04T21:52:27.2079819Z + js-base64 3.7.7
2025-06-04T21:52:27.2080139Z + jsdom 24.1.3
2025-06-04T21:52:27.2080490Z + lint-staged 15.5.2
2025-06-04T21:52:27.2080901Z + madge 8.0.0
2025-06-04T21:52:27.2081277Z + mdast-util-directive 3.1.0
2025-06-04T21:52:27.2081794Z + mdast-util-to-string 4.0.0
2025-06-04T21:52:27.2082222Z + medium-zoom 1.1.0
2025-06-04T21:52:27.2082555Z + mermaid 11.6.0
2025-06-04T21:52:27.2082901Z + micromatch 4.0.8
2025-06-04T21:52:27.2083223Z + oxlint 0.16.11
2025-06-04T21:52:27.2083529Z + p5 1.11.7
2025-06-04T21:52:27.2083840Z + papaparse 5.5.3
2025-06-04T21:52:27.2084193Z + path-browserify 1.0.1
2025-06-04T21:52:27.2084585Z + path-to-regexp 8.2.0
2025-06-04T21:52:27.2084949Z + picomatch 4.0.2
2025-06-04T21:52:27.2085297Z + playwright 1.52.0
2025-06-04T21:52:27.2085647Z + postcss 8.5.3
2025-06-04T21:52:27.2085872Z + postcss-import 16.1.0
2025-06-04T21:52:27.2086143Z + postinstall-postinstall 2.1.0
2025-06-04T21:52:27.2086371Z + prettier 3.5.3
2025-06-04T21:52:27.2086604Z + prettier-plugin-astro 0.14.1
2025-06-04T21:52:27.2086842Z + reading-time 1.5.0
2025-06-04T21:52:27.2087095Z + rehype-autolink-headings 7.1.0
2025-06-04T21:52:27.2087338Z + rehype-callouts 2.1.0
2025-06-04T21:52:27.2087633Z + rehype-external-links 3.0.0
2025-06-04T21:52:27.2087895Z + rehype-katex 7.0.1
2025-06-04T21:52:27.2088106Z + remark-code-import 1.2.0
2025-06-04T21:52:27.2088337Z + remark-directive 3.0.1
2025-06-04T21:52:27.2088555Z + remark-imgattr 1.0.5
2025-06-04T21:52:27.2088761Z + remark-math 6.0.0
2025-06-04T21:52:27.2088949Z + remark-toc 9.0.0
2025-06-04T21:52:27.2089523Z + resize-observer-polyfill 1.5.1
2025-06-04T21:52:27.2090121Z + satori 0.12.2
2025-06-04T21:52:27.2090450Z + satori-html 0.3.2
2025-06-04T21:52:27.2090775Z + scheduler 0.26.0
2025-06-04T21:52:27.2091072Z + sharp 0.33.5
2025-06-04T21:52:27.2091347Z + shiki 3.4.2
2025-06-04T21:52:27.2091661Z + stream-browserify 3.0.0
2025-06-04T21:52:27.2092013Z + supabase 2.23.4
2025-06-04T21:52:27.2092321Z + swiper 11.2.8
2025-06-04T21:52:27.2092599Z + terser 5.39.2
2025-06-04T21:52:27.2092867Z + ts-node 10.9.2
2025-06-04T21:52:27.2093181Z + tsconfig 7.0.0
2025-06-04T21:52:27.2093554Z + tsconfig-paths 4.2.0
2025-06-04T21:52:27.2093894Z + tsx 4.19.4
2025-06-04T21:52:27.2094216Z + typescript 5.8.3
2025-06-04T21:52:27.2094485Z + unocss 66.1.3
2025-06-04T21:52:27.2094836Z + url-polyfill 1.1.13
2025-06-04T21:52:27.2095185Z + util 0.12.5
2025-06-04T21:52:27.2095482Z + vfile 6.0.3
2025-06-04T21:52:27.2095744Z + vite 6.3.5
2025-06-04T21:52:27.2096089Z + vite-tsconfig-paths 5.1.4
2025-06-04T21:52:27.2096485Z + vitest 3.1.4
2025-06-04T21:52:27.2096790Z + vue 3.5.16
2025-06-04T21:52:27.2097096Z + wait-on 7.2.0
2025-06-04T21:52:27.2097450Z + web-animations-js 2.3.2
2025-06-04T21:52:27.2097841Z + wrangler 4.17.0
2025-06-04T21:52:27.2098040Z 
2025-06-04T21:52:27.6373385Z Done in 11.6s using pnpm v10.11.0
2025-06-04T21:52:27.6819493Z ##[group]Run pnpm lint
2025-06-04T21:52:27.6819756Z [36;1mpnpm lint[0m
2025-06-04T21:52:27.6870578Z shell: /usr/bin/bash -e {0}
2025-06-04T21:52:27.6870813Z env:
2025-06-04T21:52:27.6871048Z   PNPM_HOME: /home/runner/setup-pnpm/node_modules/.bin
2025-06-04T21:52:27.6871375Z   REDIS_URL: redis://localhost:6379
2025-06-04T21:52:27.6871623Z   REDIS_KEY_PREFIX: test:
2025-06-04T21:52:27.6871858Z   VITEST_TIMEOUT: 30000
2025-06-04T21:52:27.6872057Z   SKIP_REDIS_TESTS: true
2025-06-04T21:52:27.6872258Z   SKIP_FHE_TESTS: true
2025-06-04T21:52:27.6872456Z   SKIP_BROWSER_COMPAT_TESTS: true
2025-06-04T21:52:27.6872723Z ##[endgroup]
2025-06-04T21:52:27.9876449Z 
2025-06-04T21:52:27.9877163Z > pixelated@0.0.1 lint /home/runner/work/pixelated/pixelated
2025-06-04T21:52:27.9878361Z > pnpx oxlint && prettier --write  "**/*.{js,jsx,ts,tsx,md,mdx,astro}" && eslint . --ext .js,.jsx,.ts,.tsx,.astro
2025-06-04T21:52:27.9878970Z 
2025-06-04T21:52:28.4283762Z Progress: resolved 1, reused 0, downloaded 0, added 0
2025-06-04T21:52:28.5341205Z Packages: +3
2025-06-04T21:52:28.5341543Z +++
2025-06-04T21:52:28.7620536Z Progress: resolved 9, reused 0, downloaded 3, added 3, done
2025-06-04T21:52:28.8499510Z 
2025-06-04T21:52:28.8501380Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8502693Z    ╭─[[38;2;92;157;255;1msrc/components/ui/__tests__/Button.astro.test.ts[0m:7:14]
2025-06-04T21:52:28.8503534Z  [2m6[0m │ async function renderAstroComponent(
2025-06-04T21:52:28.8504208Z  [2m7[0m │   Component: any,
2025-06-04T21:52:28.8504730Z    · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:28.8505199Z  [2m8[0m │   props = {},
2025-06-04T21:52:28.8505571Z    ╰────
2025-06-04T21:52:28.8506698Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8507378Z 
2025-06-04T21:52:28.8508396Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;[0m
2025-06-04T21:52:28.8509952Z      ╭─[[38;2;92;157;255;1msrc/components/auth/RegisterForm.tsx[0m:136:69]
2025-06-04T21:52:28.8510610Z  [2m135[0m │         <p>
2025-06-04T21:52:28.8511440Z  [2m136[0m │           Please check your email to verify your account. If you don't see it
2025-06-04T21:52:28.8512453Z      · [38;2;246;87;248m                                                                    ─[0m
2025-06-04T21:52:28.8513294Z  [2m137[0m │           within a few minutes, check your spam folder.
2025-06-04T21:52:28.8513882Z      ╰────
2025-06-04T21:52:28.8514065Z 
2025-06-04T21:52:28.8514975Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8516708Z     ╭─[[38;2;92;157;255;1msrc/components/auth/__tests__/RegisterForm.test.tsx[0m:17:18]
2025-06-04T21:52:28.8517522Z  [2m16[0m │     vi.clearAllMocks()
2025-06-04T21:52:28.8518201Z  [2m17[0m │     ;(useAuth as any).mockImplementation(() => ({
2025-06-04T21:52:28.8519615Z     · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:28.8520184Z  [2m18[0m │       signUp: mockSignUp,
2025-06-04T21:52:28.8520616Z     ╰────
2025-06-04T21:52:28.8521684Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8522346Z 
2025-06-04T21:52:28.8523163Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8524272Z     ╭─[[38;2;92;157;255;1mtests/security/ai-endpoint-scanner.ts[0m:36:13]
2025-06-04T21:52:28.8524882Z  [2m35[0m │   name: string
2025-06-04T21:52:28.8525305Z  [2m36[0m │   payload?: any
2025-06-04T21:52:28.8525797Z     · [38;2;246;87;248m            ───[0m
2025-06-04T21:52:28.8526802Z  [2m37[0m │   headers?: Record<string, string>
2025-06-04T21:52:28.8527301Z     ╰────
2025-06-04T21:52:28.8528473Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8530305Z 
2025-06-04T21:52:28.8531371Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;[0m
2025-06-04T21:52:28.8532638Z     ╭─[[38;2;92;157;255;1msrc/components/ui/OfflineIndicator.tsx[0m:79:16]
2025-06-04T21:52:28.8533621Z  [2m78[0m │           <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100">
2025-06-04T21:52:28.8534369Z  [2m79[0m │             You're Offline
2025-06-04T21:52:28.8534987Z     · [38;2;246;87;248m               ─[0m
2025-06-04T21:52:28.8535525Z  [2m80[0m │           </h3>
2025-06-04T21:52:28.8535957Z     ╰────
2025-06-04T21:52:28.8536146Z 
2025-06-04T21:52:28.8537071Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-empty-object-type): Do not use an empty interface declaration.[0m
2025-06-04T21:52:28.8538256Z    ╭─[[38;2;92;157;255;1msrc/components/ui/accordion/accordion.tsx[0m:7:74]
2025-06-04T21:52:28.8538980Z  [2m6[0m │ export interface AccordionProps
2025-06-04T21:52:28.8540095Z  [2m7[0m │   extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> {}
2025-06-04T21:52:28.8541159Z    · [38;2;246;87;248m                                                                         ──[0m
2025-06-04T21:52:28.8541736Z  [2m8[0m │ 
2025-06-04T21:52:28.8542070Z    ╰────
2025-06-04T21:52:28.8543298Z [38;2;106;159;181m  help: [0mTo avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.
2025-06-04T21:52:28.8544077Z 
2025-06-04T21:52:28.8545013Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-empty-object-type): Do not use an empty interface declaration.[0m
2025-06-04T21:52:28.8546254Z     ╭─[[38;2;92;157;255;1msrc/components/ui/accordion/accordion.tsx[0m:10:74]
2025-06-04T21:52:28.8547058Z  [2m 9[0m │ export interface AccordionItemProps
2025-06-04T21:52:28.8548014Z  [2m10[0m │   extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> {}
2025-06-04T21:52:28.8549169Z     · [38;2;246;87;248m                                                                         ──[0m
2025-06-04T21:52:28.8549715Z  [2m11[0m │ 
2025-06-04T21:52:28.8550036Z     ╰────
2025-06-04T21:52:28.8551192Z [38;2;106;159;181m  help: [0mTo avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.
2025-06-04T21:52:28.8551911Z 
2025-06-04T21:52:28.8552720Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-empty-object-type): Do not use an empty interface declaration.[0m
2025-06-04T21:52:28.8554084Z     ╭─[[38;2;92;157;255;1msrc/components/ui/accordion/accordion.tsx[0m:13:77]
2025-06-04T21:52:28.8554849Z  [2m12[0m │ export interface AccordionTriggerProps
2025-06-04T21:52:28.8555820Z  [2m13[0m │   extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> {}
2025-06-04T21:52:28.8556864Z     · [38;2;246;87;248m                                                                            ──[0m
2025-06-04T21:52:28.8557401Z  [2m14[0m │ 
2025-06-04T21:52:28.8557721Z     ╰────
2025-06-04T21:52:28.8558855Z [38;2;106;159;181m  help: [0mTo avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.
2025-06-04T21:52:28.8589993Z 
2025-06-04T21:52:28.8590999Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-empty-object-type): Do not use an empty interface declaration.[0m
2025-06-04T21:52:28.8592234Z     ╭─[[38;2;92;157;255;1msrc/components/ui/accordion/accordion.tsx[0m:16:77]
2025-06-04T21:52:28.8593058Z  [2m15[0m │ export interface AccordionContentProps
2025-06-04T21:52:28.8594028Z  [2m16[0m │   extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> {}
2025-06-04T21:52:28.8595302Z     · [38;2;246;87;248m                                                                            ──[0m
2025-06-04T21:52:28.8595853Z  [2m17[0m │ 
2025-06-04T21:52:28.8596182Z     ╰────
2025-06-04T21:52:28.8597318Z [38;2;106;159;181m  help: [0mTo avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.
2025-06-04T21:52:28.8598031Z 
2025-06-04T21:52:28.8598848Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8600231Z     ╭─[[38;2;92;157;255;1msrc/components/documentation/ExportToEHR.tsx[0m:68:64]
2025-06-04T21:52:28.8601015Z  [2m67[0m │             value={exportFormat}
2025-06-04T21:52:28.8601856Z  [2m68[0m │             onChange={(e) => setExportFormat(e.target.value as any)}
2025-06-04T21:52:28.8602810Z     · [38;2;246;87;248m                                                               ───[0m
2025-06-04T21:52:28.8603554Z  [2m69[0m │             disabled={isExporting}
2025-06-04T21:52:28.8604028Z     ╰────
2025-06-04T21:52:28.8605119Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8605776Z 
2025-06-04T21:52:28.8606784Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:28.8608048Z     ╭─[[38;2;92;157;255;1msrc/components/SearchDemo.tsx[0m:43:43]
2025-06-04T21:52:28.8608972Z  [2m42[0m │         <div className="mt-4 text-sm text-gray-500 dark:text-gray-400">
2025-06-04T21:52:28.8610082Z  [2m43[0m │           Found {resultCount} results for "{lastQuery}"
2025-06-04T21:52:28.8610878Z     · [38;2;246;87;248m                                          ─[0m
2025-06-04T21:52:28.8611461Z  [2m44[0m │         </div>
2025-06-04T21:52:28.8611860Z     ╰────
2025-06-04T21:52:28.8612035Z 
2025-06-04T21:52:28.8613093Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:28.8614284Z     ╭─[[38;2;92;157;255;1msrc/components/SearchDemo.tsx[0m:43:55]
2025-06-04T21:52:28.8615147Z  [2m42[0m │         <div className="mt-4 text-sm text-gray-500 dark:text-gray-400">
2025-06-04T21:52:28.8616033Z  [2m43[0m │           Found {resultCount} results for "{lastQuery}"
2025-06-04T21:52:28.8616795Z     · [38;2;246;87;248m                                                      ─[0m
2025-06-04T21:52:28.8617326Z  [2m44[0m │         </div>
2025-06-04T21:52:28.8617704Z     ╰────
2025-06-04T21:52:28.8617857Z 
2025-06-04T21:52:28.8618582Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.8650258Z      ╭─[[38;2;92;157;255;1msrc/components/EnhancedTodo.tsx[0m:378:14]
2025-06-04T21:52:28.8650814Z  [2m377[0m │ 
2025-06-04T21:52:28.8651261Z  [2m378[0m │       <style jsx>{`
2025-06-04T21:52:28.8651833Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:28.8652379Z  [2m379[0m │         .todo-component {
2025-06-04T21:52:28.8652840Z      ╰────
2025-06-04T21:52:28.8653389Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.8653732Z 
2025-06-04T21:52:28.8654760Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:28.8656063Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/SimulatorDashboard.tsx[0m:145:72]
2025-06-04T21:52:28.8657128Z  [2m144[0m │             You can track your progress through anonymized metrics that are only
2025-06-04T21:52:28.8658239Z  [2m145[0m │             stored in your browser. View your progress by clicking the "Progress
2025-06-04T21:52:28.8659490Z      · [38;2;246;87;248m                                                                       ─[0m
2025-06-04T21:52:28.8660456Z  [2m146[0m │             Metrics" button above.
2025-06-04T21:52:28.8660992Z      ╰────
2025-06-04T21:52:28.8661167Z 
2025-06-04T21:52:28.8662195Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:28.8663523Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/SimulatorDashboard.tsx[0m:146:20]
2025-06-04T21:52:28.8664594Z  [2m145[0m │             stored in your browser. View your progress by clicking the "Progress
2025-06-04T21:52:28.8665362Z  [2m146[0m │             Metrics" button above.
2025-06-04T21:52:28.8665949Z      · [38;2;246;87;248m                   ─[0m
2025-06-04T21:52:28.8666445Z  [2m147[0m │           </div>
2025-06-04T21:52:28.8666858Z      ╰────
2025-06-04T21:52:28.8667014Z 
2025-06-04T21:52:28.8667832Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8669202Z      ╭─[[38;2;92;157;255;1msrc/components/MentalHealthChatDemoReact.tsx[0m:130:29]
2025-06-04T21:52:28.8669980Z  [2m129[0m │             socialIsolation: 0,
2025-06-04T21:52:28.8670596Z  [2m130[0m │             ...(analysis as any).scores,
2025-06-04T21:52:28.8671242Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:28.8671728Z  [2m131[0m │           },
2025-06-04T21:52:28.8672092Z      ╰────
2025-06-04T21:52:28.8673178Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8673839Z 
2025-06-04T21:52:28.8674646Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8676166Z     ╭─[[38;2;92;157;255;1mtests/security/ai-web-vulnerability-scanner.ts[0m:51:10]
2025-06-04T21:52:28.8677190Z  [2m50[0m │   headers: Record<string, string>
2025-06-04T21:52:28.8677894Z  [2m51[0m │   data?: any
2025-06-04T21:52:28.8678692Z     · [38;2;246;87;248m         ───[0m
2025-06-04T21:52:28.8709637Z  [2m52[0m │ }
2025-06-04T21:52:28.8710120Z     ╰────
2025-06-04T21:52:28.8711472Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8712165Z 
2025-06-04T21:52:28.8713359Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Catch parameter 'error' is caught but never used. Unused caught errors should start with a '_'.[0m
2025-06-04T21:52:28.8714859Z      ╭─[[38;2;92;157;255;1mtests/security/ai-web-vulnerability-scanner.ts[0m:514:16]
2025-06-04T21:52:28.8715916Z  [2m513[0m │         }
2025-06-04T21:52:28.8716598Z  [2m514[0m │       } catch (error) {
2025-06-04T21:52:28.8717672Z      · [38;2;246;87;248m               ──┬──[0m
2025-06-04T21:52:28.8718701Z      ·                  [38;2;246;87;248m╰── [38;2;246;87;248m'error' is declared here[0m[0m
2025-06-04T21:52:28.8719768Z  [2m515[0m │         // Ignore test errors
2025-06-04T21:52:28.8720490Z      ╰────
2025-06-04T21:52:28.8721231Z [38;2;106;159;181m  help: [0mConsider handling this error.
2025-06-04T21:52:28.8721630Z 
2025-06-04T21:52:28.8737109Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8738291Z     ╭─[[38;2;92;157;255;1msrc/hooks/useMemory.ts[0m:24:50]
2025-06-04T21:52:28.8738886Z  [2m23[0m │   // Convenience methods
2025-06-04T21:52:28.8770140Z  [2m24[0m │   addUserPreference: (preference: string, value: any) => Promise<void>;
2025-06-04T21:52:28.8771167Z     · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:28.8772255Z  [2m25[0m │   addConversationContext: (context: string, sessionId?: string) => Promise<void>;
2025-06-04T21:52:28.8773009Z     ╰────
2025-06-04T21:52:28.8774299Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8774990Z 
2025-06-04T21:52:28.8775895Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8776950Z     ╭─[[38;2;92;157;255;1msrc/hooks/useMemory.ts[0m:34:35]
2025-06-04T21:52:28.8777570Z  [2m33[0m │   clearMemories: () => void;
2025-06-04T21:52:28.8778203Z  [2m34[0m │   getMemoryHistory: () => Promise<any[]>;
2025-06-04T21:52:28.8778902Z     · [38;2;246;87;248m                                  ───[0m
2025-06-04T21:52:28.8779599Z  [2m35[0m │ }
2025-06-04T21:52:28.8779936Z     ╰────
2025-06-04T21:52:28.8781011Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8781675Z 
2025-06-04T21:52:28.8782507Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8783526Z      ╭─[[38;2;92;157;255;1msrc/hooks/useMemory.ts[0m:144:75]
2025-06-04T21:52:28.8784019Z  [2m143[0m │ 
2025-06-04T21:52:28.8784947Z  [2m144[0m │   const addUserPreference = useCallback(async (preference: string, value: any): Promise<void> => {
2025-06-04T21:52:28.8786074Z      · [38;2;246;87;248m                                                                          ───[0m
2025-06-04T21:52:28.8787082Z  [2m145[0m │     await memoryManager.addUserPreference(userId, preference, value);
2025-06-04T21:52:28.8787797Z      ╰────
2025-06-04T21:52:28.8788881Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8789818Z 
2025-06-04T21:52:28.8790660Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8791774Z      ╭─[[38;2;92;157;255;1msrc/hooks/useMemory.ts[0m:183:58]
2025-06-04T21:52:28.8792384Z  [2m182[0m │ 
2025-06-04T21:52:28.8793142Z  [2m183[0m │   const getMemoryHistory = useCallback(async (): Promise<any[]> => {
2025-06-04T21:52:28.8794063Z      · [38;2;246;87;248m                                                         ───[0m
2025-06-04T21:52:28.8794611Z  [2m184[0m │     try {
2025-06-04T21:52:28.8795002Z      ╰────
2025-06-04T21:52:28.8796161Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8796829Z 
2025-06-04T21:52:28.8797676Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8798685Z      ╭─[[38;2;92;157;255;1msrc/hooks/useMemory.ts[0m:267:64]
2025-06-04T21:52:28.8830026Z  [2m266[0m │ 
2025-06-04T21:52:28.8830803Z  [2m267[0m │   const setPreference = useCallback(async (key: string, value: any) => {
2025-06-04T21:52:28.8831782Z      · [38;2;246;87;248m                                                               ───[0m
2025-06-04T21:52:28.8832555Z  [2m268[0m │     const existingPref = memory.memories.find(m => 
2025-06-04T21:52:28.8833101Z      ╰────
2025-06-04T21:52:28.8834176Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8834833Z 
2025-06-04T21:52:28.8835661Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8836673Z      ╭─[[38;2;92;157;255;1msrc/hooks/useMemory.ts[0m:279:52]
2025-06-04T21:52:28.8837177Z  [2m278[0m │ 
2025-06-04T21:52:28.8837808Z  [2m279[0m │   const getPreference = useCallback((key: string): any => {
2025-06-04T21:52:28.8838645Z      · [38;2;246;87;248m                                                   ───[0m
2025-06-04T21:52:28.8839570Z  [2m280[0m │     const prefMemory = memory.memories.find(m => 
2025-06-04T21:52:28.8840318Z      ╰────
2025-06-04T21:52:28.8841411Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8842069Z 
2025-06-04T21:52:28.8842892Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8844172Z     ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:10:31]
2025-06-04T21:52:28.8845047Z  [2m 9[0m │ // Create our own OrbitControls component
2025-06-04T21:52:28.8845702Z  [2m10[0m │ const OrbitControls = (props: any) => {
2025-06-04T21:52:28.8846374Z     · [38;2;246;87;248m                              ───[0m
2025-06-04T21:52:28.8846998Z  [2m11[0m │   const { camera, gl } = useThree()
2025-06-04T21:52:28.8847555Z     ╰────
2025-06-04T21:52:28.8848722Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8849623Z 
2025-06-04T21:52:28.8850537Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8851910Z     ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:12:30]
2025-06-04T21:52:28.8852849Z  [2m11[0m │   const { camera, gl } = useThree()
2025-06-04T21:52:28.8853476Z  [2m12[0m │   const controlsRef = useRef<any>()
2025-06-04T21:52:28.8854117Z     · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:28.8854587Z  [2m13[0m │ 
2025-06-04T21:52:28.8854906Z     ╰────
2025-06-04T21:52:28.8855963Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8856634Z 
2025-06-04T21:52:28.8857446Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.8858771Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:342:32]
2025-06-04T21:52:28.8889919Z  [2m341[0m │ }) => {
2025-06-04T21:52:28.8890499Z  [2m342[0m │   const connectionRef = useRef<any>(null)
2025-06-04T21:52:28.8891202Z      · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:28.8891679Z  [2m343[0m │ 
2025-06-04T21:52:28.8892008Z      ╰────
2025-06-04T21:52:28.8893084Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.8893730Z 
2025-06-04T21:52:28.8894490Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.8895721Z     ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:65:13]
2025-06-04T21:52:28.8896693Z  [2m64[0m │   return (
2025-06-04T21:52:28.8897539Z  [2m65[0m │     <sprite position={position} scale={[fontSize * 10, fontSize * 5, 1]}>
2025-06-04T21:52:28.8898371Z     · [38;2;246;87;248m            ────────[0m
2025-06-04T21:52:28.8899423Z  [2m66[0m │       <spriteMaterial attach="material" args={[{ transparent: true }]}>
2025-06-04T21:52:28.8900123Z     ╰────
2025-06-04T21:52:28.8900701Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.8901059Z 
2025-06-04T21:52:28.8901832Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.8903101Z     ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:66:23]
2025-06-04T21:52:28.8904189Z  [2m65[0m │     <sprite position={position} scale={[fontSize * 10, fontSize * 5, 1]}>
2025-06-04T21:52:28.8905179Z  [2m66[0m │       <spriteMaterial attach="material" args={[{ transparent: true }]}>
2025-06-04T21:52:28.8905995Z     · [38;2;246;87;248m                      ──────[0m
2025-06-04T21:52:28.8906739Z  [2m67[0m │         <canvasTexture
2025-06-04T21:52:28.8907177Z     ╰────
2025-06-04T21:52:28.8907706Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.8908034Z 
2025-06-04T21:52:28.8908763Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.8910187Z     ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:66:41]
2025-06-04T21:52:28.8911252Z  [2m65[0m │     <sprite position={position} scale={[fontSize * 10, fontSize * 5, 1]}>
2025-06-04T21:52:28.8912226Z  [2m66[0m │       <spriteMaterial attach="material" args={[{ transparent: true }]}>
2025-06-04T21:52:28.8913057Z     · [38;2;246;87;248m                                        ────[0m
2025-06-04T21:52:28.8913636Z  [2m67[0m │         <canvasTexture
2025-06-04T21:52:28.8914069Z     ╰────
2025-06-04T21:52:28.8914587Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.8914913Z 
2025-06-04T21:52:28.8915645Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.8916888Z     ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:68:11]
2025-06-04T21:52:28.8917674Z  [2m67[0m │         <canvasTexture
2025-06-04T21:52:28.8918160Z  [2m68[0m │           attach="map"
2025-06-04T21:52:28.8918669Z     · [38;2;246;87;248m          ──────[0m
2025-06-04T21:52:28.8949805Z  [2m69[0m │           args={[createTextCanvas(String(children), color, anchorX)]}
2025-06-04T21:52:28.8950452Z     ╰────
2025-06-04T21:52:28.8951015Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.8951351Z 
2025-06-04T21:52:28.8952097Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.8953444Z     ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:69:11]
2025-06-04T21:52:28.8954318Z  [2m68[0m │           attach="map"
2025-06-04T21:52:28.8955104Z  [2m69[0m │           args={[createTextCanvas(String(children), color, anchorX)]}
2025-06-04T21:52:28.8955820Z     · [38;2;246;87;248m          ────[0m
2025-06-04T21:52:28.8956270Z  [2m70[0m │         />
2025-06-04T21:52:28.8956638Z     ╰────
2025-06-04T21:52:28.8957173Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.8957501Z 
2025-06-04T21:52:28.8958236Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.8959667Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:180:13]
2025-06-04T21:52:28.8960524Z  [2m179[0m │           <float32BufferAttribute
2025-06-04T21:52:28.8961164Z  [2m180[0m │             attach="attributes-position"
2025-06-04T21:52:28.8962018Z      · [38;2;246;87;248m            ──────[0m
2025-06-04T21:52:28.8962762Z  [2m181[0m │             args={[[-1.2, 0, 0, 1.2, 0, 0], 3]}
2025-06-04T21:52:28.8963320Z      ╰────
2025-06-04T21:52:28.8963897Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.8964232Z 
2025-06-04T21:52:28.8964997Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.8966244Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:181:13]
2025-06-04T21:52:28.8967159Z  [2m180[0m │             attach="attributes-position"
2025-06-04T21:52:28.8967891Z  [2m181[0m │             args={[[-1.2, 0, 0, 1.2, 0, 0], 3]}
2025-06-04T21:52:28.8968511Z      · [38;2;246;87;248m            ────[0m
2025-06-04T21:52:28.8968982Z  [2m182[0m │           />
2025-06-04T21:52:28.8969557Z      ╰────
2025-06-04T21:52:28.8970127Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.8970454Z 
2025-06-04T21:52:28.8971395Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.8972654Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:185:11]
2025-06-04T21:52:28.8973490Z  [2m184[0m │         <lineBasicMaterial
2025-06-04T21:52:28.8974084Z  [2m185[0m │           attach="material"
2025-06-04T21:52:28.8974699Z      · [38;2;246;87;248m          ──────[0m
2025-06-04T21:52:28.8975359Z  [2m186[0m │           args={[{ color: 'red', linewidth: 2 }]}
2025-06-04T21:52:28.8975921Z      ╰────
2025-06-04T21:52:28.8976467Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.8976805Z 
2025-06-04T21:52:28.8977595Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.8978947Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:186:11]
2025-06-04T21:52:28.9010248Z  [2m185[0m │           attach="material"
2025-06-04T21:52:28.9011003Z  [2m186[0m │           args={[{ color: 'red', linewidth: 2 }]}
2025-06-04T21:52:28.9011673Z      · [38;2;246;87;248m          ────[0m
2025-06-04T21:52:28.9012159Z  [2m187[0m │         />
2025-06-04T21:52:28.9012558Z      ╰────
2025-06-04T21:52:28.9013116Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9013463Z 
2025-06-04T21:52:28.9014217Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9015477Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:189:13]
2025-06-04T21:52:28.9016230Z  [2m188[0m │       </line>
2025-06-04T21:52:28.9016755Z  [2m189[0m │       <mesh position={[1.3, 0, 0]}>
2025-06-04T21:52:28.9017357Z      · [38;2;246;87;248m            ────────[0m
2025-06-04T21:52:28.9018224Z  [2m190[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9018722Z      ╰────
2025-06-04T21:52:28.9019451Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9019801Z 
2025-06-04T21:52:28.9020550Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9021783Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:190:25]
2025-06-04T21:52:28.9022633Z  [2m189[0m │       <mesh position={[1.3, 0, 0]}>
2025-06-04T21:52:28.9023287Z  [2m190[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9023939Z      · [38;2;246;87;248m                        ────[0m
2025-06-04T21:52:28.9024759Z  [2m191[0m │         <meshBasicMaterial attach="material" args={[{ color: 'red' }]} />
2025-06-04T21:52:28.9025377Z      ╰────
2025-06-04T21:52:28.9025960Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9026315Z 
2025-06-04T21:52:28.9027033Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9028486Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:191:28]
2025-06-04T21:52:28.9029664Z  [2m190[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9030552Z  [2m191[0m │         <meshBasicMaterial attach="material" args={[{ color: 'red' }]} />
2025-06-04T21:52:28.9031469Z      · [38;2;246;87;248m                           ──────[0m
2025-06-04T21:52:28.9032034Z  [2m192[0m │       </mesh>
2025-06-04T21:52:28.9032453Z      ╰────
2025-06-04T21:52:28.9033009Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9033343Z 
2025-06-04T21:52:28.9034085Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9035322Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:191:46]
2025-06-04T21:52:28.9036265Z  [2m190[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9037144Z  [2m191[0m │         <meshBasicMaterial attach="material" args={[{ color: 'red' }]} />
2025-06-04T21:52:28.9038095Z      · [38;2;246;87;248m                                             ────[0m
2025-06-04T21:52:28.9038698Z  [2m192[0m │       </mesh>
2025-06-04T21:52:28.9069444Z      ╰────
2025-06-04T21:52:28.9070066Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9070409Z 
2025-06-04T21:52:28.9071164Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9072468Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:201:13]
2025-06-04T21:52:28.9073408Z  [2m200[0m │           <float32BufferAttribute
2025-06-04T21:52:28.9074075Z  [2m201[0m │             attach="attributes-position"
2025-06-04T21:52:28.9074724Z      · [38;2;246;87;248m            ──────[0m
2025-06-04T21:52:28.9075353Z  [2m202[0m │             args={[[0, -1.2, 0, 0, 1.2, 0], 3]}
2025-06-04T21:52:28.9075897Z      ╰────
2025-06-04T21:52:28.9076470Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9076835Z 
2025-06-04T21:52:28.9077645Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9078953Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:202:13]
2025-06-04T21:52:28.9080082Z  [2m201[0m │             attach="attributes-position"
2025-06-04T21:52:28.9080754Z  [2m202[0m │             args={[[0, -1.2, 0, 0, 1.2, 0], 3]}
2025-06-04T21:52:28.9081351Z      · [38;2;246;87;248m            ────[0m
2025-06-04T21:52:28.9081809Z  [2m203[0m │           />
2025-06-04T21:52:28.9082181Z      ╰────
2025-06-04T21:52:28.9082753Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9083353Z 
2025-06-04T21:52:28.9084159Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9085472Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:206:11]
2025-06-04T21:52:28.9086307Z  [2m205[0m │         <lineBasicMaterial
2025-06-04T21:52:28.9086849Z  [2m206[0m │           attach="material"
2025-06-04T21:52:28.9087397Z      · [38;2;246;87;248m          ──────[0m
2025-06-04T21:52:28.9088039Z  [2m207[0m │           args={[{ color: 'green', linewidth: 2 }]}
2025-06-04T21:52:28.9088544Z      ╰────
2025-06-04T21:52:28.9089249Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9089616Z 
2025-06-04T21:52:28.9090427Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9091740Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:207:11]
2025-06-04T21:52:28.9092601Z  [2m206[0m │           attach="material"
2025-06-04T21:52:28.9093273Z  [2m207[0m │           args={[{ color: 'green', linewidth: 2 }]}
2025-06-04T21:52:28.9094085Z      · [38;2;246;87;248m          ────[0m
2025-06-04T21:52:28.9094553Z  [2m208[0m │         />
2025-06-04T21:52:28.9094926Z      ╰────
2025-06-04T21:52:28.9095462Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9095795Z 
2025-06-04T21:52:28.9096531Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9097783Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:210:13]
2025-06-04T21:52:28.9098604Z  [2m209[0m │       </line>
2025-06-04T21:52:28.9129461Z  [2m210[0m │       <mesh position={[0, 1.3, 0]}>
2025-06-04T21:52:28.9130181Z      · [38;2;246;87;248m            ────────[0m
2025-06-04T21:52:28.9130846Z  [2m211[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9131385Z      ╰────
2025-06-04T21:52:28.9131927Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9132265Z 
2025-06-04T21:52:28.9133081Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9134448Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:211:25]
2025-06-04T21:52:28.9135399Z  [2m210[0m │       <mesh position={[0, 1.3, 0]}>
2025-06-04T21:52:28.9136111Z  [2m211[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9136780Z      · [38;2;246;87;248m                        ────[0m
2025-06-04T21:52:28.9137615Z  [2m212[0m │         <meshBasicMaterial attach="material" args={[{ color: 'green' }]} />
2025-06-04T21:52:28.9138262Z      ╰────
2025-06-04T21:52:28.9138802Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9139349Z 
2025-06-04T21:52:28.9140117Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9141394Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:212:28]
2025-06-04T21:52:28.9142306Z  [2m211[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9143256Z  [2m212[0m │         <meshBasicMaterial attach="material" args={[{ color: 'green' }]} />
2025-06-04T21:52:28.9144147Z      · [38;2;246;87;248m                           ──────[0m
2025-06-04T21:52:28.9144819Z  [2m213[0m │       </mesh>
2025-06-04T21:52:28.9145239Z      ╰────
2025-06-04T21:52:28.9145834Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9146200Z 
2025-06-04T21:52:28.9147009Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9148296Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:212:46]
2025-06-04T21:52:28.9149708Z  [2m211[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9150659Z  [2m212[0m │         <meshBasicMaterial attach="material" args={[{ color: 'green' }]} />
2025-06-04T21:52:28.9151652Z      · [38;2;246;87;248m                                             ────[0m
2025-06-04T21:52:28.9152222Z  [2m213[0m │       </mesh>
2025-06-04T21:52:28.9152625Z      ╰────
2025-06-04T21:52:28.9153166Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9153498Z 
2025-06-04T21:52:28.9154253Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9155537Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:222:13]
2025-06-04T21:52:28.9156497Z  [2m221[0m │           <float32BufferAttribute
2025-06-04T21:52:28.9157166Z  [2m222[0m │             attach="attributes-position"
2025-06-04T21:52:28.9157787Z      · [38;2;246;87;248m            ──────[0m
2025-06-04T21:52:28.9158434Z  [2m223[0m │             args={[[0, 0, -1.2, 0, 0, 1.2], 3]}
2025-06-04T21:52:28.9158919Z      ╰────
2025-06-04T21:52:28.9190043Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9190449Z 
2025-06-04T21:52:28.9191253Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9192592Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:223:13]
2025-06-04T21:52:28.9193595Z  [2m222[0m │             attach="attributes-position"
2025-06-04T21:52:28.9194349Z  [2m223[0m │             args={[[0, 0, -1.2, 0, 0, 1.2], 3]}
2025-06-04T21:52:28.9195013Z      · [38;2;246;87;248m            ────[0m
2025-06-04T21:52:28.9195507Z  [2m224[0m │           />
2025-06-04T21:52:28.9195915Z      ╰────
2025-06-04T21:52:28.9196462Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9196831Z 
2025-06-04T21:52:28.9197575Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9198832Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:227:11]
2025-06-04T21:52:28.9199900Z  [2m226[0m │         <lineBasicMaterial
2025-06-04T21:52:28.9200455Z  [2m227[0m │           attach="material"
2025-06-04T21:52:28.9201005Z      · [38;2;246;87;248m          ──────[0m
2025-06-04T21:52:28.9201635Z  [2m228[0m │           args={[{ color: 'blue', linewidth: 2 }]}
2025-06-04T21:52:28.9202140Z      ╰────
2025-06-04T21:52:28.9202670Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9202996Z 
2025-06-04T21:52:28.9203722Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9204949Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:228:11]
2025-06-04T21:52:28.9205831Z  [2m227[0m │           attach="material"
2025-06-04T21:52:28.9206555Z  [2m228[0m │           args={[{ color: 'blue', linewidth: 2 }]}
2025-06-04T21:52:28.9207243Z      · [38;2;246;87;248m          ────[0m
2025-06-04T21:52:28.9207710Z  [2m229[0m │         />
2025-06-04T21:52:28.9208081Z      ╰────
2025-06-04T21:52:28.9208615Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9208948Z 
2025-06-04T21:52:28.9209886Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9211123Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:231:13]
2025-06-04T21:52:28.9211879Z  [2m230[0m │       </line>
2025-06-04T21:52:28.9212424Z  [2m231[0m │       <mesh position={[0, 0, 1.3]}>
2025-06-04T21:52:28.9213122Z      · [38;2;246;87;248m            ────────[0m
2025-06-04T21:52:28.9213797Z  [2m232[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9214546Z      ╰────
2025-06-04T21:52:28.9215092Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9215432Z 
2025-06-04T21:52:28.9216252Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9217632Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:232:25]
2025-06-04T21:52:28.9218595Z  [2m231[0m │       <mesh position={[0, 0, 1.3]}>
2025-06-04T21:52:28.9249621Z  [2m232[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9250385Z      · [38;2;246;87;248m                        ────[0m
2025-06-04T21:52:28.9251256Z  [2m233[0m │         <meshBasicMaterial attach="material" args={[{ color: 'blue' }]} />
2025-06-04T21:52:28.9251983Z      ╰────
2025-06-04T21:52:28.9252603Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9252964Z 
2025-06-04T21:52:28.9253767Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9255153Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:233:28]
2025-06-04T21:52:28.9256355Z  [2m232[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9257269Z  [2m233[0m │         <meshBasicMaterial attach="material" args={[{ color: 'blue' }]} />
2025-06-04T21:52:28.9258109Z      · [38;2;246;87;248m                           ──────[0m
2025-06-04T21:52:28.9258618Z  [2m234[0m │       </mesh>
2025-06-04T21:52:28.9259193Z      ╰────
2025-06-04T21:52:28.9259743Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9260082Z 
2025-06-04T21:52:28.9260813Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9262044Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:233:46]
2025-06-04T21:52:28.9262971Z  [2m232[0m │         <sphereGeometry args={[0.02, 8, 8]} />
2025-06-04T21:52:28.9263838Z  [2m233[0m │         <meshBasicMaterial attach="material" args={[{ color: 'blue' }]} />
2025-06-04T21:52:28.9264737Z      · [38;2;246;87;248m                                             ────[0m
2025-06-04T21:52:28.9265269Z  [2m234[0m │       </mesh>
2025-06-04T21:52:28.9265654Z      ╰────
2025-06-04T21:52:28.9266186Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9266510Z 
2025-06-04T21:52:28.9267257Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9268636Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:247:19]
2025-06-04T21:52:28.9269747Z  [2m246[0m │       {/* XZ plane (bottom) */}
2025-06-04T21:52:28.9270564Z  [2m247[0m │       <gridHelper args={[2, 10, 'gray', 'gray']} rotation={[0, 0, 0]} />
2025-06-04T21:52:28.9271300Z      · [38;2;246;87;248m                  ────[0m
2025-06-04T21:52:28.9271773Z  [2m248[0m │ 
2025-06-04T21:52:28.9272095Z      ╰────
2025-06-04T21:52:28.9272625Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9273346Z 
2025-06-04T21:52:28.9274148Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9275446Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:247:50]
2025-06-04T21:52:28.9276366Z  [2m246[0m │       {/* XZ plane (bottom) */}
2025-06-04T21:52:28.9277210Z  [2m247[0m │       <gridHelper args={[2, 10, 'gray', 'gray']} rotation={[0, 0, 0]} />
2025-06-04T21:52:28.9278115Z      · [38;2;246;87;248m                                                 ────────[0m
2025-06-04T21:52:28.9278711Z  [2m248[0m │ 
2025-06-04T21:52:28.9309326Z      ╰────
2025-06-04T21:52:28.9309998Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9310348Z 
2025-06-04T21:52:28.9311347Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9312596Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:251:9]
2025-06-04T21:52:28.9313390Z  [2m250[0m │       <gridHelper
2025-06-04T21:52:28.9313940Z  [2m251[0m │         args={[2, 10, 'gray', 'gray']}
2025-06-04T21:52:28.9314508Z      · [38;2;246;87;248m        ────[0m
2025-06-04T21:52:28.9315138Z  [2m252[0m │         rotation={[Math.PI / 2, 0, 0]}
2025-06-04T21:52:28.9315682Z      ╰────
2025-06-04T21:52:28.9316269Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9316612Z 
2025-06-04T21:52:28.9317367Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9318599Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:252:9]
2025-06-04T21:52:28.9319744Z  [2m251[0m │         args={[2, 10, 'gray', 'gray']}
2025-06-04T21:52:28.9320404Z  [2m252[0m │         rotation={[Math.PI / 2, 0, 0]}
2025-06-04T21:52:28.9321009Z      · [38;2;246;87;248m        ────────[0m
2025-06-04T21:52:28.9321760Z  [2m253[0m │         position={[0, 0, -1]}
2025-06-04T21:52:28.9322255Z      ╰────
2025-06-04T21:52:28.9322866Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9323234Z 
2025-06-04T21:52:28.9324008Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9325269Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:253:9]
2025-06-04T21:52:28.9326223Z  [2m252[0m │         rotation={[Math.PI / 2, 0, 0]}
2025-06-04T21:52:28.9326832Z  [2m253[0m │         position={[0, 0, -1]}
2025-06-04T21:52:28.9327395Z      · [38;2;246;87;248m        ────────[0m
2025-06-04T21:52:28.9327839Z  [2m254[0m │       />
2025-06-04T21:52:28.9328216Z      ╰────
2025-06-04T21:52:28.9328753Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9329290Z 
2025-06-04T21:52:28.9330127Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9331435Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:258:9]
2025-06-04T21:52:28.9332224Z  [2m257[0m │       <gridHelper
2025-06-04T21:52:28.9332778Z  [2m258[0m │         args={[2, 10, 'gray', 'gray']}
2025-06-04T21:52:28.9333346Z      · [38;2;246;87;248m        ────[0m
2025-06-04T21:52:28.9333936Z  [2m259[0m │         rotation={[0, 0, Math.PI / 2]}
2025-06-04T21:52:28.9334445Z      ╰────
2025-06-04T21:52:28.9335020Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9335370Z 
2025-06-04T21:52:28.9336154Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9337522Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:259:9]
2025-06-04T21:52:28.9338479Z  [2m258[0m │         args={[2, 10, 'gray', 'gray']}
2025-06-04T21:52:28.9369454Z  [2m259[0m │         rotation={[0, 0, Math.PI / 2]}
2025-06-04T21:52:28.9370236Z      · [38;2;246;87;248m        ────────[0m
2025-06-04T21:52:28.9370833Z  [2m260[0m │         position={[-1, 0, 0]}
2025-06-04T21:52:28.9371304Z      ╰────
2025-06-04T21:52:28.9371850Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9372191Z 
2025-06-04T21:52:28.9372964Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9374332Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:260:9]
2025-06-04T21:52:28.9375286Z  [2m259[0m │         rotation={[0, 0, Math.PI / 2]}
2025-06-04T21:52:28.9375896Z  [2m260[0m │         position={[-1, 0, 0]}
2025-06-04T21:52:28.9376803Z      · [38;2;246;87;248m        ────────[0m
2025-06-04T21:52:28.9377258Z  [2m261[0m │       />
2025-06-04T21:52:28.9377614Z      ╰────
2025-06-04T21:52:28.9378161Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9378488Z 
2025-06-04T21:52:28.9379395Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9380634Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:535:16]
2025-06-04T21:52:28.9381407Z  [2m534[0m │       >
2025-06-04T21:52:28.9382057Z  [2m535[0m │         <color attach="background" args={[0, 0, 0]} />
2025-06-04T21:52:28.9382772Z      · [38;2;246;87;248m               ──────[0m
2025-06-04T21:52:28.9383339Z  [2m536[0m │         <Controls />
2025-06-04T21:52:28.9383780Z      ╰────
2025-06-04T21:52:28.9384360Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9384720Z 
2025-06-04T21:52:28.9385497Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:28.9387035Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/MultidimensionalEmotionChart.tsx[0m:535:36]
2025-06-04T21:52:28.9387807Z  [2m534[0m │       >
2025-06-04T21:52:28.9388379Z  [2m535[0m │         <color attach="background" args={[0, 0, 0]} />
2025-06-04T21:52:28.9389306Z      · [38;2;246;87;248m                                   ────[0m
2025-06-04T21:52:28.9389898Z  [2m536[0m │         <Controls />
2025-06-04T21:52:28.9390358Z      ╰────
2025-06-04T21:52:28.9390859Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:28.9391265Z 
2025-06-04T21:52:28.9392342Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:28.9393724Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/SimulatorDashboardReact.tsx[0m:154:72]
2025-06-04T21:52:28.9394820Z  [2m153[0m │             You can track your progress through anonymized metrics that are only
2025-06-04T21:52:28.9395845Z  [2m154[0m │             stored in your browser. View your progress by clicking the "Progress
2025-06-04T21:52:28.9396768Z      · [38;2;246;87;248m                                                                       ─[0m
2025-06-04T21:52:28.9397419Z  [2m155[0m │             Metrics" button above.
2025-06-04T21:52:28.9397885Z      ╰────
2025-06-04T21:52:28.9398047Z 
2025-06-04T21:52:28.9429290Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:28.9430854Z      ╭─[[38;2;92;157;255;1msrc/components/dashboard/SimulatorDashboardReact.tsx[0m:155:20]
2025-06-04T21:52:28.9431945Z  [2m154[0m │             stored in your browser. View your progress by clicking the "Progress
2025-06-04T21:52:28.9432736Z  [2m155[0m │             Metrics" button above.
2025-06-04T21:52:28.9433563Z      · [38;2;246;87;248m                   ─[0m
2025-06-04T21:52:28.9434063Z  [2m156[0m │           </div>
2025-06-04T21:52:28.9434455Z      ╰────
2025-06-04T21:52:28.9434633Z 
2025-06-04T21:52:28.9435461Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9436556Z      ╭─[[38;2;92;157;255;1mtests/security/run-security-tests.ts[0m:106:56]
2025-06-04T21:52:28.9437124Z  [2m105[0m │  */
2025-06-04T21:52:28.9437801Z  [2m106[0m │ async function runTestSuite(suite: TestSuite): Promise<any> {
2025-06-04T21:52:28.9438689Z      · [38;2;246;87;248m                                                       ───[0m
2025-06-04T21:52:28.9439552Z  [2m107[0m │   return new Promise((resolve, reject) => {
2025-06-04T21:52:28.9440059Z      ╰────
2025-06-04T21:52:28.9441152Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9441883Z 
2025-06-04T21:52:28.9442769Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9444169Z      ╭─[[38;2;92;157;255;1mtests/security/run-security-tests.ts[0m:162:34]
2025-06-04T21:52:28.9444788Z  [2m161[0m │  */
2025-06-04T21:52:28.9445373Z  [2m162[0m │ function generateReport(results: any[]): string {
2025-06-04T21:52:28.9446110Z      · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:28.9446607Z  [2m163[0m │   return `
2025-06-04T21:52:28.9446972Z      ╰────
2025-06-04T21:52:28.9448043Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9448698Z 
2025-06-04T21:52:28.9449884Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;[0m
2025-06-04T21:52:28.9451220Z      ╭─[[38;2;92;157;255;1msrc/components/consent/ResearchConsentForm.tsx[0m:364:20]
2025-06-04T21:52:28.9452133Z  [2m363[0m │               <p className="text-gray-600 mb-4">
2025-06-04T21:52:28.9452977Z  [2m364[0m │                 You're about to withdraw your consent for research
2025-06-04T21:52:28.9453680Z      · [38;2;246;87;248m                   ─[0m
2025-06-04T21:52:28.9454573Z  [2m365[0m │                 participation. This means your data will no longer be used for
2025-06-04T21:52:28.9455278Z      ╰────
2025-06-04T21:52:28.9455454Z 
2025-06-04T21:52:28.9456278Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9457449Z     ╭─[[38;2;92;157;255;1msrc/components/treatment/TreatmentPlanner.tsx[0m:53:19]
2025-06-04T21:52:28.9458586Z  [2m52[0m │       setRecommendations(data.data.recommendations as TreatmentRecommendation[]);
2025-06-04T21:52:28.9489800Z  [2m53[0m │     } catch (err: any) {
2025-06-04T21:52:28.9490468Z     · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:28.9491198Z  [2m54[0m │       setError(err.message || 'Unknown error');
2025-06-04T21:52:28.9491791Z     ╰────
2025-06-04T21:52:28.9492927Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9493623Z 
2025-06-04T21:52:28.9494777Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'pageTitle' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:28.9496206Z     ╭─[[38;2;92;157;255;1msrc/components/treatment/TreatmentPlanner.tsx[0m:15:62]
2025-06-04T21:52:28.9496854Z  [2m14[0m │ 
2025-06-04T21:52:28.9497806Z  [2m15[0m │ const TreatmentPlanner: React.FC<TreatmentPlannerProps> = ({ pageTitle, pageDescription }) => {
2025-06-04T21:52:28.9498957Z     · [38;2;246;87;248m                                                             ────┬────[0m
2025-06-04T21:52:28.9500365Z     ·                                                                  [38;2;246;87;248m╰── [38;2;246;87;248m'pageTitle' is declared here[0m[0m
2025-06-04T21:52:28.9501182Z  [2m16[0m │   const [clientId, setClientId] = useState('');
2025-06-04T21:52:28.9501695Z     ╰────
2025-06-04T21:52:28.9502284Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:28.9502659Z 
2025-06-04T21:52:28.9503779Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'pageDescription' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:28.9505167Z     ╭─[[38;2;92;157;255;1msrc/components/treatment/TreatmentPlanner.tsx[0m:15:73]
2025-06-04T21:52:28.9505783Z  [2m14[0m │ 
2025-06-04T21:52:28.9506683Z  [2m15[0m │ const TreatmentPlanner: React.FC<TreatmentPlannerProps> = ({ pageTitle, pageDescription }) => {
2025-06-04T21:52:28.9507822Z     · [38;2;246;87;248m                                                                        ───────┬───────[0m
2025-06-04T21:52:28.9509214Z     ·                                                                                [38;2;246;87;248m╰── [38;2;246;87;248m'pageDescription' is declared here[0m[0m
2025-06-04T21:52:28.9510087Z  [2m16[0m │   const [clientId, setClientId] = useState('');
2025-06-04T21:52:28.9510602Z     ╰────
2025-06-04T21:52:28.9511250Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:28.9511658Z 
2025-06-04T21:52:28.9512699Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:28.9513914Z     ╭─[[38;2;92;157;255;1msrc/components/SearchDemoReact.tsx[0m:43:43]
2025-06-04T21:52:28.9514823Z  [2m42[0m │         <div className="mt-4 text-sm text-gray-500 dark:text-gray-400">
2025-06-04T21:52:28.9515757Z  [2m43[0m │           Found {resultCount} results for "{lastQuery}"
2025-06-04T21:52:28.9516595Z     · [38;2;246;87;248m                                          ─[0m
2025-06-04T21:52:28.9517137Z  [2m44[0m │         </div>
2025-06-04T21:52:28.9517543Z     ╰────
2025-06-04T21:52:28.9517710Z 
2025-06-04T21:52:28.9518700Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:28.9550339Z     ╭─[[38;2;92;157;255;1msrc/components/SearchDemoReact.tsx[0m:43:55]
2025-06-04T21:52:28.9551325Z  [2m42[0m │         <div className="mt-4 text-sm text-gray-500 dark:text-gray-400">
2025-06-04T21:52:28.9552192Z  [2m43[0m │           Found {resultCount} results for "{lastQuery}"
2025-06-04T21:52:28.9552975Z     · [38;2;246;87;248m                                                      ─[0m
2025-06-04T21:52:28.9553517Z  [2m44[0m │         </div>
2025-06-04T21:52:28.9553903Z     ╰────
2025-06-04T21:52:28.9554063Z 
2025-06-04T21:52:28.9554917Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9555960Z     ╭─[[38;2;92;157;255;1mtests/utils/mcp-helpers.ts[0m:34:29]
2025-06-04T21:52:28.9556549Z  [2m33[0m │   timestamp: number
2025-06-04T21:52:28.9557089Z  [2m34[0m │   metadata?: Record<string, any>
2025-06-04T21:52:28.9557720Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:28.9558184Z  [2m35[0m │ }
2025-06-04T21:52:28.9558508Z     ╰────
2025-06-04T21:52:28.9559728Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9560394Z 
2025-06-04T21:52:28.9561207Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9562230Z      ╭─[[38;2;92;157;255;1mtests/utils/mcp-helpers.ts[0m:216:42]
2025-06-04T21:52:28.9562745Z  [2m215[0m │    */
2025-06-04T21:52:28.9563603Z  [2m216[0m │   async runAccessibilityAudit(): Promise<any> {
2025-06-04T21:52:28.9564363Z      · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:28.9564897Z  [2m217[0m │     try {
2025-06-04T21:52:28.9565262Z      ╰────
2025-06-04T21:52:28.9566310Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9566960Z 
2025-06-04T21:52:28.9567785Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9568816Z      ╭─[[38;2;92;157;255;1mtests/utils/mcp-helpers.ts[0m:234:37]
2025-06-04T21:52:28.9569500Z  [2m233[0m │    */
2025-06-04T21:52:28.9570060Z  [2m234[0m │   async getConsoleErrors(): Promise<any[]> {
2025-06-04T21:52:28.9570786Z      · [38;2;246;87;248m                                    ───[0m
2025-06-04T21:52:28.9571286Z  [2m235[0m │     try {
2025-06-04T21:52:28.9571655Z      ╰────
2025-06-04T21:52:28.9572714Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9573588Z 
2025-06-04T21:52:28.9574503Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9575607Z      ╭─[[38;2;92;157;255;1mtests/utils/mcp-helpers.ts[0m:252:35]
2025-06-04T21:52:28.9576202Z  [2m251[0m │    */
2025-06-04T21:52:28.9576739Z  [2m252[0m │   async getNetworkLogs(): Promise<any[]> {
2025-06-04T21:52:28.9577442Z      · [38;2;246;87;248m                                  ───[0m
2025-06-04T21:52:28.9577951Z  [2m253[0m │     try {
2025-06-04T21:52:28.9578308Z      ╰────
2025-06-04T21:52:28.9629678Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9630514Z 
2025-06-04T21:52:28.9633175Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9634338Z      ╭─[[38;2;92;157;255;1mtests/utils/mcp-helpers.ts[0m:259:24]
2025-06-04T21:52:28.9634897Z  [2m258[0m │         })
2025-06-04T21:52:28.9635397Z  [2m259[0m │         return logs as any[]
2025-06-04T21:52:28.9636066Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:28.9636579Z  [2m260[0m │       })
2025-06-04T21:52:28.9636946Z      ╰────
2025-06-04T21:52:28.9638008Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9638642Z 
2025-06-04T21:52:28.9639682Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9640810Z     ╭─[[38;2;92;157;255;1msrc/hooks/convex/useAnalytics.ts[0m:21:32]
2025-06-04T21:52:28.9641517Z  [2m20[0m │   resourceUrl?: string
2025-06-04T21:52:28.9642135Z  [2m21[0m │   custom_data?: Record<string, any>
2025-06-04T21:52:28.9642839Z     · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:28.9643354Z  [2m22[0m │ }
2025-06-04T21:52:28.9643689Z     ╰────
2025-06-04T21:52:28.9644752Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9645407Z 
2025-06-04T21:52:28.9646221Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9647557Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.test.tsx[0m:20:29]
2025-06-04T21:52:28.9648887Z  [2m19[0m │   onclose: null as (() => void) | null,
2025-06-04T21:52:28.9649825Z  [2m20[0m │   onerror: null as ((error: any) => void) | null,
2025-06-04T21:52:28.9650591Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:28.9651648Z  [2m21[0m │   onmessage: null as ((event: { data: string }) => void) | null,
2025-06-04T21:52:28.9652237Z     ╰────
2025-06-04T21:52:28.9653341Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9654053Z 
2025-06-04T21:52:28.9655035Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9656346Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.test.tsx[0m:26:50]
2025-06-04T21:52:28.9657046Z  [2m25[0m │ 
2025-06-04T21:52:28.9657626Z  [2m26[0m │ global.WebSocket = vi.fn(() => mockWebSocket) as any;
2025-06-04T21:52:28.9658422Z     · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:28.9658932Z  [2m27[0m │ 
2025-06-04T21:52:28.9667276Z     ╰────
2025-06-04T21:52:28.9668382Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9669876Z 
2025-06-04T21:52:28.9671003Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9672442Z       ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.test.tsx[0m:1049:24]
2025-06-04T21:52:28.9677112Z  [2m1048[0m │   describe('Enhanced WebSocket Functionality', () => {
2025-06-04T21:52:28.9677969Z  [2m1049[0m │     let mockWebSocket: any;
2025-06-04T21:52:28.9679532Z       · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:28.9680176Z  [2m1050[0m │ 
2025-06-04T21:52:28.9680532Z       ╰────
2025-06-04T21:52:28.9681625Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9682282Z 
2025-06-04T21:52:28.9683089Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'getLogger' is imported but never used.[0m
2025-06-04T21:52:28.9684456Z    ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.test.tsx[0m:4:10]
2025-06-04T21:52:28.9685414Z  [2m3[0m │ import { BiasDashboard } from './BiasDashboard';
2025-06-04T21:52:28.9686151Z  [2m4[0m │ import { getLogger } from '@/lib/utils/logger';
2025-06-04T21:52:28.9686784Z    · [38;2;246;87;248m         ────┬────[0m
2025-06-04T21:52:28.9687555Z    ·              [38;2;246;87;248m╰── [38;2;246;87;248m'getLogger' is imported here[0m[0m
2025-06-04T21:52:28.9688225Z  [2m5[0m │ import { vi } from 'vitest';
2025-06-04T21:52:28.9688705Z    ╰────
2025-06-04T21:52:28.9689669Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:28.9690063Z 
2025-06-04T21:52:28.9690925Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9692083Z     ╭─[[38;2;92;157;255;1msrc/components/session/SessionAnalysis.tsx[0m:49:47]
2025-06-04T21:52:28.9692936Z  [2m48[0m │         // Transform API data into the expected format
2025-06-04T21:52:28.9693764Z  [2m49[0m │         const formattedData = data.map((item: any) => ({
2025-06-04T21:52:28.9694608Z     · [38;2;246;87;248m                                              ───[0m
2025-06-04T21:52:28.9695430Z  [2m50[0m │           timestamp: new Date(item.timestamp).toISOString(),
2025-06-04T21:52:28.9696003Z     ╰────
2025-06-04T21:52:28.9697077Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9697734Z 
2025-06-04T21:52:28.9698734Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;[0m
2025-06-04T21:52:28.9707252Z      ╭─[[38;2;92;157;255;1msrc/components/session/SessionAnalysis.tsx[0m:100:40]
2025-06-04T21:52:28.9709391Z  [2m 99[0m │           <p className="mt-4 text-sm text-gray-500">
2025-06-04T21:52:28.9710697Z  [2m100[0m │             This chart shows the client's emotional dimensions throughout the
2025-06-04T21:52:28.9711659Z      · [38;2;246;87;248m                                       ─[0m
2025-06-04T21:52:28.9713251Z  [2m101[0m │             session, helping identify patterns and significant shifts.
2025-06-04T21:52:28.9713937Z      ╰────
2025-06-04T21:52:28.9714125Z 
2025-06-04T21:52:28.9714984Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9716047Z     ╭─[[38;2;92;157;255;1msrc/hooks/useDebounce.ts[0m:61:58]
2025-06-04T21:52:28.9716578Z  [2m60[0m │  */
2025-06-04T21:52:28.9717328Z  [2m61[0m │ export function useDebouncedCallback<T extends (...args: any[]) => any>(
2025-06-04T21:52:28.9718272Z     · [38;2;246;87;248m                                                         ───[0m
2025-06-04T21:52:28.9718905Z  [2m62[0m │   callback: T,
2025-06-04T21:52:28.9719522Z     ╰────
2025-06-04T21:52:28.9720887Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9721588Z 
2025-06-04T21:52:28.9722467Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9723515Z     ╭─[[38;2;92;157;255;1msrc/hooks/useDebounce.ts[0m:61:68]
2025-06-04T21:52:28.9724042Z  [2m60[0m │  */
2025-06-04T21:52:28.9724813Z  [2m61[0m │ export function useDebouncedCallback<T extends (...args: any[]) => any>(
2025-06-04T21:52:28.9725857Z     · [38;2;246;87;248m                                                                   ───[0m
2025-06-04T21:52:28.9726474Z  [2m62[0m │   callback: T,
2025-06-04T21:52:28.9726902Z     ╰────
2025-06-04T21:52:28.9728022Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9728715Z 
2025-06-04T21:52:28.9729857Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9731228Z      ╭─[[38;2;92;157;255;1msrc/components/session/MultidimensionalEmotionChart.tsx[0m:342:43]
2025-06-04T21:52:28.9732215Z  [2m341[0m │       // Custom vertex shader to use the size attribute
2025-06-04T21:52:28.9733026Z  [2m342[0m │       material.onBeforeCompile = (shader: any) => {
2025-06-04T21:52:28.9733843Z      · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:28.9734629Z  [2m343[0m │         shader.vertexShader = shader.vertexShader
2025-06-04T21:52:28.9735165Z      ╰────
2025-06-04T21:52:28.9736228Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9736884Z 
2025-06-04T21:52:28.9737765Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9739368Z      ╭─[[38;2;92;157;255;1msrc/components/session/MultidimensionalEmotionChart.tsx[0m:454:33]
2025-06-04T21:52:28.9740348Z  [2m453[0m │         // Only update visible objects based on frustum
2025-06-04T21:52:28.9741054Z  [2m454[0m │         scene.traverse((object: any) => {
2025-06-04T21:52:28.9741733Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:28.9742428Z  [2m455[0m │           if (object.userData.isCullable) {
2025-06-04T21:52:28.9742987Z      ╰────
2025-06-04T21:52:28.9750522Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9751217Z 
2025-06-04T21:52:28.9752073Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9753640Z      ╭─[[38;2;92;157;255;1msrc/components/session/MultidimensionalEmotionChart.tsx[0m:518:44]
2025-06-04T21:52:28.9754534Z  [2m517[0m │       if (sceneRef.current) {
2025-06-04T21:52:28.9755267Z  [2m518[0m │         sceneRef.current.traverse((object: any) => {
2025-06-04T21:52:28.9756054Z      · [38;2;246;87;248m                                           ───[0m
2025-06-04T21:52:28.9756759Z  [2m519[0m │           if (object instanceof THREE.Mesh) {
2025-06-04T21:52:28.9757260Z      ╰────
2025-06-04T21:52:28.9758338Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9759151Z 
2025-06-04T21:52:28.9760630Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9762042Z      ╭─[[38;2;92;157;255;1msrc/components/session/MultidimensionalEmotionChart.tsx[0m:525:52]
2025-06-04T21:52:28.9763037Z  [2m524[0m │               if (Array.isArray(object.material)) {
2025-06-04T21:52:28.9763947Z  [2m525[0m │                 object.material.forEach((material: any) => material.dispose())
2025-06-04T21:52:28.9765038Z      · [38;2;246;87;248m                                                   ───[0m
2025-06-04T21:52:28.9765656Z  [2m526[0m │               } else {
2025-06-04T21:52:28.9766136Z      ╰────
2025-06-04T21:52:28.9767278Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9767975Z 
2025-06-04T21:52:28.9768846Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9770280Z      ╭─[[38;2;92;157;255;1mtests/performance/page-performance.spec.ts[0m:132:49]
2025-06-04T21:52:28.9771164Z  [2m131[0m │       const resourcesByType = metrics.resources.reduce(
2025-06-04T21:52:28.9771965Z  [2m132[0m │         (acc: Record<string, number>, resource: any) => {
2025-06-04T21:52:28.9772754Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:28.9773523Z  [2m133[0m │           const type = resource.initiatorType || 'other'
2025-06-04T21:52:28.9774092Z      ╰────
2025-06-04T21:52:28.9775160Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9775815Z 
2025-06-04T21:52:28.9776683Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9777718Z     ╭─[[38;2;92;157;255;1msrc/hooks/useChatWithMemory.ts[0m:91:18]
2025-06-04T21:52:28.9778326Z  [2m90[0m │     context?: {
2025-06-04T21:52:28.9778786Z  [2m91[0m │       analysis?: any;
2025-06-04T21:52:28.9779486Z     · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:28.9780006Z  [2m92[0m │       emotions?: string[];
2025-06-04T21:52:28.9780444Z     ╰────
2025-06-04T21:52:28.9781488Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9782143Z 
2025-06-04T21:52:28.9783186Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Catch parameter 'err' is caught but never used. Unused caught errors should start with a '_'.[0m
2025-06-04T21:52:28.9784382Z      ╭─[[38;2;92;157;255;1msrc/hooks/useChatWithMemory.ts[0m:364:14]
2025-06-04T21:52:28.9785021Z  [2m363[0m │       return response.content;
2025-06-04T21:52:28.9785538Z  [2m364[0m │     } catch (err) {
2025-06-04T21:52:28.9786042Z      · [38;2;246;87;248m             ─┬─[0m
2025-06-04T21:52:28.9786770Z      ·               [38;2;246;87;248m╰── [38;2;246;87;248m'err' is declared here[0m[0m
2025-06-04T21:52:28.9787553Z  [2m365[0m │       return 'Failed to generate conversation summary.';
2025-06-04T21:52:28.9788096Z      ╰────
2025-06-04T21:52:28.9788880Z [38;2;106;159;181m  help: [0mConsider handling this error.
2025-06-04T21:52:28.9789502Z 
2025-06-04T21:52:28.9790593Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'aiMessage' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:28.9793043Z      ╭─[[38;2;92;157;255;1msrc/hooks/useChatWithMemory.ts[0m:401:3]
2025-06-04T21:52:28.9793745Z  [2m400[0m │   userMessage: ChatMessage,
2025-06-04T21:52:28.9794336Z  [2m401[0m │   aiMessage: ChatMessage
2025-06-04T21:52:28.9794903Z      · [38;2;246;87;248m  ────┬────[0m
2025-06-04T21:52:28.9795679Z      ·       [38;2;246;87;248m╰── [38;2;246;87;248m'aiMessage' is declared here[0m[0m
2025-06-04T21:52:28.9796359Z  [2m402[0m │ ): Promise<string | null> {
2025-06-04T21:52:28.9796802Z      ╰────
2025-06-04T21:52:28.9797394Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:28.9797768Z 
2025-06-04T21:52:28.9798573Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9799954Z     ╭─[[38;2;92;157;255;1mtests/performance/performance-monitor.ts[0m:96:57]
2025-06-04T21:52:28.9800758Z  [2m95[0m │  */
2025-06-04T21:52:28.9801451Z  [2m96[0m │ export async function injectPerformanceMonitoring(page: any) {
2025-06-04T21:52:28.9802404Z     · [38;2;246;87;248m                                                        ───[0m
2025-06-04T21:52:28.9803270Z  [2m97[0m │   await page.addInitScript(PERFORMANCE_MONITORING_SCRIPT)
2025-06-04T21:52:28.9803897Z     ╰────
2025-06-04T21:52:28.9804988Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9805641Z 
2025-06-04T21:52:28.9806467Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9807599Z      ╭─[[38;2;92;157;255;1mtests/performance/performance-monitor.ts[0m:103:55]
2025-06-04T21:52:28.9808211Z  [2m102[0m │  */
2025-06-04T21:52:28.9808876Z  [2m103[0m │ export async function extractPerformanceMetrics(page: any) {
2025-06-04T21:52:28.9810034Z      · [38;2;246;87;248m                                                      ───[0m
2025-06-04T21:52:28.9810742Z  [2m104[0m │   return page.evaluate(() => {
2025-06-04T21:52:28.9811231Z      ╰────
2025-06-04T21:52:28.9812335Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9813010Z 
2025-06-04T21:52:28.9813832Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9814915Z     ╭─[[38;2;92;157;255;1msrc/hooks/useConversionTracking.ts[0m:22:18]
2025-06-04T21:52:28.9815562Z  [2m21[0m │ interface EventData {
2025-06-04T21:52:28.9816064Z  [2m22[0m │   [key: string]: any
2025-06-04T21:52:28.9816833Z     · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:28.9817333Z  [2m23[0m │ }
2025-06-04T21:52:28.9817696Z     ╰────
2025-06-04T21:52:28.9818845Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9819921Z 
2025-06-04T21:52:28.9820793Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9821886Z     ╭─[[38;2;92;157;255;1msrc/hooks/useConversionTracking.ts[0m:35:30]
2025-06-04T21:52:28.9822544Z  [2m34[0m │   const log = useCallback(
2025-06-04T21:52:28.9823133Z  [2m35[0m │     (message: string, data?: any) => {
2025-06-04T21:52:28.9823960Z     · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:28.9824726Z  [2m36[0m │       if (debug) {
2025-06-04T21:52:28.9825262Z     ╰────
2025-06-04T21:52:28.9826677Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9827419Z 
2025-06-04T21:52:28.9828522Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9830036Z      ╭─[[38;2;92;157;255;1msrc/hooks/useConversionTracking.ts[0m:163:17]
2025-06-04T21:52:28.9831008Z  [2m162[0m │   interface Window {
2025-06-04T21:52:28.9856758Z  [2m163[0m │     dataLayer?: any[]
2025-06-04T21:52:28.9857467Z      · [38;2;246;87;248m                ───[0m
2025-06-04T21:52:28.9857950Z  [2m164[0m │   }
2025-06-04T21:52:28.9858294Z      ╰────
2025-06-04T21:52:28.9859555Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9860227Z 
2025-06-04T21:52:28.9861119Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9862436Z      ╭─[[38;2;92;157;255;1msrc/components/session/EmotionTrackingChart.tsx[0m:116:61]
2025-06-04T21:52:28.9863223Z  [2m115[0m │             value={timeRange}
2025-06-04T21:52:28.9863977Z  [2m116[0m │             onChange={(e) => setTimeRange(e.target.value as any)}
2025-06-04T21:52:28.9864815Z      · [38;2;246;87;248m                                                            ───[0m
2025-06-04T21:52:28.9865507Z  [2m117[0m │             aria-label="Select time range"
2025-06-04T21:52:28.9865996Z      ╰────
2025-06-04T21:52:28.9867131Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9867835Z 
2025-06-04T21:52:28.9868685Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9870322Z      ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:223:52]
2025-06-04T21:52:28.9871105Z  [2m222[0m │   // Filter functions
2025-06-04T21:52:28.9872017Z  [2m223[0m │   const filterDataByTimeRange = useCallback((data: any[], timeRange: string) => {
2025-06-04T21:52:28.9873099Z      · [38;2;246;87;248m                                                   ───[0m
2025-06-04T21:52:28.9873851Z  [2m224[0m │     if (!data || data.length === 0) return data;
2025-06-04T21:52:28.9874369Z      ╰────
2025-06-04T21:52:28.9875452Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9876172Z 
2025-06-04T21:52:28.9877038Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9878356Z      ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:269:52]
2025-06-04T21:52:28.9879263Z  [2m268[0m │ 
2025-06-04T21:52:28.9880079Z  [2m269[0m │   const filterDataByBiasScore = useCallback((data: any[], filter: string) => {
2025-06-04T21:52:28.9881293Z      · [38;2;246;87;248m                                                   ───[0m
2025-06-04T21:52:28.9882025Z  [2m270[0m │     if (filter === 'all' || !data) return data;
2025-06-04T21:52:28.9882532Z      ╰────
2025-06-04T21:52:28.9883601Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9884257Z 
2025-06-04T21:52:28.9885075Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9886299Z      ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:287:53]
2025-06-04T21:52:28.9886962Z  [2m286[0m │ 
2025-06-04T21:52:28.9887743Z  [2m287[0m │   const filterDataByAlertLevel = useCallback((data: any[], filter: string) => {
2025-06-04T21:52:28.9888688Z      · [38;2;246;87;248m                                                    ───[0m
2025-06-04T21:52:28.9889579Z  [2m288[0m │     if (filter === 'all' || !data) return data;
2025-06-04T21:52:28.9890077Z      ╰────
2025-06-04T21:52:28.9891324Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9892003Z 
2025-06-04T21:52:28.9892821Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9894057Z      ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:293:46]
2025-06-04T21:52:28.9894848Z  [2m292[0m │   // Apply all filters to data
2025-06-04T21:52:28.9895846Z  [2m293[0m │   const getFilteredData = useCallback((data: any[], type: 'trends' | 'alerts' | 'sessions') => {
2025-06-04T21:52:28.9896838Z      · [38;2;246;87;248m                                             ───[0m
2025-06-04T21:52:28.9897444Z  [2m294[0m │     if (!data) return data;
2025-06-04T21:52:28.9897892Z      ╰────
2025-06-04T21:52:28.9898975Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9899935Z 
2025-06-04T21:52:28.9900830Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9902091Z      ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:948:54]
2025-06-04T21:52:28.9902767Z  [2m947[0m │ 
2025-06-04T21:52:28.9903416Z  [2m948[0m │   const CustomTooltip = ({ active, payload, label }: any) => {
2025-06-04T21:52:28.9904274Z      · [38;2;246;87;248m                                                     ───[0m
2025-06-04T21:52:28.9905071Z  [2m949[0m │     if (active && payload && payload.length) {
2025-06-04T21:52:28.9905617Z      ╰────
2025-06-04T21:52:28.9920403Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9921138Z 
2025-06-04T21:52:28.9922054Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9923331Z      ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:953:32]
2025-06-04T21:52:28.9924475Z  [2m952[0m │           <p className="font-semibold">{new Date(label).toLocaleString()}</p>
2025-06-04T21:52:28.9925386Z  [2m953[0m │           {payload.map((entry: any, index: number) => (
2025-06-04T21:52:28.9926124Z      · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:28.9926912Z  [2m954[0m │             <p key={index} style={{ color: entry.color }}>
2025-06-04T21:52:28.9927497Z      ╰────
2025-06-04T21:52:28.9928614Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9929470Z 
2025-06-04T21:52:28.9930554Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9931833Z       ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:1808:71]
2025-06-04T21:52:28.9932740Z  [2m1807[0m │                 value={biasScoreFilter}
2025-06-04T21:52:28.9933644Z  [2m1808[0m │                 onChange={(e) => setBiasScoreFilter(e.target.value as any)}
2025-06-04T21:52:28.9934617Z       · [38;2;246;87;248m                                                                      ───[0m
2025-06-04T21:52:28.9935538Z  [2m1809[0m │                 className="w-full p-2 border rounded-md bg-background"
2025-06-04T21:52:28.9936144Z       ╰────
2025-06-04T21:52:28.9937218Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9937883Z 
2025-06-04T21:52:28.9938764Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:28.9940336Z       ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:1826:72]
2025-06-04T21:52:28.9941405Z  [2m1825[0m │                 value={alertLevelFilter}
2025-06-04T21:52:28.9942269Z  [2m1826[0m │                 onChange={(e) => setAlertLevelFilter(e.target.value as any)}
2025-06-04T21:52:28.9943183Z       · [38;2;246;87;248m                                                                       ───[0m
2025-06-04T21:52:28.9944067Z  [2m1827[0m │                 className="w-full p-2 border rounded-md bg-background"
2025-06-04T21:52:28.9944722Z       ╰────
2025-06-04T21:52:28.9945830Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:28.9946494Z 
2025-06-04T21:52:28.9947343Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'AlertDescription' is imported but never used.[0m
2025-06-04T21:52:28.9948658Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:27:17]
2025-06-04T21:52:28.9950036Z  [2m26[0m │ import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
2025-06-04T21:52:28.9951140Z  [2m27[0m │ import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
2025-06-04T21:52:28.9952069Z     · [38;2;246;87;248m                ────────┬───────[0m
2025-06-04T21:52:28.9953021Z     ·                         [38;2;246;87;248m╰── [38;2;246;87;248m'AlertDescription' is imported here[0m[0m
2025-06-04T21:52:28.9953679Z  [2m28[0m │ import { 
2025-06-04T21:52:28.9954046Z     ╰────
2025-06-04T21:52:28.9954633Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:28.9954994Z 
2025-06-04T21:52:28.9955774Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'AlertTitle' is imported but never used.[0m
2025-06-04T21:52:28.9956990Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:27:35]
2025-06-04T21:52:28.9958165Z  [2m26[0m │ import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
2025-06-04T21:52:28.9959621Z  [2m27[0m │ import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
2025-06-04T21:52:28.9960570Z     · [38;2;246;87;248m                                  ─────┬────[0m
2025-06-04T21:52:28.9961480Z     ·                                        [38;2;246;87;248m╰── [38;2;246;87;248m'AlertTitle' is imported here[0m[0m
2025-06-04T21:52:28.9962086Z  [2m28[0m │ import { 
2025-06-04T21:52:28.9962445Z     ╰────
2025-06-04T21:52:28.9963020Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:28.9963387Z 
2025-06-04T21:52:28.9964203Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'LineChart' is imported but never used.[0m
2025-06-04T21:52:28.9965460Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:29:3]
2025-06-04T21:52:28.9966381Z  [2m28[0m │ import { 
2025-06-04T21:52:28.9966793Z  [2m29[0m │   LineChart, 
2025-06-04T21:52:28.9967345Z     · [38;2;246;87;248m  ────┬────[0m
2025-06-04T21:52:28.9968154Z     ·       [38;2;246;87;248m╰── [38;2;246;87;248m'LineChart' is imported here[0m[0m
2025-06-04T21:52:28.9968798Z  [2m30[0m │   Line, 
2025-06-04T21:52:28.9969380Z     ╰────
2025-06-04T21:52:28.9970007Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:28.9970382Z 
2025-06-04T21:52:28.9971137Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'Line' is imported but never used.[0m
2025-06-04T21:52:28.9972301Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:30:3]
2025-06-04T21:52:28.9972988Z  [2m29[0m │   LineChart, 
2025-06-04T21:52:28.9973384Z  [2m30[0m │   Line, 
2025-06-04T21:52:28.9973810Z     · [38;2;246;87;248m  ──┬─[0m
2025-06-04T21:52:28.9974523Z     ·     [38;2;246;87;248m╰── [38;2;246;87;248m'Line' is imported here[0m[0m
2025-06-04T21:52:28.9975124Z  [2m31[0m │   XAxis, 
2025-06-04T21:52:28.9975538Z     ╰────
2025-06-04T21:52:28.9976458Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:28.9976869Z 
2025-06-04T21:52:28.9977680Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'Scatter' is imported but never used.[0m
2025-06-04T21:52:28.9978877Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:41:3]
2025-06-04T21:52:28.9979745Z  [2m40[0m │   Cell,
2025-06-04T21:52:28.9980119Z  [2m41[0m │   Scatter,
2025-06-04T21:52:28.9980588Z     · [38;2;246;87;248m  ───┬───[0m
2025-06-04T21:52:28.9981300Z     ·      [38;2;246;87;248m╰── [38;2;246;87;248m'Scatter' is imported here[0m[0m
2025-06-04T21:52:28.9981866Z  [2m42[0m │   Legend,
2025-06-04T21:52:28.9982220Z     ╰────
2025-06-04T21:52:28.9982796Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:28.9983175Z 
2025-06-04T21:52:28.9983970Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'TrendingUp' is imported but never used.[0m
2025-06-04T21:52:28.9985221Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:54:3]
2025-06-04T21:52:28.9985997Z  [2m53[0m │   AlertTriangle, 
2025-06-04T21:52:28.9986445Z  [2m54[0m │   TrendingUp, 
2025-06-04T21:52:28.9986951Z     · [38;2;246;87;248m  ─────┬────[0m
2025-06-04T21:52:28.9987756Z     ·        [38;2;246;87;248m╰── [38;2;246;87;248m'TrendingUp' is imported here[0m[0m
2025-06-04T21:52:28.9988391Z  [2m55[0m │   TrendingDown, 
2025-06-04T21:52:28.9988785Z     ╰────
2025-06-04T21:52:28.9989579Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:28.9989958Z 
2025-06-04T21:52:28.9990815Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'TrendingDown' is imported but never used.[0m
2025-06-04T21:52:28.9992137Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:55:3]
2025-06-04T21:52:28.9992839Z  [2m54[0m │   TrendingUp, 
2025-06-04T21:52:28.9993321Z  [2m55[0m │   TrendingDown, 
2025-06-04T21:52:28.9993839Z     · [38;2;246;87;248m  ──────┬─────[0m
2025-06-04T21:52:28.9994607Z     ·         [38;2;246;87;248m╰── [38;2;246;87;248m'TrendingDown' is imported here[0m[0m
2025-06-04T21:52:28.9995236Z  [2m56[0m │   Users, 
2025-06-04T21:52:28.9995607Z     ╰────
2025-06-04T21:52:28.9996202Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:28.9996587Z 
2025-06-04T21:52:28.9997400Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'Settings' is imported but never used.[0m
2025-06-04T21:52:28.9998637Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:60:3]
2025-06-04T21:52:28.9999608Z  [2m59[0m │   RefreshCw,
2025-06-04T21:52:29.0000336Z  [2m60[0m │   Settings,
2025-06-04T21:52:29.0000864Z     · [38;2;246;87;248m  ────┬───[0m
2025-06-04T21:52:29.0001680Z     ·       [38;2;246;87;248m╰── [38;2;246;87;248m'Settings' is imported here[0m[0m
2025-06-04T21:52:29.0002303Z  [2m61[0m │   Filter,
2025-06-04T21:52:29.0002667Z     ╰────
2025-06-04T21:52:29.0003258Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0003622Z 
2025-06-04T21:52:29.0004404Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'BellOff' is imported but never used.[0m
2025-06-04T21:52:29.0005608Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:68:3]
2025-06-04T21:52:29.0006301Z  [2m67[0m │   Bell,
2025-06-04T21:52:29.0006667Z  [2m68[0m │   BellOff,
2025-06-04T21:52:29.0007133Z     · [38;2;246;87;248m  ───┬───[0m
2025-06-04T21:52:29.0007849Z     ·      [38;2;246;87;248m╰── [38;2;246;87;248m'BellOff' is imported here[0m[0m
2025-06-04T21:52:29.0008440Z  [2m69[0m │   Check,
2025-06-04T21:52:29.0008778Z     ╰────
2025-06-04T21:52:29.0009527Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0009894Z 
2025-06-04T21:52:29.0010841Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'Trash2' is imported but never used.[0m
2025-06-04T21:52:29.0012053Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:73:3]
2025-06-04T21:52:29.0012842Z  [2m72[0m │   MessageSquare,
2025-06-04T21:52:29.0013287Z  [2m73[0m │   Trash2,
2025-06-04T21:52:29.0013775Z     · [38;2;246;87;248m  ───┬──[0m
2025-06-04T21:52:29.0014544Z     ·      [38;2;246;87;248m╰── [38;2;246;87;248m'Trash2' is imported here[0m[0m
2025-06-04T21:52:29.0015151Z  [2m74[0m │   Archive,
2025-06-04T21:52:29.0015527Z     ╰────
2025-06-04T21:52:29.0016132Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0016501Z 
2025-06-04T21:52:29.0017218Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'BiasAlert' is imported but never used.[0m
2025-06-04T21:52:29.0018383Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:82:3]
2025-06-04T21:52:29.0019324Z  [2m81[0m │   BiasDashboardData,
2025-06-04T21:52:29.0019787Z  [2m82[0m │   BiasAlert,
2025-06-04T21:52:29.0020268Z     · [38;2;246;87;248m  ────┬────[0m
2025-06-04T21:52:29.0021035Z     ·       [38;2;246;87;248m╰── [38;2;246;87;248m'BiasAlert' is imported here[0m[0m
2025-06-04T21:52:29.0021681Z  [2m83[0m │   BiasTrendData,
2025-06-04T21:52:29.0022076Z     ╰────
2025-06-04T21:52:29.0022647Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0023013Z 
2025-06-04T21:52:29.0023762Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'BiasTrendData' is imported but never used.[0m
2025-06-04T21:52:29.0024921Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:83:3]
2025-06-04T21:52:29.0025622Z  [2m82[0m │   BiasAlert,
2025-06-04T21:52:29.0026059Z  [2m83[0m │   BiasTrendData,
2025-06-04T21:52:29.0026562Z     · [38;2;246;87;248m  ──────┬──────[0m
2025-06-04T21:52:29.0027355Z     ·         [38;2;246;87;248m╰── [38;2;246;87;248m'BiasTrendData' is imported here[0m[0m
2025-06-04T21:52:29.0028031Z  [2m84[0m │   DemographicBreakdown,
2025-06-04T21:52:29.0028465Z     ╰────
2025-06-04T21:52:29.0030234Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0030636Z 
2025-06-04T21:52:29.0031531Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'DemographicBreakdown' is imported but never used.[0m
2025-06-04T21:52:29.0032789Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:84:3]
2025-06-04T21:52:29.0033597Z  [2m83[0m │   BiasTrendData,
2025-06-04T21:52:29.0034143Z  [2m84[0m │   DemographicBreakdown,
2025-06-04T21:52:29.0034750Z     · [38;2;246;87;248m  ──────────┬─────────[0m
2025-06-04T21:52:29.0035844Z     ·             [38;2;246;87;248m╰── [38;2;246;87;248m'DemographicBreakdown' is imported here[0m[0m
2025-06-04T21:52:29.0036557Z  [2m85[0m │   BiasAnalysisResult
2025-06-04T21:52:29.0037187Z     ╰────
2025-06-04T21:52:29.0037802Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0038184Z 
2025-06-04T21:52:29.0039246Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'BiasAnalysisResult' is imported but never used.[0m
2025-06-04T21:52:29.0040523Z     ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:85:3]
2025-06-04T21:52:29.0041291Z  [2m84[0m │   DemographicBreakdown,
2025-06-04T21:52:29.0041815Z  [2m85[0m │   BiasAnalysisResult
2025-06-04T21:52:29.0042372Z     · [38;2;246;87;248m  ─────────┬────────[0m
2025-06-04T21:52:29.0043204Z     ·            [38;2;246;87;248m╰── [38;2;246;87;248m'BiasAnalysisResult' is imported here[0m[0m
2025-06-04T21:52:29.0044274Z  [2m86[0m │ } from '@/lib/ai/bias-detection/types';
2025-06-04T21:52:29.0044828Z     ╰────
2025-06-04T21:52:29.0045459Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0045831Z 
2025-06-04T21:52:29.0046919Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'wsConnected' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.0048333Z      ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:128:10]
2025-06-04T21:52:29.0049578Z  [2m127[0m │   const [autoRefresh, setAutoRefresh] = useState(enableRealTimeUpdates);
2025-06-04T21:52:29.0050517Z  [2m128[0m │   const [wsConnected, setWsConnected] = useState(false);
2025-06-04T21:52:29.0051220Z      · [38;2;246;87;248m         ─────┬─────[0m
2025-06-04T21:52:29.0052005Z      ·               [38;2;246;87;248m╰── [38;2;246;87;248m'wsConnected' is declared here[0m[0m
2025-06-04T21:52:29.0053557Z  [2m129[0m │   const [wsConnectionStatus, setWsConnectionStatus] = useState<'disconnected' | 'connecting' | 'connected' | 'error' | 'reconnecting'>('disconnected');
2025-06-04T21:52:29.0054692Z      ╰────
2025-06-04T21:52:29.0055324Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.0055703Z 
2025-06-04T21:52:29.0056810Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'sessionTypeFilter' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.0058250Z      ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:136:10]
2025-06-04T21:52:29.0059744Z  [2m135[0m │   const [alertLevelFilter, setAlertLevelFilter] = useState<'all' | 'low' | 'medium' | 'high' | 'critical'>('all');
2025-06-04T21:52:29.0061215Z  [2m136[0m │   const [sessionTypeFilter, setSessionTypeFilter] = useState<'all' | 'individual' | 'group'>('all');
2025-06-04T21:52:29.0062185Z      · [38;2;246;87;248m         ────────┬────────[0m
2025-06-04T21:52:29.0067347Z      ·                  [38;2;246;87;248m╰── [38;2;246;87;248m'sessionTypeFilter' is declared here[0m[0m
2025-06-04T21:52:29.0068557Z  [2m137[0m │   const [customDateRange, setCustomDateRange] = useState<{start: string, end: string}>({
2025-06-04T21:52:29.0069501Z      ╰────
2025-06-04T21:52:29.0070137Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.0070519Z 
2025-06-04T21:52:29.0071693Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'setSessionTypeFilter' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.0073165Z      ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:136:29]
2025-06-04T21:52:29.0074492Z  [2m135[0m │   const [alertLevelFilter, setAlertLevelFilter] = useState<'all' | 'low' | 'medium' | 'high' | 'critical'>('all');
2025-06-04T21:52:29.0075953Z  [2m136[0m │   const [sessionTypeFilter, setSessionTypeFilter] = useState<'all' | 'individual' | 'group'>('all');
2025-06-04T21:52:29.0077097Z      · [38;2;246;87;248m                            ──────────┬─────────[0m
2025-06-04T21:52:29.0078260Z      ·                                       [38;2;246;87;248m╰── [38;2;246;87;248m'setSessionTypeFilter' is declared here[0m[0m
2025-06-04T21:52:29.0079570Z  [2m137[0m │   const [customDateRange, setCustomDateRange] = useState<{start: string, end: string}>({
2025-06-04T21:52:29.0080384Z      ╰────
2025-06-04T21:52:29.0081015Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.0081426Z 
2025-06-04T21:52:29.0082560Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'exportData' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.0084035Z      ╭─[[38;2;92;157;255;1msrc/components/admin/bias-detection/BiasDashboard.tsx[0m:787:9]
2025-06-04T21:52:29.0084820Z  [2m786[0m │   // Export dashboard data
2025-06-04T21:52:29.0085609Z  [2m787[0m │   const exportData = async (format: 'json' | 'csv' | 'pdf') => {
2025-06-04T21:52:29.0086331Z      · [38;2;246;87;248m        ─────┬────[0m
2025-06-04T21:52:29.0087128Z      ·              [38;2;246;87;248m╰── [38;2;246;87;248m'exportData' is declared here[0m[0m
2025-06-04T21:52:29.0087716Z  [2m788[0m │     try {
2025-06-04T21:52:29.0088088Z      ╰────
2025-06-04T21:52:29.0088776Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.0089370Z 
2025-06-04T21:52:29.0090250Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0091580Z     ╭─[[38;2;92;157;255;1mtests/integration/bias-detection-api.integration.test.ts[0m:45:27]
2025-06-04T21:52:29.0092354Z  [2m44[0m │ 
2025-06-04T21:52:29.0092846Z  [2m45[0m │ interface ApiResponse<T = any> {
2025-06-04T21:52:29.0093664Z     · [38;2;246;87;248m                          ───[0m
2025-06-04T21:52:29.0094249Z  [2m46[0m │   success: boolean;
2025-06-04T21:52:29.0094666Z     ╰────
2025-06-04T21:52:29.0095845Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0096515Z 
2025-06-04T21:52:29.0097388Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0098734Z      ╭─[[38;2;92;157;255;1mtests/integration/bias-detection-api.integration.test.ts[0m:880:59]
2025-06-04T21:52:29.0100034Z  [2m879[0m │       const recentAnalyses = dashboardData.data.recentAnalyses;
2025-06-04T21:52:29.0100986Z  [2m880[0m │       const foundSession = recentAnalyses.find((analysis: any) => 
2025-06-04T21:52:29.0101924Z      · [38;2;246;87;248m                                                          ───[0m
2025-06-04T21:52:29.0102718Z  [2m881[0m │         analysis.sessionId === testSession.sessionId
2025-06-04T21:52:29.0103267Z      ╰────
2025-06-04T21:52:29.0104556Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0105240Z 
2025-06-04T21:52:29.0106150Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0107536Z      ╭─[[38;2;92;157;255;1mtests/integration/bias-detection-api.integration.test.ts[0m:913:59]
2025-06-04T21:52:29.0108567Z  [2m912[0m │       const recentAnalyses = exportData.recentAnalyses;
2025-06-04T21:52:29.0109732Z  [2m913[0m │       const foundSession = recentAnalyses.find((analysis: any) => 
2025-06-04T21:52:29.0110668Z      · [38;2;246;87;248m                                                          ───[0m
2025-06-04T21:52:29.0111461Z  [2m914[0m │         analysis.sessionId === testSession.sessionId
2025-06-04T21:52:29.0112012Z      ╰────
2025-06-04T21:52:29.0113088Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0113764Z 
2025-06-04T21:52:29.0114680Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'APIRoute' is imported but never used.[0m
2025-06-04T21:52:29.0115896Z     ╭─[[38;2;92;157;255;1mtests/integration/bias-detection-api.integration.test.ts[0m:10:15]
2025-06-04T21:52:29.0117100Z  [2m 9[0m │ import { describe, it, expect, beforeAll, afterAll, beforeEach, afterEach, vi } from 'vitest';
2025-06-04T21:52:29.0117984Z  [2m10[0m │ import type { APIRoute } from 'astro';
2025-06-04T21:52:29.0118601Z     · [38;2;246;87;248m              ────┬───[0m
2025-06-04T21:52:29.0119575Z     ·                   [38;2;246;87;248m╰── [38;2;246;87;248m'APIRoute' is imported here[0m[0m
2025-06-04T21:52:29.0120150Z  [2m11[0m │ 
2025-06-04T21:52:29.0120478Z     ╰────
2025-06-04T21:52:29.0121106Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0121472Z 
2025-06-04T21:52:29.0122295Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0123355Z     ╭─[[38;2;92;157;255;1msrc/components/demo/FHEDemo.tsx[0m:61:41]
2025-06-04T21:52:29.0124094Z  [2m60[0m │           if ('getEncryptionMode' in fheService) {
2025-06-04T21:52:29.0124873Z  [2m61[0m │             const mode = (fheService as any).getEncryptionMode()
2025-06-04T21:52:29.0125625Z     · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.0126265Z  [2m62[0m │             setEncryptionMode(mode)
2025-06-04T21:52:29.0126757Z     ╰────
2025-06-04T21:52:29.0127844Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0128502Z 
2025-06-04T21:52:29.0129465Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0130544Z     ╭─[[38;2;92;157;255;1msrc/components/demo/FHEDemo.tsx[0m:75:58]
2025-06-04T21:52:29.0131237Z  [2m74[0m │           if ('rotateKeys' in fheService) {
2025-06-04T21:52:29.0132083Z  [2m75[0m │             const keyRotationInfo = await (fheService as any).rotateKeys()
2025-06-04T21:52:29.0132982Z     · [38;2;246;87;248m                                                         ───[0m
2025-06-04T21:52:29.0133718Z  [2m76[0m │             setKeyId(keyRotationInfo)
2025-06-04T21:52:29.0134230Z     ╰────
2025-06-04T21:52:29.0135336Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0136006Z 
2025-06-04T21:52:29.0136828Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0137894Z      ╭─[[38;2;92;157;255;1msrc/components/demo/FHEDemo.tsx[0m:165:41]
2025-06-04T21:52:29.0138637Z  [2m164[0m │         if ('processEncrypted' in fheService) {
2025-06-04T21:52:29.0139859Z  [2m165[0m │           result = await (fheService as any).processEncrypted(
2025-06-04T21:52:29.0140678Z      · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.0141363Z  [2m166[0m │             encryptedMessage,
2025-06-04T21:52:29.0141858Z      ╰────
2025-06-04T21:52:29.0142968Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0143638Z 
2025-06-04T21:52:29.0144469Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0145536Z      ╭─[[38;2;92;157;255;1msrc/components/demo/FHEDemo.tsx[0m:210:43]
2025-06-04T21:52:29.0146238Z  [2m209[0m │         if ('rotateKeys' in fheService) {
2025-06-04T21:52:29.0146977Z  [2m210[0m │           newKeyId = await (fheService as any).rotateKeys()
2025-06-04T21:52:29.0147765Z      · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.0148322Z  [2m211[0m │         } else {
2025-06-04T21:52:29.0148705Z      ╰────
2025-06-04T21:52:29.0150201Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0150941Z 
2025-06-04T21:52:29.0151834Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0153122Z     ╭─[[38;2;92;157;255;1msrc/components/admin/backup/BackupConfigurationTab.tsx[0m:32:18]
2025-06-04T21:52:29.0153887Z  [2m31[0m │   region?: string
2025-06-04T21:52:29.0154407Z  [2m32[0m │   [key: string]: any
2025-06-04T21:52:29.0154989Z     · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.0155457Z  [2m33[0m │ }
2025-06-04T21:52:29.0155795Z     ╰────
2025-06-04T21:52:29.0156905Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0157633Z 
2025-06-04T21:52:29.0158509Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0159776Z     ╭─[[38;2;92;157;255;1msrc/hooks/useAnalyticsData.ts[0m:13:11]
2025-06-04T21:52:29.0160380Z  [2m12[0m │   labels: string[]
2025-06-04T21:52:29.0160818Z  [2m13[0m │   series: any[]
2025-06-04T21:52:29.0161311Z     · [38;2;246;87;248m          ───[0m
2025-06-04T21:52:29.0161732Z  [2m14[0m │ }
2025-06-04T21:52:29.0162054Z     ╰────
2025-06-04T21:52:29.0163123Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0163822Z 
2025-06-04T21:52:29.0164704Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0165834Z     ╭─[[38;2;92;157;255;1msrc/hooks/useAnalyticsData.ts[0m:17:24]
2025-06-04T21:52:29.0166467Z  [2m16[0m │ interface TableData {
2025-06-04T21:52:29.0167014Z  [2m17[0m │   data: Record<string, any>[]
2025-06-04T21:52:29.0167623Z     · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.0168083Z  [2m18[0m │ }
2025-06-04T21:52:29.0168402Z     ╰────
2025-06-04T21:52:29.0169660Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0170324Z 
2025-06-04T21:52:29.0171141Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0172192Z      ╭─[[38;2;92;157;255;1msrc/hooks/useAnalyticsData.ts[0m:248:28]
2025-06-04T21:52:29.0172969Z  [2m247[0m │       const events = await analyticsService.getEvents({
2025-06-04T21:52:29.0173645Z  [2m248[0m │         type: eventType as any,
2025-06-04T21:52:29.0174503Z      · [38;2;246;87;248m                           ───[0m
2025-06-04T21:52:29.0175176Z  [2m249[0m │         startTime: now - dayInMs,
2025-06-04T21:52:29.0175650Z      ╰────
2025-06-04T21:52:29.0176881Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0177583Z 
2025-06-04T21:52:29.0178463Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0179863Z     ╭─[[38;2;92;157;255;1msrc/components/analytics/ChartWidget.tsx[0m:65:38]
2025-06-04T21:52:29.0180760Z  [2m64[0m │   const [range, setRange] = useState<TimeRange>('week')
2025-06-04T21:52:29.0181555Z  [2m65[0m │   const [chart, setChart] = useState<any>(null)
2025-06-04T21:52:29.0182301Z     · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.0183026Z  [2m66[0m │   const chartRef = useRef<HTMLCanvasElement>(null)
2025-06-04T21:52:29.0183580Z     ╰────
2025-06-04T21:52:29.0184650Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0185514Z 
2025-06-04T21:52:29.0186347Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0187487Z      ╭─[[38;2;92;157;255;1msrc/components/analytics/ChartWidget.tsx[0m:100:61]
2025-06-04T21:52:29.0188336Z  [2m 99[0m │           // Create and store the chart with proper type casting
2025-06-04T21:52:29.0189318Z  [2m100[0m │           const newChart = new ChartJS.Chart(ctx, config as any)
2025-06-04T21:52:29.0190158Z      · [38;2;246;87;248m                                                            ───[0m
2025-06-04T21:52:29.0190782Z  [2m101[0m │           setChart(newChart)
2025-06-04T21:52:29.0191225Z      ╰────
2025-06-04T21:52:29.0192297Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0192973Z 
2025-06-04T21:52:29.0194577Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(ban-ts-comment): Include a description after the @ts-expect-error directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.[0m
2025-06-04T21:52:29.0196221Z     ╭─[[38;2;92;157;255;1mtests/e2e/user-acceptance.spec.ts[0m:88:11]
2025-06-04T21:52:29.0197103Z  [2m87[0m │       const accessibilityResults = await page.evaluate(async () => {
2025-06-04T21:52:29.0197831Z  [2m88[0m │         // @ts-expect-error
2025-06-04T21:52:29.0198434Z     · [38;2;246;87;248m          ─────────────────[0m
2025-06-04T21:52:29.0199600Z  [2m89[0m │         return await window.mcp_browser_tools_runAccessibilityAudit({ random_string: 'uat' })
2025-06-04T21:52:29.0200434Z     ╰────
2025-06-04T21:52:29.0200623Z 
2025-06-04T21:52:29.0202242Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(ban-ts-comment): Include a description after the @ts-expect-error directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.[0m
2025-06-04T21:52:29.0204016Z     ╭─[[38;2;92;157;255;1mtests/e2e/user-acceptance.spec.ts[0m:96:11]
2025-06-04T21:52:29.0204970Z  [2m95[0m │       const performanceResults = await page.evaluate(async () => {
2025-06-04T21:52:29.0205704Z  [2m96[0m │         // @ts-expect-error
2025-06-04T21:52:29.0206321Z     · [38;2;246;87;248m          ─────────────────[0m
2025-06-04T21:52:29.0207254Z  [2m97[0m │         return await window.mcp_browser_tools_runPerformanceAudit({ random_string: 'uat' })
2025-06-04T21:52:29.0207966Z     ╰────
2025-06-04T21:52:29.0208131Z 
2025-06-04T21:52:29.0209388Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'context' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.0210672Z     ╭─[[38;2;92;157;255;1mtests/e2e/user-acceptance.spec.ts[0m:19:91]
2025-06-04T21:52:29.0211842Z  [2m18[0m │ test.describe('User Acceptance Test (UAT) - Full User Journey', () => {
2025-06-04T21:52:29.0214693Z  [2m19[0m │   test('should complete a full user journey and meet acceptance criteria', async ({ page, context }) => {
2025-06-04T21:52:29.0215872Z     · [38;2;246;87;248m                                                                                          ───┬───[0m
2025-06-04T21:52:29.0216928Z     ·                                                                                              [38;2;246;87;248m╰── [38;2;246;87;248m'context' is declared here[0m[0m
2025-06-04T21:52:29.0217660Z  [2m20[0m │     // 1. Onboarding: Registration
2025-06-04T21:52:29.0218119Z     ╰────
2025-06-04T21:52:29.0218719Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.0219236Z 
2025-06-04T21:52:29.0220058Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0221345Z     ╭─[[38;2;92;157;255;1msrc/components/admin/backup/BackupSettingsTab.tsx[0m:72:29]
2025-06-04T21:52:29.0222374Z  [2m71[0m │       const newSchedule = {
2025-06-04T21:52:29.0223029Z  [2m72[0m │         frequency: value as any,
2025-06-04T21:52:29.0223678Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.0224311Z  [2m73[0m │         hour: settings.schedule.hour,
2025-06-04T21:52:29.0224795Z     ╰────
2025-06-04T21:52:29.0225867Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0226529Z 
2025-06-04T21:52:29.0227395Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0228723Z      ╭─[[38;2;92;157;255;1msrc/components/admin/backup/BackupSettingsTab.tsx[0m:113:36]
2025-06-04T21:52:29.0229731Z  [2m112[0m │         ...settings,
2025-06-04T21:52:29.0230346Z  [2m113[0m │         retention: newRetention as any,
2025-06-04T21:52:29.0231084Z      · [38;2;246;87;248m                                   ───[0m
2025-06-04T21:52:29.0231674Z  [2m114[0m │       })
2025-06-04T21:52:29.0232070Z      ╰────
2025-06-04T21:52:29.0233200Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0233900Z 
2025-06-04T21:52:29.0234774Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0236109Z     ╭─[[38;2;92;157;255;1msrc/components/analytics/ConversionDashboard.tsx[0m:28:18]
2025-06-04T21:52:29.0236858Z  [2m27[0m │   source?: string
2025-06-04T21:52:29.0237339Z  [2m28[0m │   [key: string]: any
2025-06-04T21:52:29.0237886Z     · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.0238339Z  [2m29[0m │ }
2025-06-04T21:52:29.0238696Z     ╰────
2025-06-04T21:52:29.0239961Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0240645Z 
2025-06-04T21:52:29.0241722Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;[0m
2025-06-04T21:52:29.0243167Z     ╭─[[38;2;92;157;255;1msrc/components/admin/backup/BackupScheduleTab.tsx[0m:68:75]
2025-06-04T21:52:29.0244236Z  [2m67[0m │         <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
2025-06-04T21:52:29.0245241Z  [2m68[0m │           Configure when automatic backups are performed and how long they're
2025-06-04T21:52:29.0246186Z     · [38;2;246;87;248m                                                                          ─[0m
2025-06-04T21:52:29.0246781Z  [2m69[0m │           retained.
2025-06-04T21:52:29.0247184Z     ╰────
2025-06-04T21:52:29.0247570Z 
2025-06-04T21:52:29.0248595Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;[0m
2025-06-04T21:52:29.0250433Z      ╭─[[38;2;92;157;255;1msrc/components/admin/backup/BackupScheduleTab.tsx[0m:179:65]
2025-06-04T21:52:29.0251488Z  [2m178[0m │               <p className="text-gray-500 dark:text-gray-400">
2025-06-04T21:52:29.0252414Z  [2m179[0m │                 Run a recovery test for each backup to verify it's valid and can
2025-06-04T21:52:29.0253311Z      · [38;2;246;87;248m                                                                ─[0m
2025-06-04T21:52:29.0253921Z  [2m180[0m │                 be restored
2025-06-04T21:52:29.0254391Z      ╰────
2025-06-04T21:52:29.0254578Z 
2025-06-04T21:52:29.0255445Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0256702Z     ╭─[[38;2;92;157;255;1msrc/components/analytics/TreatmentForecastForm.tsx[0m:86:19]
2025-06-04T21:52:29.0257556Z  [2m85[0m │       setResults(data.data.forecasts);
2025-06-04T21:52:29.0258151Z  [2m86[0m │     } catch (err: any) {
2025-06-04T21:52:29.0258705Z     · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.0259552Z  [2m87[0m │       setError(err.message || 'Unknown error');
2025-06-04T21:52:29.0260072Z     ╰────
2025-06-04T21:52:29.0261155Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0261879Z 
2025-06-04T21:52:29.0262737Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(jsx-key): Missing "key" prop for element in iterator.[0m
2025-06-04T21:52:29.0264069Z      ╭─[[38;2;92;157;255;1msrc/components/admin/backup/BackupHistoryTab.tsx[0m:288:31]
2025-06-04T21:52:29.0264838Z  [2m287[0m │             ) : (
2025-06-04T21:52:29.0265495Z  [2m288[0m │               filteredBackups.map((backup) => (
2025-06-04T21:52:29.0266310Z      · [38;2;246;87;248m                              ─┬─[0m
2025-06-04T21:52:29.0267215Z      ·                                [38;2;246;87;248m╰── [38;2;246;87;248mIterator starts here.[0m[0m
2025-06-04T21:52:29.0267917Z  [2m289[0m │                 <>
2025-06-04T21:52:29.0268487Z      · [38;2;30;201;212m                ─┬[0m
2025-06-04T21:52:29.0269497Z      ·                  [38;2;30;201;212m╰── [38;2;30;201;212mElement generated here.[0m[0m
2025-06-04T21:52:29.0270177Z  [2m290[0m │                   <tr
2025-06-04T21:52:29.0270603Z      ╰────
2025-06-04T21:52:29.0271968Z [38;2;106;159;181m  help: [0mAdd a "key" prop to the element in the iterator (https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key).
2025-06-04T21:52:29.0272821Z 
2025-06-04T21:52:29.0273877Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'axeResults' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.0275422Z     ╭─[[38;2;92;157;255;1mtests/accessibility/screen-reader.spec.ts[0m:44:13]
2025-06-04T21:52:29.0276384Z  [2m43[0m │       // Run axe analysis focusing on screen reader related rules
2025-06-04T21:52:29.0277295Z  [2m44[0m │       const axeResults = await new AxeBuilder({ page: pageContext })
2025-06-04T21:52:29.0278038Z     · [38;2;246;87;248m            ─────┬────[0m
2025-06-04T21:52:29.0278846Z     ·                  [38;2;246;87;248m╰── [38;2;246;87;248m'axeResults' is declared here[0m[0m
2025-06-04T21:52:29.0279808Z  [2m45[0m │         .withTags(['wcag2a', 'wcag2aa'])
2025-06-04T21:52:29.0280292Z     ╰────
2025-06-04T21:52:29.0280902Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.0281282Z 
2025-06-04T21:52:29.0282111Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0283258Z     ╭─[[38;2;92;157;255;1mtests/accessibility/critical-pages.spec.ts[0m:65:40]
2025-06-04T21:52:29.0284046Z  [2m64[0m │ // Format violations with WCAG criteria
2025-06-04T21:52:29.0285103Z  [2m65[0m │ function enhanceViolations(violations: any[]): EnhancedViolation[] {
2025-06-04T21:52:29.0285991Z     · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.0286650Z  [2m66[0m │   return violations.map((violation) => {
2025-06-04T21:52:29.0287117Z     ╰────
2025-06-04T21:52:29.0288191Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0288854Z 
2025-06-04T21:52:29.0289837Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0291118Z     ╭─[[38;2;92;157;255;1msrc/components/analytics/AdvancedFilteringComponent.tsx[0m:63:29]
2025-06-04T21:52:29.0291944Z  [2m62[0m │   // Additional metadata filters
2025-06-04T21:52:29.0292593Z  [2m63[0m │   metadata?: Record<string, any>
2025-06-04T21:52:29.0293228Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.0293751Z  [2m64[0m │ 
2025-06-04T21:52:29.0294097Z     ╰────
2025-06-04T21:52:29.0295242Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0296004Z 
2025-06-04T21:52:29.0297013Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0298386Z      ╭─[[38;2;92;157;255;1msrc/components/analytics/AdvancedFilteringComponent.tsx[0m:115:12]
2025-06-04T21:52:29.0299380Z  [2m114[0m │     key: string,
2025-06-04T21:52:29.0299850Z  [2m115[0m │     value: any,
2025-06-04T21:52:29.0300353Z      · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.0300794Z  [2m116[0m │   ) => {
2025-06-04T21:52:29.0301148Z      ╰────
2025-06-04T21:52:29.0302243Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0302904Z 
2025-06-04T21:52:29.0303732Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0305018Z      ╭─[[38;2;92;157;255;1msrc/components/analytics/AdvancedFilteringComponent.tsx[0m:120:35]
2025-06-04T21:52:29.0305795Z  [2m119[0m │       [category]: {
2025-06-04T21:52:29.0306418Z  [2m120[0m │         ...((options[category] as any) || {}),
2025-06-04T21:52:29.0307196Z      · [38;2;246;87;248m                                  ───[0m
2025-06-04T21:52:29.0307810Z  [2m121[0m │         [key]: value,
2025-06-04T21:52:29.0308260Z      ╰────
2025-06-04T21:52:29.0309577Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0310281Z 
2025-06-04T21:52:29.0311392Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0312719Z      ╭─[[38;2;92;157;255;1msrc/components/analytics/AdvancedFilteringComponent.tsx[0m:131:12]
2025-06-04T21:52:29.0313496Z  [2m130[0m │     key: string,
2025-06-04T21:52:29.0313947Z  [2m131[0m │     value: any,
2025-06-04T21:52:29.0314433Z      · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.0314877Z  [2m132[0m │   ) => {
2025-06-04T21:52:29.0315227Z      ╰────
2025-06-04T21:52:29.0316315Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0317028Z 
2025-06-04T21:52:29.0317914Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0319451Z      ╭─[[38;2;92;157;255;1msrc/components/analytics/AdvancedFilteringComponent.tsx[0m:136:35]
2025-06-04T21:52:29.0320368Z  [2m135[0m │       [category]: {
2025-06-04T21:52:29.0321030Z  [2m136[0m │         ...((options[category] as any) || {}),
2025-06-04T21:52:29.0321987Z      · [38;2;246;87;248m                                  ───[0m
2025-06-04T21:52:29.0322636Z  [2m137[0m │         [parentKey]: {
2025-06-04T21:52:29.0323083Z      ╰────
2025-06-04T21:52:29.0324184Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0324854Z 
2025-06-04T21:52:29.0325676Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0326950Z      ╭─[[38;2;92;157;255;1msrc/components/analytics/AdvancedFilteringComponent.tsx[0m:138:37]
2025-06-04T21:52:29.0327733Z  [2m137[0m │         [parentKey]: {
2025-06-04T21:52:29.0328401Z  [2m138[0m │           ...((options[category] as any)?.[parentKey] || {}),
2025-06-04T21:52:29.0329352Z      · [38;2;246;87;248m                                    ───[0m
2025-06-04T21:52:29.0329927Z  [2m139[0m │           [key]: value,
2025-06-04T21:52:29.0330343Z      ╰────
2025-06-04T21:52:29.0331419Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0332081Z 
2025-06-04T21:52:29.0332879Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0334150Z      ╭─[[38;2;92;157;255;1msrc/components/analytics/AdvancedFilteringComponent.tsx[0m:151:49]
2025-06-04T21:52:29.0334861Z  [2m150[0m │   ) => {
2025-06-04T21:52:29.0335629Z  [2m151[0m │     const currentArray = ((options[category] as any)?.[key] as string[]) || []
2025-06-04T21:52:29.0336527Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0337254Z  [2m152[0m │     const newArray = currentArray.includes(value)
2025-06-04T21:52:29.0337796Z      ╰────
2025-06-04T21:52:29.0339875Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0340611Z 
2025-06-04T21:52:29.0341514Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0342561Z     ╭─[[38;2;92;157;255;1mapi/middleware.ts[0m:9:18]
2025-06-04T21:52:29.0343115Z  [2m 8[0m │   ip?: string
2025-06-04T21:52:29.0343637Z  [2m 9[0m │   [key: string]: any
2025-06-04T21:52:29.0344210Z     · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.0344649Z  [2m10[0m │ }
2025-06-04T21:52:29.0344974Z     ╰────
2025-06-04T21:52:29.0346026Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0349696Z 
2025-06-04T21:52:29.0350549Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0351905Z     ╭─[[38;2;92;157;255;1msrc/test-utils/astro-test-utils.ts[0m:9:18]
2025-06-04T21:52:29.0352557Z  [2m 8[0m │   description?: string
2025-06-04T21:52:29.0353061Z  [2m 9[0m │   [key: string]: any
2025-06-04T21:52:29.0353585Z     · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.0354025Z  [2m10[0m │ }
2025-06-04T21:52:29.0354350Z     ╰────
2025-06-04T21:52:29.0355415Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0356088Z 
2025-06-04T21:52:29.0356906Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0358054Z     ╭─[[38;2;92;157;255;1msrc/components/analytics/FilterControls.tsx[0m:51:58]
2025-06-04T21:52:29.0358657Z  [2m50[0m │ 
2025-06-04T21:52:29.0359551Z  [2m51[0m │   const handleChange = (key: keyof FilterOptions, value: any) => {
2025-06-04T21:52:29.0360522Z     · [38;2;246;87;248m                                                         ───[0m
2025-06-04T21:52:29.0361568Z  [2m52[0m │     let newOptions = { ...options, [key]: value }
2025-06-04T21:52:29.0362111Z     ╰────
2025-06-04T21:52:29.0363191Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0363857Z 
2025-06-04T21:52:29.0364686Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0365924Z     ╭─[[38;2;92;157;255;1msrc/tests/browser-compatibility.test.ts[0m:42:13]
2025-06-04T21:52:29.0366605Z  [2m41[0m │     }: {
2025-06-04T21:52:29.0367010Z  [2m42[0m │       page: any
2025-06-04T21:52:29.0367527Z     · [38;2;246;87;248m            ───[0m
2025-06-04T21:52:29.0367979Z  [2m43[0m │     }) => {
2025-06-04T21:52:29.0368363Z     ╰────
2025-06-04T21:52:29.0369639Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0370373Z 
2025-06-04T21:52:29.0371292Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0372536Z     ╭─[[38;2;92;157;255;1msrc/tests/browser-compatibility.test.ts[0m:83:11]
2025-06-04T21:52:29.0373162Z  [2m82[0m │   }: {
2025-06-04T21:52:29.0373543Z  [2m83[0m │     page: any
2025-06-04T21:52:29.0374034Z     · [38;2;246;87;248m          ───[0m
2025-06-04T21:52:29.0374553Z  [2m84[0m │     browserName: string
2025-06-04T21:52:29.0375032Z     ╰────
2025-06-04T21:52:29.0376107Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0376864Z 
2025-06-04T21:52:29.0377776Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0379290Z      ╭─[[38;2;92;157;255;1msrc/components/therapy/TreatmentPlanManager.tsx[0m:165:33]
2025-06-04T21:52:29.0380130Z  [2m164[0m │       if (updatedGoals[index]) {
2025-06-04T21:52:29.0381185Z  [2m165[0m │         (updatedGoals[index] as any)[field] = value; // Keep as any for simplicity given EditableGoal union
2025-06-04T21:52:29.0382154Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.0383286Z  [2m166[0m │         setEditingPlanData((prev: FormUpdatePlanData | null) => prev ? { ...prev, goals: updatedGoals } : null);
2025-06-04T21:52:29.0384131Z      ╰────
2025-06-04T21:52:29.0385213Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0385919Z 
2025-06-04T21:52:29.0386773Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0388350Z      ╭─[[38;2;92;157;255;1msrc/components/therapy/TreatmentPlanManager.tsx[0m:171:33]
2025-06-04T21:52:29.0389373Z  [2m170[0m │       if (updatedGoals[index]) {
2025-06-04T21:52:29.0390367Z  [2m171[0m │         (updatedGoals[index] as any)[field] = value; // ClientSideNewGoal is more straightforward
2025-06-04T21:52:29.0391319Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.0392359Z  [2m172[0m │         setNewPlanData((prev: FormNewPlanData) => ({ ...prev, goals: updatedGoals }));
2025-06-04T21:52:29.0393129Z      ╰────
2025-06-04T21:52:29.0394312Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0394970Z 
2025-06-04T21:52:29.0395842Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0397188Z      ╭─[[38;2;92;157;255;1msrc/components/therapy/TreatmentPlanManager.tsx[0m:223:58]
2025-06-04T21:52:29.0398532Z  [2m222[0m │       if (updatedGoals[goalIndex] && updatedGoals[goalIndex].objectives[objIndex]) {
2025-06-04T21:52:29.0399880Z  [2m223[0m │         (updatedGoals[goalIndex].objectives[objIndex] as any)[field] = value;
2025-06-04T21:52:29.0400899Z      · [38;2;246;87;248m                                                         ───[0m
2025-06-04T21:52:29.0402107Z  [2m224[0m │         setEditingPlanData((prev: FormUpdatePlanData | null) => prev ? { ...prev, goals: updatedGoals } : null);
2025-06-04T21:52:29.0402960Z      ╰────
2025-06-04T21:52:29.0404027Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0404689Z 
2025-06-04T21:52:29.0405548Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0406878Z      ╭─[[38;2;92;157;255;1msrc/components/therapy/TreatmentPlanManager.tsx[0m:229:61]
2025-06-04T21:52:29.0408107Z  [2m228[0m │       if (updatedNewGoals[goalIndex] && updatedNewGoals[goalIndex].objectives[objIndex]) {
2025-06-04T21:52:29.0409659Z  [2m229[0m │         (updatedNewGoals[goalIndex].objectives[objIndex] as any)[field] = value;
2025-06-04T21:52:29.0410679Z      · [38;2;246;87;248m                                                            ───[0m
2025-06-04T21:52:29.0411721Z  [2m230[0m │         setNewPlanData((prev: FormNewPlanData) => ({ ...prev, goals: updatedNewGoals }));
2025-06-04T21:52:29.0412442Z      ╰────
2025-06-04T21:52:29.0413519Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0417719Z 
2025-06-04T21:52:29.0418741Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.0420282Z      ╭─[[38;2;92;157;255;1msrc/components/therapy/TreatmentPlanManager.tsx[0m:578:22]
2025-06-04T21:52:29.0421406Z  [2m577[0m │               This action cannot be undone. This will permanently delete the treatment plan
2025-06-04T21:52:29.0422656Z  [2m578[0m │               titled "<strong>{planToDelete?.title}</strong>" and all its associated goals and objectives.
2025-06-04T21:52:29.0423542Z      · [38;2;246;87;248m                     ─[0m
2025-06-04T21:52:29.0424154Z  [2m579[0m │             </AlertDialogDescription>
2025-06-04T21:52:29.0424637Z      ╰────
2025-06-04T21:52:29.0424800Z 
2025-06-04T21:52:29.0425794Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.0427222Z      ╭─[[38;2;92;157;255;1msrc/components/therapy/TreatmentPlanManager.tsx[0m:578:61]
2025-06-04T21:52:29.0428419Z  [2m577[0m │               This action cannot be undone. This will permanently delete the treatment plan
2025-06-04T21:52:29.0430141Z  [2m578[0m │               titled "<strong>{planToDelete?.title}</strong>" and all its associated goals and objectives.
2025-06-04T21:52:29.0431177Z      · [38;2;246;87;248m                                                            ─[0m
2025-06-04T21:52:29.0431867Z  [2m579[0m │             </AlertDialogDescription>
2025-06-04T21:52:29.0432415Z      ╰────
2025-06-04T21:52:29.0432596Z 
2025-06-04T21:52:29.0433647Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.0435037Z      ╭─[[38;2;92;157;255;1msrc/components/therapy/TreatmentPlanManager.tsx[0m:612:38]
2025-06-04T21:52:29.0435972Z  [2m611[0m │             <p className="text-sm text-muted-foreground mb-4">
2025-06-04T21:52:29.0436809Z  [2m612[0m │               Update the details for "{editingPlanData.title}".
2025-06-04T21:52:29.0437582Z      · [38;2;246;87;248m                                     ─[0m
2025-06-04T21:52:29.0438125Z  [2m613[0m │             </p>
2025-06-04T21:52:29.0438517Z      ╰────
2025-06-04T21:52:29.0438875Z 
2025-06-04T21:52:29.0440156Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.0441570Z      ╭─[[38;2;92;157;255;1msrc/components/therapy/TreatmentPlanManager.tsx[0m:612:62]
2025-06-04T21:52:29.0442552Z  [2m611[0m │             <p className="text-sm text-muted-foreground mb-4">
2025-06-04T21:52:29.0443420Z  [2m612[0m │               Update the details for "{editingPlanData.title}".
2025-06-04T21:52:29.0444318Z      · [38;2;246;87;248m                                                             ─[0m
2025-06-04T21:52:29.0444946Z  [2m613[0m │             </p>
2025-06-04T21:52:29.0445369Z      ╰────
2025-06-04T21:52:29.0445550Z 
2025-06-04T21:52:29.0446635Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Catch parameter 'e' is caught but never used. Unused caught errors should start with a '_'.[0m
2025-06-04T21:52:29.0448000Z     ╭─[[38;2;92;157;255;1msrc/components/therapy/TreatmentPlanManager.tsx[0m:41:12]
2025-06-04T21:52:29.0448888Z  [2m40[0m │     return new Date(dateString).toLocaleDateString();
2025-06-04T21:52:29.0449697Z  [2m41[0m │   } catch (e) {
2025-06-04T21:52:29.0450180Z     · [38;2;246;87;248m           ┬[0m
2025-06-04T21:52:29.0450878Z     ·            [38;2;246;87;248m╰── [38;2;246;87;248m'e' is declared here[0m[0m
2025-06-04T21:52:29.0451540Z  [2m42[0m │     return String(dateString); 
2025-06-04T21:52:29.0451991Z     ╰────
2025-06-04T21:52:29.0452560Z [38;2;106;159;181m  help: [0mConsider handling this error.
2025-06-04T21:52:29.0452924Z 
2025-06-04T21:52:29.0453739Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0454937Z     ╭─[[38;2;92;157;255;1msrc/components/analytics/TableWidget.tsx[0m:19:20]
2025-06-04T21:52:29.0455629Z  [2m18[0m │   label: string
2025-06-04T21:52:29.0456326Z  [2m19[0m │   render?: (value: any, row: any) => React.ReactNode
2025-06-04T21:52:29.0457007Z     · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.0457538Z  [2m20[0m │   sortable?: boolean
2025-06-04T21:52:29.0457943Z     ╰────
2025-06-04T21:52:29.0459195Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0459907Z 
2025-06-04T21:52:29.0460791Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0461998Z     ╭─[[38;2;92;157;255;1msrc/components/analytics/TableWidget.tsx[0m:19:30]
2025-06-04T21:52:29.0462656Z  [2m18[0m │   label: string
2025-06-04T21:52:29.0463307Z  [2m19[0m │   render?: (value: any, row: any) => React.ReactNode
2025-06-04T21:52:29.0464271Z     · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.0464818Z  [2m20[0m │   sortable?: boolean
2025-06-04T21:52:29.0465234Z     ╰────
2025-06-04T21:52:29.0466307Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0466970Z 
2025-06-04T21:52:29.0467790Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0468912Z     ╭─[[38;2;92;157;255;1msrc/components/analytics/TableWidget.tsx[0m:28:24]
2025-06-04T21:52:29.0469758Z  [2m27[0m │   columns: Column[]
2025-06-04T21:52:29.0470275Z  [2m28[0m │   data: Record<string, any>[]
2025-06-04T21:52:29.0470861Z     · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.0471393Z  [2m29[0m │   isLoading?: boolean
2025-06-04T21:52:29.0471810Z     ╰────
2025-06-04T21:52:29.0472888Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0473537Z 
2025-06-04T21:52:29.0474519Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0475662Z     ╭─[[38;2;92;157;255;1msrc/components/analytics/TableWidget.tsx[0m:34:44]
2025-06-04T21:52:29.0476381Z  [2m33[0m │   enableExport?: boolean
2025-06-04T21:52:29.0477058Z  [2m34[0m │   fetchData?: () => Promise<Record<string, any>[]>
2025-06-04T21:52:29.0477814Z     · [38;2;246;87;248m                                           ───[0m
2025-06-04T21:52:29.0478437Z  [2m35[0m │   pagination?: {
2025-06-04T21:52:29.0478870Z     ╰────
2025-06-04T21:52:29.0484352Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0485036Z 
2025-06-04T21:52:29.0485919Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0487075Z     ╭─[[38;2;92;157;255;1msrc/components/analytics/TableWidget.tsx[0m:54:51]
2025-06-04T21:52:29.0488738Z  [2m53[0m │ }: TableWidgetProps) {
2025-06-04T21:52:29.0489712Z  [2m54[0m │   const [data, setData] = useState<Record<string, any>[]>(initialData)
2025-06-04T21:52:29.0490587Z     · [38;2;246;87;248m                                                  ───[0m
2025-06-04T21:52:29.0491460Z  [2m55[0m │   const [isLoading, setIsLoading] = useState(initialLoading)
2025-06-04T21:52:29.0492106Z     ╰────
2025-06-04T21:52:29.0493217Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0493894Z 
2025-06-04T21:52:29.0494732Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0495968Z     ╭─[[38;2;92;157;255;1msrc/components/accessibility/LiveRegionContext.tsx[0m:88:16]
2025-06-04T21:52:29.0496837Z  [2m87[0m │       type: 'status' | 'alert' | 'log' | 'progress',
2025-06-04T21:52:29.0497436Z  [2m88[0m │       ...args: any[]
2025-06-04T21:52:29.0497968Z     · [38;2;246;87;248m               ───[0m
2025-06-04T21:52:29.0498435Z  [2m89[0m │     ) => {
2025-06-04T21:52:29.0498850Z     ╰────
2025-06-04T21:52:29.0500187Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0500858Z 
2025-06-04T21:52:29.0501623Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:29.0502821Z     ╭─[[38;2;92;157;255;1msrc/components/examples/ConversionTrackingExample.tsx[0m:95:14]
2025-06-04T21:52:29.0503507Z  [2m94[0m │ 
2025-06-04T21:52:29.0503943Z  [2m95[0m │       <style jsx>{`
2025-06-04T21:52:29.0504717Z     · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.0505332Z  [2m96[0m │         .conversion-example {
2025-06-04T21:52:29.0505809Z     ╰────
2025-06-04T21:52:29.0506378Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:29.0506726Z 
2025-06-04T21:52:29.0507784Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;[0m
2025-06-04T21:52:29.0509442Z     ╭─[[38;2;92;157;255;1msrc/components/examples/ConversionTrackingExample.tsx[0m:78:19]
2025-06-04T21:52:29.0510318Z  [2m77[0m │             <h3>Conversion Complete!</h3>
2025-06-04T21:52:29.0511056Z  [2m78[0m │             <p>You've completed all steps of the funnel.</p>
2025-06-04T21:52:29.0511707Z     · [38;2;246;87;248m                  ─[0m
2025-06-04T21:52:29.0512402Z  [2m79[0m │             <button onClick={resetDemo}>Start Over</button>
2025-06-04T21:52:29.0512987Z     ╰────
2025-06-04T21:52:29.0513187Z 
2025-06-04T21:52:29.0514047Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0515447Z     ╭─[[38;2;92;157;255;1msrc/pages/admin/__tests__/system-health.test.ts[0m:73:48]
2025-06-04T21:52:29.0516340Z  [2m72[0m │ // Helper function to render Astro components in tests
2025-06-04T21:52:29.0517149Z  [2m73[0m │ async function renderAstroComponent(Component: any) {
2025-06-04T21:52:29.0518014Z     · [38;2;246;87;248m                                               ───[0m
2025-06-04T21:52:29.0518729Z  [2m74[0m │   const html = await Component.render()
2025-06-04T21:52:29.0519430Z     ╰────
2025-06-04T21:52:29.0520495Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0521164Z 
2025-06-04T21:52:29.0521978Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0523095Z     ╭─[[38;2;92;157;255;1msrc/tests/ai/crisis-detection.test.ts[0m:64:64]
2025-06-04T21:52:29.0523687Z  [2m63[0m │   default: {
2025-06-04T21:52:29.0524441Z  [2m64[0m │     chat: vi.fn().mockImplementation(async (messages: string | any[]) => {
2025-06-04T21:52:29.0525335Z     · [38;2;246;87;248m                                                               ───[0m
2025-06-04T21:52:29.0526089Z  [2m65[0m │       const text = messages[messages.length - 1].content
2025-06-04T21:52:29.0526621Z     ╰────
2025-06-04T21:52:29.0527756Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0528452Z 
2025-06-04T21:52:29.0529816Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'isSearching' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.0531172Z     ╭─[[38;2;92;157;255;1msrc/components/memory/MemoryDashboard.tsx[0m:56:10]
2025-06-04T21:52:29.0532385Z  [2m55[0m │   const [searchResults, setSearchResults] = useState<MemoryEntry[]>([]);
2025-06-04T21:52:29.0533310Z  [2m56[0m │   const [isSearching, setIsSearching] = useState(false);
2025-06-04T21:52:29.0533997Z     · [38;2;246;87;248m         ─────┬─────[0m
2025-06-04T21:52:29.0534775Z     ·               [38;2;246;87;248m╰── [38;2;246;87;248m'isSearching' is declared here[0m[0m
2025-06-04T21:52:29.0535336Z  [2m57[0m │   
2025-06-04T21:52:29.0535651Z     ╰────
2025-06-04T21:52:29.0536256Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.0536634Z 
2025-06-04T21:52:29.0537724Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'isAddModalOpen' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.0539360Z     ╭─[[38;2;92;157;255;1msrc/components/memory/MemoryDashboard.tsx[0m:59:10]
2025-06-04T21:52:29.0540127Z  [2m58[0m │   // New memory form
2025-06-04T21:52:29.0540884Z  [2m59[0m │   const [isAddModalOpen, setIsAddModalOpen] = useState(false);
2025-06-04T21:52:29.0541900Z     · [38;2;246;87;248m         ───────┬──────[0m
2025-06-04T21:52:29.0543711Z     ·                 [38;2;246;87;248m╰── [38;2;246;87;248m'isAddModalOpen' is declared here[0m[0m
2025-06-04T21:52:29.0544645Z  [2m60[0m │   const [newMemoryContent, setNewMemoryContent] = useState('');
2025-06-04T21:52:29.0545258Z     ╰────
2025-06-04T21:52:29.0545878Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.0545894Z 
2025-06-04T21:52:29.0547043Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Catch parameter 'error' is caught but never used. Unused caught errors should start with a '_'.[0m
2025-06-04T21:52:29.0595413Z     ╭─[[38;2;92;157;255;1msrc/components/memory/MemoryDashboard.tsx[0m:89:14]
2025-06-04T21:52:29.0595805Z  [2m88[0m │       setSearchResults(results);
2025-06-04T21:52:29.0596086Z  [2m89[0m │     } catch (error) {
2025-06-04T21:52:29.0596374Z     · [38;2;246;87;248m             ──┬──[0m
2025-06-04T21:52:29.0596901Z     ·                [38;2;246;87;248m╰── [38;2;246;87;248m'error' is declared here[0m[0m
2025-06-04T21:52:29.0597218Z  [2m90[0m │       toast.error('Search failed');
2025-06-04T21:52:29.0597387Z     ╰────
2025-06-04T21:52:29.0597892Z [38;2;106;159;181m  help: [0mConsider handling this error.
2025-06-04T21:52:29.0597909Z 
2025-06-04T21:52:29.0599210Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Catch parameter 'error' is caught but never used. Unused caught errors should start with a '_'.[0m
2025-06-04T21:52:29.0599791Z      ╭─[[38;2;92;157;255;1msrc/components/memory/MemoryDashboard.tsx[0m:115:14]
2025-06-04T21:52:29.0600223Z  [2m114[0m │       toast.success('Memory added successfully');
2025-06-04T21:52:29.0600485Z  [2m115[0m │     } catch (error) {
2025-06-04T21:52:29.0600791Z      · [38;2;246;87;248m             ──┬──[0m
2025-06-04T21:52:29.0601325Z      ·                [38;2;246;87;248m╰── [38;2;246;87;248m'error' is declared here[0m[0m
2025-06-04T21:52:29.0601694Z  [2m116[0m │       toast.error('Failed to add memory');
2025-06-04T21:52:29.0601870Z      ╰────
2025-06-04T21:52:29.0602296Z [38;2;106;159;181m  help: [0mConsider handling this error.
2025-06-04T21:52:29.0602311Z 
2025-06-04T21:52:29.0603391Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Catch parameter 'error' is caught but never used. Unused caught errors should start with a '_'.[0m
2025-06-04T21:52:29.0603889Z      ╭─[[38;2;92;157;255;1msrc/components/memory/MemoryDashboard.tsx[0m:130:14]
2025-06-04T21:52:29.0604298Z  [2m129[0m │       toast.success('Memory updated successfully');
2025-06-04T21:52:29.0604585Z  [2m130[0m │     } catch (error) {
2025-06-04T21:52:29.0604873Z      · [38;2;246;87;248m             ──┬──[0m
2025-06-04T21:52:29.0605351Z      ·                [38;2;246;87;248m╰── [38;2;246;87;248m'error' is declared here[0m[0m
2025-06-04T21:52:29.0606117Z  [2m131[0m │       toast.error('Failed to update memory');
2025-06-04T21:52:29.0606307Z      ╰────
2025-06-04T21:52:29.0606784Z [38;2;106;159;181m  help: [0mConsider handling this error.
2025-06-04T21:52:29.0606809Z 
2025-06-04T21:52:29.0607933Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Catch parameter 'error' is caught but never used. Unused caught errors should start with a '_'.[0m
2025-06-04T21:52:29.0608492Z      ╭─[[38;2;92;157;255;1msrc/components/memory/MemoryDashboard.tsx[0m:139:14]
2025-06-04T21:52:29.0609181Z  [2m138[0m │       toast.success('Memory deleted successfully');
2025-06-04T21:52:29.0609454Z  [2m139[0m │     } catch (error) {
2025-06-04T21:52:29.0609753Z      · [38;2;246;87;248m             ──┬──[0m
2025-06-04T21:52:29.0610240Z      ·                [38;2;246;87;248m╰── [38;2;246;87;248m'error' is declared here[0m[0m
2025-06-04T21:52:29.0610607Z  [2m140[0m │       toast.error('Failed to delete memory');
2025-06-04T21:52:29.0610787Z      ╰────
2025-06-04T21:52:29.0611213Z [38;2;106;159;181m  help: [0mConsider handling this error.
2025-06-04T21:52:29.0611227Z 
2025-06-04T21:52:29.0612151Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:29.0612586Z      ╭─[[38;2;92;157;255;1msrc/components/TodoReact.tsx[0m:137:14]
2025-06-04T21:52:29.0612784Z  [2m136[0m │ 
2025-06-04T21:52:29.0613046Z  [2m137[0m │       <style jsx>{`
2025-06-04T21:52:29.0613342Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.0613625Z  [2m138[0m │         .todo-component {
2025-06-04T21:52:29.0613801Z      ╰────
2025-06-04T21:52:29.0614222Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:29.0614238Z 
2025-06-04T21:52:29.0615073Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0615483Z      ╭─[[38;2;92;157;255;1msrc/tests/crypto.test.ts[0m:617:39]
2025-06-04T21:52:29.0615712Z  [2m616[0m │         ...actual,
2025-06-04T21:52:29.0616105Z  [2m617[0m │         createCryptoSystem: (options: any) => {
2025-06-04T21:52:29.0616522Z      · [38;2;246;87;248m                                      ───[0m
2025-06-04T21:52:29.0616881Z  [2m618[0m │           const scheduledRotationEnabled =
2025-06-04T21:52:29.0617038Z      ╰────
2025-06-04T21:52:29.0617955Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0617975Z 
2025-06-04T21:52:29.0618782Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0619335Z      ╭─[[38;2;92;157;255;1msrc/tests/crypto.test.ts[0m:674:10]
2025-06-04T21:52:29.0619740Z  [2m673[0m │       enableScheduledRotation: true,
2025-06-04T21:52:29.0620090Z  [2m674[0m │     } as any) as ExtendedCryptoSystem
2025-06-04T21:52:29.0620388Z      · [38;2;246;87;248m         ───[0m
2025-06-04T21:52:29.0620576Z  [2m675[0m │ 
2025-06-04T21:52:29.0620758Z      ╰────
2025-06-04T21:52:29.0621741Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0621756Z 
2025-06-04T21:52:29.0622600Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0623147Z     ╭─[[38;2;92;157;255;1msrc/components/__tests__/SearchDemo.astro.test.ts[0m:53:48]
2025-06-04T21:52:29.0623564Z  [2m52[0m │ // Helper function to render Astro components in tests
2025-06-04T21:52:29.0624073Z  [2m53[0m │ async function renderAstroComponent(Component: any, props = {}) {
2025-06-04T21:52:29.0624475Z     · [38;2;246;87;248m                                               ───[0m
2025-06-04T21:52:29.0624838Z  [2m54[0m │   const { default: defaultExport } = Component
2025-06-04T21:52:29.0625223Z     ╰────
2025-06-04T21:52:29.0626178Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0626196Z 
2025-06-04T21:52:29.0627073Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0627600Z     ╭─[[38;2;92;157;255;1msrc/simulator/services/FeedbackService.ts[0m:70:31]
2025-06-04T21:52:29.0628073Z  [2m69[0m │   private modelLoadingPromise: Promise<void> | null = null
2025-06-04T21:52:29.0628423Z  [2m70[0m │   private mentalLLaMAAdapter: any = null
2025-06-04T21:52:29.0628768Z     · [38;2;246;87;248m                              ───[0m
2025-06-04T21:52:29.0668024Z  [2m71[0m │   private mentalArenaAdapter: any = null
2025-06-04T21:52:29.0668300Z     ╰────
2025-06-04T21:52:29.0669473Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0669514Z 
2025-06-04T21:52:29.0670630Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0671243Z     ╭─[[38;2;92;157;255;1msrc/simulator/services/FeedbackService.ts[0m:71:31]
2025-06-04T21:52:29.0671647Z  [2m70[0m │   private mentalLLaMAAdapter: any = null
2025-06-04T21:52:29.0672022Z  [2m71[0m │   private mentalArenaAdapter: any = null
2025-06-04T21:52:29.0672383Z     · [38;2;246;87;248m                              ───[0m
2025-06-04T21:52:29.0672722Z  [2m72[0m │   private togetherAIService: any = null
2025-06-04T21:52:29.0672897Z     ╰────
2025-06-04T21:52:29.0673823Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0673839Z 
2025-06-04T21:52:29.0674677Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0675191Z     ╭─[[38;2;92;157;255;1msrc/simulator/services/FeedbackService.ts[0m:72:30]
2025-06-04T21:52:29.0675579Z  [2m71[0m │   private mentalArenaAdapter: any = null
2025-06-04T21:52:29.0675925Z  [2m72[0m │   private togetherAIService: any = null
2025-06-04T21:52:29.0676361Z     · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.0676740Z  [2m73[0m │   private isEnhancedModelLoaded = false
2025-06-04T21:52:29.0676930Z     ╰────
2025-06-04T21:52:29.0677895Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0677913Z 
2025-06-04T21:52:29.0678787Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0679544Z      ╭─[[38;2;92;157;255;1msrc/simulator/services/FeedbackService.ts[0m:289:27]
2025-06-04T21:52:29.0680048Z  [2m288[0m │   private async analyzeTranscribedText(): Promise<{
2025-06-04T21:52:29.0680373Z  [2m289[0m │     mentalHealthInsights: any
2025-06-04T21:52:29.0680745Z      · [38;2;246;87;248m                          ───[0m
2025-06-04T21:52:29.0681067Z  [2m290[0m │     therapeuticSuggestions: any
2025-06-04T21:52:29.0681233Z      ╰────
2025-06-04T21:52:29.0682161Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0682176Z 
2025-06-04T21:52:29.0682995Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0683502Z      ╭─[[38;2;92;157;255;1msrc/simulator/services/FeedbackService.ts[0m:290:29]
2025-06-04T21:52:29.0683795Z  [2m289[0m │     mentalHealthInsights: any
2025-06-04T21:52:29.0684100Z  [2m290[0m │     therapeuticSuggestions: any
2025-06-04T21:52:29.0684689Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.0684900Z  [2m291[0m │   }> {
2025-06-04T21:52:29.0685070Z      ╰────
2025-06-04T21:52:29.0686053Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0686071Z 
2025-06-04T21:52:29.0686900Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0687540Z     ╭─[[38;2;92;157;255;1msrc/components/__tests__/MentalHealthChatDemo.astro.test.ts[0m:11:18]
2025-06-04T21:52:29.0687791Z  [2m10[0m │   description?: string
2025-06-04T21:52:29.0688025Z  [2m11[0m │   [key: string]: any
2025-06-04T21:52:29.0688313Z     · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.0688475Z  [2m12[0m │ }
2025-06-04T21:52:29.0688634Z     ╰────
2025-06-04T21:52:29.0689740Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0689772Z 
2025-06-04T21:52:29.0690787Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0691424Z     ╭─[[38;2;92;157;255;1msrc/components/__tests__/MentalHealthChatDemo.astro.test.ts[0m:88:48]
2025-06-04T21:52:29.0691873Z  [2m87[0m │ // Helper function to render Astro components in tests
2025-06-04T21:52:29.0692436Z  [2m88[0m │ async function renderAstroComponent(Component: any, props = {}) {
2025-06-04T21:52:29.0692872Z     · [38;2;246;87;248m                                               ───[0m
2025-06-04T21:52:29.0693274Z  [2m89[0m │   const { default: defaultExport } = Component
2025-06-04T21:52:29.0693451Z     ╰────
2025-06-04T21:52:29.0694409Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0694425Z 
2025-06-04T21:52:29.0695302Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0695846Z     ╭─[[38;2;92;157;255;1msrc/components/__tests__/AIChat.astro.test.ts[0m:10:18]
2025-06-04T21:52:29.0696105Z  [2m 9[0m │   description?: string
2025-06-04T21:52:29.0696353Z  [2m10[0m │   [key: string]: any
2025-06-04T21:52:29.0696644Z     · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.0696807Z  [2m11[0m │ }
2025-06-04T21:52:29.0696959Z     ╰────
2025-06-04T21:52:29.0697868Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0697882Z 
2025-06-04T21:52:29.0698684Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0700213Z     ╭─[[38;2;92;157;255;1msrc/components/__tests__/AIChat.astro.test.ts[0m:98:48]
2025-06-04T21:52:29.0700723Z  [2m97[0m │ // Helper function to render Astro components in tests
2025-06-04T21:52:29.0701260Z  [2m98[0m │ async function renderAstroComponent(Component: any, props = {}) {
2025-06-04T21:52:29.0701678Z     · [38;2;246;87;248m                                               ───[0m
2025-06-04T21:52:29.0702055Z  [2m99[0m │   const { default: defaultExport } = Component
2025-06-04T21:52:29.0702217Z     ╰────
2025-06-04T21:52:29.0703134Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0703155Z 
2025-06-04T21:52:29.0703979Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0705101Z     ╭─[[38;2;92;157;255;1msrc/simulator/hooks/useSpeechRecognition.ts[0m:70:33]
2025-06-04T21:52:29.0705414Z  [2m69[0m │   // Refs for speech recognition
2025-06-04T21:52:29.0705758Z  [2m70[0m │   const recognitionRef = useRef<any>(null)
2025-06-04T21:52:29.0706380Z     · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.0706785Z  [2m71[0m │   const listeningRef = useRef<boolean>(false)
2025-06-04T21:52:29.0706997Z     ╰────
2025-06-04T21:52:29.0707936Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0707952Z 
2025-06-04T21:52:29.0708782Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0709504Z      ╭─[[38;2;92;157;255;1msrc/simulator/hooks/useSpeechRecognition.ts[0m:108:47]
2025-06-04T21:52:29.0709877Z  [2m107[0m │     // Configure speech recognition
2025-06-04T21:52:29.0710334Z  [2m108[0m │     recognitionRef.current.onresult = (event: any) => {
2025-06-04T21:52:29.0710763Z      · [38;2;246;87;248m                                              ───[0m
2025-06-04T21:52:29.0711075Z  [2m109[0m │       let finalText = ''
2025-06-04T21:52:29.0711256Z      ╰────
2025-06-04T21:52:29.0713019Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0713043Z 
2025-06-04T21:52:29.0713924Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0714465Z      ╭─[[38;2;92;157;255;1msrc/simulator/hooks/useSpeechRecognition.ts[0m:166:46]
2025-06-04T21:52:29.0714638Z  [2m165[0m │ 
2025-06-04T21:52:29.0715079Z  [2m166[0m │     recognitionRef.current.onerror = (event: any) => {
2025-06-04T21:52:29.0715475Z      · [38;2;246;87;248m                                             ───[0m
2025-06-04T21:52:29.0715991Z  [2m167[0m │       const errorMessage = `Speech recognition error: ${event.error}`
2025-06-04T21:52:29.0716152Z      ╰────
2025-06-04T21:52:29.0717113Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0717153Z 
2025-06-04T21:52:29.0718048Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0718573Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.ts[0m:150:79]
2025-06-04T21:52:29.0718981Z  [2m149[0m │   return user.permissions.some(permission => 
2025-06-04T21:52:29.0720386Z  [2m150[0m │     permission.resource === resource && permission.actions.includes(action as any)
2025-06-04T21:52:29.0720890Z      · [38;2;246;87;248m                                                                              ───[0m
2025-06-04T21:52:29.0721071Z  [2m151[0m │   );
2025-06-04T21:52:29.0721228Z      ╰────
2025-06-04T21:52:29.0722142Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0722180Z 
2025-06-04T21:52:29.0723085Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'createBiasDetectionError' is imported but never used.[0m
2025-06-04T21:52:29.0723564Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.ts[0m:13:3]
2025-06-04T21:52:29.0723863Z  [2m12[0m │   validateTherapeuticSession,
2025-06-04T21:52:29.0724137Z  [2m13[0m │   createBiasDetectionError,
2025-06-04T21:52:29.0724472Z     · [38;2;246;87;248m  ────────────┬───────────[0m
2025-06-04T21:52:29.0725122Z     ·               [38;2;246;87;248m╰── [38;2;246;87;248m'createBiasDetectionError' is imported here[0m[0m
2025-06-04T21:52:29.0725422Z  [2m14[0m │   createAuditLogEntry,
2025-06-04T21:52:29.0725595Z     ╰────
2025-06-04T21:52:29.0726037Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0726052Z 
2025-06-04T21:52:29.0726928Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'createAuditLogEntry' is imported but never used.[0m
2025-06-04T21:52:29.0727632Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.ts[0m:14:3]
2025-06-04T21:52:29.0727956Z  [2m13[0m │   createBiasDetectionError,
2025-06-04T21:52:29.0728258Z  [2m14[0m │   createAuditLogEntry,
2025-06-04T21:52:29.0728592Z     · [38;2;246;87;248m  ─────────┬─────────[0m
2025-06-04T21:52:29.0729368Z     ·            [38;2;246;87;248m╰── [38;2;246;87;248m'createAuditLogEntry' is imported here[0m[0m
2025-06-04T21:52:29.0729650Z  [2m15[0m │   sanitizeTextContent,
2025-06-04T21:52:29.0729811Z     ╰────
2025-06-04T21:52:29.0730251Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0730266Z 
2025-06-04T21:52:29.0731123Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'sanitizeTextContent' is imported but never used.[0m
2025-06-04T21:52:29.0731581Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.ts[0m:15:3]
2025-06-04T21:52:29.0731830Z  [2m14[0m │   createAuditLogEntry,
2025-06-04T21:52:29.0732102Z  [2m15[0m │   sanitizeTextContent,
2025-06-04T21:52:29.0732408Z     · [38;2;246;87;248m  ─────────┬─────────[0m
2025-06-04T21:52:29.0748960Z     ·            [38;2;246;87;248m╰── [38;2;246;87;248m'sanitizeTextContent' is imported here[0m[0m
2025-06-04T21:52:29.0749504Z  [2m16[0m │   generateAnonymizedId
2025-06-04T21:52:29.0749677Z     ╰────
2025-06-04T21:52:29.0750143Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0750159Z 
2025-06-04T21:52:29.0750910Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'AuditAction' is imported but never used.[0m
2025-06-04T21:52:29.0751374Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.ts[0m:28:3]
2025-06-04T21:52:29.0751576Z  [2m27[0m │   UserContext,
2025-06-04T21:52:29.0751767Z  [2m28[0m │   AuditAction
2025-06-04T21:52:29.0752039Z     · [38;2;246;87;248m  ─────┬─────[0m
2025-06-04T21:52:29.0752545Z     ·        [38;2;246;87;248m╰── [38;2;246;87;248m'AuditAction' is imported here[0m[0m
2025-06-04T21:52:29.0752900Z  [2m29[0m │ } from '@/lib/ai/bias-detection/types';
2025-06-04T21:52:29.0753065Z     ╰────
2025-06-04T21:52:29.0753508Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0753522Z 
2025-06-04T21:52:29.0754664Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'cacheHit' is assigned a value but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.0755185Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.ts[0m:336:9]
2025-06-04T21:52:29.0755669Z  [2m335[0m │     const shouldUseCache = !requestData.options?.skipCache;
2025-06-04T21:52:29.0755940Z  [2m336[0m │     let cacheHit = false;
2025-06-04T21:52:29.0756231Z      · [38;2;246;87;248m        ────┬───[0m
2025-06-04T21:52:29.0756776Z      ·             [38;2;246;87;248m╰── [38;2;246;87;248m'cacheHit' is declared here[0m[0m
2025-06-04T21:52:29.0756966Z  [2m337[0m │ 
2025-06-04T21:52:29.0757488Z  [2m338[0m │     if (shouldUseCache) {
2025-06-04T21:52:29.0758420Z  [2m339[0m │       const cachedResult = await cacheManager.analysisCache.getAnalysisResult(validatedSession.sessionId);
2025-06-04T21:52:29.0758702Z  [2m340[0m │       if (cachedResult) {
2025-06-04T21:52:29.0758951Z  [2m341[0m │         cacheHit = true;
2025-06-04T21:52:29.0759456Z      · [38;2;30;201;212m        ────┬───[0m
2025-06-04T21:52:29.0759977Z      ·             [38;2;30;201;212m╰── [38;2;30;201;212mit was last assigned here[0m[0m
2025-06-04T21:52:29.0760914Z  [2m342[0m │         
2025-06-04T21:52:29.0761120Z      ╰────
2025-06-04T21:52:29.0761613Z [38;2;106;159;181m  help: [0mDid you mean to use this variable?
2025-06-04T21:52:29.0761629Z 
2025-06-04T21:52:29.0762479Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0762982Z     ╭─[[38;2;92;157;255;1msrc/simulator/hooks/useRealTimeAnalysis.ts[0m:12:60]
2025-06-04T21:52:29.0763369Z  [2m11[0m │   updateConsent(hasConsent: boolean): void
2025-06-04T21:52:29.0764107Z  [2m12[0m │   on(event: 'error' | 'connectionChange', callback: (data: any) => void): void
2025-06-04T21:52:29.0764558Z     · [38;2;246;87;248m                                                           ───[0m
2025-06-04T21:52:29.0764727Z  [2m13[0m │ }
2025-06-04T21:52:29.0764885Z     ╰────
2025-06-04T21:52:29.0765808Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0765822Z 
2025-06-04T21:52:29.0766642Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-empty-object-type): Do not use an empty interface declaration.[0m
2025-06-04T21:52:29.0767136Z     ╭─[[38;2;92;157;255;1msrc/simulator/hooks/useRealTimeAnalysis.ts[0m:17:60]
2025-06-04T21:52:29.0769361Z  [2m16[0m │ declare module '../services/FeedbackService' {
2025-06-04T21:52:29.0769963Z  [2m17[0m │   interface FeedbackService extends FeedbackServiceMethods {}
2025-06-04T21:52:29.0770429Z     · [38;2;246;87;248m                                                           ──[0m
2025-06-04T21:52:29.0770621Z  [2m18[0m │ }
2025-06-04T21:52:29.0770789Z     ╰────
2025-06-04T21:52:29.0771809Z [38;2;106;159;181m  help: [0mTo avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.
2025-06-04T21:52:29.0771825Z 
2025-06-04T21:52:29.0772639Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0773182Z     ╭─[[38;2;92;157;255;1msrc/workers/__tests__/notification-worker.test.ts[0m:10:36]
2025-06-04T21:52:29.0773421Z  [2m 9[0m │     close: () => void
2025-06-04T21:52:29.0773799Z  [2m10[0m │     emit: (event: string, ...args: any[]) => void
2025-06-04T21:52:29.0774163Z     · [38;2;246;87;248m                                   ───[0m
2025-06-04T21:52:29.0774350Z  [2m11[0m │   }
2025-06-04T21:52:29.0774507Z     ╰────
2025-06-04T21:52:29.0775484Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0775507Z 
2025-06-04T21:52:29.0776437Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0777012Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:20:19]
2025-06-04T21:52:29.0777487Z  [2m19[0m │ describe('Bias Detection Dashboard API Endpoint', () => {
2025-06-04T21:52:29.0777779Z  [2m20[0m │   let mockLogger: any;
2025-06-04T21:52:29.0778097Z     · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.0778388Z  [2m21[0m │   let mockBiasEngine: any;
2025-06-04T21:52:29.0778565Z     ╰────
2025-06-04T21:52:29.0779710Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0779948Z 
2025-06-04T21:52:29.0780814Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0781355Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:21:23]
2025-06-04T21:52:29.0781614Z  [2m20[0m │   let mockLogger: any;
2025-06-04T21:52:29.0781879Z  [2m21[0m │   let mockBiasEngine: any;
2025-06-04T21:52:29.0782188Z     · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.0782347Z  [2m22[0m │ 
2025-06-04T21:52:29.0782506Z     ╰────
2025-06-04T21:52:29.0783416Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0783429Z 
2025-06-04T21:52:29.0784819Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0785377Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:143:10]
2025-06-04T21:52:29.0785570Z  [2m142[0m │       }
2025-06-04T21:52:29.0785758Z  [2m143[0m │     } as any;
2025-06-04T21:52:29.0786188Z      · [38;2;246;87;248m         ───[0m
2025-06-04T21:52:29.0786377Z  [2m144[0m │   };
2025-06-04T21:52:29.0786537Z      ╰────
2025-06-04T21:52:29.0787457Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0787470Z 
2025-06-04T21:52:29.0788279Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0788805Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:180:11]
2025-06-04T21:52:29.0788984Z  [2m179[0m │       };
2025-06-04T21:52:29.0789358Z  [2m180[0m │     }) as any;
2025-06-04T21:52:29.0789623Z      · [38;2;246;87;248m          ───[0m
2025-06-04T21:52:29.0789783Z  [2m181[0m │ 
2025-06-04T21:52:29.0789961Z      ╰────
2025-06-04T21:52:29.0790876Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0790905Z 
2025-06-04T21:52:29.0791709Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0792230Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:186:29]
2025-06-04T21:52:29.0792406Z  [2m185[0m │     };
2025-06-04T21:52:29.0792966Z  [2m186[0m │     (BiasDetectionEngine as any).mockImplementation(() => mockBiasEngine);
2025-06-04T21:52:29.0793303Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.0793473Z  [2m187[0m │   });
2025-06-04T21:52:29.0793653Z      ╰────
2025-06-04T21:52:29.0794639Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0794675Z 
2025-06-04T21:52:29.0795558Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0796147Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:196:49]
2025-06-04T21:52:29.0796530Z  [2m195[0m │       const request = createMockRequest();
2025-06-04T21:52:29.0796941Z  [2m196[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0797349Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0797521Z  [2m197[0m │ 
2025-06-04T21:52:29.0797678Z      ╰────
2025-06-04T21:52:29.0798600Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0798614Z 
2025-06-04T21:52:29.0799623Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0800381Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:223:49]
2025-06-04T21:52:29.0800846Z  [2m222[0m │       const request = createMockRequest({ timeRange: '7d' });
2025-06-04T21:52:29.0801247Z  [2m223[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0801647Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0801813Z  [2m224[0m │ 
2025-06-04T21:52:29.0801974Z      ╰────
2025-06-04T21:52:29.0802890Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0802915Z 
2025-06-04T21:52:29.0803788Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0804371Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:239:49]
2025-06-04T21:52:29.0804900Z  [2m238[0m │       const request = createMockRequest({ demographic: 'female' });
2025-06-04T21:52:29.0805355Z  [2m239[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0805988Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0806190Z  [2m240[0m │ 
2025-06-04T21:52:29.0806379Z      ╰────
2025-06-04T21:52:29.0807335Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0807353Z 
2025-06-04T21:52:29.0808185Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0808730Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:258:49]
2025-06-04T21:52:29.0808923Z  [2m257[0m │       });
2025-06-04T21:52:29.0809621Z  [2m258[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0810032Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0810217Z  [2m259[0m │ 
2025-06-04T21:52:29.0810376Z      ╰────
2025-06-04T21:52:29.0811311Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0811324Z 
2025-06-04T21:52:29.0812139Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0812663Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:285:14]
2025-06-04T21:52:29.0812839Z  [2m284[0m │         }
2025-06-04T21:52:29.0813066Z  [2m285[0m │       })) as any;
2025-06-04T21:52:29.0813930Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.0814123Z  [2m286[0m │ 
2025-06-04T21:52:29.0814283Z      ╰────
2025-06-04T21:52:29.0815204Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0815234Z 
2025-06-04T21:52:29.0816064Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0816667Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:287:49]
2025-06-04T21:52:29.0816854Z  [2m286[0m │ 
2025-06-04T21:52:29.0817290Z  [2m287[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0817722Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0817901Z  [2m288[0m │ 
2025-06-04T21:52:29.0818079Z      ╰────
2025-06-04T21:52:29.0819207Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0819225Z 
2025-06-04T21:52:29.0820064Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0820811Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:327:49]
2025-06-04T21:52:29.0821202Z  [2m326[0m │       const request = createMockRequest();
2025-06-04T21:52:29.0821661Z  [2m327[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0822110Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0822293Z  [2m328[0m │ 
2025-06-04T21:52:29.0822475Z      ╰────
2025-06-04T21:52:29.0823410Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0823427Z 
2025-06-04T21:52:29.0824251Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0824781Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:343:51]
2025-06-04T21:52:29.0825207Z  [2m342[0m │         const request = createMockRequest({ timeRange });
2025-06-04T21:52:29.0825622Z  [2m343[0m │         const response = await GET({ request } as any);
2025-06-04T21:52:29.0826313Z      · [38;2;246;87;248m                                                  ───[0m
2025-06-04T21:52:29.0826541Z  [2m344[0m │ 
2025-06-04T21:52:29.0826727Z      ╰────
2025-06-04T21:52:29.0827702Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0827718Z 
2025-06-04T21:52:29.0828595Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0829351Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:355:49]
2025-06-04T21:52:29.0829886Z  [2m354[0m │       const request = createMockRequest({ timeRange: 'invalid' });
2025-06-04T21:52:29.0830286Z  [2m355[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0830724Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0830890Z  [2m356[0m │ 
2025-06-04T21:52:29.0831049Z      ╰────
2025-06-04T21:52:29.0831988Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0832002Z 
2025-06-04T21:52:29.0832809Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0833342Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:368:49]
2025-06-04T21:52:29.0833685Z  [2m367[0m │       const request = createMockRequest();
2025-06-04T21:52:29.0834076Z  [2m368[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0834469Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0834634Z  [2m369[0m │ 
2025-06-04T21:52:29.0834787Z      ╰────
2025-06-04T21:52:29.0835724Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0835737Z 
2025-06-04T21:52:29.0836556Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0837088Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:380:52]
2025-06-04T21:52:29.0837432Z  [2m379[0m │       const responses = await Promise.all(
2025-06-04T21:52:29.0837849Z  [2m380[0m │         requests.map(request => GET({ request } as any))
2025-06-04T21:52:29.0838289Z      · [38;2;246;87;248m                                                   ───[0m
2025-06-04T21:52:29.0838492Z  [2m381[0m │       );
2025-06-04T21:52:29.0838650Z      ╰────
2025-06-04T21:52:29.0839844Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0840072Z 
2025-06-04T21:52:29.0840963Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0841528Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:422:49]
2025-06-04T21:52:29.0841907Z  [2m421[0m │       const request = createMockRequest();
2025-06-04T21:52:29.0842314Z  [2m422[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0842742Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0842923Z  [2m423[0m │ 
2025-06-04T21:52:29.0843092Z      ╰────
2025-06-04T21:52:29.0844014Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0844028Z 
2025-06-04T21:52:29.0844838Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0845780Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:449:14]
2025-06-04T21:52:29.0845979Z  [2m448[0m │         }
2025-06-04T21:52:29.0846383Z  [2m449[0m │       })) as any;
2025-06-04T21:52:29.0846669Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.0846830Z  [2m450[0m │ 
2025-06-04T21:52:29.0846982Z      ╰────
2025-06-04T21:52:29.0847895Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0847907Z 
2025-06-04T21:52:29.0848704Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0849391Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:451:49]
2025-06-04T21:52:29.0849585Z  [2m450[0m │ 
2025-06-04T21:52:29.0850022Z  [2m451[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0850460Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0850642Z  [2m452[0m │ 
2025-06-04T21:52:29.0850799Z      ╰────
2025-06-04T21:52:29.0851728Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0851750Z 
2025-06-04T21:52:29.0852554Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0853076Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:463:49]
2025-06-04T21:52:29.0853422Z  [2m462[0m │       const request = createMockRequest();
2025-06-04T21:52:29.0853805Z  [2m463[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0854202Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0854360Z  [2m464[0m │ 
2025-06-04T21:52:29.0854519Z      ╰────
2025-06-04T21:52:29.0855431Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0855444Z 
2025-06-04T21:52:29.0856246Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0856765Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:495:12]
2025-06-04T21:52:29.0856945Z  [2m494[0m │         }
2025-06-04T21:52:29.0857159Z  [2m495[0m │       } as any;
2025-06-04T21:52:29.0857436Z      · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.0857598Z  [2m496[0m │ 
2025-06-04T21:52:29.0857752Z      ╰────
2025-06-04T21:52:29.0858657Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0858668Z 
2025-06-04T21:52:29.0859630Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0860417Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:497:49]
2025-06-04T21:52:29.0860629Z  [2m496[0m │ 
2025-06-04T21:52:29.0861076Z  [2m497[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.0861518Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.0861700Z  [2m498[0m │ 
2025-06-04T21:52:29.0861860Z      ╰────
2025-06-04T21:52:29.0863420Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0863439Z 
2025-06-04T21:52:29.0864201Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'APIRoute' is imported but never used.[0m
2025-06-04T21:52:29.0864785Z    ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:6:15]
2025-06-04T21:52:29.0865489Z  [2m5[0m │ import { describe, it, expect, beforeEach, afterEach, vi, type MockedFunction } from 'vitest';
2025-06-04T21:52:29.0865841Z  [2m6[0m │ import type { APIRoute } from 'astro';
2025-06-04T21:52:29.0866346Z    · [38;2;246;87;248m              ────┬───[0m
2025-06-04T21:52:29.0866912Z    ·                   [38;2;246;87;248m╰── [38;2;246;87;248m'APIRoute' is imported here[0m[0m
2025-06-04T21:52:29.0867108Z  [2m7[0m │ 
2025-06-04T21:52:29.0867284Z    ╰────
2025-06-04T21:52:29.0867754Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0867770Z 
2025-06-04T21:52:29.0868806Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.0869540Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:283:23]
2025-06-04T21:52:29.0869786Z  [2m282[0m │         headers: {
2025-06-04T21:52:29.0870230Z  [2m283[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.0870614Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.0871173Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.0871381Z  [2m284[0m │         }
2025-06-04T21:52:29.0871553Z      ╰────
2025-06-04T21:52:29.0872010Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.0872026Z 
2025-06-04T21:52:29.0873044Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.0873589Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.test.ts[0m:447:23]
2025-06-04T21:52:29.0873848Z  [2m446[0m │         headers: {
2025-06-04T21:52:29.0874294Z  [2m447[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.0874622Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.0875162Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.0875355Z  [2m448[0m │         }
2025-06-04T21:52:29.0875524Z      ╰────
2025-06-04T21:52:29.0876016Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.0876030Z 
2025-06-04T21:52:29.0877122Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.0877555Z      ╭─[[38;2;92;157;255;1msrc/components/ui/SearchBox.tsx[0m:222:38]
2025-06-04T21:52:29.0878131Z  [2m221[0m │               <div className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">
2025-06-04T21:52:29.0878475Z  [2m222[0m │                 No results found for "{query}"
2025-06-04T21:52:29.0878839Z      · [38;2;246;87;248m                                     ─[0m
2025-06-04T21:52:29.0879277Z  [2m223[0m │               </div>
2025-06-04T21:52:29.0879662Z      ╰────
2025-06-04T21:52:29.0879682Z 
2025-06-04T21:52:29.0880678Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.0881091Z      ╭─[[38;2;92;157;255;1msrc/components/ui/SearchBox.tsx[0m:222:46]
2025-06-04T21:52:29.0881637Z  [2m221[0m │               <div className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">
2025-06-04T21:52:29.0881977Z  [2m222[0m │                 No results found for "{query}"
2025-06-04T21:52:29.0882365Z      · [38;2;246;87;248m                                             ─[0m
2025-06-04T21:52:29.0882591Z  [2m223[0m │               </div>
2025-06-04T21:52:29.0882748Z      ╰────
2025-06-04T21:52:29.0882759Z 
2025-06-04T21:52:29.0883468Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unknown-property): Unknown property found[0m
2025-06-04T21:52:29.0884002Z     ╭─[[38;2;92;157;255;1msrc/simulator/components/SimulationControls.tsx[0m:69:14]
2025-06-04T21:52:29.0884181Z  [2m68[0m │ 
2025-06-04T21:52:29.0884408Z  [2m69[0m │       <style jsx>{`
2025-06-04T21:52:29.0884827Z     · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.0885119Z  [2m70[0m │         .simulation-controls {
2025-06-04T21:52:29.0885278Z     ╰────
2025-06-04T21:52:29.0885652Z [38;2;106;159;181m  help: [0mRemove unknown property
2025-06-04T21:52:29.0885665Z 
2025-06-04T21:52:29.0886483Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-empty-object-type): Do not use an empty interface declaration.[0m
2025-06-04T21:52:29.0886846Z    ╭─[[38;2;92;157;255;1msrc/components/ui/input.tsx[0m:6:55]
2025-06-04T21:52:29.0887125Z  [2m5[0m │ export interface InputProps
2025-06-04T21:52:29.0887591Z  [2m6[0m │   extends React.InputHTMLAttributes<HTMLInputElement> {}
2025-06-04T21:52:29.0887998Z    · [38;2;246;87;248m                                                      ──[0m
2025-06-04T21:52:29.0888154Z  [2m7[0m │ 
2025-06-04T21:52:29.0888327Z    ╰────
2025-06-04T21:52:29.0889460Z [38;2;106;159;181m  help: [0mTo avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.
2025-06-04T21:52:29.0889488Z 
2025-06-04T21:52:29.0890310Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0890861Z     ╭─[[38;2;92;157;255;1msrc/workers/__tests__/analytics-worker.test.ts[0m:74:43]
2025-06-04T21:52:29.0891190Z  [2m73[0m │   // Helper to simulate a connection
2025-06-04T21:52:29.0891610Z  [2m74[0m │   const simulateConnection = (wsInstance: any) => {
2025-06-04T21:52:29.0892053Z     · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.0892369Z  [2m75[0m │     const connectionHandler = vi
2025-06-04T21:52:29.0892546Z     ╰────
2025-06-04T21:52:29.0893505Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0893730Z 
2025-06-04T21:52:29.0894691Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-require-imports): Expected "import" statement instead of "require" call[0m
2025-06-04T21:52:29.0895253Z      ╭─[[38;2;92;157;255;1msrc/workers/__tests__/analytics-worker.test.ts[0m:207:33]
2025-06-04T21:52:29.0895658Z  [2m206[0m │       // Create a mock client instance for this test
2025-06-04T21:52:29.0896094Z  [2m207[0m │       const mockWsClient = new (require('ws').WebSocket)()
2025-06-04T21:52:29.0896492Z      · [38;2;246;87;248m                                ─────────────[0m
2025-06-04T21:52:29.0896672Z  [2m208[0m │ 
2025-06-04T21:52:29.0896828Z      ╰────
2025-06-04T21:52:29.0897293Z [38;2;106;159;181m  help: [0mDo not use CommonJS `require` calls
2025-06-04T21:52:29.0897306Z 
2025-06-04T21:52:29.0898202Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-require-imports): Expected "import" statement instead of "require" call[0m
2025-06-04T21:52:29.0898741Z      ╭─[[38;2;92;157;255;1msrc/workers/__tests__/analytics-worker.test.ts[0m:243:33]
2025-06-04T21:52:29.0899432Z  [2m242[0m │       await import('../analytics-worker')
2025-06-04T21:52:29.0899895Z  [2m243[0m │       const mockWsClient = new (require('ws').WebSocket)()
2025-06-04T21:52:29.0900296Z      · [38;2;246;87;248m                                ─────────────[0m
2025-06-04T21:52:29.0900626Z  [2m244[0m │       simulateConnection(mockWsClient)
2025-06-04T21:52:29.0900787Z      ╰────
2025-06-04T21:52:29.0901239Z [38;2;106;159;181m  help: [0mDo not use CommonJS `require` calls
2025-06-04T21:52:29.0901252Z 
2025-06-04T21:52:29.0902174Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.0902684Z     ╭─[[38;2;92;157;255;1msrc/workers/__tests__/analytics-worker.test.ts[0m:78:25]
2025-06-04T21:52:29.0902943Z  [2m77[0m │       .mock.calls.find(
2025-06-04T21:52:29.0903389Z  [2m78[0m │         (call: [string, Function]) => call[0] === 'connection',
2025-06-04T21:52:29.0903732Z     · [38;2;246;87;248m                        ────────[0m
2025-06-04T21:52:29.0903937Z  [2m79[0m │       )?.[1]
2025-06-04T21:52:29.0904121Z     ╰────
2025-06-04T21:52:29.0904888Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.0904906Z 
2025-06-04T21:52:29.0905842Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.0906398Z      ╭─[[38;2;92;157;255;1msrc/workers/__tests__/analytics-worker.test.ts[0m:216:27]
2025-06-04T21:52:29.0907292Z  [2m215[0m │         .mock.calls.find(
2025-06-04T21:52:29.0907776Z  [2m216[0m │           (call: [string, Function]) => call[0] === 'message',
2025-06-04T21:52:29.0908146Z      · [38;2;246;87;248m                          ────────[0m
2025-06-04T21:52:29.0908372Z  [2m217[0m │         )?.[1]
2025-06-04T21:52:29.0908545Z      ╰────
2025-06-04T21:52:29.0909498Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.0909517Z 
2025-06-04T21:52:29.0910448Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.0910978Z      ╭─[[38;2;92;157;255;1msrc/workers/__tests__/analytics-worker.test.ts[0m:248:27]
2025-06-04T21:52:29.0911236Z  [2m247[0m │         .mock.calls.find(
2025-06-04T21:52:29.0911650Z  [2m248[0m │           (call: [string, Function]) => call[0] === 'message',
2025-06-04T21:52:29.0912002Z      · [38;2;246;87;248m                          ────────[0m
2025-06-04T21:52:29.0912194Z  [2m249[0m │         )?.[1]
2025-06-04T21:52:29.0912348Z      ╰────
2025-06-04T21:52:29.0913061Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.0913279Z 
2025-06-04T21:52:29.0914927Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0915452Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/metrics.ts[0m:24:42]
2025-06-04T21:52:29.0915776Z  [2m23[0m │ // Main handler for metrics endpoint
2025-06-04T21:52:29.0916215Z  [2m24[0m │ const handleMetricsRequest = async (req: any) => {
2025-06-04T21:52:29.0916637Z     · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.0916932Z  [2m25[0m │   const startTime = Date.now();
2025-06-04T21:52:29.0917099Z     ╰────
2025-06-04T21:52:29.0918033Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0918048Z 
2025-06-04T21:52:29.0918873Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'PerformanceSnapshot' is imported but never used.[0m
2025-06-04T21:52:29.0919603Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/metrics.ts[0m:9:35]
2025-06-04T21:52:29.0920184Z  [2m 8[0m │ import type { APIRoute } from 'astro';
2025-06-04T21:52:29.0921122Z  [2m 9[0m │ import { performanceMonitor, type PerformanceSnapshot } from '../../../lib/ai/bias-detection/performance-monitor';
2025-06-04T21:52:29.0921610Z     · [38;2;246;87;248m                                  ─────────┬─────────[0m
2025-06-04T21:52:29.0922296Z     ·                                            [38;2;246;87;248m╰── [38;2;246;87;248m'PerformanceSnapshot' is imported here[0m[0m
2025-06-04T21:52:29.0923034Z  [2m10[0m │ import { createServerlessHandler } from '../../../lib/ai/bias-detection/serverless-handlers';
2025-06-04T21:52:29.0923205Z     ╰────
2025-06-04T21:52:29.0923727Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0923742Z 
2025-06-04T21:52:29.0924556Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0925051Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.ts[0m:115:29]
2025-06-04T21:52:29.0925232Z  [2m114[0m │ 
2025-06-04T21:52:29.0925602Z  [2m115[0m │ function exportAsJSON(data: any): Response {
2025-06-04T21:52:29.0925938Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.0926213Z  [2m116[0m │   const exportData = {
2025-06-04T21:52:29.0926404Z      ╰────
2025-06-04T21:52:29.0927397Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0927418Z 
2025-06-04T21:52:29.0928295Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0928786Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.ts[0m:131:28]
2025-06-04T21:52:29.0929153Z  [2m130[0m │ 
2025-06-04T21:52:29.0929543Z  [2m131[0m │ function exportAsCSV(data: any): Response {
2025-06-04T21:52:29.0929885Z      · [38;2;246;87;248m                           ───[0m
2025-06-04T21:52:29.0930244Z  [2m132[0m │   // Create CSV content from dashboard data
2025-06-04T21:52:29.0930403Z      ╰────
2025-06-04T21:52:29.0931324Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0931338Z 
2025-06-04T21:52:29.0932142Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0932611Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.ts[0m:150:43]
2025-06-04T21:52:29.0932892Z  [2m149[0m │   if (data.recentSessions) {
2025-06-04T21:52:29.0933307Z  [2m150[0m │     data.recentSessions.forEach((session: any) => {
2025-06-04T21:52:29.0933691Z      · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.0934208Z  [2m151[0m │       csvRows.push([
2025-06-04T21:52:29.0934403Z      ╰────
2025-06-04T21:52:29.0935405Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0935424Z 
2025-06-04T21:52:29.0936271Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0936759Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.ts[0m:181:33]
2025-06-04T21:52:29.0937008Z  [2m180[0m │   if (data.alerts) {
2025-06-04T21:52:29.0937356Z  [2m181[0m │     data.alerts.forEach((alert: any) => {
2025-06-04T21:52:29.0937698Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.0937937Z  [2m182[0m │       csvRows.push([
2025-06-04T21:52:29.0938099Z      ╰────
2025-06-04T21:52:29.0939840Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0939885Z 
2025-06-04T21:52:29.0941028Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0941571Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.ts[0m:207:28]
2025-06-04T21:52:29.0941753Z  [2m206[0m │ 
2025-06-04T21:52:29.0942134Z  [2m207[0m │ function exportAsPDF(data: any): Response {
2025-06-04T21:52:29.0942479Z      · [38;2;246;87;248m                           ───[0m
2025-06-04T21:52:29.0942913Z  [2m208[0m │   // For PDF export, we'll create a simple HTML-based PDF
2025-06-04T21:52:29.0943078Z      ╰────
2025-06-04T21:52:29.0943987Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0944002Z 
2025-06-04T21:52:29.0944821Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0945399Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.ts[0m:246:36]
2025-06-04T21:52:29.0945744Z  [2m245[0m │         <h2>Recent Alerts</h2>
2025-06-04T21:52:29.0946130Z  [2m246[0m │         ${data.alerts?.map((alert: any) => `
2025-06-04T21:52:29.0946524Z      · [38;2;246;87;248m                                   ───[0m
2025-06-04T21:52:29.0946901Z  [2m247[0m │           <div class="alert ${alert.level}">
2025-06-04T21:52:29.0947078Z      ╰────
2025-06-04T21:52:29.0948047Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0948063Z 
2025-06-04T21:52:29.0948918Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0949619Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.ts[0m:269:57]
2025-06-04T21:52:29.0949871Z  [2m268[0m │           <tbody>
2025-06-04T21:52:29.0950327Z  [2m269[0m │             ${data.demographics?.breakdown?.map((group: any) => `
2025-06-04T21:52:29.0951423Z      · [38;2;246;87;248m                                                        ───[0m
2025-06-04T21:52:29.0951674Z  [2m270[0m │               <tr>
2025-06-04T21:52:29.0951831Z      ╰────
2025-06-04T21:52:29.0952757Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0952772Z 
2025-06-04T21:52:29.0953551Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'BiasDashboardData' is imported but never used.[0m
2025-06-04T21:52:29.0954001Z    ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.ts[0m:4:15]
2025-06-04T21:52:29.0954386Z  [2m3[0m │ import { getLogger } from '@/lib/utils/logger';
2025-06-04T21:52:29.0954982Z  [2m4[0m │ import type { BiasDashboardData } from '@/lib/ai/bias-detection/types';
2025-06-04T21:52:29.0955611Z    · [38;2;246;87;248m              ────────┬────────[0m
2025-06-04T21:52:29.0956243Z    ·                       [38;2;246;87;248m╰── [38;2;246;87;248m'BiasDashboardData' is imported here[0m[0m
2025-06-04T21:52:29.0956444Z  [2m5[0m │ 
2025-06-04T21:52:29.0956614Z    ╰────
2025-06-04T21:52:29.0957081Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.0957096Z 
2025-06-04T21:52:29.0958181Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'cookies' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.0958645Z    ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.ts[0m:8:48]
2025-06-04T21:52:29.0958807Z  [2m7[0m │ 
2025-06-04T21:52:29.0959501Z  [2m8[0m │ export const GET: APIRoute = async ({ request, cookies }) => {
2025-06-04T21:52:29.0959976Z    · [38;2;246;87;248m                                               ───┬───[0m
2025-06-04T21:52:29.0960601Z    ·                                                   [38;2;246;87;248m╰── [38;2;246;87;248m'cookies' is declared here[0m[0m
2025-06-04T21:52:29.0960787Z  [2m9[0m │   try {
2025-06-04T21:52:29.0961144Z    ╰────
2025-06-04T21:52:29.0961624Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.0961638Z 
2025-06-04T21:52:29.0962480Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-children-prop): Avoid passing children using a prop.[0m
2025-06-04T21:52:29.0962932Z      ╭─[[38;2;92;157;255;1msrc/components/ui/select.tsx[0m:386:15]
2025-06-04T21:52:29.0963269Z  [2m385[0m │               value={option.value}
2025-06-04T21:52:29.0963619Z  [2m386[0m │               children={option.label}
2025-06-04T21:52:29.0963931Z      · [38;2;246;87;248m              ────────[0m
2025-06-04T21:52:29.0964130Z  [2m387[0m │             />
2025-06-04T21:52:29.0964291Z      ╰────
2025-06-04T21:52:29.0965001Z [38;2;106;159;181m  help: [0mThe canonical way to pass children in React is to use JSX elements
2025-06-04T21:52:29.0965039Z 
2025-06-04T21:52:29.0966038Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;[0m
2025-06-04T21:52:29.0966687Z      ╭─[[38;2;92;157;255;1msrc/simulator/components/EnhancedSimulationContainer.tsx[0m:279:29]
2025-06-04T21:52:29.0967041Z  [2m278[0m │         <p className="text-gray-700 mb-2">
2025-06-04T21:52:29.0967650Z  [2m279[0m │           Your browser doesn't support some features needed for this simulation:
2025-06-04T21:52:29.0968010Z      · [38;2;246;87;248m                            ─[0m
2025-06-04T21:52:29.0968231Z  [2m280[0m │         </p>
2025-06-04T21:52:29.0968414Z      ╰────
2025-06-04T21:52:29.0968429Z 
2025-06-04T21:52:29.0969477Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0970051Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:33:19]
2025-06-04T21:52:29.0970504Z  [2m32[0m │ describe('Session Analysis API Endpoint', () => {
2025-06-04T21:52:29.0970794Z  [2m33[0m │   let mockLogger: any;
2025-06-04T21:52:29.0971105Z     · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.0971420Z  [2m34[0m │   let mockAuditLogger: any;
2025-06-04T21:52:29.0971590Z     ╰────
2025-06-04T21:52:29.0972561Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0972577Z 
2025-06-04T21:52:29.0973407Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0973918Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:34:24]
2025-06-04T21:52:29.0974165Z  [2m33[0m │   let mockLogger: any;
2025-06-04T21:52:29.0974441Z  [2m34[0m │   let mockAuditLogger: any;
2025-06-04T21:52:29.0974969Z     · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.0975247Z  [2m35[0m │   let mockCacheManager: any;
2025-06-04T21:52:29.0975414Z     ╰────
2025-06-04T21:52:29.0976400Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0976415Z 
2025-06-04T21:52:29.0977236Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0977736Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:35:25]
2025-06-04T21:52:29.0978020Z  [2m34[0m │   let mockAuditLogger: any;
2025-06-04T21:52:29.0978289Z  [2m35[0m │   let mockCacheManager: any;
2025-06-04T21:52:29.0978604Z     · [38;2;246;87;248m                        ───[0m
2025-06-04T21:52:29.0978863Z  [2m36[0m │   let mockBiasEngine: any;
2025-06-04T21:52:29.0979178Z     ╰────
2025-06-04T21:52:29.0981699Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0981734Z 
2025-06-04T21:52:29.0982797Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0983318Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:36:23]
2025-06-04T21:52:29.0983601Z  [2m35[0m │   let mockCacheManager: any;
2025-06-04T21:52:29.0983868Z  [2m36[0m │   let mockBiasEngine: any;
2025-06-04T21:52:29.0984170Z     · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.0984339Z  [2m37[0m │ 
2025-06-04T21:52:29.0984492Z     ╰────
2025-06-04T21:52:29.0985416Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0985428Z 
2025-06-04T21:52:29.0986244Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0986779Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:256:11]
2025-06-04T21:52:29.0986972Z  [2m255[0m │       };
2025-06-04T21:52:29.0987163Z  [2m256[0m │     }) as any;
2025-06-04T21:52:29.0987417Z      · [38;2;246;87;248m          ───[0m
2025-06-04T21:52:29.0987579Z  [2m257[0m │ 
2025-06-04T21:52:29.0987732Z      ╰────
2025-06-04T21:52:29.0988631Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0988644Z 
2025-06-04T21:52:29.0989610Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0990135Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:280:29]
2025-06-04T21:52:29.0990351Z  [2m279[0m │     };
2025-06-04T21:52:29.0990991Z  [2m280[0m │     (BiasDetectionEngine as any).mockImplementation(() => mockBiasEngine);
2025-06-04T21:52:29.0991367Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.0991538Z  [2m281[0m │ 
2025-06-04T21:52:29.0991718Z      ╰────
2025-06-04T21:52:29.0992650Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0992669Z 
2025-06-04T21:52:29.0993608Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0994150Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:294:38]
2025-06-04T21:52:29.0994591Z  [2m293[0m │   describe('POST /api/bias-detection/analyze', () => {
2025-06-04T21:52:29.0995214Z  [2m294[0m │     const createMockRequest = (body: any, headers: Record<string, string> = {}) => {
2025-06-04T21:52:29.0995592Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.0996095Z  [2m295[0m │       const defaultHeaders = {
2025-06-04T21:52:29.0996256Z      ╰────
2025-06-04T21:52:29.0997190Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.0997205Z 
2025-06-04T21:52:29.0998048Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.0998616Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:306:12]
2025-06-04T21:52:29.0998823Z  [2m305[0m │         }
2025-06-04T21:52:29.0999253Z  [2m306[0m │       } as any;
2025-06-04T21:52:29.0999549Z      · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.0999736Z  [2m307[0m │     };
2025-06-04T21:52:29.0999896Z      ╰────
2025-06-04T21:52:29.1000836Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1000872Z 
2025-06-04T21:52:29.1001689Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1002396Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:310:39]
2025-06-04T21:52:29.1002824Z  [2m309[0m │     // Helper to create a more realistic mock Response
2025-06-04T21:52:29.1003619Z  [2m310[0m │     const createMockResponse = (data: any, status: number = 200, headers: Record<string, string> = {}) => {
2025-06-04T21:52:29.1004036Z      · [38;2;246;87;248m                                      ───[0m
2025-06-04T21:52:29.1004544Z  [2m311[0m │       const responseHeaders = new Map(Object.entries(headers));
2025-06-04T21:52:29.1004732Z      ╰────
2025-06-04T21:52:29.1005677Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1005692Z 
2025-06-04T21:52:29.1006519Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1007064Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:343:14]
2025-06-04T21:52:29.1007253Z  [2m342[0m │         }
2025-06-04T21:52:29.1007475Z  [2m343[0m │       })) as any;
2025-06-04T21:52:29.1007751Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1007912Z  [2m344[0m │ 
2025-06-04T21:52:29.1008073Z      ╰────
2025-06-04T21:52:29.1008977Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1009169Z 
2025-06-04T21:52:29.1010022Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1010588Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:345:50]
2025-06-04T21:52:29.1010778Z  [2m344[0m │ 
2025-06-04T21:52:29.1011481Z  [2m345[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1011937Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1012156Z  [2m346[0m │ 
2025-06-04T21:52:29.1012339Z      ╰────
2025-06-04T21:52:29.1013315Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1014502Z 
2025-06-04T21:52:29.1015435Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1016030Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:367:50]
2025-06-04T21:52:29.1016485Z  [2m366[0m │       const request = createMockRequest(requestBody);
2025-06-04T21:52:29.1016905Z  [2m367[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1017322Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1017519Z  [2m368[0m │ 
2025-06-04T21:52:29.1017679Z      ╰────
2025-06-04T21:52:29.1018812Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1018839Z 
2025-06-04T21:52:29.1019886Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1020478Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:392:50]
2025-06-04T21:52:29.1020929Z  [2m391[0m │       const request = createMockRequest(requestBody);
2025-06-04T21:52:29.1021359Z  [2m392[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1021787Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1021958Z  [2m393[0m │ 
2025-06-04T21:52:29.1022128Z      ╰────
2025-06-04T21:52:29.1023053Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1023087Z 
2025-06-04T21:52:29.1023912Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1024428Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:411:50]
2025-06-04T21:52:29.1024603Z  [2m410[0m │ 
2025-06-04T21:52:29.1025009Z  [2m411[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1025455Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1025637Z  [2m412[0m │ 
2025-06-04T21:52:29.1025806Z      ╰────
2025-06-04T21:52:29.1026794Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1026810Z 
2025-06-04T21:52:29.1027650Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1028186Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:434:50]
2025-06-04T21:52:29.1028367Z  [2m433[0m │ 
2025-06-04T21:52:29.1028776Z  [2m434[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1029390Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1029578Z  [2m435[0m │ 
2025-06-04T21:52:29.1029741Z      ╰────
2025-06-04T21:52:29.1030666Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1030680Z 
2025-06-04T21:52:29.1031489Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1032001Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:447:50]
2025-06-04T21:52:29.1032162Z  [2m446[0m │ 
2025-06-04T21:52:29.1032797Z  [2m447[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1033216Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1033430Z  [2m448[0m │ 
2025-06-04T21:52:29.1033616Z      ╰────
2025-06-04T21:52:29.1034593Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1034612Z 
2025-06-04T21:52:29.1035471Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1035996Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:465:50]
2025-06-04T21:52:29.1036169Z  [2m464[0m │ 
2025-06-04T21:52:29.1036574Z  [2m465[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1036983Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1037164Z  [2m466[0m │ 
2025-06-04T21:52:29.1037322Z      ╰────
2025-06-04T21:52:29.1038434Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1038453Z 
2025-06-04T21:52:29.1039530Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1040094Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:484:50]
2025-06-04T21:52:29.1040275Z  [2m483[0m │ 
2025-06-04T21:52:29.1040686Z  [2m484[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1041091Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1041276Z  [2m485[0m │ 
2025-06-04T21:52:29.1041455Z      ╰────
2025-06-04T21:52:29.1042429Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1042472Z 
2025-06-04T21:52:29.1043358Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1043910Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:507:14]
2025-06-04T21:52:29.1044107Z  [2m506[0m │         }
2025-06-04T21:52:29.1044339Z  [2m507[0m │       })) as any;
2025-06-04T21:52:29.1044616Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1044784Z  [2m508[0m │ 
2025-06-04T21:52:29.1044944Z      ╰────
2025-06-04T21:52:29.1045936Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1046018Z 
2025-06-04T21:52:29.1046889Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1047456Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:509:50]
2025-06-04T21:52:29.1047668Z  [2m508[0m │ 
2025-06-04T21:52:29.1048093Z  [2m509[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1048529Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1048698Z  [2m510[0m │ 
2025-06-04T21:52:29.1048862Z      ╰────
2025-06-04T21:52:29.1050071Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1050088Z 
2025-06-04T21:52:29.1050981Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1051488Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:534:12]
2025-06-04T21:52:29.1051675Z  [2m533[0m │         }
2025-06-04T21:52:29.1051896Z  [2m534[0m │       } as any;
2025-06-04T21:52:29.1052165Z      · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.1052551Z  [2m535[0m │ 
2025-06-04T21:52:29.1052711Z      ╰────
2025-06-04T21:52:29.1053720Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1053739Z 
2025-06-04T21:52:29.1054606Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1055168Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:536:50]
2025-06-04T21:52:29.1055347Z  [2m535[0m │ 
2025-06-04T21:52:29.1055767Z  [2m536[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1056183Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1056351Z  [2m537[0m │ 
2025-06-04T21:52:29.1056507Z      ╰────
2025-06-04T21:52:29.1057427Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1057466Z 
2025-06-04T21:52:29.1058274Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1058979Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:559:13]
2025-06-04T21:52:29.1059378Z  [2m558[0m │         };
2025-06-04T21:52:29.1059601Z  [2m559[0m │       }) as any;
2025-06-04T21:52:29.1059877Z      · [38;2;246;87;248m            ───[0m
2025-06-04T21:52:29.1060035Z  [2m560[0m │ 
2025-06-04T21:52:29.1060198Z      ╰────
2025-06-04T21:52:29.1061128Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1061144Z 
2025-06-04T21:52:29.1061999Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1062532Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:561:50]
2025-06-04T21:52:29.1062745Z  [2m560[0m │ 
2025-06-04T21:52:29.1063198Z  [2m561[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1063648Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1064042Z  [2m562[0m │       const responseData = await response.json();
2025-06-04T21:52:29.1064207Z      ╰────
2025-06-04T21:52:29.1065182Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1065202Z 
2025-06-04T21:52:29.1066068Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1066629Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:586:14]
2025-06-04T21:52:29.1066826Z  [2m585[0m │         }
2025-06-04T21:52:29.1067072Z  [2m586[0m │       })) as any;
2025-06-04T21:52:29.1067391Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1067569Z  [2m587[0m │ 
2025-06-04T21:52:29.1067731Z      ╰────
2025-06-04T21:52:29.1068672Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1068687Z 
2025-06-04T21:52:29.1069708Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1070231Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:588:50]
2025-06-04T21:52:29.1070393Z  [2m587[0m │ 
2025-06-04T21:52:29.1070795Z  [2m588[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1071200Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1071357Z  [2m589[0m │ 
2025-06-04T21:52:29.1071516Z      ╰────
2025-06-04T21:52:29.1072425Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1072649Z 
2025-06-04T21:52:29.1073482Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1073999Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:613:12]
2025-06-04T21:52:29.1074210Z  [2m612[0m │         }
2025-06-04T21:52:29.1074456Z  [2m613[0m │       } as any;
2025-06-04T21:52:29.1074741Z      · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.1074921Z  [2m614[0m │     };
2025-06-04T21:52:29.1075088Z      ╰────
2025-06-04T21:52:29.1076046Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1076065Z 
2025-06-04T21:52:29.1076973Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1077520Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:624:49]
2025-06-04T21:52:29.1077699Z  [2m623[0m │ 
2025-06-04T21:52:29.1078330Z  [2m624[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1078789Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1078963Z  [2m625[0m │ 
2025-06-04T21:52:29.1079307Z      ╰────
2025-06-04T21:52:29.1080252Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1080269Z 
2025-06-04T21:52:29.1081130Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1081671Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:654:49]
2025-06-04T21:52:29.1081850Z  [2m653[0m │ 
2025-06-04T21:52:29.1082281Z  [2m654[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1082735Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1082914Z  [2m655[0m │ 
2025-06-04T21:52:29.1083105Z      ╰────
2025-06-04T21:52:29.1084058Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1084073Z 
2025-06-04T21:52:29.1084906Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1085423Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:678:49]
2025-06-04T21:52:29.1085596Z  [2m677[0m │ 
2025-06-04T21:52:29.1085992Z  [2m678[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1086396Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1086555Z  [2m679[0m │ 
2025-06-04T21:52:29.1086718Z      ╰────
2025-06-04T21:52:29.1087640Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1087654Z 
2025-06-04T21:52:29.1088466Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1088965Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:695:49]
2025-06-04T21:52:29.1089321Z  [2m694[0m │ 
2025-06-04T21:52:29.1089729Z  [2m695[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1090124Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1090290Z  [2m696[0m │ 
2025-06-04T21:52:29.1090446Z      ╰────
2025-06-04T21:52:29.1091401Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1091420Z 
2025-06-04T21:52:29.1092501Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1093037Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:709:49]
2025-06-04T21:52:29.1093221Z  [2m708[0m │ 
2025-06-04T21:52:29.1093709Z  [2m709[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1094137Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1094318Z  [2m710[0m │ 
2025-06-04T21:52:29.1094484Z      ╰────
2025-06-04T21:52:29.1095415Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1095437Z 
2025-06-04T21:52:29.1096258Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1096784Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:727:49]
2025-06-04T21:52:29.1096975Z  [2m726[0m │ 
2025-06-04T21:52:29.1097368Z  [2m727[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1098530Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1098730Z  [2m728[0m │ 
2025-06-04T21:52:29.1098899Z      ╰────
2025-06-04T21:52:29.1102458Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1102475Z 
2025-06-04T21:52:29.1103329Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1103890Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:752:14]
2025-06-04T21:52:29.1104110Z  [2m751[0m │         }
2025-06-04T21:52:29.1104357Z  [2m752[0m │       })) as any;
2025-06-04T21:52:29.1104650Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1104846Z  [2m753[0m │ 
2025-06-04T21:52:29.1105002Z      ╰────
2025-06-04T21:52:29.1105945Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1105961Z 
2025-06-04T21:52:29.1106797Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1107338Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:754:49]
2025-06-04T21:52:29.1107508Z  [2m753[0m │ 
2025-06-04T21:52:29.1107939Z  [2m754[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1108368Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1108541Z  [2m755[0m │ 
2025-06-04T21:52:29.1108700Z      ╰────
2025-06-04T21:52:29.1109838Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1109889Z 
2025-06-04T21:52:29.1110767Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1111340Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:774:49]
2025-06-04T21:52:29.1111531Z  [2m773[0m │ 
2025-06-04T21:52:29.1111956Z  [2m774[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1112380Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1112549Z  [2m775[0m │ 
2025-06-04T21:52:29.1112715Z      ╰────
2025-06-04T21:52:29.1113628Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1113642Z 
2025-06-04T21:52:29.1114450Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1115175Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:800:16]
2025-06-04T21:52:29.1115373Z  [2m799[0m │             }
2025-06-04T21:52:29.1115601Z  [2m800[0m │           } as any 
2025-06-04T21:52:29.1115896Z      · [38;2;246;87;248m               ───[0m
2025-06-04T21:52:29.1116117Z  [2m801[0m │         } as any)
2025-06-04T21:52:29.1116269Z      ╰────
2025-06-04T21:52:29.1117184Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1117197Z 
2025-06-04T21:52:29.1117994Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1118507Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:801:14]
2025-06-04T21:52:29.1118758Z  [2m800[0m │           } as any 
2025-06-04T21:52:29.1119193Z  [2m801[0m │         } as any)
2025-06-04T21:52:29.1119488Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1119699Z  [2m802[0m │       );
2025-06-04T21:52:29.1119855Z      ╰────
2025-06-04T21:52:29.1120931Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1120956Z 
2025-06-04T21:52:29.1121774Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1122323Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:830:12]
2025-06-04T21:52:29.1122512Z  [2m829[0m │         }
2025-06-04T21:52:29.1122733Z  [2m830[0m │       } as any;
2025-06-04T21:52:29.1123026Z      · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.1123203Z  [2m831[0m │ 
2025-06-04T21:52:29.1123375Z      ╰────
2025-06-04T21:52:29.1124306Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1124341Z 
2025-06-04T21:52:29.1125154Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1125679Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:832:50]
2025-06-04T21:52:29.1125849Z  [2m831[0m │ 
2025-06-04T21:52:29.1126252Z  [2m832[0m │       const response = await POST({ request } as any);
2025-06-04T21:52:29.1126661Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.1126822Z  [2m833[0m │ 
2025-06-04T21:52:29.1126976Z      ╰────
2025-06-04T21:52:29.1127924Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1127941Z 
2025-06-04T21:52:29.1128699Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'APIRoute' is imported but never used.[0m
2025-06-04T21:52:29.1129406Z    ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:6:15]
2025-06-04T21:52:29.1130143Z  [2m5[0m │ import { describe, it, expect, beforeEach, afterEach, vi, type MockedFunction } from 'vitest';
2025-06-04T21:52:29.1130535Z  [2m6[0m │ import type { APIRoute } from 'astro';
2025-06-04T21:52:29.1130874Z    · [38;2;246;87;248m              ────┬───[0m
2025-06-04T21:52:29.1131409Z    ·                   [38;2;246;87;248m╰── [38;2;246;87;248m'APIRoute' is imported here[0m[0m
2025-06-04T21:52:29.1131578Z  [2m7[0m │ 
2025-06-04T21:52:29.1131744Z    ╰────
2025-06-04T21:52:29.1132181Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.1132195Z 
2025-06-04T21:52:29.1132933Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'UserContext' is imported but never used.[0m
2025-06-04T21:52:29.1133449Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:26:3]
2025-06-04T21:52:29.1133748Z  [2m25[0m │   BiasAnalysisResult,
2025-06-04T21:52:29.1134261Z  [2m26[0m │   UserContext
2025-06-04T21:52:29.1134568Z     · [38;2;246;87;248m  ─────┬─────[0m
2025-06-04T21:52:29.1135109Z     ·        [38;2;246;87;248m╰── [38;2;246;87;248m'UserContext' is imported here[0m[0m
2025-06-04T21:52:29.1135446Z  [2m27[0m │ } from '@/lib/ai/bias-detection/types';
2025-06-04T21:52:29.1135617Z     ╰────
2025-06-04T21:52:29.1136050Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.1136064Z 
2025-06-04T21:52:29.1137204Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'createMockResponse' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.1137729Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:310:11]
2025-06-04T21:52:29.1138187Z  [2m309[0m │     // Helper to create a more realistic mock Response
2025-06-04T21:52:29.1139187Z  [2m310[0m │     const createMockResponse = (data: any, status: number = 200, headers: Record<string, string> = {}) => {
2025-06-04T21:52:29.1139616Z      · [38;2;246;87;248m          ─────────┬────────[0m
2025-06-04T21:52:29.1140432Z      ·                    [38;2;246;87;248m╰── [38;2;246;87;248m'createMockResponse' is declared here[0m[0m
2025-06-04T21:52:29.1140935Z  [2m311[0m │       const responseHeaders = new Map(Object.entries(headers));
2025-06-04T21:52:29.1141100Z      ╰────
2025-06-04T21:52:29.1141562Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.1141584Z 
2025-06-04T21:52:29.1142589Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1143113Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:505:23]
2025-06-04T21:52:29.1143352Z  [2m504[0m │         headers: {
2025-06-04T21:52:29.1143771Z  [2m505[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1144152Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1144683Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1144916Z  [2m506[0m │         }
2025-06-04T21:52:29.1145090Z      ╰────
2025-06-04T21:52:29.1145581Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1145597Z 
2025-06-04T21:52:29.1146647Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1147242Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:556:25]
2025-06-04T21:52:29.1147497Z  [2m555[0m │           headers: {
2025-06-04T21:52:29.1147918Z  [2m556[0m │             get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1148239Z      · [38;2;246;87;248m                        ─┬─[0m
2025-06-04T21:52:29.1148737Z      ·                          [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1149448Z  [2m557[0m │           }
2025-06-04T21:52:29.1149636Z      ╰────
2025-06-04T21:52:29.1150157Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1150175Z 
2025-06-04T21:52:29.1151235Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1151805Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/analyze.test.ts[0m:750:23]
2025-06-04T21:52:29.1152062Z  [2m749[0m │         headers: {
2025-06-04T21:52:29.1152504Z  [2m750[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1152820Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1153312Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1153513Z  [2m751[0m │         }
2025-06-04T21:52:29.1153675Z      ╰────
2025-06-04T21:52:29.1154121Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1154134Z 
2025-06-04T21:52:29.1155305Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.1155819Z      ╭─[[38;2;92;157;255;1msrc/simulator/components/FeedbackPanel.tsx[0m:138:17]
2025-06-04T21:52:29.1156263Z  [2m137[0m │               <div className="text-xs text-gray-500 italic mb-1">
2025-06-04T21:52:29.1156566Z  [2m138[0m │                 "{feedback.context}"
2025-06-04T21:52:29.1156828Z      · [38;2;246;87;248m                ─[0m
2025-06-04T21:52:29.1157056Z  [2m139[0m │               </div>
2025-06-04T21:52:29.1157217Z      ╰────
2025-06-04T21:52:29.1157230Z 
2025-06-04T21:52:29.1158203Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.1158714Z      ╭─[[38;2;92;157;255;1msrc/simulator/components/FeedbackPanel.tsx[0m:138:36]
2025-06-04T21:52:29.1159354Z  [2m137[0m │               <div className="text-xs text-gray-500 italic mb-1">
2025-06-04T21:52:29.1159665Z  [2m138[0m │                 "{feedback.context}"
2025-06-04T21:52:29.1160016Z      · [38;2;246;87;248m                                   ─[0m
2025-06-04T21:52:29.1160239Z  [2m139[0m │               </div>
2025-06-04T21:52:29.1160404Z      ╰────
2025-06-04T21:52:29.1160417Z 
2025-06-04T21:52:29.1161475Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'cookies' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1161990Z    ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.ts[0m:8:48]
2025-06-04T21:52:29.1162162Z  [2m7[0m │ 
2025-06-04T21:52:29.1162650Z  [2m8[0m │ export const GET: APIRoute = async ({ request, cookies }) => {
2025-06-04T21:52:29.1163110Z    · [38;2;246;87;248m                                               ───┬───[0m
2025-06-04T21:52:29.1163721Z    ·                                                   [38;2;246;87;248m╰── [38;2;246;87;248m'cookies' is declared here[0m[0m
2025-06-04T21:52:29.1163913Z  [2m9[0m │   try {
2025-06-04T21:52:29.1164074Z    ╰────
2025-06-04T21:52:29.1164536Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1164550Z 
2025-06-04T21:52:29.1165615Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'dashboardData' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.1199637Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.ts[0m:29:11]
2025-06-04T21:52:29.1199984Z  [2m28[0m │     // Get dashboard metrics
2025-06-04T21:52:29.1200469Z  [2m29[0m │     const dashboardData = await biasEngine.getDashboardData({
2025-06-04T21:52:29.1201015Z     · [38;2;246;87;248m          ──────┬──────[0m
2025-06-04T21:52:29.1201560Z     ·                 [38;2;246;87;248m╰── [38;2;246;87;248m'dashboardData' is declared here[0m[0m
2025-06-04T21:52:29.1201808Z  [2m30[0m │       timeRange,
2025-06-04T21:52:29.1201972Z     ╰────
2025-06-04T21:52:29.1202444Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.1202460Z 
2025-06-04T21:52:29.1203531Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'startTime' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.1204047Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.ts[0m:37:11]
2025-06-04T21:52:29.1204466Z  [2m36[0m │     const timeRangeMs = getTimeRangeMs(timeRange);
2025-06-04T21:52:29.1204978Z  [2m37[0m │     const startTime = new Date(now.getTime() - timeRangeMs);
2025-06-04T21:52:29.1205301Z     · [38;2;246;87;248m          ────┬────[0m
2025-06-04T21:52:29.1205850Z     ·               [38;2;246;87;248m╰── [38;2;246;87;248m'startTime' is declared here[0m[0m
2025-06-04T21:52:29.1206056Z  [2m38[0m │ 
2025-06-04T21:52:29.1206230Z     ╰────
2025-06-04T21:52:29.1206901Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.1206920Z 
2025-06-04T21:52:29.1208017Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'timeRange' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1208507Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/dashboard.ts[0m:187:36]
2025-06-04T21:52:29.1208676Z  [2m186[0m │ 
2025-06-04T21:52:29.1209341Z  [2m187[0m │ function generateDemographicTrends(timeRange: string) {
2025-06-04T21:52:29.1209759Z      · [38;2;246;87;248m                                   ────┬────[0m
2025-06-04T21:52:29.1210442Z      ·                                        [38;2;246;87;248m╰── [38;2;246;87;248m'timeRange' is declared here[0m[0m
2025-06-04T21:52:29.1210711Z  [2m188[0m │   return {
2025-06-04T21:52:29.1210880Z      ╰────
2025-06-04T21:52:29.1211341Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1211357Z 
2025-06-04T21:52:29.1211887Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mFile is too long to fit on the screen[0m
2025-06-04T21:52:29.1212796Z [38;2;106;159;181m  help: [0msrc/lib/services/notification/SlackNotificationService.ts seems like a minified file
2025-06-04T21:52:29.1212811Z 
2025-06-04T21:52:29.1213680Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1214221Z      ╭─[[38;2;92;157;255;1msrc/components/ui/MobileFormValidation.tsx[0m:336:53]
2025-06-04T21:52:29.1214413Z  [2m335[0m │ 
2025-06-04T21:52:29.1214868Z  [2m336[0m │       return React.cloneElement(child, formProps as any)
2025-06-04T21:52:29.1215316Z      · [38;2;246;87;248m                                                    ───[0m
2025-06-04T21:52:29.1215518Z  [2m337[0m │     }
2025-06-04T21:52:29.1215686Z      ╰────
2025-06-04T21:52:29.1216628Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1216643Z 
2025-06-04T21:52:29.1217460Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1217947Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:20:19]
2025-06-04T21:52:29.1218368Z  [2m19[0m │ describe('Bias Detection Export API Endpoint', () => {
2025-06-04T21:52:29.1218612Z  [2m20[0m │   let mockLogger: any;
2025-06-04T21:52:29.1218895Z     · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.1223228Z  [2m21[0m │   let mockBiasEngine: any;
2025-06-04T21:52:29.1223473Z     ╰────
2025-06-04T21:52:29.1224543Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1224775Z 
2025-06-04T21:52:29.1225637Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1226152Z     ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:21:23]
2025-06-04T21:52:29.1226441Z  [2m20[0m │   let mockLogger: any;
2025-06-04T21:52:29.1226705Z  [2m21[0m │   let mockBiasEngine: any;
2025-06-04T21:52:29.1227009Z     · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.1227175Z  [2m22[0m │ 
2025-06-04T21:52:29.1227330Z     ╰────
2025-06-04T21:52:29.1228251Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1228270Z 
2025-06-04T21:52:29.1229273Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1229878Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:110:10]
2025-06-04T21:52:29.1230086Z  [2m109[0m │       }
2025-06-04T21:52:29.1230285Z  [2m110[0m │     } as any;
2025-06-04T21:52:29.1230767Z      · [38;2;246;87;248m         ───[0m
2025-06-04T21:52:29.1230976Z  [2m111[0m │   };
2025-06-04T21:52:29.1231153Z      ╰────
2025-06-04T21:52:29.1232114Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1232132Z 
2025-06-04T21:52:29.1232970Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1233485Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:131:29]
2025-06-04T21:52:29.1233666Z  [2m130[0m │     };
2025-06-04T21:52:29.1234236Z  [2m131[0m │     (BiasDetectionEngine as any).mockImplementation(() => mockBiasEngine);
2025-06-04T21:52:29.1234579Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.1234766Z  [2m132[0m │   });
2025-06-04T21:52:29.1234924Z      ╰────
2025-06-04T21:52:29.1235852Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1235866Z 
2025-06-04T21:52:29.1236660Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1237166Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:155:14]
2025-06-04T21:52:29.1237784Z  [2m154[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'application/json' }))
2025-06-04T21:52:29.1238015Z  [2m155[0m │       })) as any;
2025-06-04T21:52:29.1238296Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1238495Z  [2m156[0m │ 
2025-06-04T21:52:29.1238673Z      ╰────
2025-06-04T21:52:29.1269933Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1269982Z 
2025-06-04T21:52:29.1270905Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1271438Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:158:49]
2025-06-04T21:52:29.1271798Z  [2m157[0m │       const request = createMockRequest();
2025-06-04T21:52:29.1272205Z  [2m158[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1272666Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1272853Z  [2m159[0m │ 
2025-06-04T21:52:29.1273036Z      ╰────
2025-06-04T21:52:29.1274012Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1274029Z 
2025-06-04T21:52:29.1274875Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1275649Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:198:14]
2025-06-04T21:52:29.1276234Z  [2m197[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'text/csv' }))
2025-06-04T21:52:29.1276518Z  [2m198[0m │       })) as any;
2025-06-04T21:52:29.1276801Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1276964Z  [2m199[0m │ 
2025-06-04T21:52:29.1277124Z      ╰────
2025-06-04T21:52:29.1278042Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1278056Z 
2025-06-04T21:52:29.1278884Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1279598Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:201:49]
2025-06-04T21:52:29.1280086Z  [2m200[0m │       const request = createMockRequest({ format: 'csv' });
2025-06-04T21:52:29.1280492Z  [2m201[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1281086Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1281268Z  [2m202[0m │ 
2025-06-04T21:52:29.1281425Z      ╰────
2025-06-04T21:52:29.1282342Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1282356Z 
2025-06-04T21:52:29.1283153Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1283649Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:230:14]
2025-06-04T21:52:29.1284249Z  [2m229[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'application/pdf' }))
2025-06-04T21:52:29.1284512Z  [2m230[0m │       })) as any;
2025-06-04T21:52:29.1284812Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1285005Z  [2m231[0m │ 
2025-06-04T21:52:29.1285177Z      ╰────
2025-06-04T21:52:29.1286142Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1286170Z 
2025-06-04T21:52:29.1287013Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1287523Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:233:49]
2025-06-04T21:52:29.1287977Z  [2m232[0m │       const request = createMockRequest({ format: 'pdf' });
2025-06-04T21:52:29.1288368Z  [2m233[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1288773Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1288939Z  [2m234[0m │ 
2025-06-04T21:52:29.1289310Z      ╰────
2025-06-04T21:52:29.1290227Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1290241Z 
2025-06-04T21:52:29.1291056Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1291551Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:253:14]
2025-06-04T21:52:29.1292172Z  [2m252[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'application/json' }))
2025-06-04T21:52:29.1292403Z  [2m253[0m │       })) as any;
2025-06-04T21:52:29.1292705Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1292889Z  [2m254[0m │ 
2025-06-04T21:52:29.1293053Z      ╰────
2025-06-04T21:52:29.1293979Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1294204Z 
2025-06-04T21:52:29.1295062Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1295593Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:256:49]
2025-06-04T21:52:29.1296057Z  [2m255[0m │       const request = createMockRequest({ timeRange: '7d' });
2025-06-04T21:52:29.1296506Z  [2m256[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1296944Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1297135Z  [2m257[0m │ 
2025-06-04T21:52:29.1297312Z      ╰────
2025-06-04T21:52:29.1298278Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1298295Z 
2025-06-04T21:52:29.1329396Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1330059Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:274:14]
2025-06-04T21:52:29.1330916Z  [2m273[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'application/json' }))
2025-06-04T21:52:29.1331182Z  [2m274[0m │       })) as any;
2025-06-04T21:52:29.1331470Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1331638Z  [2m275[0m │ 
2025-06-04T21:52:29.1331822Z      ╰────
2025-06-04T21:52:29.1332819Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1332840Z 
2025-06-04T21:52:29.1333725Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1334281Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:277:49]
2025-06-04T21:52:29.1334816Z  [2m276[0m │       const request = createMockRequest({ includeDetails: 'true' });
2025-06-04T21:52:29.1335244Z  [2m277[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1335672Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1335840Z  [2m278[0m │ 
2025-06-04T21:52:29.1336003Z      ╰────
2025-06-04T21:52:29.1336933Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1336948Z 
2025-06-04T21:52:29.1337767Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1338271Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:295:14]
2025-06-04T21:52:29.1338886Z  [2m294[0m │         blob: vi.fn().mockResolvedValue(new Blob(['csv data'], { type: 'text/csv' }))
2025-06-04T21:52:29.1339283Z  [2m295[0m │       })) as any;
2025-06-04T21:52:29.1339565Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1339743Z  [2m296[0m │ 
2025-06-04T21:52:29.1339903Z      ╰────
2025-06-04T21:52:29.1340833Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1340847Z 
2025-06-04T21:52:29.1341680Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1342243Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:302:49]
2025-06-04T21:52:29.1342457Z  [2m301[0m │       });
2025-06-04T21:52:29.1342893Z  [2m302[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1343306Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1343480Z  [2m303[0m │ 
2025-06-04T21:52:29.1343641Z      ╰────
2025-06-04T21:52:29.1344562Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1344792Z 
2025-06-04T21:52:29.1345640Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1346189Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:334:14]
2025-06-04T21:52:29.1346409Z  [2m333[0m │         }
2025-06-04T21:52:29.1346646Z  [2m334[0m │       })) as any;
2025-06-04T21:52:29.1346938Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1347107Z  [2m335[0m │ 
2025-06-04T21:52:29.1347271Z      ╰────
2025-06-04T21:52:29.1348218Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1348238Z 
2025-06-04T21:52:29.1349318Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1349871Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:337:49]
2025-06-04T21:52:29.1350263Z  [2m336[0m │       const request = createMockRequest();
2025-06-04T21:52:29.1350862Z  [2m337[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1351290Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1351457Z  [2m338[0m │ 
2025-06-04T21:52:29.1351614Z      ╰────
2025-06-04T21:52:29.1352548Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1352566Z 
2025-06-04T21:52:29.1353433Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1353972Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:362:14]
2025-06-04T21:52:29.1354608Z  [2m361[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'application/json' }))
2025-06-04T21:52:29.1354893Z  [2m362[0m │       })) as any;
2025-06-04T21:52:29.1355205Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1355393Z  [2m363[0m │ 
2025-06-04T21:52:29.1355572Z      ╰────
2025-06-04T21:52:29.1356503Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1356518Z 
2025-06-04T21:52:29.1357366Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1357936Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:365:49]
2025-06-04T21:52:29.1358442Z  [2m364[0m │       const request = createMockRequest({ format: 'invalid' });
2025-06-04T21:52:29.1358861Z  [2m365[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1409602Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1409863Z  [2m366[0m │ 
2025-06-04T21:52:29.1410029Z      ╰────
2025-06-04T21:52:29.1411013Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1411033Z 
2025-06-04T21:52:29.1411906Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1412443Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:398:16]
2025-06-04T21:52:29.1413056Z  [2m397[0m │           blob: vi.fn().mockResolvedValue(new Blob([body], { type: expectedType }))
2025-06-04T21:52:29.1413290Z  [2m398[0m │         })) as any;
2025-06-04T21:52:29.1413583Z      · [38;2;246;87;248m               ───[0m
2025-06-04T21:52:29.1413744Z  [2m399[0m │ 
2025-06-04T21:52:29.1413908Z      ╰────
2025-06-04T21:52:29.1414851Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1415094Z 
2025-06-04T21:52:29.1415974Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1416656Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:401:51]
2025-06-04T21:52:29.1417093Z  [2m400[0m │         const request = createMockRequest({ format });
2025-06-04T21:52:29.1417520Z  [2m401[0m │         const response = await GET({ request } as any);
2025-06-04T21:52:29.1417988Z      · [38;2;246;87;248m                                                  ───[0m
2025-06-04T21:52:29.1418167Z  [2m402[0m │ 
2025-06-04T21:52:29.1418327Z      ╰────
2025-06-04T21:52:29.1419456Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1419477Z 
2025-06-04T21:52:29.1420355Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1420936Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:450:14]
2025-06-04T21:52:29.1421612Z  [2m449[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'application/json' }))
2025-06-04T21:52:29.1421876Z  [2m450[0m │       })) as any;
2025-06-04T21:52:29.1422180Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1422364Z  [2m451[0m │ 
2025-06-04T21:52:29.1422534Z      ╰────
2025-06-04T21:52:29.1423497Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1423515Z 
2025-06-04T21:52:29.1424376Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1424921Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:453:49]
2025-06-04T21:52:29.1425305Z  [2m452[0m │       const request = createMockRequest();
2025-06-04T21:52:29.1425751Z  [2m453[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1426204Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1426384Z  [2m454[0m │ 
2025-06-04T21:52:29.1426564Z      ╰────
2025-06-04T21:52:29.1427509Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1427525Z 
2025-06-04T21:52:29.1428377Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1428890Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:476:14]
2025-06-04T21:52:29.1429270Z  [2m475[0m │         }
2025-06-04T21:52:29.1429503Z  [2m476[0m │       })) as any;
2025-06-04T21:52:29.1429778Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1429940Z  [2m477[0m │ 
2025-06-04T21:52:29.1430366Z      ╰────
2025-06-04T21:52:29.1431312Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1431340Z 
2025-06-04T21:52:29.1432139Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1432644Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:479:49]
2025-06-04T21:52:29.1432991Z  [2m478[0m │       const request = createMockRequest();
2025-06-04T21:52:29.1433386Z  [2m479[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1433778Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1433943Z  [2m480[0m │ 
2025-06-04T21:52:29.1434095Z      ╰────
2025-06-04T21:52:29.1434999Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1435026Z 
2025-06-04T21:52:29.1435819Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1436471Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:496:14]
2025-06-04T21:52:29.1437087Z  [2m495[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'application/json' }))
2025-06-04T21:52:29.1437318Z  [2m496[0m │       })) as any;
2025-06-04T21:52:29.1437588Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1437748Z  [2m497[0m │ 
2025-06-04T21:52:29.1437898Z      ╰────
2025-06-04T21:52:29.1438800Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1438812Z 
2025-06-04T21:52:29.1469986Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1470629Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:499:49]
2025-06-04T21:52:29.1471141Z  [2m498[0m │       const request = createMockRequest({ format: 'json' });
2025-06-04T21:52:29.1471591Z  [2m499[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1472037Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1472226Z  [2m500[0m │ 
2025-06-04T21:52:29.1472400Z      ╰────
2025-06-04T21:52:29.1473362Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1473380Z 
2025-06-04T21:52:29.1474262Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1474794Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:521:14]
2025-06-04T21:52:29.1475431Z  [2m520[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'application/json' }))
2025-06-04T21:52:29.1475676Z  [2m521[0m │       })) as any;
2025-06-04T21:52:29.1475971Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1476134Z  [2m522[0m │ 
2025-06-04T21:52:29.1476291Z      ╰────
2025-06-04T21:52:29.1477279Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1477294Z 
2025-06-04T21:52:29.1478104Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1478619Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:528:52]
2025-06-04T21:52:29.1478963Z  [2m527[0m │       const responses = await Promise.all(
2025-06-04T21:52:29.1479541Z  [2m528[0m │         requests.map(request => GET({ request } as any))
2025-06-04T21:52:29.1479953Z      · [38;2;246;87;248m                                                   ───[0m
2025-06-04T21:52:29.1480361Z  [2m529[0m │       );
2025-06-04T21:52:29.1480523Z      ╰────
2025-06-04T21:52:29.1481445Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1481460Z 
2025-06-04T21:52:29.1482259Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1482752Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:567:14]
2025-06-04T21:52:29.1483361Z  [2m566[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'application/json' }))
2025-06-04T21:52:29.1483590Z  [2m567[0m │       })) as any;
2025-06-04T21:52:29.1483854Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1484012Z  [2m568[0m │ 
2025-06-04T21:52:29.1484168Z      ╰────
2025-06-04T21:52:29.1485060Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1485085Z 
2025-06-04T21:52:29.1486053Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1486555Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:570:49]
2025-06-04T21:52:29.1537190Z  [2m569[0m │       const request = createMockRequest();
2025-06-04T21:52:29.1537695Z  [2m570[0m │       const response = await GET({ request } as any);
2025-06-04T21:52:29.1538126Z      · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1538292Z  [2m571[0m │ 
2025-06-04T21:52:29.1538458Z      ╰────
2025-06-04T21:52:29.1539535Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1539553Z 
2025-06-04T21:52:29.1540387Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1540920Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:585:14]
2025-06-04T21:52:29.1541564Z  [2m584[0m │         blob: vi.fn().mockResolvedValue(new Blob([body], { type: 'application/json' }))
2025-06-04T21:52:29.1541809Z  [2m585[0m │       })) as any;
2025-06-04T21:52:29.1542129Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1542324Z  [2m586[0m │ 
2025-06-04T21:52:29.1542507Z      ╰────
2025-06-04T21:52:29.1543480Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1543498Z 
2025-06-04T21:52:29.1544337Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1544863Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:591:51]
2025-06-04T21:52:29.1545308Z  [2m590[0m │         const request = createMockRequest({ timeRange });
2025-06-04T21:52:29.1545714Z  [2m591[0m │         const response = await GET({ request } as any);
2025-06-04T21:52:29.1546135Z      · [38;2;246;87;248m                                                  ───[0m
2025-06-04T21:52:29.1546307Z  [2m592[0m │ 
2025-06-04T21:52:29.1546464Z      ╰────
2025-06-04T21:52:29.1547383Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1547398Z 
2025-06-04T21:52:29.1548151Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'APIRoute' is imported but never used.[0m
2025-06-04T21:52:29.1548686Z    ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:6:15]
2025-06-04T21:52:29.1549609Z  [2m5[0m │ import { describe, it, expect, beforeEach, afterEach, vi, type MockedFunction } from 'vitest';
2025-06-04T21:52:29.1550199Z  [2m6[0m │ import type { APIRoute } from 'astro';
2025-06-04T21:52:29.1550512Z    · [38;2;246;87;248m              ────┬───[0m
2025-06-04T21:52:29.1551040Z    ·                   [38;2;246;87;248m╰── [38;2;246;87;248m'APIRoute' is imported here[0m[0m
2025-06-04T21:52:29.1551216Z  [2m7[0m │ 
2025-06-04T21:52:29.1551370Z    ╰────
2025-06-04T21:52:29.1551811Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.1551825Z 
2025-06-04T21:52:29.1552849Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'jsonData' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.1553363Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:140:13]
2025-06-04T21:52:29.1553854Z  [2m139[0m │     it('should export data as JSON format by default', async () => {
2025-06-04T21:52:29.1554371Z  [2m140[0m │       const jsonData = JSON.stringify(mockDashboardData, null, 2);
2025-06-04T21:52:29.1554723Z      · [38;2;246;87;248m            ────┬───[0m
2025-06-04T21:52:29.1555256Z      ·                 [38;2;246;87;248m╰── [38;2;246;87;248m'jsonData' is declared here[0m[0m
2025-06-04T21:52:29.1555655Z  [2m141[0m │       
2025-06-04T21:52:29.1555847Z      ╰────
2025-06-04T21:52:29.1556349Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.1556372Z 
2025-06-04T21:52:29.1557406Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'csvData' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.1557926Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:183:13]
2025-06-04T21:52:29.1558433Z  [2m182[0m │     it('should export data as CSV format when specified', async () => {
2025-06-04T21:52:29.1589241Z  [2m183[0m │       const csvData = 'sessionId,biasScore,alertLevel\nsession-123,0.75,high';
2025-06-04T21:52:29.1589679Z      · [38;2;246;87;248m            ───┬───[0m
2025-06-04T21:52:29.1590218Z      ·                [38;2;246;87;248m╰── [38;2;246;87;248m'csvData' is declared here[0m[0m
2025-06-04T21:52:29.1590405Z  [2m184[0m │       
2025-06-04T21:52:29.1590562Z      ╰────
2025-06-04T21:52:29.1591063Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.1591081Z 
2025-06-04T21:52:29.1592161Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'pdfBuffer' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.1592696Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:215:13]
2025-06-04T21:52:29.1593246Z  [2m214[0m │     it('should export data as PDF format when specified', async () => {
2025-06-04T21:52:29.1593709Z  [2m215[0m │       const pdfBuffer = Buffer.from('PDF content');
2025-06-04T21:52:29.1594055Z      · [38;2;246;87;248m            ────┬────[0m
2025-06-04T21:52:29.1594616Z      ·                 [38;2;246;87;248m╰── [38;2;246;87;248m'pdfBuffer' is declared here[0m[0m
2025-06-04T21:52:29.1594828Z  [2m216[0m │       
2025-06-04T21:52:29.1594999Z      ╰────
2025-06-04T21:52:29.1595482Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.1595499Z 
2025-06-04T21:52:29.1596517Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1597044Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:250:23]
2025-06-04T21:52:29.1597297Z  [2m249[0m │         headers: {
2025-06-04T21:52:29.1597745Z  [2m250[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1598067Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1598569Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1598773Z  [2m251[0m │         },
2025-06-04T21:52:29.1599411Z      ╰────
2025-06-04T21:52:29.1599901Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1599916Z 
2025-06-04T21:52:29.1600989Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1601541Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:271:23]
2025-06-04T21:52:29.1601787Z  [2m270[0m │         headers: {
2025-06-04T21:52:29.1602206Z  [2m271[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1602525Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1603013Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1603214Z  [2m272[0m │         },
2025-06-04T21:52:29.1603406Z      ╰────
2025-06-04T21:52:29.1603886Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1603921Z 
2025-06-04T21:52:29.1604996Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1605730Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:292:23]
2025-06-04T21:52:29.1605996Z  [2m291[0m │         headers: {
2025-06-04T21:52:29.1606369Z  [2m292[0m │           get: vi.fn((key: string) => 'text/csv')
2025-06-04T21:52:29.1606688Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1607172Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1607363Z  [2m293[0m │         },
2025-06-04T21:52:29.1607522Z      ╰────
2025-06-04T21:52:29.1607967Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1607987Z 
2025-06-04T21:52:29.1609196Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1609742Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:332:23]
2025-06-04T21:52:29.1609988Z  [2m331[0m │         headers: {
2025-06-04T21:52:29.1610416Z  [2m332[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1610765Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1611283Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1611487Z  [2m333[0m │         }
2025-06-04T21:52:29.1611648Z      ╰────
2025-06-04T21:52:29.1612102Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1612116Z 
2025-06-04T21:52:29.1613119Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1613639Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:359:23]
2025-06-04T21:52:29.1613865Z  [2m358[0m │         headers: {
2025-06-04T21:52:29.1614288Z  [2m359[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1614583Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1615087Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1615295Z  [2m360[0m │         },
2025-06-04T21:52:29.1615464Z      ╰────
2025-06-04T21:52:29.1615943Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1615957Z 
2025-06-04T21:52:29.1617001Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1617540Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:447:23]
2025-06-04T21:52:29.1617786Z  [2m446[0m │         headers: {
2025-06-04T21:52:29.1618647Z  [2m447[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1618978Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1638809Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1639200Z  [2m448[0m │         },
2025-06-04T21:52:29.1639378Z      ╰────
2025-06-04T21:52:29.1639848Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1639863Z 
2025-06-04T21:52:29.1640894Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1641408Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:474:23]
2025-06-04T21:52:29.1641646Z  [2m473[0m │         headers: {
2025-06-04T21:52:29.1642057Z  [2m474[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1642376Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1643069Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1643284Z  [2m475[0m │         }
2025-06-04T21:52:29.1643464Z      ╰────
2025-06-04T21:52:29.1643935Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1643953Z 
2025-06-04T21:52:29.1644981Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1645510Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:493:23]
2025-06-04T21:52:29.1645719Z  [2m492[0m │         headers: {
2025-06-04T21:52:29.1645970Z  [2m493[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1646164Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1646468Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1646585Z  [2m494[0m │         },
2025-06-04T21:52:29.1646680Z      ╰────
2025-06-04T21:52:29.1646958Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1646973Z 
2025-06-04T21:52:29.1647543Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1647832Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:518:23]
2025-06-04T21:52:29.1647970Z  [2m517[0m │         headers: {
2025-06-04T21:52:29.1648205Z  [2m518[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1648387Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1648664Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1648784Z  [2m519[0m │         },
2025-06-04T21:52:29.1648875Z      ╰────
2025-06-04T21:52:29.1649381Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1649391Z 
2025-06-04T21:52:29.1649982Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1650279Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:564:23]
2025-06-04T21:52:29.1650416Z  [2m563[0m │         headers: {
2025-06-04T21:52:29.1650653Z  [2m564[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1650827Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1651099Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1651209Z  [2m565[0m │         },
2025-06-04T21:52:29.1651300Z      ╰────
2025-06-04T21:52:29.1651555Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1651726Z 
2025-06-04T21:52:29.1652311Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1652601Z      ╭─[[38;2;92;157;255;1msrc/pages/api/bias-detection/export.test.ts[0m:582:23]
2025-06-04T21:52:29.1652733Z  [2m581[0m │         headers: {
2025-06-04T21:52:29.1652965Z  [2m582[0m │           get: vi.fn((key: string) => 'application/json')
2025-06-04T21:52:29.1653134Z      · [38;2;246;87;248m                      ─┬─[0m
2025-06-04T21:52:29.1653405Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'key' is declared here[0m[0m
2025-06-04T21:52:29.1653508Z  [2m583[0m │         },
2025-06-04T21:52:29.1653601Z      ╰────
2025-06-04T21:52:29.1653845Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1653852Z 
2025-06-04T21:52:29.1654319Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1654705Z     ╭─[[38;2;92;157;255;1msrc/simulator/utils/speechRecognition.ts[0m:12:24]
2025-06-04T21:52:29.1654852Z  [2m11[0m │   interface Window {
2025-06-04T21:52:29.1655012Z  [2m12[0m │     SpeechRecognition: any
2025-06-04T21:52:29.1655183Z     · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.1655361Z  [2m13[0m │     webkitSpeechRecognition: any
2025-06-04T21:52:29.1655454Z     ╰────
2025-06-04T21:52:29.1655971Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1655978Z 
2025-06-04T21:52:29.1656425Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1656692Z     ╭─[[38;2;92;157;255;1msrc/simulator/utils/speechRecognition.ts[0m:13:30]
2025-06-04T21:52:29.1656853Z  [2m12[0m │     SpeechRecognition: any
2025-06-04T21:52:29.1657021Z  [2m13[0m │     webkitSpeechRecognition: any
2025-06-04T21:52:29.1657216Z     · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.1657360Z  [2m14[0m │     SpeechGrammarList: any
2025-06-04T21:52:29.1657455Z     ╰────
2025-06-04T21:52:29.1657956Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1657963Z 
2025-06-04T21:52:29.1658404Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1658662Z     ╭─[[38;2;92;157;255;1msrc/simulator/utils/speechRecognition.ts[0m:14:24]
2025-06-04T21:52:29.1658831Z  [2m13[0m │     webkitSpeechRecognition: any
2025-06-04T21:52:29.1658976Z  [2m14[0m │     SpeechGrammarList: any
2025-06-04T21:52:29.1659338Z     · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.1659611Z  [2m15[0m │   }
2025-06-04T21:52:29.1659706Z     ╰────
2025-06-04T21:52:29.1660221Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1660229Z 
2025-06-04T21:52:29.1660671Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1660930Z     ╭─[[38;2;92;157;255;1msrc/simulator/utils/speechRecognition.ts[0m:44:4]
2025-06-04T21:52:29.1661199Z  [2m43[0m │   config: SpeechRecognitionConfig = DEFAULT_SPEECH_CONFIG,
2025-06-04T21:52:29.1661313Z  [2m44[0m │ ): any | null {
2025-06-04T21:52:29.1661452Z     · [38;2;246;87;248m   ───[0m
2025-06-04T21:52:29.1661675Z  [2m45[0m │   // Check if browser supports the Web Speech API
2025-06-04T21:52:29.1661765Z     ╰────
2025-06-04T21:52:29.1662277Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1662294Z 
2025-06-04T21:52:29.1662854Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1663134Z     ╭─[[38;2;92;157;255;1msrc/simulator/utils/speechRecognition.ts[0m:55:16]
2025-06-04T21:52:29.1663327Z  [2m54[0m │   const SpeechRecognitionConstructor =
2025-06-04T21:52:29.1663654Z  [2m55[0m │     (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition
2025-06-04T21:52:29.1663807Z     · [38;2;246;87;248m               ───[0m
2025-06-04T21:52:29.1663904Z  [2m56[0m │ 
2025-06-04T21:52:29.1663992Z     ╰────
2025-06-04T21:52:29.1664492Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1664504Z 
2025-06-04T21:52:29.1664944Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1665219Z     ╭─[[38;2;92;157;255;1msrc/simulator/utils/speechRecognition.ts[0m:55:53]
2025-06-04T21:52:29.1665413Z  [2m54[0m │   const SpeechRecognitionConstructor =
2025-06-04T21:52:29.1665732Z  [2m55[0m │     (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition
2025-06-04T21:52:29.1665969Z     · [38;2;246;87;248m                                                    ───[0m
2025-06-04T21:52:29.1666062Z  [2m56[0m │ 
2025-06-04T21:52:29.1666154Z     ╰────
2025-06-04T21:52:29.1666654Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1666661Z 
2025-06-04T21:52:29.1667104Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1667386Z      ╭─[[38;2;92;157;255;1msrc/simulator/utils/privacy.ts[0m:189:43]
2025-06-04T21:52:29.1667799Z  [2m188[0m │   // Check for Web Audio API (for audio processing)
2025-06-04T21:52:29.1668280Z  [2m189[0m │   if (!window.AudioContext && !(window as any)['webkitAudioContext']) {
2025-06-04T21:52:29.1668678Z      · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.1669191Z  [2m190[0m │     missingFeatures.push('Web Audio API')
2025-06-04T21:52:29.1669379Z      ╰────
2025-06-04T21:52:29.1670297Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1670310Z 
2025-06-04T21:52:29.1671126Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1671548Z      ╭─[[38;2;92;157;255;1msrc/lib/services/cacheService.ts[0m:175:46]
2025-06-04T21:52:29.1671965Z  [2m174[0m │ class MemoryCacheService implements CacheService {
2025-06-04T21:52:29.1672379Z  [2m175[0m │   private cache = new Map<string, CacheEntry<any>>()
2025-06-04T21:52:29.1672943Z      · [38;2;246;87;248m                                             ───[0m
2025-06-04T21:52:29.1673274Z  [2m176[0m │   private readonly maxEntries = 1000
2025-06-04T21:52:29.1673446Z      ╰────
2025-06-04T21:52:29.1674335Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1674348Z 
2025-06-04T21:52:29.1675148Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1675563Z      ╭─[[38;2;92;157;255;1msrc/lib/services/cacheService.ts[0m:341:43]
2025-06-04T21:52:29.1675735Z  [2m340[0m │  */
2025-06-04T21:52:29.1676127Z  [2m341[0m │ export function withCache<T, Args extends any[]>(
2025-06-04T21:52:29.1676497Z      · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.1676851Z  [2m342[0m │   fn: (...args: Args) => Promise<T>,
2025-06-04T21:52:29.1677021Z      ╰────
2025-06-04T21:52:29.1677920Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1678148Z 
2025-06-04T21:52:29.1678807Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1679255Z      ╭─[[38;2;92;157;255;1msrc/scripts/mental-arena-generate.ts[0m:109:32]
2025-06-04T21:52:29.1679417Z  [2m108[0m │       const mockFHE = {
2025-06-04T21:52:29.1679611Z  [2m109[0m │         encrypt: async (value: any) => ({
2025-06-04T21:52:29.1679812Z      · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.1679964Z  [2m110[0m │           data: 'encrypted',
2025-06-04T21:52:29.1680059Z      ╰────
2025-06-04T21:52:29.1680568Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1680590Z 
2025-06-04T21:52:29.1681037Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1681295Z      ╭─[[38;2;92;157;255;1msrc/scripts/mental-arena-generate.ts[0m:117:37]
2025-06-04T21:52:29.1681509Z  [2m116[0m │           encrypted.replace('encrypted:', ''),
2025-06-04T21:52:29.1681721Z  [2m117[0m │         generateHash: async (_data: any) => 'hash',
2025-06-04T21:52:29.1681929Z      · [38;2;246;87;248m                                    ───[0m
2025-06-04T21:52:29.1682100Z  [2m118[0m │         setEncryptionMode: () => {},
2025-06-04T21:52:29.1682190Z      ╰────
2025-06-04T21:52:29.1682704Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1682711Z 
2025-06-04T21:52:29.1683154Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1683418Z      ╭─[[38;2;92;157;255;1msrc/scripts/mental-arena-generate.ts[0m:128:25]
2025-06-04T21:52:29.1683634Z  [2m127[0m │       const adapter = new MentalArenaAdapter(
2025-06-04T21:52:29.1683794Z  [2m128[0m │         mockProvider as any,
2025-06-04T21:52:29.1683970Z      · [38;2;246;87;248m                        ───[0m
2025-06-04T21:52:29.1684131Z  [2m129[0m │         mockFHE as any,
2025-06-04T21:52:29.1684235Z      ╰────
2025-06-04T21:52:29.1684739Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1684746Z 
2025-06-04T21:52:29.1685184Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1685437Z      ╭─[[38;2;92;157;255;1msrc/scripts/mental-arena-generate.ts[0m:129:20]
2025-06-04T21:52:29.1685585Z  [2m128[0m │         mockProvider as any,
2025-06-04T21:52:29.1685877Z  [2m129[0m │         mockFHE as any,
2025-06-04T21:52:29.1686040Z      · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.1686259Z  [2m130[0m │         'http://localhost:8000', // baseUrl
2025-06-04T21:52:29.1686356Z      ╰────
2025-06-04T21:52:29.1686861Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1686868Z 
2025-06-04T21:52:29.1687319Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1687602Z      ╭─[[38;2;92;157;255;1msrc/lib/services/BlogPublishingService.ts[0m:276:34]
2025-06-04T21:52:29.1687807Z  [2m275[0m │       const lines = frontmatter.split('\n')
2025-06-04T21:52:29.1687997Z  [2m276[0m │       const data: Record<string, any> = {}
2025-06-04T21:52:29.1688203Z      · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.1688309Z  [2m277[0m │ 
2025-06-04T21:52:29.1688404Z      ╰────
2025-06-04T21:52:29.1688908Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1689210Z 
2025-06-04T21:52:29.1689718Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1690066Z     ╭─[[38;2;92;157;255;1msrc/pages/api/ai/crisis-detection.ts[0m:89:87]
2025-06-04T21:52:29.1690385Z  [2m88[0m │   staffChannels: staffChannels,
2025-06-04T21:52:29.1691256Z  [2m89[0m │   crisisEventRecorder: recordCrisisEventToDb as unknown as (eventData: Record<string, any>) => Promise<void>,
2025-06-04T21:52:29.1691826Z     · [38;2;246;87;248m                                                                                      ───[0m
2025-06-04T21:52:29.1692240Z  [2m90[0m │   slackWebhookUrl: slackWebhookUrl, // Pass the retrieved URL
2025-06-04T21:52:29.1692357Z     ╰────
2025-06-04T21:52:29.1692969Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1692980Z 
2025-06-04T21:52:29.1693434Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'CrisisEventData' is imported but never used.[0m
2025-06-04T21:52:29.1693697Z     ╭─[[38;2;92;157;255;1msrc/pages/api/ai/crisis-detection.ts[0m:11:15]
2025-06-04T21:52:29.1694016Z  [2m10[0m │ import { recordCrisisEventToDb } from '../../../services/crisisEventDb';
2025-06-04T21:52:29.1694317Z  [2m11[0m │ import type { CrisisEventData } from '../../../services/crisisEventDb';
2025-06-04T21:52:29.1694512Z     · [38;2;246;87;248m              ───────┬───────[0m
2025-06-04T21:52:29.1694827Z     ·                      [38;2;246;87;248m╰── [38;2;246;87;248m'CrisisEventData' is imported here[0m[0m
2025-06-04T21:52:29.1695232Z  [2m12[0m │ import type { AlertConfiguration } from '../../../lib/ai/crisis/types'; // Import AlertConfiguration
2025-06-04T21:52:29.1695341Z     ╰────
2025-06-04T21:52:29.1695584Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.1695591Z 
2025-06-04T21:52:29.1696052Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1696322Z      ╭─[[38;2;92;157;255;1msrc/scripts/test-breach-notification.ts[0m:108:71]
2025-06-04T21:52:29.1696579Z  [2m107[0m │       console.log(`- Type: ${chalk.yellow(options.type)}`)
2025-06-04T21:52:29.1696963Z  [2m108[0m │       console.log(`- Severity: ${getSeverityColor(options.severity as any)(options.severity)}`)
2025-06-04T21:52:29.1697227Z      · [38;2;246;87;248m                                                                      ───[0m
2025-06-04T21:52:29.1697538Z  [2m109[0m │       console.log(`- Affected Users: ${chalk.yellow(userCount.toString())}`)
2025-06-04T21:52:29.1697637Z      ╰────
2025-06-04T21:52:29.1698325Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1698333Z 
2025-06-04T21:52:29.1698891Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1699440Z      ╭─[[38;2;92;157;255;1msrc/lib/security/pii/index.ts[0m:365:27]
2025-06-04T21:52:29.1699764Z  [2m364[0m │       // Ensure FHE service is available
2025-06-04T21:52:29.1700143Z  [2m365[0m │       if (!(fheService as any).isInitialized?.()) {
2025-06-04T21:52:29.1700457Z      · [38;2;246;87;248m                          ───[0m
2025-06-04T21:52:29.1700847Z  [2m366[0m │         throw new Error('FHE service not initialized')
2025-06-04T21:52:29.1700999Z      ╰────
2025-06-04T21:52:29.1701896Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1701924Z 
2025-06-04T21:52:29.1702719Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1703271Z      ╭─[[38;2;92;157;255;1msrc/lib/security/pii/index.ts[0m:370:44]
2025-06-04T21:52:29.1703666Z  [2m369[0m │       // Process encrypted data using FHE operations
2025-06-04T21:52:29.1704163Z  [2m370[0m │       const result = (await (fheService as any).processEncrypted?.(
2025-06-04T21:52:29.1704544Z      · [38;2;246;87;248m                                           ───[0m
2025-06-04T21:52:29.1704792Z  [2m371[0m │         encryptedText,
2025-06-04T21:52:29.1704948Z      ╰────
2025-06-04T21:52:29.1705843Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1705854Z 
2025-06-04T21:52:29.1706621Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1707142Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/__tests__/CrisisProtocol.test.ts[0m:87:57]
2025-06-04T21:52:29.1707449Z  [2m86[0m │       // Mock the internal send method
2025-06-04T21:52:29.1708200Z  [2m87[0m │       const sendSpy = jest.spyOn(notificationService as any, 'sendToChannel').mockResolvedValue(true)
2025-06-04T21:52:29.1708627Z     · [38;2;246;87;248m                                                        ───[0m
2025-06-04T21:52:29.1708787Z  [2m88[0m │ 
2025-06-04T21:52:29.1708941Z     ╰────
2025-06-04T21:52:29.1710006Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1710020Z 
2025-06-04T21:52:29.1710826Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1711387Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/__tests__/CrisisProtocol.test.ts[0m:158:67]
2025-06-04T21:52:29.1711996Z  [2m157[0m │     test('should correctly determine alert level based on risk score', () => {
2025-06-04T21:52:29.1712729Z  [2m158[0m │       const determineAlertLevelSpy = jest.spyOn(crisisProtocol as any, 'determineAlertLevel')
2025-06-04T21:52:29.1713176Z      · [38;2;246;87;248m                                                                  ───[0m
2025-06-04T21:52:29.1713347Z  [2m159[0m │ 
2025-06-04T21:52:29.1713505Z      ╰────
2025-06-04T21:52:29.1714369Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1714382Z 
2025-06-04T21:52:29.1715178Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1715719Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/__tests__/CrisisProtocol.test.ts[0m:161:33]
2025-06-04T21:52:29.1716040Z  [2m160[0m │       // Test with different risk scores
2025-06-04T21:52:29.1716961Z  [2m161[0m │       expect((crisisProtocol as any).determineAlertLevel(0.95, ['suicide_plan'])).toBe('emergency')
2025-06-04T21:52:29.1717246Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.1717674Z  [2m162[0m │       expect((crisisProtocol as any).determineAlertLevel(0.75, ['suicidal_ideation'])).toBe('severe')
2025-06-04T21:52:29.1717767Z      ╰────
2025-06-04T21:52:29.1718277Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1718292Z 
2025-06-04T21:52:29.1718744Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1719237Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/__tests__/CrisisProtocol.test.ts[0m:162:33]
2025-06-04T21:52:29.1719653Z  [2m161[0m │       expect((crisisProtocol as any).determineAlertLevel(0.95, ['suicide_plan'])).toBe('emergency')
2025-06-04T21:52:29.1720070Z  [2m162[0m │       expect((crisisProtocol as any).determineAlertLevel(0.75, ['suicidal_ideation'])).toBe('severe')
2025-06-04T21:52:29.1720421Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.1720843Z  [2m163[0m │       expect((crisisProtocol as any).determineAlertLevel(0.55, ['severe_depression'])).toBe('moderate')
2025-06-04T21:52:29.1720942Z      ╰────
2025-06-04T21:52:29.1721446Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1721454Z 
2025-06-04T21:52:29.1721905Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1722207Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/__tests__/CrisisProtocol.test.ts[0m:163:33]
2025-06-04T21:52:29.1722613Z  [2m162[0m │       expect((crisisProtocol as any).determineAlertLevel(0.75, ['suicidal_ideation'])).toBe('severe')
2025-06-04T21:52:29.1723034Z  [2m163[0m │       expect((crisisProtocol as any).determineAlertLevel(0.55, ['severe_depression'])).toBe('moderate')
2025-06-04T21:52:29.1723242Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.1723622Z  [2m164[0m │       expect((crisisProtocol as any).determineAlertLevel(0.25, ['depression'])).toBe('concern')
2025-06-04T21:52:29.1723716Z      ╰────
2025-06-04T21:52:29.1724289Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1724303Z 
2025-06-04T21:52:29.1725055Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1725607Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/__tests__/CrisisProtocol.test.ts[0m:164:33]
2025-06-04T21:52:29.1726396Z  [2m163[0m │       expect((crisisProtocol as any).determineAlertLevel(0.55, ['severe_depression'])).toBe('moderate')
2025-06-04T21:52:29.1727133Z  [2m164[0m │       expect((crisisProtocol as any).determineAlertLevel(0.25, ['depression'])).toBe('concern')
2025-06-04T21:52:29.1727537Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.1727713Z  [2m165[0m │ 
2025-06-04T21:52:29.1727868Z      ╰────
2025-06-04T21:52:29.1728720Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1728734Z 
2025-06-04T21:52:29.1729757Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1730330Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/__tests__/CrisisProtocol.test.ts[0m:342:62]
2025-06-04T21:52:29.1730605Z  [2m341[0m │     // Check blocks field
2025-06-04T21:52:29.1731136Z  [2m342[0m │     const patientIdField = payload.blocks[1].fields.find((f: any) => 
2025-06-04T21:52:29.1731835Z      · [38;2;246;87;248m                                                             ───[0m
2025-06-04T21:52:29.1732185Z  [2m343[0m │       f.text.includes('Patient ID')
2025-06-04T21:52:29.1732365Z      ╰────
2025-06-04T21:52:29.1733286Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1733301Z 
2025-06-04T21:52:29.1733976Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1734494Z     ╭─[[38;2;92;157;255;1msrc/lib/services/contact/__tests__/ContactService.test.ts[0m:38:69]
2025-06-04T21:52:29.1734675Z  [2m37[0m │     vi.clearAllMocks()
2025-06-04T21:52:29.1735100Z  [2m38[0m │     MockedEmailService.mockImplementation(() => mockEmailService as any)
2025-06-04T21:52:29.1735419Z     · [38;2;246;87;248m                                                                    ───[0m
2025-06-04T21:52:29.1735686Z  [2m39[0m │     contactService = new ContactService()
2025-06-04T21:52:29.1735808Z     ╰────
2025-06-04T21:52:29.1736639Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1736659Z 
2025-06-04T21:52:29.1737496Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1737944Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/CrisisProtocol.ts[0m:9:48]
2025-06-04T21:52:29.1738191Z  [2m 8[0m │ const auditLogger = {
2025-06-04T21:52:29.1738503Z  [2m 9[0m │   info: (message: string, data: Record<string, any>) => {
2025-06-04T21:52:29.1738794Z     · [38;2;246;87;248m                                               ───[0m
2025-06-04T21:52:29.1739196Z  [2m10[0m │     logger.info(`[AUDIT] ${message}`, {
2025-06-04T21:52:29.1739338Z     ╰────
2025-06-04T21:52:29.1740007Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1740031Z 
2025-06-04T21:52:29.1740693Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1741013Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/CrisisProtocol.ts[0m:16:48]
2025-06-04T21:52:29.1741199Z  [2m15[0m │   },
2025-06-04T21:52:29.1741634Z  [2m16[0m │   warn: (message: string, data: Record<string, any>) => {
2025-06-04T21:52:29.1742050Z     · [38;2;246;87;248m                                               ───[0m
2025-06-04T21:52:29.1742378Z  [2m17[0m │     logger.warn(`[AUDIT] ${message}`, {
2025-06-04T21:52:29.1742541Z     ╰────
2025-06-04T21:52:29.1743461Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1743478Z 
2025-06-04T21:52:29.1744111Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1744474Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/CrisisProtocol.ts[0m:23:49]
2025-06-04T21:52:29.1744597Z  [2m22[0m │   },
2025-06-04T21:52:29.1744931Z  [2m23[0m │   error: (message: string, data: Record<string, any>) => {
2025-06-04T21:52:29.1745244Z     · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1745460Z  [2m24[0m │     logger.error(`[AUDIT] ${message}`, {
2025-06-04T21:52:29.1745593Z     ╰────
2025-06-04T21:52:29.1746221Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1746231Z 
2025-06-04T21:52:29.1746806Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1747153Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/CrisisProtocol.ts[0m:45:60]
2025-06-04T21:52:29.1747695Z  [2m44[0m │   private isInitialized: boolean = false
2025-06-04T21:52:29.1748193Z  [2m45[0m │   private crisisEventRecorder?: (eventData: Record<string, any>) => Promise<void>;
2025-06-04T21:52:29.1748525Z     · [38;2;246;87;248m                                                           ───[0m
2025-06-04T21:52:29.1748931Z  [2m46[0m │   private slackWebhookUrl?: string; // Added to store Slack webhook URL
2025-06-04T21:52:29.1749217Z     ╰────
2025-06-04T21:52:29.1750136Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1750153Z 
2025-06-04T21:52:29.1750766Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1751185Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/CrisisProtocol.ts[0m:83:54]
2025-06-04T21:52:29.1751469Z  [2m82[0m │     alertTimeoutMs?: number;
2025-06-04T21:52:29.1752082Z  [2m83[0m │     crisisEventRecorder?: (eventData: Record<string, any>) => Promise<void>;
2025-06-04T21:52:29.1752697Z     · [38;2;246;87;248m                                                     ───[0m
2025-06-04T21:52:29.1753359Z  [2m84[0m │     slackWebhookUrl?: string; // Added to accept Slack webhook URL during initialization
2025-06-04T21:52:29.1753531Z     ╰────
2025-06-04T21:52:29.1754440Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1754455Z 
2025-06-04T21:52:29.1755272Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1755726Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/CrisisProtocol.ts[0m:149:29]
2025-06-04T21:52:29.1755985Z  [2m148[0m │     action: string, 
2025-06-04T21:52:29.1756285Z  [2m149[0m │     details: Record<string, any>
2025-06-04T21:52:29.1756652Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.1756895Z  [2m150[0m │   ): Promise<void> {
2025-06-04T21:52:29.1757059Z      ╰────
2025-06-04T21:52:29.1757987Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1758000Z 
2025-06-04T21:52:29.1759232Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'caseId' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1759716Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/CrisisProtocol.ts[0m:638:32]
2025-06-04T21:52:29.1759908Z  [2m637[0m │    */
2025-06-04T21:52:29.1760432Z  [2m638[0m │   private async isCaseResolved(caseId: string): Promise<boolean> {
2025-06-04T21:52:29.1760802Z      · [38;2;246;87;248m                               ───┬──[0m
2025-06-04T21:52:29.1761353Z      ·                                   [38;2;246;87;248m╰── [38;2;246;87;248m'caseId' is declared here[0m[0m
2025-06-04T21:52:29.1761794Z  [2m639[0m │     // In production, this would check a database record
2025-06-04T21:52:29.1761961Z      ╰────
2025-06-04T21:52:29.1762417Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1762432Z 
2025-06-04T21:52:29.1763518Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'textSample' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1763980Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/crisis/CrisisProtocol.ts[0m:703:5]
2025-06-04T21:52:29.1764265Z  [2m702[0m │     sessionId: string,
2025-06-04T21:52:29.1764525Z  [2m703[0m │     textSample: string
2025-06-04T21:52:29.1764828Z      · [38;2;246;87;248m    ─────┬────[0m
2025-06-04T21:52:29.1765142Z      ·          [38;2;246;87;248m╰── [38;2;246;87;248m'textSample' is declared here[0m[0m
2025-06-04T21:52:29.1765295Z  [2m704[0m │   ): CrisisResponse {
2025-06-04T21:52:29.1765576Z      ╰────
2025-06-04T21:52:29.1765832Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1765846Z 
2025-06-04T21:52:29.1766420Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1766776Z     ╭─[[38;2;92;157;255;1msrc/lib/services/analytics/ComparativeProgressService.ts[0m:13:19]
2025-06-04T21:52:29.1766994Z  [2m12[0m │ export class ComparativeProgressService {
2025-06-04T21:52:29.1767256Z  [2m13[0m │   private logger: any; // Replace with your actual logger type
2025-06-04T21:52:29.1767429Z     · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.1767522Z  [2m14[0m │ 
2025-06-04T21:52:29.1767617Z     ╰────
2025-06-04T21:52:29.1768134Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1768141Z 
2025-06-04T21:52:29.1768596Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1768959Z     ╭─[[38;2;92;157;255;1msrc/lib/services/analytics/ComparativeProgressService.ts[0m:15:23]
2025-06-04T21:52:29.1769277Z  [2m14[0m │ 
2025-06-04T21:52:29.1769567Z  [2m15[0m │   constructor(logger: any) {
2025-06-04T21:52:29.1769891Z     · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.1770177Z  [2m16[0m │     this.logger = logger;
2025-06-04T21:52:29.1770274Z     ╰────
2025-06-04T21:52:29.1770866Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1770875Z 
2025-06-04T21:52:29.1771301Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'ContextFactors' is imported but never used.[0m
2025-06-04T21:52:29.1771524Z    ╭─[[38;2;92;157;255;1msrc/pages/api/techniques.ts[0m:5:15]
2025-06-04T21:52:29.1771923Z  [2m4[0m │ import { OutcomeRecommendationEngine } from '@/lib/ai/services/OutcomeRecommendationEngine'
2025-06-04T21:52:29.1772281Z  [2m5[0m │ import type { ContextFactors } from '@/lib/ai/services/ContextualAwarenessService'
2025-06-04T21:52:29.1772474Z    · [38;2;246;87;248m              ───────┬──────[0m
2025-06-04T21:52:29.1772788Z    ·                      [38;2;246;87;248m╰── [38;2;246;87;248m'ContextFactors' is imported here[0m[0m
2025-06-04T21:52:29.1773020Z  [2m6[0m │ import type { CollectionEntry } from 'astro:content'
2025-06-04T21:52:29.1773115Z    ╰────
2025-06-04T21:52:29.1773355Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.1773363Z 
2025-06-04T21:52:29.1773958Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Catch parameter 'err' is caught but never used. Unused caught errors should start with a '_'.[0m
2025-06-04T21:52:29.1774171Z     ╭─[[38;2;92;157;255;1msrc/pages/api/techniques.ts[0m:69:12]
2025-06-04T21:52:29.1774277Z  [2m68[0m │     })
2025-06-04T21:52:29.1774577Z  [2m69[0m │   } catch (err) {
2025-06-04T21:52:29.1774732Z     · [38;2;246;87;248m           ─┬─[0m
2025-06-04T21:52:29.1775015Z     ·             [38;2;246;87;248m╰── [38;2;246;87;248m'err' is declared here[0m[0m
2025-06-04T21:52:29.1775349Z  [2m70[0m │     return new Response(JSON.stringify({ error: 'Internal server error.' }), {
2025-06-04T21:52:29.1775446Z     ╰────
2025-06-04T21:52:29.1775685Z [38;2;106;159;181m  help: [0mConsider handling this error.
2025-06-04T21:52:29.1775694Z 
2025-06-04T21:52:29.1776281Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Catch parameter 'err' is caught but never used. Unused caught errors should start with a '_'.[0m
2025-06-04T21:52:29.1776508Z      ╭─[[38;2;92;157;255;1msrc/pages/api/techniques.ts[0m:146:12]
2025-06-04T21:52:29.1776653Z  [2m145[0m │     })
2025-06-04T21:52:29.1776785Z  [2m146[0m │   } catch (err) {
2025-06-04T21:52:29.1776940Z      · [38;2;246;87;248m           ─┬─[0m
2025-06-04T21:52:29.1777211Z      ·             [38;2;246;87;248m╰── [38;2;246;87;248m'err' is declared here[0m[0m
2025-06-04T21:52:29.1777654Z  [2m147[0m │     return new Response(JSON.stringify({ error: 'Internal server error.' }), {
2025-06-04T21:52:29.1777755Z      ╰────
2025-06-04T21:52:29.1777988Z [38;2;106;159;181m  help: [0mConsider handling this error.
2025-06-04T21:52:29.1777998Z 
2025-06-04T21:52:29.1778449Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1778771Z     ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/local-fs.ts[0m:17:15]
2025-06-04T21:52:29.1778928Z  [2m16[0m │   private basePath: string
2025-06-04T21:52:29.1779255Z  [2m17[0m │   private fs: any
2025-06-04T21:52:29.1779430Z     · [38;2;246;87;248m              ───[0m
2025-06-04T21:52:29.1779569Z  [2m18[0m │   private path: any
2025-06-04T21:52:29.1779665Z     ╰────
2025-06-04T21:52:29.1780188Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1780196Z 
2025-06-04T21:52:29.1780656Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1780979Z     ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/local-fs.ts[0m:18:17]
2025-06-04T21:52:29.1781114Z  [2m17[0m │   private fs: any
2025-06-04T21:52:29.1781246Z  [2m18[0m │   private path: any
2025-06-04T21:52:29.1781405Z     · [38;2;246;87;248m                ───[0m
2025-06-04T21:52:29.1781564Z  [2m19[0m │   private initialized = false
2025-06-04T21:52:29.1781653Z     ╰────
2025-06-04T21:52:29.1782156Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1782164Z 
2025-06-04T21:52:29.1782598Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1782939Z      ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/local-fs.ts[0m:166:33]
2025-06-04T21:52:29.1783129Z  [2m165[0m │     const files = await Promise.all(
2025-06-04T21:52:29.1783330Z  [2m166[0m │       entries.map(async (entry: any) => {
2025-06-04T21:52:29.1783525Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.1783766Z  [2m167[0m │         const fullPath = this.path.join(dir, entry.name)
2025-06-04T21:52:29.1783856Z      ╰────
2025-06-04T21:52:29.1784361Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1784368Z 
2025-06-04T21:52:29.1784803Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1785062Z      ╭─[[38;2;92;157;255;1msrc/pages/api/analytics/engagement.ts[0m:138:19]
2025-06-04T21:52:29.1785342Z  [2m137[0m │     })
2025-06-04T21:52:29.1785487Z  [2m138[0m │   } catch (error: any) {
2025-06-04T21:52:29.1785665Z      · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.1785899Z  [2m139[0m │     // Log error securely (avoid leaking sensitive info)
2025-06-04T21:52:29.1785994Z      ╰────
2025-06-04T21:52:29.1786496Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1786504Z 
2025-06-04T21:52:29.1786943Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1787254Z     ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/aws-s3.ts[0m:11:15]
2025-06-04T21:52:29.1787527Z  [2m10[0m │ export class S3StorageProvider implements StorageProvider {
2025-06-04T21:52:29.1787660Z  [2m11[0m │   private s3: any
2025-06-04T21:52:29.1787827Z     · [38;2;246;87;248m              ───[0m
2025-06-04T21:52:29.1787981Z  [2m12[0m │   private bucketName: string
2025-06-04T21:52:29.1788075Z     ╰────
2025-06-04T21:52:29.1788710Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1788719Z 
2025-06-04T21:52:29.1789456Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1789937Z     ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/aws-s3.ts[0m:29:49]
2025-06-04T21:52:29.1790087Z  [2m28[0m │       this.s3 = new S3({
2025-06-04T21:52:29.1790319Z  [2m29[0m │         credentials: this.config.credentials as any,
2025-06-04T21:52:29.1790546Z     · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1790750Z  [2m30[0m │         region: this.config.region as string,
2025-06-04T21:52:29.1790854Z     ╰────
2025-06-04T21:52:29.1791367Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1791374Z 
2025-06-04T21:52:29.1791825Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1792144Z     ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/aws-s3.ts[0m:57:45]
2025-06-04T21:52:29.1792404Z  [2m56[0m │       const { Contents = [] } = await this.s3.listObjects(params)
2025-06-04T21:52:29.1792653Z  [2m57[0m │       const fileNames = Contents.map((item: any) => item.Key)
2025-06-04T21:52:29.1792867Z     · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.1792966Z  [2m58[0m │ 
2025-06-04T21:52:29.1793055Z     ╰────
2025-06-04T21:52:29.1793559Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1793580Z 
2025-06-04T21:52:29.1794020Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1794322Z     ╭─[[38;2;92;157;255;1msrc/pages/api/analytics/treatment-forecast.ts[0m:70:17]
2025-06-04T21:52:29.1794424Z  [2m69[0m │     );
2025-06-04T21:52:29.1794563Z  [2m70[0m │   } catch (err: any) {
2025-06-04T21:52:29.1794726Z     · [38;2;246;87;248m                ───[0m
2025-06-04T21:52:29.1794934Z  [2m71[0m │     // Log securely (avoid leaking sensitive data)
2025-06-04T21:52:29.1795027Z     ╰────
2025-06-04T21:52:29.1795524Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1795531Z 
2025-06-04T21:52:29.1795970Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1796455Z     ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/google-cloud.ts[0m:11:20]
2025-06-04T21:52:29.1796764Z  [2m10[0m │ export class GoogleCloudStorageProvider implements StorageProvider {
2025-06-04T21:52:29.1796913Z  [2m11[0m │   private storage: any
2025-06-04T21:52:29.1797083Z     · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.1797220Z  [2m12[0m │   private bucket: any
2025-06-04T21:52:29.1797308Z     ╰────
2025-06-04T21:52:29.1797808Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1797816Z 
2025-06-04T21:52:29.1798250Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1798591Z     ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/google-cloud.ts[0m:12:19]
2025-06-04T21:52:29.1798727Z  [2m11[0m │   private storage: any
2025-06-04T21:52:29.1798874Z  [2m12[0m │   private bucket: any
2025-06-04T21:52:29.1799206Z     · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.1799380Z  [2m13[0m │   private bucketName: string
2025-06-04T21:52:29.1799595Z     ╰────
2025-06-04T21:52:29.1800120Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1800128Z 
2025-06-04T21:52:29.1800574Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1800915Z     ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/google-cloud.ts[0m:32:49]
2025-06-04T21:52:29.1801085Z  [2m31[0m │       this.storage = new Storage({
2025-06-04T21:52:29.1801314Z  [2m32[0m │         credentials: this.config.credentials as any,
2025-06-04T21:52:29.1801539Z     · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.1801801Z  [2m33[0m │         projectId: (this.config.credentials as any)?.project_id,
2025-06-04T21:52:29.1801902Z     ╰────
2025-06-04T21:52:29.1802409Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1802417Z 
2025-06-04T21:52:29.1802857Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1803191Z     ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/google-cloud.ts[0m:33:48]
2025-06-04T21:52:29.1803412Z  [2m32[0m │         credentials: this.config.credentials as any,
2025-06-04T21:52:29.1803663Z  [2m33[0m │         projectId: (this.config.credentials as any)?.project_id,
2025-06-04T21:52:29.1803884Z     · [38;2;246;87;248m                                               ───[0m
2025-06-04T21:52:29.1804043Z  [2m34[0m │         ...this.config.options,
2025-06-04T21:52:29.1804137Z     ╰────
2025-06-04T21:52:29.1804647Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1804654Z 
2025-06-04T21:52:29.1805103Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1805438Z     ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers/google-cloud.ts[0m:58:22]
2025-06-04T21:52:29.1805547Z  [2m57[0m │     try {
2025-06-04T21:52:29.1805698Z  [2m58[0m │       const options: any = {}
2025-06-04T21:52:29.1805874Z     · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.1805968Z  [2m59[0m │ 
2025-06-04T21:52:29.1806059Z     ╰────
2025-06-04T21:52:29.1806557Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1806563Z 
2025-06-04T21:52:29.1806995Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1807377Z     ╭─[[38;2;92;157;255;1msrc/pages/api/v1/preferences/index.ts[0m:33:10]
2025-06-04T21:52:29.1807555Z  [2m32[0m │ function validateAIPreferences(
2025-06-04T21:52:29.1807671Z  [2m33[0m │   input: any,
2025-06-04T21:52:29.1807816Z     · [38;2;246;87;248m         ───[0m
2025-06-04T21:52:29.1808046Z  [2m34[0m │ ): asserts input is typeof DEFAULT_AI_PREFERENCES {
2025-06-04T21:52:29.1808134Z     ╰────
2025-06-04T21:52:29.1808643Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1808651Z 
2025-06-04T21:52:29.1809259Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1809627Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:69:13]
2025-06-04T21:52:29.1809855Z  [2m68[0m │     // Mock isPythonBridgeAvailable to return true
2025-06-04T21:52:29.1810202Z  [2m69[0m │     ;(vi as any).spyOn(adapter, 'isPythonBridgeAvailable' as any).mockReturnValue(true)
2025-06-04T21:52:29.1810472Z     · [38;2;246;87;248m            ───[0m
2025-06-04T21:52:29.1810573Z  [2m70[0m │ 
2025-06-04T21:52:29.1810668Z     ╰────
2025-06-04T21:52:29.1811169Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1811176Z 
2025-06-04T21:52:29.1811617Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1811956Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:69:62]
2025-06-04T21:52:29.1812172Z  [2m68[0m │     // Mock isPythonBridgeAvailable to return true
2025-06-04T21:52:29.1812507Z  [2m69[0m │     ;(vi as any).spyOn(adapter, 'isPythonBridgeAvailable' as any).mockReturnValue(true)
2025-06-04T21:52:29.1812764Z     · [38;2;246;87;248m                                                             ───[0m
2025-06-04T21:52:29.1812856Z  [2m70[0m │ 
2025-06-04T21:52:29.1812957Z     ╰────
2025-06-04T21:52:29.1813457Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1813464Z 
2025-06-04T21:52:29.1813905Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1814241Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:72:13]
2025-06-04T21:52:29.1814416Z  [2m71[0m │     // Setup Python bridge mock
2025-06-04T21:52:29.1814727Z  [2m72[0m │     ;(vi as any).mocked(MentalArenaFactory.getPythonBridge).mockResolvedValue(
2025-06-04T21:52:29.1814880Z     · [38;2;246;87;248m            ───[0m
2025-06-04T21:52:29.1815137Z  [2m73[0m │       mockPythonBridge as unknown as MentalArenaPythonBridge,
2025-06-04T21:52:29.1815236Z     ╰────
2025-06-04T21:52:29.1815747Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1815754Z 
2025-06-04T21:52:29.1816186Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1816524Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:78:12]
2025-06-04T21:52:29.1816658Z  [2m77[0m │   afterEach(() => {
2025-06-04T21:52:29.1816822Z  [2m78[0m │     (vi as any).resetAllMocks()
2025-06-04T21:52:29.1816966Z     · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.1817066Z  [2m79[0m │   })
2025-06-04T21:52:29.1817155Z     ╰────
2025-06-04T21:52:29.1817655Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1817781Z 
2025-06-04T21:52:29.1818220Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1818567Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:84:14]
2025-06-04T21:52:29.1818838Z  [2m83[0m │       // Mock isPythonBridgeAvailable to return false for this test
2025-06-04T21:52:29.1819361Z  [2m84[0m │       (vi as any).spyOn(adapter, 'isPythonBridgeAvailable' as any).mockReturnValueOnce(
2025-06-04T21:52:29.1819525Z     · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1819634Z  [2m85[0m │         false,
2025-06-04T21:52:29.1819728Z     ╰────
2025-06-04T21:52:29.1820231Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1820238Z 
2025-06-04T21:52:29.1820680Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1821024Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:84:63]
2025-06-04T21:52:29.1821418Z  [2m83[0m │       // Mock isPythonBridgeAvailable to return false for this test
2025-06-04T21:52:29.1821758Z  [2m84[0m │       (vi as any).spyOn(adapter, 'isPythonBridgeAvailable' as any).mockReturnValueOnce(
2025-06-04T21:52:29.1822006Z     · [38;2;246;87;248m                                                              ───[0m
2025-06-04T21:52:29.1822111Z  [2m85[0m │         false,
2025-06-04T21:52:29.1822203Z     ╰────
2025-06-04T21:52:29.1822701Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1822708Z 
2025-06-04T21:52:29.1823147Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1823507Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:102:21]
2025-06-04T21:52:29.1823648Z  [2m101[0m │       await expect(
2025-06-04T21:52:29.1824071Z  [2m102[0m │         (adapter as any).fineTuneModelWithPythonBridge(testData, modelConfig),
2025-06-04T21:52:29.1824340Z      · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.1824632Z  [2m103[0m │       ).rejects.toThrow('Python bridge required but not available')
2025-06-04T21:52:29.1824724Z      ╰────
2025-06-04T21:52:29.1825361Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1825372Z 
2025-06-04T21:52:29.1825835Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1826196Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:147:25]
2025-06-04T21:52:29.1826360Z  [2m146[0m │       // Execute the method
2025-06-04T21:52:29.1826674Z  [2m147[0m │       await (adapter as any).fineTuneModelWithPythonBridge(
2025-06-04T21:52:29.1826874Z      · [38;2;246;87;248m                        ───[0m
2025-06-04T21:52:29.1827008Z  [2m148[0m │         testData,
2025-06-04T21:52:29.1827284Z      ╰────
2025-06-04T21:52:29.1827821Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1827830Z 
2025-06-04T21:52:29.1828275Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1828624Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:183:14]
2025-06-04T21:52:29.1828880Z  [2m182[0m │       // Mock Python bridge to throw an error
2025-06-04T21:52:29.1829384Z  [2m183[0m │       (vi as any).mocked(mockPythonBridge.fineTuneModel).mockRejectedValueOnce(
2025-06-04T21:52:29.1829779Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1829971Z  [2m184[0m │         new Error('CUDA out of memory'),
2025-06-04T21:52:29.1830062Z      ╰────
2025-06-04T21:52:29.1830575Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1830583Z 
2025-06-04T21:52:29.1831036Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1831381Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:202:21]
2025-06-04T21:52:29.1831522Z  [2m201[0m │       await expect(
2025-06-04T21:52:29.1831839Z  [2m202[0m │         (adapter as any).fineTuneModelWithPythonBridge(testData, modelConfig),
2025-06-04T21:52:29.1832012Z      · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.1832277Z  [2m203[0m │       ).rejects.toThrow('Fine-tuning failed: CUDA out of memory')
2025-06-04T21:52:29.1832381Z      ╰────
2025-06-04T21:52:29.1832995Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1833005Z 
2025-06-04T21:52:29.1833454Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1833799Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:208:14]
2025-06-04T21:52:29.1834034Z  [2m207[0m │       // Mock Python bridge to return a non-JSON string
2025-06-04T21:52:29.1834355Z  [2m208[0m │       (vi as any).mocked(mockPythonBridge.fineTuneModel).mockResolvedValueOnce(
2025-06-04T21:52:29.1834511Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.1834806Z  [2m209[0m │         'Training progress: 100%. Model saved to /tmp/models/test-model',
2025-06-04T21:52:29.1834901Z      ╰────
2025-06-04T21:52:29.1835414Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1835422Z 
2025-06-04T21:52:29.1835875Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1836217Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-arena/__tests__/MentalArenaAdapter.test.ts[0m:226:25]
2025-06-04T21:52:29.1836415Z  [2m225[0m │       // Execute the method, should not throw
2025-06-04T21:52:29.1836669Z  [2m226[0m │       await (adapter as any).fineTuneModelWithPythonBridge(
2025-06-04T21:52:29.1836843Z      · [38;2;246;87;248m                        ───[0m
2025-06-04T21:52:29.1836976Z  [2m227[0m │         testData,
2025-06-04T21:52:29.1837064Z      ╰────
2025-06-04T21:52:29.1837565Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1837580Z 
2025-06-04T21:52:29.1838017Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1838319Z      ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers.ts[0m:370:21]
2025-06-04T21:52:29.1838599Z  [2m369[0m │ export class AWSS3StorageProvider implements StorageProvider {
2025-06-04T21:52:29.1838749Z  [2m370[0m │   private s3Client: any
2025-06-04T21:52:29.1838914Z      · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.1839209Z  [2m371[0m │   private config: {
2025-06-04T21:52:29.1839307Z      ╰────
2025-06-04T21:52:29.1839819Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1839830Z 
2025-06-04T21:52:29.1840267Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1840694Z      ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers.ts[0m:411:67]
2025-06-04T21:52:29.1841060Z  [2m410[0m │         // @ts-expect-error - Module may not be installed, we'll catch the error at runtime
2025-06-04T21:52:29.1841329Z  [2m411[0m │         const awsModule = (await import('@aws-sdk/client-s3')) as any
2025-06-04T21:52:29.1841586Z      · [38;2;246;87;248m                                                                  ───[0m
2025-06-04T21:52:29.1841763Z  [2m412[0m │         S3Client = awsModule.S3Client
2025-06-04T21:52:29.1841858Z      ╰────
2025-06-04T21:52:29.1842363Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1842370Z 
2025-06-04T21:52:29.1842809Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1843088Z      ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers.ts[0m:422:43]
2025-06-04T21:52:29.1843201Z  [2m421[0m │ 
2025-06-04T21:52:29.1843568Z  [2m422[0m │       const clientOptions: Record<string, any> = {
2025-06-04T21:52:29.1845263Z      · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.1845700Z  [2m423[0m │         region: this.config.region,
2025-06-04T21:52:29.1845815Z      ╰────
2025-06-04T21:52:29.1846604Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1846617Z 
2025-06-04T21:52:29.1847112Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1847430Z      ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers.ts[0m:634:20]
2025-06-04T21:52:29.1847750Z  [2m633[0m │ export class GoogleCloudStorageProvider implements StorageProvider {
2025-06-04T21:52:29.1847902Z  [2m634[0m │   private storage: any
2025-06-04T21:52:29.1848090Z      · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.1848235Z  [2m635[0m │   private bucket: any
2025-06-04T21:52:29.1848328Z      ╰────
2025-06-04T21:52:29.1848861Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1848869Z 
2025-06-04T21:52:29.1849546Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1849863Z      ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers.ts[0m:635:19]
2025-06-04T21:52:29.1850006Z  [2m634[0m │   private storage: any
2025-06-04T21:52:29.1850147Z  [2m635[0m │   private bucket: any
2025-06-04T21:52:29.1850312Z      · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.1850446Z  [2m636[0m │   private config: {
2025-06-04T21:52:29.1850541Z      ╰────
2025-06-04T21:52:29.1851239Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1851247Z 
2025-06-04T21:52:29.1851710Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1851996Z      ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers.ts[0m:665:70]
2025-06-04T21:52:29.1852361Z  [2m664[0m │         // @ts-expect-error - Module may not be installed, we'll catch the error at runtime
2025-06-04T21:52:29.1852653Z  [2m665[0m │         const gcsModule = (await import('@google-cloud/storage')) as any
2025-06-04T21:52:29.1852913Z      · [38;2;246;87;248m                                                                     ───[0m
2025-06-04T21:52:29.1853089Z  [2m666[0m │         Storage = gcsModule.Storage
2025-06-04T21:52:29.1853184Z      ╰────
2025-06-04T21:52:29.1853908Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1853942Z 
2025-06-04T21:52:29.1854709Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1855117Z      ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers.ts[0m:804:30]
2025-06-04T21:52:29.1855695Z  [2m803[0m │ export class AzureBlobStorageProvider implements StorageProvider {
2025-06-04T21:52:29.1856016Z  [2m804[0m │   private blobServiceClient: any
2025-06-04T21:52:29.1856372Z      · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.1856670Z  [2m805[0m │   private containerClient: any
2025-06-04T21:52:29.1856830Z      ╰────
2025-06-04T21:52:29.1857774Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1857786Z 
2025-06-04T21:52:29.1858600Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1859319Z      ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers.ts[0m:805:28]
2025-06-04T21:52:29.1859649Z  [2m804[0m │   private blobServiceClient: any
2025-06-04T21:52:29.1859942Z  [2m805[0m │   private containerClient: any
2025-06-04T21:52:29.1860271Z      · [38;2;246;87;248m                           ───[0m
2025-06-04T21:52:29.1860525Z  [2m806[0m │   private config: {
2025-06-04T21:52:29.1860685Z      ╰────
2025-06-04T21:52:29.1861609Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1861621Z 
2025-06-04T21:52:29.1862428Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1862948Z      ╭─[[38;2;92;157;255;1msrc/lib/security/backup/storage-providers.ts[0m:848:70]
2025-06-04T21:52:29.1863607Z  [2m847[0m │         // @ts-expect-error - Module may not be installed, we'll catch the error at runtime
2025-06-04T21:52:29.1864139Z  [2m848[0m │         const azureModule = (await import('@azure/storage-blob')) as any
2025-06-04T21:52:29.1864598Z      · [38;2;246;87;248m                                                                     ───[0m
2025-06-04T21:52:29.1865053Z  [2m849[0m │         BlobServiceClient = azureModule.BlobServiceClient
2025-06-04T21:52:29.1865213Z      ╰────
2025-06-04T21:52:29.1866153Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1866174Z 
2025-06-04T21:52:29.1867008Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-empty-object-type): Do not use an empty interface declaration.[0m
2025-06-04T21:52:29.1867557Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/vitest.setup.ts[0m:18:62]
2025-06-04T21:52:29.1867976Z  [2m17[0m │     // Ensure we're not accidentally using JestAssertion
2025-06-04T21:52:29.1868643Z  [2m18[0m │     interface AsymmetricMatchersContaining extends Assertion {}
2025-06-04T21:52:29.1869822Z     · [38;2;246;87;248m                                                             ──[0m
2025-06-04T21:52:29.1870023Z  [2m19[0m │   }
2025-06-04T21:52:29.1870189Z     ╰────
2025-06-04T21:52:29.1871205Z [38;2;106;159;181m  help: [0mTo avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.
2025-06-04T21:52:29.1871220Z 
2025-06-04T21:52:29.1872041Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-namespace): ES2015 module syntax is preferred over namespaces.[0m
2025-06-04T21:52:29.1872560Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/vitest.setup.ts[0m:10:3]
2025-06-04T21:52:29.1872796Z  [2m 9[0m │ declare global {
2025-06-04T21:52:29.1873024Z  [2m10[0m │   namespace Vi {
2025-06-04T21:52:29.1873292Z     · [38;2;246;87;248m  ─────────[0m
2025-06-04T21:52:29.1873564Z  [2m11[0m │     interface Assertion {
2025-06-04T21:52:29.1873722Z     ╰────
2025-06-04T21:52:29.1874604Z [38;2;106;159;181m  help: [0mReplace the namespace with an ES2015 module or use `declare module`
2025-06-04T21:52:29.1874617Z 
2025-06-04T21:52:29.1875418Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1875878Z     ╭─[[38;2;92;157;255;1msrc/pages/api/v1/__tests__/health.test.ts[0m:61:20]
2025-06-04T21:52:29.1876130Z  [2m60[0m │ const customMatchers = {
2025-06-04T21:52:29.1876472Z  [2m61[0m │   toBe: (received: any, expected: any) => {
2025-06-04T21:52:29.1876798Z     · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.1877150Z  [2m62[0m │     const pass = Object.is(received, expected)
2025-06-04T21:52:29.1877303Z     ╰────
2025-06-04T21:52:29.1878211Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1878239Z 
2025-06-04T21:52:29.1879196Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1879687Z     ╭─[[38;2;92;157;255;1msrc/pages/api/v1/__tests__/health.test.ts[0m:61:35]
2025-06-04T21:52:29.1879947Z  [2m60[0m │ const customMatchers = {
2025-06-04T21:52:29.1880297Z  [2m61[0m │   toBe: (received: any, expected: any) => {
2025-06-04T21:52:29.1880656Z     · [38;2;246;87;248m                                  ───[0m
2025-06-04T21:52:29.1881018Z  [2m62[0m │     const pass = Object.is(received, expected)
2025-06-04T21:52:29.1881183Z     ╰────
2025-06-04T21:52:29.1882106Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1882118Z 
2025-06-04T21:52:29.1882930Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1883408Z     ╭─[[38;2;92;157;255;1msrc/pages/api/v1/__tests__/health.test.ts[0m:81:47]
2025-06-04T21:52:29.1883935Z  [2m80[0m │     const request = new Request('https://example.com/api/v1/health')
2025-06-04T21:52:29.1884312Z  [2m81[0m │     const response = await GET({ request } as any)
2025-06-04T21:52:29.1884707Z     · [38;2;246;87;248m                                              ───[0m
2025-06-04T21:52:29.1884867Z  [2m82[0m │ 
2025-06-04T21:52:29.1885025Z     ╰────
2025-06-04T21:52:29.1885938Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1885951Z 
2025-06-04T21:52:29.1886755Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1887229Z      ╭─[[38;2;92;157;255;1msrc/pages/api/v1/__tests__/health.test.ts[0m:123:47]
2025-06-04T21:52:29.1887919Z  [2m122[0m │     const request = new Request('https://example.com/api/v1/health')
2025-06-04T21:52:29.1888303Z  [2m123[0m │     const response = await GET({ request } as any)
2025-06-04T21:52:29.1888714Z      · [38;2;246;87;248m                                              ───[0m
2025-06-04T21:52:29.1888875Z  [2m124[0m │ 
2025-06-04T21:52:29.1889163Z      ╰────
2025-06-04T21:52:29.1890157Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1890169Z 
2025-06-04T21:52:29.1890975Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1891458Z      ╭─[[38;2;92;157;255;1msrc/pages/api/v1/__tests__/health.test.ts[0m:146:47]
2025-06-04T21:52:29.1891964Z  [2m145[0m │     const request = new Request('https://example.com/api/v1/health')
2025-06-04T21:52:29.1892348Z  [2m146[0m │     const response = await GET({ request } as any)
2025-06-04T21:52:29.1892753Z      · [38;2;246;87;248m                                              ───[0m
2025-06-04T21:52:29.1892920Z  [2m147[0m │ 
2025-06-04T21:52:29.1893230Z      ╰────
2025-06-04T21:52:29.1894168Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1894180Z 
2025-06-04T21:52:29.1894979Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1895456Z      ╭─[[38;2;92;157;255;1msrc/pages/api/v1/__tests__/health.test.ts[0m:170:47]
2025-06-04T21:52:29.1895962Z  [2m169[0m │     const request = new Request('https://example.com/api/v1/health')
2025-06-04T21:52:29.1896347Z  [2m170[0m │     const response = await GET({ request } as any)
2025-06-04T21:52:29.1896742Z      · [38;2;246;87;248m                                              ───[0m
2025-06-04T21:52:29.1896919Z  [2m171[0m │ 
2025-06-04T21:52:29.1897081Z      ╰────
2025-06-04T21:52:29.1898004Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1898015Z 
2025-06-04T21:52:29.1898945Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.1899545Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/dlp.test.ts[0m:192:65]
2025-06-04T21:52:29.1899854Z  [2m191[0m │       const alertSpy = vi.spyOn(
2025-06-04T21:52:29.1900417Z  [2m192[0m │         dlpService as DlpServiceType & { generateSecurityAlert: Function },
2025-06-04T21:52:29.1900890Z      · [38;2;246;87;248m                                                                ────────[0m
2025-06-04T21:52:29.1901188Z  [2m193[0m │         'generateSecurityAlert',
2025-06-04T21:52:29.1901350Z      ╰────
2025-06-04T21:52:29.1902074Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.1902105Z 
2025-06-04T21:52:29.1903055Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.1903510Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/dlp.test.ts[0m:312:55]
2025-06-04T21:52:29.1903807Z  [2m311[0m │       const logSpy = vi.spyOn(
2025-06-04T21:52:29.1904286Z  [2m312[0m │         dlpService as DlpServiceType & { logDLPEvent: Function },
2025-06-04T21:52:29.1904731Z      · [38;2;246;87;248m                                                      ────────[0m
2025-06-04T21:52:29.1904979Z  [2m313[0m │         'logDLPEvent',
2025-06-04T21:52:29.1905137Z      ╰────
2025-06-04T21:52:29.1905859Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.1905870Z 
2025-06-04T21:52:29.1906777Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.1907414Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/dlp.test.ts[0m:333:55]
2025-06-04T21:52:29.1907697Z  [2m332[0m │       const logSpy = vi.spyOn(
2025-06-04T21:52:29.1908186Z  [2m333[0m │         dlpService as DlpServiceType & { logDLPEvent: Function },
2025-06-04T21:52:29.1908623Z      · [38;2;246;87;248m                                                      ────────[0m
2025-06-04T21:52:29.1908880Z  [2m334[0m │         'logDLPEvent',
2025-06-04T21:52:29.1909162Z      ╰────
2025-06-04T21:52:29.1909886Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.1909898Z 
2025-06-04T21:52:29.1910713Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1911294Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:31:19]
2025-06-04T21:52:29.1911680Z  [2m30[0m │   let emotionEngine: EmotionDetectionEngine;
2025-06-04T21:52:29.1911931Z  [2m31[0m │   let mockLogger: any;
2025-06-04T21:52:29.1912367Z     · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.1912683Z  [2m32[0m │   let mockPerformanceLogger: any;
2025-06-04T21:52:29.1912845Z     ╰────
2025-06-04T21:52:29.1913767Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1913778Z 
2025-06-04T21:52:29.1914592Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1915150Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:32:30]
2025-06-04T21:52:29.1915392Z  [2m31[0m │   let mockLogger: any;
2025-06-04T21:52:29.1915681Z  [2m32[0m │   let mockPerformanceLogger: any;
2025-06-04T21:52:29.1916025Z     · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.1916310Z  [2m33[0m │   let mockEmotionProvider: any;
2025-06-04T21:52:29.1916472Z     ╰────
2025-06-04T21:52:29.1917402Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1917414Z 
2025-06-04T21:52:29.1918221Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1918793Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:33:28]
2025-06-04T21:52:29.1919238Z  [2m32[0m │   let mockPerformanceLogger: any;
2025-06-04T21:52:29.1919534Z  [2m33[0m │   let mockEmotionProvider: any;
2025-06-04T21:52:29.1919857Z     · [38;2;246;87;248m                           ───[0m
2025-06-04T21:52:29.1920127Z  [2m34[0m │   let mockFheService: any;
2025-06-04T21:52:29.1920285Z     ╰────
2025-06-04T21:52:29.1921206Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1921219Z 
2025-06-04T21:52:29.1922033Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1922608Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:34:23]
2025-06-04T21:52:29.1922899Z  [2m33[0m │   let mockEmotionProvider: any;
2025-06-04T21:52:29.1923165Z  [2m34[0m │   let mockFheService: any;
2025-06-04T21:52:29.1923465Z     · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.1923634Z  [2m35[0m │ 
2025-06-04T21:52:29.1923792Z     ╰────
2025-06-04T21:52:29.1924708Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1924725Z 
2025-06-04T21:52:29.1925523Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1926233Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:118:30]
2025-06-04T21:52:29.1926426Z  [2m117[0m │     };
2025-06-04T21:52:29.1927055Z  [2m118[0m │     (EmotionLlamaProvider as any).mockImplementation(() => mockEmotionProvider);
2025-06-04T21:52:29.1927395Z      · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.1927557Z  [2m119[0m │ 
2025-06-04T21:52:29.1927719Z      ╰────
2025-06-04T21:52:29.1928541Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1928553Z 
2025-06-04T21:52:29.1929472Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1930058Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:127:20]
2025-06-04T21:52:29.1930253Z  [2m126[0m │     };
2025-06-04T21:52:29.1930595Z  [2m127[0m │     (fheService as any) = mockFheService;
2025-06-04T21:52:29.1931037Z      · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.1931205Z  [2m128[0m │ 
2025-06-04T21:52:29.1931362Z      ╰────
2025-06-04T21:52:29.1932282Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1932294Z 
2025-06-04T21:52:29.1933099Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1933674Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:213:23]
2025-06-04T21:52:29.1933938Z  [2m212[0m │         ...mockEmotionData,
2025-06-04T21:52:29.1934193Z  [2m213[0m │         text: null as any
2025-06-04T21:52:29.1934492Z      · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.1934707Z  [2m214[0m │       };
2025-06-04T21:52:29.1934882Z      ╰────
2025-06-04T21:52:29.1935814Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1935825Z 
2025-06-04T21:52:29.1936459Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1meslint(no-import-assign): do not assign to imported bindings[0m
2025-06-04T21:52:29.1937032Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:127:6]
2025-06-04T21:52:29.1937205Z  [2m126[0m │     };
2025-06-04T21:52:29.1937545Z  [2m127[0m │     (fheService as any) = mockFheService;
2025-06-04T21:52:29.1937826Z      · [38;2;246;87;248m     ──────────[0m
2025-06-04T21:52:29.1937989Z  [2m128[0m │ 
2025-06-04T21:52:29.1938149Z      ╰────
2025-06-04T21:52:29.1938573Z [38;2;106;159;181m  help: [0mimported bindings are readonly
2025-06-04T21:52:29.1938584Z 
2025-06-04T21:52:29.1939496Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'fheService' is imported but never used.[0m
2025-06-04T21:52:29.1940091Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:19:10]
2025-06-04T21:52:29.1940698Z  [2m18[0m │ import { EmotionLlamaProvider } from '../providers/EmotionLlamaProvider';
2025-06-04T21:52:29.1941023Z  [2m19[0m │ import { fheService } from '../../fhe';
2025-06-04T21:52:29.1941314Z     · [38;2;246;87;248m         ─────┬────[0m
2025-06-04T21:52:29.1941818Z     ·               [38;2;246;87;248m╰── [38;2;246;87;248m'fheService' is imported here[0m[0m
2025-06-04T21:52:29.1942402Z  [2m20[0m │ import { PerformanceLogger } from '../../../lib/logging/performance-logger';
2025-06-04T21:52:29.1942562Z     ╰────
2025-06-04T21:52:29.1942964Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.1942983Z 
2025-06-04T21:52:29.1943741Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'ContextualFactor' is imported but never used.[0m
2025-06-04T21:52:29.1944494Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:25:3]
2025-06-04T21:52:29.1944699Z  [2m24[0m │   EmotionType,
2025-06-04T21:52:29.1944952Z  [2m25[0m │   ContextualFactor,
2025-06-04T21:52:29.1945243Z     · [38;2;246;87;248m  ────────┬───────[0m
2025-06-04T21:52:29.1945770Z     ·           [38;2;246;87;248m╰── [38;2;246;87;248m'ContextualFactor' is imported here[0m[0m
2025-06-04T21:52:29.1945962Z  [2m26[0m │   RiskFactor
2025-06-04T21:52:29.1946116Z     ╰────
2025-06-04T21:52:29.1946541Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.1946552Z 
2025-06-04T21:52:29.1947271Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'RiskFactor' is imported but never used.[0m
2025-06-04T21:52:29.1947829Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/EmotionDetectionEngine.test.ts[0m:26:3]
2025-06-04T21:52:29.1948068Z  [2m25[0m │   ContextualFactor,
2025-06-04T21:52:29.1948273Z  [2m26[0m │   RiskFactor
2025-06-04T21:52:29.1948541Z     · [38;2;246;87;248m  ─────┬────[0m
2025-06-04T21:52:29.1949309Z     ·        [38;2;246;87;248m╰── [38;2;246;87;248m'RiskFactor' is imported here[0m[0m
2025-06-04T21:52:29.1949562Z  [2m27[0m │ } from './types';
2025-06-04T21:52:29.1949720Z     ╰────
2025-06-04T21:52:29.1950149Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.1950160Z 
2025-06-04T21:52:29.1950973Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1951506Z     ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/audit.logging.test.ts[0m:59:39]
2025-06-04T21:52:29.1951956Z  [2m58[0m │     it('should handle logging errors gracefully', async () => {
2025-06-04T21:52:29.1952528Z  [2m59[0m │       vi.spyOn(auditLoggingService as any, 'storeLogEntry').mockRejectedValue(
2025-06-04T21:52:29.1952895Z     · [38;2;246;87;248m                                      ───[0m
2025-06-04T21:52:29.1953239Z  [2m60[0m │         new Error('Storage failed'),
2025-06-04T21:52:29.1953361Z     ╰────
2025-06-04T21:52:29.1953888Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1953901Z 
2025-06-04T21:52:29.1954358Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1954788Z     ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/audit.logging.test.ts[0m:71:55]
2025-06-04T21:52:29.1955333Z  [2m70[0m │     it('should hash sensitive identifiers when PII is not included', () => {
2025-06-04T21:52:29.1955853Z  [2m71[0m │       const hashSpy = vi.spyOn(auditLoggingService as any, 'hashValue')
2025-06-04T21:52:29.1956275Z     · [38;2;246;87;248m                                                      ───[0m
2025-06-04T21:52:29.1956456Z  [2m72[0m │ 
2025-06-04T21:52:29.1956655Z     ╰────
2025-06-04T21:52:29.1957627Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1957647Z 
2025-06-04T21:52:29.1958517Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1959316Z     ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/audit.logging.test.ts[0m:73:54]
2025-06-04T21:52:29.1959519Z  [2m72[0m │ 
2025-06-04T21:52:29.1960092Z  [2m73[0m │       const sanitizedEntry = (auditLoggingService as any).sanitizeEntry({
2025-06-04T21:52:29.1960548Z     · [38;2;246;87;248m                                                     ───[0m
2025-06-04T21:52:29.1960820Z  [2m74[0m │         ...testEntry,
2025-06-04T21:52:29.1961004Z     ╰────
2025-06-04T21:52:29.1961995Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1962268Z 
2025-06-04T21:52:29.1963131Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1meslint(no-case-declarations): Unexpected lexical declaration in case block.[0m
2025-06-04T21:52:29.1963818Z     ╭─[[38;2;92;157;255;1msrc/pages/api/memory/test.ts[0m:12:9]
2025-06-04T21:52:29.1964127Z  [2m11[0m │       case 'list':
2025-06-04T21:52:29.1964699Z  [2m12[0m │         const memories = await memoryManager.getAllMemories(userId);
2025-06-04T21:52:29.1965024Z     · [38;2;246;87;248m        ─────[0m
2025-06-04T21:52:29.1965403Z  [2m13[0m │         return new Response(JSON.stringify({
2025-06-04T21:52:29.1965568Z     ╰────
2025-06-04T21:52:29.1965583Z 
2025-06-04T21:52:29.1966348Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1meslint(no-case-declarations): Unexpected lexical declaration in case block.[0m
2025-06-04T21:52:29.1966727Z     ╭─[[38;2;92;157;255;1msrc/pages/api/memory/test.ts[0m:23:9]
2025-06-04T21:52:29.1966966Z  [2m22[0m │       case 'search':
2025-06-04T21:52:29.1967345Z  [2m23[0m │         const query = searchParams.get('query');
2025-06-04T21:52:29.1967605Z     · [38;2;246;87;248m        ─────[0m
2025-06-04T21:52:29.1967830Z  [2m24[0m │         if (!query) {
2025-06-04T21:52:29.1967998Z     ╰────
2025-06-04T21:52:29.1968010Z 
2025-06-04T21:52:29.1968758Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1meslint(no-case-declarations): Unexpected lexical declaration in case block.[0m
2025-06-04T21:52:29.1969355Z     ╭─[[38;2;92;157;255;1msrc/pages/api/memory/test.ts[0m:34:9]
2025-06-04T21:52:29.1969534Z  [2m33[0m │ 
2025-06-04T21:52:29.1970021Z  [2m34[0m │         const searchResults = await memoryManager.searchMemories({
2025-06-04T21:52:29.1970281Z     · [38;2;246;87;248m        ─────[0m
2025-06-04T21:52:29.1970497Z  [2m35[0m │           query,
2025-06-04T21:52:29.1970654Z     ╰────
2025-06-04T21:52:29.1970665Z 
2025-06-04T21:52:29.1971399Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1meslint(no-case-declarations): Unexpected lexical declaration in case block.[0m
2025-06-04T21:52:29.1971788Z     ╭─[[38;2;92;157;255;1msrc/pages/api/memory/test.ts[0m:50:9]
2025-06-04T21:52:29.1972014Z  [2m49[0m │       case 'stats':
2025-06-04T21:52:29.1972492Z  [2m50[0m │         const stats = await memoryManager.getMemoryStats(userId);
2025-06-04T21:52:29.1972744Z     · [38;2;246;87;248m        ─────[0m
2025-06-04T21:52:29.1973079Z  [2m51[0m │         return new Response(JSON.stringify({
2025-06-04T21:52:29.1973237Z     ╰────
2025-06-04T21:52:29.1973248Z 
2025-06-04T21:52:29.1973977Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1meslint(no-case-declarations): Unexpected lexical declaration in case block.[0m
2025-06-04T21:52:29.1974344Z     ╭─[[38;2;92;157;255;1msrc/pages/api/memory/test.ts[0m:60:9]
2025-06-04T21:52:29.1974578Z  [2m59[0m │       case 'history':
2025-06-04T21:52:29.1975077Z  [2m60[0m │         const history = await memoryManager.getMemoryHistory(userId);
2025-06-04T21:52:29.1975329Z     · [38;2;246;87;248m        ─────[0m
2025-06-04T21:52:29.1975919Z  [2m61[0m │         return new Response(JSON.stringify({
2025-06-04T21:52:29.1976072Z     ╰────
2025-06-04T21:52:29.1976083Z 
2025-06-04T21:52:29.1977186Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'request' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.1977564Z    ╭─[[38;2;92;157;255;1msrc/pages/api/memory/test.ts[0m:4:39]
2025-06-04T21:52:29.1977728Z  [2m3[0m │ 
2025-06-04T21:52:29.1978155Z  [2m4[0m │ export const GET: APIRoute = async ({ request, url }) => {
2025-06-04T21:52:29.1978531Z    · [38;2;246;87;248m                                      ───┬───[0m
2025-06-04T21:52:29.1979216Z    ·                                          [38;2;246;87;248m╰── [38;2;246;87;248m'request' is declared here[0m[0m
2025-06-04T21:52:29.1979392Z  [2m5[0m │   try {
2025-06-04T21:52:29.1979552Z    ╰────
2025-06-04T21:52:29.1979992Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.1980020Z 
2025-06-04T21:52:29.1980827Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1981558Z     ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:62:20]
2025-06-04T21:52:29.1981901Z  [2m61[0m │     // Setup default mock implementations
2025-06-04T21:52:29.1982257Z  [2m62[0m │     ;(redis.set as any).mockResolvedValue('OK')
2025-06-04T21:52:29.1982542Z     · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.1982891Z  [2m63[0m │     ;(redis.get as any).mockResolvedValue(null)
2025-06-04T21:52:29.1983049Z     ╰────
2025-06-04T21:52:29.1983956Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1983968Z 
2025-06-04T21:52:29.1984767Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1985346Z     ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:63:20]
2025-06-04T21:52:29.1985697Z  [2m62[0m │     ;(redis.set as any).mockResolvedValue('OK')
2025-06-04T21:52:29.1986064Z  [2m63[0m │     ;(redis.get as any).mockResolvedValue(null)
2025-06-04T21:52:29.1986342Z     · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.1986691Z  [2m64[0m │     ;(redis.keys as any).mockResolvedValue([])
2025-06-04T21:52:29.1986846Z     ╰────
2025-06-04T21:52:29.1987754Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1987765Z 
2025-06-04T21:52:29.1988553Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1989269Z     ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:64:21]
2025-06-04T21:52:29.1989629Z  [2m63[0m │     ;(redis.get as any).mockResolvedValue(null)
2025-06-04T21:52:29.1990034Z  [2m64[0m │     ;(redis.keys as any).mockResolvedValue([])
2025-06-04T21:52:29.1990333Z     · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.1990760Z  [2m65[0m │     ;(auth.getUserById as any).mockResolvedValue(mockUser)
2025-06-04T21:52:29.1990913Z     ╰────
2025-06-04T21:52:29.1991814Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1991832Z 
2025-06-04T21:52:29.1992618Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1993187Z     ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:65:27]
2025-06-04T21:52:29.1993534Z  [2m64[0m │     ;(redis.keys as any).mockResolvedValue([])
2025-06-04T21:52:29.1993954Z  [2m65[0m │     ;(auth.getUserById as any).mockResolvedValue(mockUser)
2025-06-04T21:52:29.1994436Z     · [38;2;246;87;248m                          ───[0m
2025-06-04T21:52:29.1994875Z  [2m66[0m │     ;(FHE.encrypt as any).mockResolvedValue('encrypted_data')
2025-06-04T21:52:29.1995044Z     ╰────
2025-06-04T21:52:29.1995948Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.1995960Z 
2025-06-04T21:52:29.1996758Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.1997322Z     ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:66:22]
2025-06-04T21:52:29.1997750Z  [2m65[0m │     ;(auth.getUserById as any).mockResolvedValue(mockUser)
2025-06-04T21:52:29.1998185Z  [2m66[0m │     ;(FHE.encrypt as any).mockResolvedValue('encrypted_data')
2025-06-04T21:52:29.1998480Z     · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.1998878Z  [2m67[0m │     ;(sendEmail as any).mockResolvedValue(undefined)
2025-06-04T21:52:29.1999176Z     ╰────
2025-06-04T21:52:29.2000246Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2000263Z 
2025-06-04T21:52:29.2001083Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2001656Z     ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:67:20]
2025-06-04T21:52:29.2002099Z  [2m66[0m │     ;(FHE.encrypt as any).mockResolvedValue('encrypted_data')
2025-06-04T21:52:29.2002487Z  [2m67[0m │     ;(sendEmail as any).mockResolvedValue(undefined)
2025-06-04T21:52:29.2002768Z     · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.2002934Z  [2m68[0m │ 
2025-06-04T21:52:29.2003084Z     ╰────
2025-06-04T21:52:29.2003991Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2004019Z 
2025-06-04T21:52:29.2004823Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2005392Z     ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:97:22]
2025-06-04T21:52:29.2005886Z  [2m96[0m │     it('should handle errors during breach reporting', async () => {
2025-06-04T21:52:29.2006382Z  [2m97[0m │       ;(redis.set as any).mockRejectedValue(new Error('Redis error'))
2025-06-04T21:52:29.2006670Z     · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2006834Z  [2m98[0m │ 
2025-06-04T21:52:29.2006983Z     ╰────
2025-06-04T21:52:29.2007888Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2007900Z 
2025-06-04T21:52:29.2008686Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2009633Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:128:29]
2025-06-04T21:52:29.2010141Z  [2m127[0m │     it('should handle missing user email gracefully', async () => {
2025-06-04T21:52:29.2010782Z  [2m128[0m │       ;(auth.getUserById as any).mockResolvedValue({ id: 'user1' }) // User without email
2025-06-04T21:52:29.2011107Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.2011267Z  [2m129[0m │ 
2025-06-04T21:52:29.2011425Z      ╰────
2025-06-04T21:52:29.2012335Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2012347Z 
2025-06-04T21:52:29.2013154Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2013910Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:136:22]
2025-06-04T21:52:29.2014364Z  [2m135[0m │     it('should handle user notification errors', async () => {
2025-06-04T21:52:29.2014873Z  [2m136[0m │       ;(sendEmail as any).mockRejectedValue(new Error('Email error'))
2025-06-04T21:52:29.2015192Z      · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2015353Z  [2m137[0m │ 
2025-06-04T21:52:29.2015511Z      ╰────
2025-06-04T21:52:29.2016417Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2016428Z 
2025-06-04T21:52:29.2017225Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2017796Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:221:22]
2025-06-04T21:52:29.2017962Z  [2m220[0m │ 
2025-06-04T21:52:29.2018526Z  [2m221[0m │       ;(redis.get as any).mockResolvedValue(JSON.stringify(mockStoredBreach))
2025-06-04T21:52:29.2018818Z      · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2019338Z  [2m222[0m │ 
2025-06-04T21:52:29.2019513Z      ╰────
2025-06-04T21:52:29.2020430Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2020443Z 
2025-06-04T21:52:29.2021240Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2021828Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:231:22]
2025-06-04T21:52:29.2022301Z  [2m230[0m │     it('should return null for non-existent breach', async () => {
2025-06-04T21:52:29.2022674Z  [2m231[0m │       ;(redis.get as any).mockResolvedValue(null)
2025-06-04T21:52:29.2022964Z      · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2023144Z  [2m232[0m │ 
2025-06-04T21:52:29.2023299Z      ╰────
2025-06-04T21:52:29.2024211Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2024229Z 
2025-06-04T21:52:29.2025016Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2025591Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:240:22]
2025-06-04T21:52:29.2025963Z  [2m239[0m │     it('should handle Redis errors', async () => {
2025-06-04T21:52:29.2026439Z  [2m240[0m │       ;(redis.get as any).mockRejectedValue(new Error('Redis error'))
2025-06-04T21:52:29.2026736Z      · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2026894Z  [2m241[0m │ 
2025-06-04T21:52:29.2027053Z      ╰────
2025-06-04T21:52:29.2027950Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2027975Z 
2025-06-04T21:52:29.2028786Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2029515Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:270:23]
2025-06-04T21:52:29.2029685Z  [2m269[0m │ 
2025-06-04T21:52:29.2030041Z  [2m270[0m │       ;(redis.keys as any).mockResolvedValue([
2025-06-04T21:52:29.2030340Z      · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.2030589Z  [2m271[0m │         'breach:breach1',
2025-06-04T21:52:29.2030741Z      ╰────
2025-06-04T21:52:29.2031647Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2031658Z 
2025-06-04T21:52:29.2032444Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2033189Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:274:22]
2025-06-04T21:52:29.2033378Z  [2m273[0m │       ])
2025-06-04T21:52:29.2033631Z  [2m274[0m │       ;(redis.get as any)
2025-06-04T21:52:29.2033923Z      · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2034393Z  [2m275[0m │         .mockResolvedValueOnce(JSON.stringify(mockBreaches[0]))
2025-06-04T21:52:29.2034549Z      ╰────
2025-06-04T21:52:29.2035454Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2035465Z 
2025-06-04T21:52:29.2036249Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2036825Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:286:23]
2025-06-04T21:52:29.2037210Z  [2m285[0m │     it('should handle Redis errors', async () => {
2025-06-04T21:52:29.2037704Z  [2m286[0m │       ;(redis.keys as any).mockRejectedValue(new Error('Redis error'))
2025-06-04T21:52:29.2038143Z      · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.2038315Z  [2m287[0m │ 
2025-06-04T21:52:29.2038469Z      ╰────
2025-06-04T21:52:29.2039530Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2039544Z 
2025-06-04T21:52:29.2040341Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2040913Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:299:23]
2025-06-04T21:52:29.2041352Z  [2m298[0m │     it('should filter out invalid breach data', async () => {
2025-06-04T21:52:29.2041910Z  [2m299[0m │       ;(redis.keys as any).mockResolvedValue(['breach:valid', 'breach:invalid'])
2025-06-04T21:52:29.2042225Z      · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.2042472Z  [2m300[0m │       ;(redis.get as any)
2025-06-04T21:52:29.2042643Z      ╰────
2025-06-04T21:52:29.2043543Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2043554Z 
2025-06-04T21:52:29.2044346Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2044915Z      ╭─[[38;2;92;157;255;1msrc/lib/security/__tests__/breach-notification.test.ts[0m:300:22]
2025-06-04T21:52:29.2045478Z  [2m299[0m │       ;(redis.keys as any).mockResolvedValue(['breach:valid', 'breach:invalid'])
2025-06-04T21:52:29.2045721Z  [2m300[0m │       ;(redis.get as any)
2025-06-04T21:52:29.2046013Z      · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2046295Z  [2m301[0m │         .mockResolvedValueOnce(
2025-06-04T21:52:29.2046462Z      ╰────
2025-06-04T21:52:29.2047383Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2047395Z 
2025-06-04T21:52:29.2048183Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2048744Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:49:24]
2025-06-04T21:52:29.2049139Z  [2m48[0m │ const customMatchers = {
2025-06-04T21:52:29.2049442Z  [2m49[0m │   toBeNull: (received: any) => ({
2025-06-04T21:52:29.2049740Z     · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.2050010Z  [2m50[0m │     pass: received === null,
2025-06-04T21:52:29.2050162Z     ╰────
2025-06-04T21:52:29.2051068Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2051237Z 
2025-06-04T21:52:29.2052038Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2052615Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:53:20]
2025-06-04T21:52:29.2052784Z  [2m52[0m │   }),
2025-06-04T21:52:29.2053130Z  [2m53[0m │   toBe: (received: any, expected: any) => ({
2025-06-04T21:52:29.2053412Z     · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.2053731Z  [2m54[0m │     pass: Object.is(received, expected),
2025-06-04T21:52:29.2053889Z     ╰────
2025-06-04T21:52:29.2054790Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2054801Z 
2025-06-04T21:52:29.2055594Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2056162Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:53:35]
2025-06-04T21:52:29.2056334Z  [2m52[0m │   }),
2025-06-04T21:52:29.2056821Z  [2m53[0m │   toBe: (received: any, expected: any) => ({
2025-06-04T21:52:29.2057179Z     · [38;2;246;87;248m                                  ───[0m
2025-06-04T21:52:29.2057498Z  [2m54[0m │     pass: Object.is(received, expected),
2025-06-04T21:52:29.2057654Z     ╰────
2025-06-04T21:52:29.2058552Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2058563Z 
2025-06-04T21:52:29.2059503Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2060066Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:57:23]
2025-06-04T21:52:29.2060239Z  [2m56[0m │   }),
2025-06-04T21:52:29.2060599Z  [2m57[0m │   toEqual: (received: any, expected: any) => ({
2025-06-04T21:52:29.2060908Z     · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.2061391Z  [2m58[0m │     pass: JSON.stringify(received) === JSON.stringify(expected),
2025-06-04T21:52:29.2061545Z     ╰────
2025-06-04T21:52:29.2062450Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2062462Z 
2025-06-04T21:52:29.2063250Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2063807Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:57:38]
2025-06-04T21:52:29.2063973Z  [2m56[0m │   }),
2025-06-04T21:52:29.2064336Z  [2m57[0m │   toEqual: (received: any, expected: any) => ({
2025-06-04T21:52:29.2064691Z     · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2065174Z  [2m58[0m │     pass: JSON.stringify(received) === JSON.stringify(expected),
2025-06-04T21:52:29.2065327Z     ╰────
2025-06-04T21:52:29.2066245Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2066257Z 
2025-06-04T21:52:29.2067049Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2067607Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:61:30]
2025-06-04T21:52:29.2067772Z  [2m60[0m │   }),
2025-06-04T21:52:29.2068181Z  [2m61[0m │   toBeInstanceOf: (received: any, expected: any) => ({
2025-06-04T21:52:29.2068507Z     · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.2068823Z  [2m62[0m │     pass: received instanceof expected,
2025-06-04T21:52:29.2068982Z     ╰────
2025-06-04T21:52:29.2070018Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2070189Z 
2025-06-04T21:52:29.2071008Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2071568Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:61:45]
2025-06-04T21:52:29.2071740Z  [2m60[0m │   }),
2025-06-04T21:52:29.2072147Z  [2m61[0m │   toBeInstanceOf: (received: any, expected: any) => ({
2025-06-04T21:52:29.2072529Z     · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.2072847Z  [2m62[0m │     pass: received instanceof expected,
2025-06-04T21:52:29.2073008Z     ╰────
2025-06-04T21:52:29.2073912Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2073923Z 
2025-06-04T21:52:29.2074717Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2075284Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:65:38]
2025-06-04T21:52:29.2075594Z  [2m64[0m │   }),
2025-06-04T21:52:29.2076086Z  [2m65[0m │   toBeGreaterThanOrEqual: (received: any, expected: any) => ({
2025-06-04T21:52:29.2076440Z     · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2076764Z  [2m66[0m │     pass: received >= expected,
2025-06-04T21:52:29.2076918Z     ╰────
2025-06-04T21:52:29.2077826Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2077838Z 
2025-06-04T21:52:29.2078626Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2079325Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:65:53]
2025-06-04T21:52:29.2079518Z  [2m64[0m │   }),
2025-06-04T21:52:29.2080010Z  [2m65[0m │   toBeGreaterThanOrEqual: (received: any, expected: any) => ({
2025-06-04T21:52:29.2080428Z     · [38;2;246;87;248m                                                    ───[0m
2025-06-04T21:52:29.2080714Z  [2m66[0m │     pass: received >= expected,
2025-06-04T21:52:29.2080866Z     ╰────
2025-06-04T21:52:29.2081773Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2081790Z 
2025-06-04T21:52:29.2082579Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2083132Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:70:35]
2025-06-04T21:52:29.2083303Z  [2m69[0m │   }),
2025-06-04T21:52:29.2083756Z  [2m70[0m │   toBeLessThanOrEqual: (received: any, expected: any) => ({
2025-06-04T21:52:29.2084123Z     · [38;2;246;87;248m                                  ───[0m
2025-06-04T21:52:29.2084405Z  [2m71[0m │     pass: received <= expected,
2025-06-04T21:52:29.2084562Z     ╰────
2025-06-04T21:52:29.2085471Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2085482Z 
2025-06-04T21:52:29.2086274Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2086830Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:70:50]
2025-06-04T21:52:29.2087001Z  [2m69[0m │   }),
2025-06-04T21:52:29.2087449Z  [2m70[0m │   toBeLessThanOrEqual: (received: any, expected: any) => ({
2025-06-04T21:52:29.2087840Z     · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.2088113Z  [2m71[0m │     pass: received <= expected,
2025-06-04T21:52:29.2088422Z     ╰────
2025-06-04T21:52:29.2089467Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2089620Z 
2025-06-04T21:52:29.2090429Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2090993Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:75:32]
2025-06-04T21:52:29.2091160Z  [2m74[0m │   }),
2025-06-04T21:52:29.2091491Z  [2m75[0m │   toHaveBeenCalled: (received: any) => ({
2025-06-04T21:52:29.2091818Z     · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.2092153Z  [2m76[0m │     pass: received.mock.calls.length > 0,
2025-06-04T21:52:29.2092302Z     ╰────
2025-06-04T21:52:29.2093207Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2093233Z 
2025-06-04T21:52:29.2094021Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2094596Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:85:31]
2025-06-04T21:52:29.2094845Z  [2m84[0m │ // Mock arrayContaining
2025-06-04T21:52:29.2095184Z  [2m85[0m │ const arrayContaining = (arr: any[]) => ({
2025-06-04T21:52:29.2095512Z     · [38;2;246;87;248m                              ───[0m
2025-06-04T21:52:29.2095826Z  [2m86[0m │   asymmetricMatch: (actual: any[]) => {
2025-06-04T21:52:29.2095983Z     ╰────
2025-06-04T21:52:29.2096880Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2096891Z 
2025-06-04T21:52:29.2097685Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2098252Z     ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:86:29]
2025-06-04T21:52:29.2098594Z  [2m85[0m │ const arrayContaining = (arr: any[]) => ({
2025-06-04T21:52:29.2098919Z  [2m86[0m │   asymmetricMatch: (actual: any[]) => {
2025-06-04T21:52:29.2099482Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.2099928Z  [2m87[0m │     return arr.every((item) => actual.includes(item))
2025-06-04T21:52:29.2100087Z     ╰────
2025-06-04T21:52:29.2100987Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2100999Z 
2025-06-04T21:52:29.2101793Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2102361Z      ╭─[[38;2;92;157;255;1msrc/lib/services/redis/__tests__/RedisService.test.ts[0m:268:14]
2025-06-04T21:52:29.2102643Z  [2m267[0m │           toHaveTTL: () => true,
2025-06-04T21:52:29.2103020Z  [2m268[0m │         } as any
2025-06-04T21:52:29.2103282Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.2103456Z  [2m269[0m │       })
2025-06-04T21:52:29.2103624Z      ╰────
2025-06-04T21:52:29.2104527Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2104538Z 
2025-06-04T21:52:29.2105326Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2105797Z     ╭─[[38;2;92;157;255;1msrc/pages/api/examples/profiling-demo.ts[0m:14:64]
2025-06-04T21:52:29.2106069Z  [2m13[0m │ // Simulates a database query
2025-06-04T21:52:29.2106618Z  [2m14[0m │ async function simulateDatabaseQuery(): Promise<Record<string, any>> {
2025-06-04T21:52:29.2107042Z     · [38;2;246;87;248m                                                               ───[0m
2025-06-04T21:52:29.2107322Z  [2m15[0m │   // Simulate DB query delay
2025-06-04T21:52:29.2107475Z     ╰────
2025-06-04T21:52:29.2108567Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2108581Z 
2025-06-04T21:52:29.2109512Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2110078Z     ╭─[[38;2;92;157;255;1msrc/components/pages/EmotionVisualizationPage.tsx[0m:34:61]
2025-06-04T21:52:29.2110340Z  [2m33[0m │             value={timeRange}
2025-06-04T21:52:29.2110773Z  [2m34[0m │             onChange={(e) => setTimeRange(e.target.value as any)}
2025-06-04T21:52:29.2111190Z     · [38;2;246;87;248m                                                            ───[0m
2025-06-04T21:52:29.2111542Z  [2m35[0m │             className="border rounded px-3 py-2"
2025-06-04T21:52:29.2111707Z     ╰────
2025-06-04T21:52:29.2112623Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2112635Z 
2025-06-04T21:52:29.2113438Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2113822Z      ╭─[[38;2;92;157;255;1msrc/lib/services/cdn/index.ts[0m:250:57]
2025-06-04T21:52:29.2113986Z  [2m249[0m │ 
2025-06-04T21:52:29.2114465Z  [2m250[0m │   public async getEdgeMetrics(): Promise<Record<string, any>> {
2025-06-04T21:52:29.2114880Z      · [38;2;246;87;248m                                                        ───[0m
2025-06-04T21:52:29.2115058Z  [2m251[0m │     try {
2025-06-04T21:52:29.2115216Z      ╰────
2025-06-04T21:52:29.2116109Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2116121Z 
2025-06-04T21:52:29.2116929Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2117324Z      ╭─[[38;2;92;157;255;1msrc/lib/services/cdn/index.ts[0m:252:37]
2025-06-04T21:52:29.2117504Z  [2m251[0m │     try {
2025-06-04T21:52:29.2117851Z  [2m252[0m │       const metrics: Record<string, any> = {}
2025-06-04T21:52:29.2118202Z      · [38;2;246;87;248m                                    ───[0m
2025-06-04T21:52:29.2118367Z  [2m253[0m │ 
2025-06-04T21:52:29.2118519Z      ╰────
2025-06-04T21:52:29.2119575Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2119588Z 
2025-06-04T21:52:29.2121812Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1meslint-plugin-react-hooks(rules-of-hooks): React Hook "useQuery" is called in function "Anonymous" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word "use".[0m
2025-06-04T21:52:29.2122376Z     ╭─[[38;2;92;157;255;1msrc/lib/hooks/useConvex.ts[0m:25:26]
2025-06-04T21:52:29.2122789Z  [2m24[0m │       const upsertUser = useMutation(api.users.upsert)
2025-06-04T21:52:29.2123466Z  [2m25[0m │ [38;2;246;87;248m╭[0m[38;2;246;87;248m─[0m[38;2;246;87;248m▶[0m   const getUserByEmail = (email: string) =>
2025-06-04T21:52:29.2124135Z  [2m26[0m │ [38;2;246;87;248m╰[0m[38;2;246;87;248m─[0m[38;2;246;87;248m▶[0m     useQuery(api.users.getByEmail, { email })
2025-06-04T21:52:29.2124305Z  [2m27[0m │     
2025-06-04T21:52:29.2124458Z     ╰────
2025-06-04T21:52:29.2124470Z 
2025-06-04T21:52:29.2125264Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2125816Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:656:18]
2025-06-04T21:52:29.2126367Z  [2m655[0m │     history: Array<{ speaker: string; message: string; timestamp: number }>,
2025-06-04T21:52:29.2126623Z  [2m656[0m │     sessionInfo: any,
2025-06-04T21:52:29.2127069Z      · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.2127367Z  [2m657[0m │   ): Promise<SituationContext> {
2025-06-04T21:52:29.2127523Z      ╰────
2025-06-04T21:52:29.2128433Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2128444Z 
2025-06-04T21:52:29.2129401Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2129966Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:673:18]
2025-06-04T21:52:29.2130229Z  [2m672[0m │     model: CognitiveModel,
2025-06-04T21:52:29.2130474Z  [2m673[0m │     sessionInfo: any,
2025-06-04T21:52:29.2130748Z      · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.2131056Z  [2m674[0m │   ): Promise<TemporalContext> {
2025-06-04T21:52:29.2131211Z      ╰────
2025-06-04T21:52:29.2132131Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2132143Z 
2025-06-04T21:52:29.2132927Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'ConversationalStyle' is imported but never used.[0m
2025-06-04T21:52:29.2133468Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:11:3]
2025-06-04T21:52:29.2133697Z  [2m10[0m │   CognitiveModel,
2025-06-04T21:52:29.2133947Z  [2m11[0m │   ConversationalStyle,
2025-06-04T21:52:29.2134237Z     · [38;2;246;87;248m  ─────────┬─────────[0m
2025-06-04T21:52:29.2134778Z     ·            [38;2;246;87;248m╰── [38;2;246;87;248m'ConversationalStyle' is imported here[0m[0m
2025-06-04T21:52:29.2135069Z  [2m12[0m │ } from '../types/CognitiveModel'
2025-06-04T21:52:29.2135240Z     ╰────
2025-06-04T21:52:29.2135663Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.2135675Z 
2025-06-04T21:52:29.2136708Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'model' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2137260Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:450:5]
2025-06-04T21:52:29.2137592Z  [2m449[0m │     situationContext: SituationContext,
2025-06-04T21:52:29.2137855Z  [2m450[0m │     model: CognitiveModel,
2025-06-04T21:52:29.2138096Z      · [38;2;246;87;248m    ──┬──[0m
2025-06-04T21:52:29.2138538Z      ·       [38;2;246;87;248m╰── [38;2;246;87;248m'model' is declared here[0m[0m
2025-06-04T21:52:29.2138724Z  [2m451[0m │   ) {
2025-06-04T21:52:29.2138896Z      ╰────
2025-06-04T21:52:29.2139511Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2139526Z 
2025-06-04T21:52:29.2140756Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'model' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2142153Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:483:5]
2025-06-04T21:52:29.2142994Z  [2m482[0m │     temporalContext: TemporalContext,
2025-06-04T21:52:29.2143734Z  [2m483[0m │     model: CognitiveModel,
2025-06-04T21:52:29.2144496Z      · [38;2;246;87;248m    ──┬──[0m
2025-06-04T21:52:29.2145375Z      ·       [38;2;246;87;248m╰── [38;2;246;87;248m'model' is declared here[0m[0m
2025-06-04T21:52:29.2146149Z  [2m484[0m │   ) {
2025-06-04T21:52:29.2146697Z      ╰────
2025-06-04T21:52:29.2162439Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2162901Z 
2025-06-04T21:52:29.2164074Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'model' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2165324Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:521:5]
2025-06-04T21:52:29.2165820Z  [2m520[0m │     context: ResponseContext,
2025-06-04T21:52:29.2166341Z  [2m521[0m │     model: CognitiveModel,
2025-06-04T21:52:29.2166705Z      · [38;2;246;87;248m    ──┬──[0m
2025-06-04T21:52:29.2167174Z      ·       [38;2;246;87;248m╰── [38;2;246;87;248m'model' is declared here[0m[0m
2025-06-04T21:52:29.2167512Z  [2m522[0m │   ) {
2025-06-04T21:52:29.2167727Z      ╰────
2025-06-04T21:52:29.2168085Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2168314Z 
2025-06-04T21:52:29.2168924Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'context' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2170004Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:588:5]
2025-06-04T21:52:29.2170598Z  [2m587[0m │     modifications: ContextualResponse['contextualModifications'],
2025-06-04T21:52:29.2171064Z  [2m588[0m │     context: ResponseContext,
2025-06-04T21:52:29.2171399Z      · [38;2;246;87;248m    ───┬───[0m
2025-06-04T21:52:29.2171848Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'context' is declared here[0m[0m
2025-06-04T21:52:29.2172189Z  [2m589[0m │   ) {
2025-06-04T21:52:29.2172400Z      ╰────
2025-06-04T21:52:29.2172758Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2172988Z 
2025-06-04T21:52:29.2173578Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'history' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2174362Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:638:5]
2025-06-04T21:52:29.2174837Z  [2m637[0m │   private async buildHistoryContext(
2025-06-04T21:52:29.2175476Z  [2m638[0m │     history: Array<{ speaker: string; message: string; timestamp: number }>,
2025-06-04T21:52:29.2176362Z      · [38;2;246;87;248m    ───┬───[0m
2025-06-04T21:52:29.2177283Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'history' is declared here[0m[0m
2025-06-04T21:52:29.2178056Z  [2m639[0m │     model: CognitiveModel,
2025-06-04T21:52:29.2178554Z      ╰────
2025-06-04T21:52:29.2179467Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2179879Z 
2025-06-04T21:52:29.2180990Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'model' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2182383Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:639:5]
2025-06-04T21:52:29.2183493Z  [2m638[0m │     history: Array<{ speaker: string; message: string; timestamp: number }>,
2025-06-04T21:52:29.2184295Z  [2m639[0m │     model: CognitiveModel,
2025-06-04T21:52:29.2184873Z      · [38;2;246;87;248m    ──┬──[0m
2025-06-04T21:52:29.2185830Z      ·       [38;2;246;87;248m╰── [38;2;246;87;248m'model' is declared here[0m[0m
2025-06-04T21:52:29.2186437Z  [2m640[0m │   ): Promise<HistoryContext> {
2025-06-04T21:52:29.2186871Z      ╰────
2025-06-04T21:52:29.2187477Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2187849Z 
2025-06-04T21:52:29.2188875Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'history' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2190448Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:655:5]
2025-06-04T21:52:29.2191287Z  [2m654[0m │   private async buildSituationContext(
2025-06-04T21:52:29.2191953Z  [2m655[0m │     history: Array<{ speaker: string; message: string; timestamp: number }>,
2025-06-04T21:52:29.2192398Z      · [38;2;246;87;248m    ───┬───[0m
2025-06-04T21:52:29.2192833Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'history' is declared here[0m[0m
2025-06-04T21:52:29.2193227Z  [2m656[0m │     sessionInfo: any,
2025-06-04T21:52:29.2193476Z      ╰────
2025-06-04T21:52:29.2193977Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2194214Z 
2025-06-04T21:52:29.2194847Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionInfo' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2195659Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:656:5]
2025-06-04T21:52:29.2196258Z  [2m655[0m │     history: Array<{ speaker: string; message: string; timestamp: number }>,
2025-06-04T21:52:29.2196684Z  [2m656[0m │     sessionInfo: any,
2025-06-04T21:52:29.2196994Z      · [38;2;246;87;248m    ─────┬─────[0m
2025-06-04T21:52:29.2197431Z      ·          [38;2;246;87;248m╰── [38;2;246;87;248m'sessionInfo' is declared here[0m[0m
2025-06-04T21:52:29.2197840Z  [2m657[0m │   ): Promise<SituationContext> {
2025-06-04T21:52:29.2198149Z      ╰────
2025-06-04T21:52:29.2198776Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2199343Z 
2025-06-04T21:52:29.2200478Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'history' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2201924Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:694:5]
2025-06-04T21:52:29.2202846Z  [2m693[0m │   private assessTherapeuticAlliance(
2025-06-04T21:52:29.2203833Z  [2m694[0m │     history: Array<{ speaker: string; message: string; timestamp: number }>,
2025-06-04T21:52:29.2204733Z      · [38;2;246;87;248m    ───┬───[0m
2025-06-04T21:52:29.2205584Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'history' is declared here[0m[0m
2025-06-04T21:52:29.2206349Z  [2m695[0m │     historyContext: HistoryContext,
2025-06-04T21:52:29.2206662Z      ╰────
2025-06-04T21:52:29.2207047Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2207272Z 
2025-06-04T21:52:29.2207919Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'historyContext' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2208729Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ContextualResponseService.ts[0m:695:5]
2025-06-04T21:52:29.2209686Z  [2m694[0m │     history: Array<{ speaker: string; message: string; timestamp: number }>,
2025-06-04T21:52:29.2210166Z  [2m695[0m │     historyContext: HistoryContext,
2025-06-04T21:52:29.2210537Z      · [38;2;246;87;248m    ───────┬──────[0m
2025-06-04T21:52:29.2210999Z      ·            [38;2;246;87;248m╰── [38;2;246;87;248m'historyContext' is declared here[0m[0m
2025-06-04T21:52:29.2211347Z  [2m696[0m │   ) {
2025-06-04T21:52:29.2211553Z      ╰────
2025-06-04T21:52:29.2211900Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2212321Z 
2025-06-04T21:52:29.2212777Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Identifier 'ChatMessage' is imported but never used.[0m
2025-06-04T21:52:29.2213443Z    ╭─[[38;2;92;157;255;1msrc/components/chat/MemoryAwareChatSystem.tsx[0m:7:10]
2025-06-04T21:52:29.2213925Z  [2m6[0m │ import { ChatContainer } from './ChatContainer';
2025-06-04T21:52:29.2214338Z  [2m7[0m │ import { ChatMessage } from './ChatMessage';
2025-06-04T21:52:29.2214706Z    · [38;2;246;87;248m         ─────┬─────[0m
2025-06-04T21:52:29.2215153Z    ·               [38;2;246;87;248m╰── [38;2;246;87;248m'ChatMessage' is imported here[0m[0m
2025-06-04T21:52:29.2215556Z  [2m8[0m │ import { cn } from '@/lib/utils';
2025-06-04T21:52:29.2215818Z    ╰────
2025-06-04T21:52:29.2216150Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.2216365Z 
2025-06-04T21:52:29.2216970Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'placeholder' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2217870Z     ╭─[[38;2;92;157;255;1msrc/components/chat/MemoryAwareChatSystem.tsx[0m:54:3]
2025-06-04T21:52:29.2218454Z  [2m53[0m │   subtitle = "Chat with an AI that learns and remembers your conversations",
2025-06-04T21:52:29.2218932Z  [2m54[0m │   placeholder = "Type your message here...",
2025-06-04T21:52:29.2219473Z     · [38;2;246;87;248m  ─────┬─────[0m
2025-06-04T21:52:29.2219908Z     ·        [38;2;246;87;248m╰── [38;2;246;87;248m'placeholder' is declared here[0m[0m
2025-06-04T21:52:29.2220299Z  [2m55[0m │   enableMemoryToggle = true,
2025-06-04T21:52:29.2220563Z     ╰────
2025-06-04T21:52:29.2220901Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2221122Z 
2025-06-04T21:52:29.2221573Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2222170Z     ╭─[[38;2;92;157;255;1msrc/lib/supabase/client.ts[0m:38:30]
2025-06-04T21:52:29.2222601Z  [2m37[0m │     ? createClient<Database>(supabaseUrl, supabaseKey)
2025-06-04T21:52:29.2222999Z  [2m38[0m │     : (createMockClient() as any)
2025-06-04T21:52:29.2223368Z     · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.2223640Z     ╰────
2025-06-04T21:52:29.2224237Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2224616Z 
2025-06-04T21:52:29.2225067Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2225678Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ai-service.ts[0m:35:30]
2025-06-04T21:52:29.2225996Z  [2m34[0m │   }
2025-06-04T21:52:29.2226282Z  [2m35[0m │   return (import.meta.env as any)[key]
2025-06-04T21:52:29.2226657Z     · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.2226942Z  [2m36[0m │ }
2025-06-04T21:52:29.2227136Z     ╰────
2025-06-04T21:52:29.2227732Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2228115Z 
2025-06-04T21:52:29.2228556Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2229352Z     ╭─[[38;2;92;157;255;1msrc/components/chat/TherapyChatSystem.tsx[0m:61:11]
2025-06-04T21:52:29.2229777Z  [2m60[0m │ interface InterventionConfig {
2025-06-04T21:52:29.2230072Z  [2m61[0m │   scores: any
2025-06-04T21:52:29.2230343Z     · [38;2;246;87;248m          ───[0m
2025-06-04T21:52:29.2230716Z  [2m62[0m │   type: 'immediate' | 'preventive' | 'supportive'
2025-06-04T21:52:29.2231021Z     ╰────
2025-06-04T21:52:29.2231615Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2232141Z 
2025-06-04T21:52:29.2232701Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2233441Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:59:49]
2025-06-04T21:52:29.2233905Z  [2m58[0m │     // Insert mock provider
2025-06-04T21:52:29.2234306Z  [2m59[0m │     mockProvider = new (EmotionLlamaProvider as any)()
2025-06-04T21:52:29.2234773Z     · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.2235195Z  [2m60[0m │     Object.defineProperty(engine, 'provider', {
2025-06-04T21:52:29.2235496Z     ╰────
2025-06-04T21:52:29.2236102Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2236490Z 
2025-06-04T21:52:29.2236935Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2237685Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:72:42]
2025-06-04T21:52:29.2238099Z  [2m71[0m │ 
2025-06-04T21:52:29.2238404Z  [2m72[0m │     const currentFetch = global.fetch as any;
2025-06-04T21:52:29.2238824Z     · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.2239581Z  [2m73[0m │     if (currentFetch && typeof currentFetch.mockRestore === 'function') {
2025-06-04T21:52:29.2239964Z     ╰────
2025-06-04T21:52:29.2240569Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2240952Z 
2025-06-04T21:52:29.2241406Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2242137Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:94:40]
2025-06-04T21:52:29.2242572Z  [2m93[0m │       })
2025-06-04T21:52:29.2242927Z  [2m94[0m │       const addToBatchSpy = (engine as any).addToBatch
2025-06-04T21:52:29.2243355Z     · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.2243645Z  [2m95[0m │ 
2025-06-04T21:52:29.2243830Z     ╰────
2025-06-04T21:52:29.2244427Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2244811Z 
2025-06-04T21:52:29.2245247Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2245986Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:127:42]
2025-06-04T21:52:29.2246416Z  [2m126[0m │       })
2025-06-04T21:52:29.2246776Z  [2m127[0m │       const processBatchSpy = (engine as any).processBatch
2025-06-04T21:52:29.2247376Z      · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.2247819Z  [2m128[0m │       const processItemSpy = (engine as any).processItem
2025-06-04T21:52:29.2248139Z      ╰────
2025-06-04T21:52:29.2248738Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2249329Z 
2025-06-04T21:52:29.2249792Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2250542Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:128:41]
2025-06-04T21:52:29.2251111Z  [2m127[0m │       const processBatchSpy = (engine as any).processBatch
2025-06-04T21:52:29.2251585Z  [2m128[0m │       const processItemSpy = (engine as any).processItem
2025-06-04T21:52:29.2252024Z      · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.2252329Z  [2m129[0m │ 
2025-06-04T21:52:29.2252523Z      ╰────
2025-06-04T21:52:29.2253255Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2253651Z 
2025-06-04T21:52:29.2254103Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2254833Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:132:54]
2025-06-04T21:52:29.2255347Z  [2m131[0m │       const processOrder: string[] = []
2025-06-04T21:52:29.2255815Z  [2m132[0m │       processItemSpy.mockImplementation(async (item: any) => {
2025-06-04T21:52:29.2256307Z      · [38;2;246;87;248m                                                     ───[0m
2025-06-04T21:52:29.2256704Z  [2m133[0m │         processOrder.push(item.data)
2025-06-04T21:52:29.2257001Z      ╰────
2025-06-04T21:52:29.2257602Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2257987Z 
2025-06-04T21:52:29.2258444Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2259342Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:160:44]
2025-06-04T21:52:29.2259772Z  [2m159[0m │       })
2025-06-04T21:52:29.2260237Z  [2m160[0m │       const realTimeMethodSpy = (engine as any).analyzeEmotionsFromTextRealTime
2025-06-04T21:52:29.2260771Z      · [38;2;246;87;248m                                           ───[0m
2025-06-04T21:52:29.2261074Z  [2m161[0m │ 
2025-06-04T21:52:29.2261266Z      ╰────
2025-06-04T21:52:29.2261867Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2262325Z 
2025-06-04T21:52:29.2263165Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2264649Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:171:13]
2025-06-04T21:52:29.2265484Z  [2m170[0m │         }),
2025-06-04T21:52:29.2265968Z  [2m171[0m │       }) as any
2025-06-04T21:52:29.2266546Z      · [38;2;246;87;248m            ───[0m
2025-06-04T21:52:29.2267076Z  [2m172[0m │ 
2025-06-04T21:52:29.2267460Z      ╰────
2025-06-04T21:52:29.2268607Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2269562Z 
2025-06-04T21:52:29.2270510Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2272020Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:196:15]
2025-06-04T21:52:29.2273131Z  [2m195[0m │           }),
2025-06-04T21:52:29.2273659Z  [2m196[0m │         }) as any
2025-06-04T21:52:29.2274273Z      · [38;2;246;87;248m              ───[0m
2025-06-04T21:52:29.2274804Z  [2m197[0m │ 
2025-06-04T21:52:29.2275196Z      ╰────
2025-06-04T21:52:29.2276370Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2277161Z 
2025-06-04T21:52:29.2278104Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2279792Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:207:44]
2025-06-04T21:52:29.2280675Z  [2m206[0m │       })
2025-06-04T21:52:29.2281597Z  [2m207[0m │       const realTimeMethodSpy = (engine as any).analyzeEmotionsFromTextRealTime
2025-06-04T21:52:29.2282697Z      · [38;2;246;87;248m                                           ───[0m
2025-06-04T21:52:29.2283742Z  [2m208[0m │       const standardMethodSpy = (engine as any).analyzeEmotionsFromText
2025-06-04T21:52:29.2284716Z      ╰────
2025-06-04T21:52:29.2285913Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2286627Z 
2025-06-04T21:52:29.2287520Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2288961Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:208:44]
2025-06-04T21:52:29.2290460Z  [2m207[0m │       const realTimeMethodSpy = (engine as any).analyzeEmotionsFromTextRealTime
2025-06-04T21:52:29.2291612Z  [2m208[0m │       const standardMethodSpy = (engine as any).analyzeEmotionsFromText
2025-06-04T21:52:29.2292619Z      · [38;2;246;87;248m                                           ───[0m
2025-06-04T21:52:29.2293236Z  [2m209[0m │ 
2025-06-04T21:52:29.2293638Z      ╰────
2025-06-04T21:52:29.2294713Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2295391Z 
2025-06-04T21:52:29.2296284Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2297316Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:288:45]
2025-06-04T21:52:29.2297766Z  [2m287[0m │       })
2025-06-04T21:52:29.2298254Z  [2m288[0m │       const evictSpy = (smallCacheEngine as any).evictLRUCache
2025-06-04T21:52:29.2298745Z      · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.2299242Z  [2m289[0m │ 
2025-06-04T21:52:29.2299463Z      ╰────
2025-06-04T21:52:29.2300082Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2300492Z 
2025-06-04T21:52:29.2300969Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2301722Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:322:38]
2025-06-04T21:52:29.2302150Z  [2m321[0m │       })
2025-06-04T21:52:29.2302521Z  [2m322[0m │       const optimizeSpy = (engine as any).optimizeBatchSize
2025-06-04T21:52:29.2302974Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2303266Z  [2m323[0m │       ;
2025-06-04T21:52:29.2303478Z      ╰────
2025-06-04T21:52:29.2304172Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2304817Z 
2025-06-04T21:52:29.2305630Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2307139Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/emotions/__tests__/EmotionDetectionOptimizerTests.ts[0m:392:41]
2025-06-04T21:52:29.2307880Z  [2m391[0m │       })
2025-06-04T21:52:29.2308631Z  [2m392[0m │       const concurrencySpy = (engine as any).processWithConcurrencyLimit
2025-06-04T21:52:29.2309669Z      · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.2310170Z  [2m393[0m │ 
2025-06-04T21:52:29.2310496Z      ╰────
2025-06-04T21:52:29.2311569Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2312226Z 
2025-06-04T21:52:29.2313030Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2314092Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/context/ContextErrors.ts[0m:33:12]
2025-06-04T21:52:29.2314729Z  [2m32[0m │     factorId: string,
2025-06-04T21:52:29.2315172Z  [2m33[0m │     value: any,
2025-06-04T21:52:29.2315644Z     · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.2316707Z  [2m34[0m │     message: string = `Invalid value for factor ID '${factorId}'. Value cannot be undefined.`,
2025-06-04T21:52:29.2317418Z     ╰────
2025-06-04T21:52:29.2318482Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2319270Z 
2025-06-04T21:52:29.2320089Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2321159Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/context/ContextTypes.ts[0m:15:29]
2025-06-04T21:52:29.2321996Z  [2m14[0m │   confidence?: number // Optional confidence score (0-1)
2025-06-04T21:52:29.2322854Z  [2m15[0m │   metadata?: Record<string, any> // Additional information
2025-06-04T21:52:29.2323597Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.2324071Z  [2m16[0m │ }
2025-06-04T21:52:29.2324391Z     ╰────
2025-06-04T21:52:29.2325485Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2326156Z 
2025-06-04T21:52:29.2327018Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2328153Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1061:21]
2025-06-04T21:52:29.2328841Z  [2m1060[0m │     clientId: string,
2025-06-04T21:52:29.2329473Z  [2m1061[0m │     assessmentData: any,
2025-06-04T21:52:29.2330034Z       · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.2330654Z  [2m1062[0m │     template: TreatmentPlanTemplate | null,
2025-06-04T21:52:29.2331138Z       ╰────
2025-06-04T21:52:29.2332131Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2332757Z 
2025-06-04T21:52:29.2333516Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2334691Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1110:21]
2025-06-04T21:52:29.2335475Z  [2m1109[0m │     template: TreatmentPlanTemplate | null,
2025-06-04T21:52:29.2336040Z  [2m1110[0m │     assessmentData: any,
2025-06-04T21:52:29.2336577Z       · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.2337105Z  [2m1111[0m │   ): PlannedIntervention[] {
2025-06-04T21:52:29.2337538Z       ╰────
2025-06-04T21:52:29.2338527Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2339279Z 
2025-06-04T21:52:29.2340050Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2341411Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1148:12]
2025-06-04T21:52:29.2342287Z  [2m1147[0m │     template: TreatmentPlanTemplate | null,
2025-06-04T21:52:29.2342873Z  [2m1148[0m │     goals: any[],
2025-06-04T21:52:29.2343381Z       · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.2343900Z  [2m1149[0m │   ): OutcomeMeasure[] {
2025-06-04T21:52:29.2344330Z       ╰────
2025-06-04T21:52:29.2345389Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2346035Z 
2025-06-04T21:52:29.2346843Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2348049Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1180:45]
2025-06-04T21:52:29.2348718Z  [2m1179[0m │ 
2025-06-04T21:52:29.2349662Z  [2m1180[0m │   private generateProgressIndicators(goals: any[]): ProgressIndicator[] {
2025-06-04T21:52:29.2350712Z       · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.2351385Z  [2m1181[0m │     return goals.map((goal) => ({
2025-06-04T21:52:29.2351860Z       ╰────
2025-06-04T21:52:29.2352930Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2353587Z 
2025-06-04T21:52:29.2354401Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2355575Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1194:53]
2025-06-04T21:52:29.2356212Z  [2m1193[0m │ 
2025-06-04T21:52:29.2356946Z  [2m1194[0m │   private identifyProtectiveFactors(assessmentData: any): string[] {
2025-06-04T21:52:29.2357878Z       · [38;2;246;87;248m                                                    ───[0m
2025-06-04T21:52:29.2358679Z  [2m1195[0m │     const factors = [...assessmentData.clientStrengths]
2025-06-04T21:52:29.2359392Z       ╰────
2025-06-04T21:52:29.2360461Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2361119Z 
2025-06-04T21:52:29.2361893Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2363096Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1206:21]
2025-06-04T21:52:29.2363857Z  [2m1205[0m │   private generatePlanRationale(
2025-06-04T21:52:29.2364376Z  [2m1206[0m │     assessmentData: any,
2025-06-04T21:52:29.2364901Z       · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.2365565Z  [2m1207[0m │     template: TreatmentPlanTemplate | null,
2025-06-04T21:52:29.2366103Z       ╰────
2025-06-04T21:52:29.2367163Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2367806Z 
2025-06-04T21:52:29.2368617Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2369974Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1221:21]
2025-06-04T21:52:29.2370809Z  [2m1220[0m │   private estimateTreatmentDuration(
2025-06-04T21:52:29.2371412Z  [2m1221[0m │     assessmentData: any,
2025-06-04T21:52:29.2371994Z       · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.2372647Z  [2m1222[0m │     template: TreatmentPlanTemplate | null,
2025-06-04T21:52:29.2373122Z       ╰────
2025-06-04T21:52:29.2374154Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2374951Z 
2025-06-04T21:52:29.2375760Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2376994Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1239:12]
2025-06-04T21:52:29.2377593Z  [2m1238[0m │   private generateDischargeCriteria(
2025-06-04T21:52:29.2377929Z  [2m1239[0m │     goals: any[],
2025-06-04T21:52:29.2378235Z       · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.2378542Z  [2m1240[0m │     assessmentData: any,
2025-06-04T21:52:29.2378802Z       ╰────
2025-06-04T21:52:29.2379640Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2380228Z 
2025-06-04T21:52:29.2381060Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2382265Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1240:21]
2025-06-04T21:52:29.2382707Z  [2m1239[0m │     goals: any[],
2025-06-04T21:52:29.2383183Z  [2m1240[0m │     assessmentData: any,
2025-06-04T21:52:29.2383547Z       · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.2383847Z  [2m1241[0m │   ): string[] {
2025-06-04T21:52:29.2384079Z       ╰────
2025-06-04T21:52:29.2384684Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2385070Z 
2025-06-04T21:52:29.2385525Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2386211Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1683:22]
2025-06-04T21:52:29.2386635Z  [2m1682[0m │     goals: Goal[],
2025-06-04T21:52:29.2386932Z  [2m1683[0m │     progressSummary: any,
2025-06-04T21:52:29.2387286Z       · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2387588Z  [2m1684[0m │   ): string[] {
2025-06-04T21:52:29.2387817Z       ╰────
2025-06-04T21:52:29.2388416Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2388794Z 
2025-06-04T21:52:29.2389603Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2390756Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1711:22]
2025-06-04T21:52:29.2391373Z  [2m1710[0m │     goals: Goal[],
2025-06-04T21:52:29.2391698Z  [2m1711[0m │     progressSummary: any,
2025-06-04T21:52:29.2392048Z       · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2392354Z  [2m1712[0m │   ): string[] {
2025-06-04T21:52:29.2392591Z       ╰────
2025-06-04T21:52:29.2393214Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2393595Z 
2025-06-04T21:52:29.2394080Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'TreatmentRecommendation' is imported but never used.[0m
2025-06-04T21:52:29.2394770Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:15:15]
2025-06-04T21:52:29.2395326Z  [2m14[0m │ import type { SessionDocumentation } from '../interfaces/therapy'
2025-06-04T21:52:29.2395901Z  [2m15[0m │ import type { TreatmentRecommendation } from './RecommendationService'
2025-06-04T21:52:29.2396408Z     · [38;2;246;87;248m              ───────────┬───────────[0m
2025-06-04T21:52:29.2396953Z     ·                          [38;2;246;87;248m╰── [38;2;246;87;248m'TreatmentRecommendation' is imported here[0m[0m
2025-06-04T21:52:29.2397324Z  [2m16[0m │ 
2025-06-04T21:52:29.2397515Z     ╰────
2025-06-04T21:52:29.2397848Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.2398241Z 
2025-06-04T21:52:29.2398847Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'options' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2399889Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:446:5]
2025-06-04T21:52:29.2400276Z  [2m445[0m │     },
2025-06-04T21:52:29.2400595Z  [2m446[0m │     options: TreatmentPlanningOptions = {},
2025-06-04T21:52:29.2401047Z      · [38;2;246;87;248m    ───────────────────┬──────────────────[0m
2025-06-04T21:52:29.2401534Z      ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'options' is declared here[0m[0m
2025-06-04T21:52:29.2401934Z  [2m447[0m │   ): Promise<TreatmentPlan> {
2025-06-04T21:52:29.2402202Z      ╰────
2025-06-04T21:52:29.2402546Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2402770Z 
2025-06-04T21:52:29.2403402Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'assessmentData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2404338Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1110:5]
2025-06-04T21:52:29.2404849Z  [2m1109[0m │     template: TreatmentPlanTemplate | null,
2025-06-04T21:52:29.2405208Z  [2m1110[0m │     assessmentData: any,
2025-06-04T21:52:29.2405538Z       · [38;2;246;87;248m    ───────┬──────[0m
2025-06-04T21:52:29.2405994Z       ·            [38;2;246;87;248m╰── [38;2;246;87;248m'assessmentData' is declared here[0m[0m
2025-06-04T21:52:29.2406402Z  [2m1111[0m │   ): PlannedIntervention[] {
2025-06-04T21:52:29.2406668Z       ╰────
2025-06-04T21:52:29.2407013Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2407227Z 
2025-06-04T21:52:29.2407809Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'template' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2408591Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1222:5]
2025-06-04T21:52:29.2409227Z  [2m1221[0m │     assessmentData: any,
2025-06-04T21:52:29.2409902Z  [2m1222[0m │     template: TreatmentPlanTemplate | null,
2025-06-04T21:52:29.2410477Z       · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.2411176Z       ·         [38;2;246;87;248m╰── [38;2;246;87;248m'template' is declared here[0m[0m
2025-06-04T21:52:29.2411755Z  [2m1223[0m │   ): number {
2025-06-04T21:52:29.2411993Z       ╰────
2025-06-04T21:52:29.2412338Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2412553Z 
2025-06-04T21:52:29.2413119Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'plan' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2413876Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1258:5]
2025-06-04T21:52:29.2414447Z  [2m1257[0m │     goal: Goal,
2025-06-04T21:52:29.2414737Z  [2m1258[0m │     plan: TreatmentPlan,
2025-06-04T21:52:29.2415059Z       · [38;2;246;87;248m    ──┬─[0m
2025-06-04T21:52:29.2415470Z       ·       [38;2;246;87;248m╰── [38;2;246;87;248m'plan' is declared here[0m[0m
2025-06-04T21:52:29.2415800Z  [2m1259[0m │   ): number {
2025-06-04T21:52:29.2416025Z       ╰────
2025-06-04T21:52:29.2416368Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2416582Z 
2025-06-04T21:52:29.2417146Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'plan' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2417899Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1272:5]
2025-06-04T21:52:29.2418301Z  [2m1271[0m │     goal: Goal,
2025-06-04T21:52:29.2418587Z  [2m1272[0m │     plan: TreatmentPlan,
2025-06-04T21:52:29.2418902Z       · [38;2;246;87;248m    ──┬─[0m
2025-06-04T21:52:29.2419501Z       ·       [38;2;246;87;248m╰── [38;2;246;87;248m'plan' is declared here[0m[0m
2025-06-04T21:52:29.2419966Z  [2m1273[0m │   ): Array<{
2025-06-04T21:52:29.2420206Z       ╰────
2025-06-04T21:52:29.2420558Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2420782Z 
2025-06-04T21:52:29.2421335Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'plan' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2422085Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1301:5]
2025-06-04T21:52:29.2422493Z  [2m1300[0m │     goal: Goal,
2025-06-04T21:52:29.2422772Z  [2m1301[0m │     plan: TreatmentPlan,
2025-06-04T21:52:29.2423080Z       · [38;2;246;87;248m    ──┬─[0m
2025-06-04T21:52:29.2423481Z       ·       [38;2;246;87;248m╰── [38;2;246;87;248m'plan' is declared here[0m[0m
2025-06-04T21:52:29.2423838Z  [2m1302[0m │   ): string[] {
2025-06-04T21:52:29.2424062Z       ╰────
2025-06-04T21:52:29.2424406Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2424621Z 
2025-06-04T21:52:29.2425175Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'plan' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2425930Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1348:45]
2025-06-04T21:52:29.2426309Z  [2m1347[0m │ 
2025-06-04T21:52:29.2426766Z  [2m1348[0m │   private generateEngagementRecommendations(plan: TreatmentPlan): string[] {
2025-06-04T21:52:29.2427307Z       · [38;2;246;87;248m                                            ──┬─[0m
2025-06-04T21:52:29.2427813Z       ·                                               [38;2;246;87;248m╰── [38;2;246;87;248m'plan' is declared here[0m[0m
2025-06-04T21:52:29.2428169Z  [2m1349[0m │     return [
2025-06-04T21:52:29.2428391Z       ╰────
2025-06-04T21:52:29.2428730Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2428943Z 
2025-06-04T21:52:29.2429704Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'plan' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2430471Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1390:47]
2025-06-04T21:52:29.2430846Z  [2m1389[0m │ 
2025-06-04T21:52:29.2431310Z  [2m1390[0m │   private generateDropoutMitigationStrategies(plan: TreatmentPlan): string[] {
2025-06-04T21:52:29.2431868Z       · [38;2;246;87;248m                                              ──┬─[0m
2025-06-04T21:52:29.2432377Z       ·                                                 [38;2;246;87;248m╰── [38;2;246;87;248m'plan' is declared here[0m[0m
2025-06-04T21:52:29.2432715Z  [2m1391[0m │     return [
2025-06-04T21:52:29.2433080Z       ╰────
2025-06-04T21:52:29.2433426Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2433638Z 
2025-06-04T21:52:29.2434211Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'plan' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2434964Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1398:41]
2025-06-04T21:52:29.2435335Z  [2m1397[0m │ 
2025-06-04T21:52:29.2435761Z  [2m1398[0m │   private generateDropoutMonitoringPlan(plan: TreatmentPlan): string[] {
2025-06-04T21:52:29.2436278Z       · [38;2;246;87;248m                                        ──┬─[0m
2025-06-04T21:52:29.2436770Z       ·                                           [38;2;246;87;248m╰── [38;2;246;87;248m'plan' is declared here[0m[0m
2025-06-04T21:52:29.2437112Z  [2m1399[0m │     return [
2025-06-04T21:52:29.2437328Z       ╰────
2025-06-04T21:52:29.2437673Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2437889Z 
2025-06-04T21:52:29.2438561Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'plan' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2439516Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1442:5]
2025-06-04T21:52:29.2440061Z  [2m1441[0m │   private generateDeteriorationMitigationStrategies(
2025-06-04T21:52:29.2440453Z  [2m1442[0m │     plan: TreatmentPlan,
2025-06-04T21:52:29.2440759Z       · [38;2;246;87;248m    ──┬─[0m
2025-06-04T21:52:29.2441161Z       ·       [38;2;246;87;248m╰── [38;2;246;87;248m'plan' is declared here[0m[0m
2025-06-04T21:52:29.2441509Z  [2m1443[0m │   ): string[] {
2025-06-04T21:52:29.2441735Z       ╰────
2025-06-04T21:52:29.2442068Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2442284Z 
2025-06-04T21:52:29.2442837Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'plan' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2443613Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1451:47]
2025-06-04T21:52:29.2443988Z  [2m1450[0m │ 
2025-06-04T21:52:29.2444451Z  [2m1451[0m │   private generateDeteriorationMonitoringPlan(plan: TreatmentPlan): string[] {
2025-06-04T21:52:29.2445002Z       · [38;2;246;87;248m                                              ──┬─[0m
2025-06-04T21:52:29.2445507Z       ·                                                 [38;2;246;87;248m╰── [38;2;246;87;248m'plan' is declared here[0m[0m
2025-06-04T21:52:29.2445851Z  [2m1452[0m │     return [
2025-06-04T21:52:29.2446076Z       ╰────
2025-06-04T21:52:29.2446411Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2446622Z 
2025-06-04T21:52:29.2447174Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'goal' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2447940Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1536:5]
2025-06-04T21:52:29.2448403Z  [2m1535[0m │     session: SessionDocumentation,
2025-06-04T21:52:29.2448725Z  [2m1536[0m │     goal: Goal,
2025-06-04T21:52:29.2449169Z       · [38;2;246;87;248m    ──┬─[0m
2025-06-04T21:52:29.2449627Z       ·       [38;2;246;87;248m╰── [38;2;246;87;248m'goal' is declared here[0m[0m
2025-06-04T21:52:29.2449967Z  [2m1537[0m │   ): number {
2025-06-04T21:52:29.2450194Z       ╰────
2025-06-04T21:52:29.2450536Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2450746Z 
2025-06-04T21:52:29.2451333Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'session' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2452115Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1565:5]
2025-06-04T21:52:29.2452724Z  [2m1564[0m │   private identifyOutcomeChanges(
2025-06-04T21:52:29.2453106Z  [2m1565[0m │     session: SessionDocumentation,
2025-06-04T21:52:29.2453449Z       · [38;2;246;87;248m    ───┬───[0m
2025-06-04T21:52:29.2453868Z       ·        [38;2;246;87;248m╰── [38;2;246;87;248m'session' is declared here[0m[0m
2025-06-04T21:52:29.2454240Z  [2m1566[0m │     plan: TreatmentPlan,
2025-06-04T21:52:29.2454497Z       ╰────
2025-06-04T21:52:29.2454839Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2455049Z 
2025-06-04T21:52:29.2455613Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'plan' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2456368Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1566:5]
2025-06-04T21:52:29.2456825Z  [2m1565[0m │     session: SessionDocumentation,
2025-06-04T21:52:29.2457167Z  [2m1566[0m │     plan: TreatmentPlan,
2025-06-04T21:52:29.2457471Z       · [38;2;246;87;248m    ──┬─[0m
2025-06-04T21:52:29.2457988Z       ·       [38;2;246;87;248m╰── [38;2;246;87;248m'plan' is declared here[0m[0m
2025-06-04T21:52:29.2458329Z  [2m1567[0m │   ): Array<{
2025-06-04T21:52:29.2458549Z       ╰────
2025-06-04T21:52:29.2458891Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2459297Z 
2025-06-04T21:52:29.2459880Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'plan' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2460639Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/TreatmentPlanningService.ts[0m:1579:5]
2025-06-04T21:52:29.2461098Z  [2m1578[0m │     session: SessionDocumentation,
2025-06-04T21:52:29.2461427Z  [2m1579[0m │     plan: TreatmentPlan,
2025-06-04T21:52:29.2461741Z       · [38;2;246;87;248m    ──┬─[0m
2025-06-04T21:52:29.2462155Z       ·       [38;2;246;87;248m╰── [38;2;246;87;248m'plan' is declared here[0m[0m
2025-06-04T21:52:29.2462484Z  [2m1580[0m │   ): Array<{
2025-06-04T21:52:29.2462709Z       ╰────
2025-06-04T21:52:29.2463053Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2463270Z 
2025-06-04T21:52:29.2463720Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2464389Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationService.ts[0m:135:22]
2025-06-04T21:52:29.2464798Z  [2m134[0m │     clientId: string,
2025-06-04T21:52:29.2465104Z  [2m135[0m │     recommendations: any[],
2025-06-04T21:52:29.2465441Z      · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2465815Z  [2m136[0m │     options?: PersonalizationLayerOptions,
2025-06-04T21:52:29.2466111Z      ╰────
2025-06-04T21:52:29.2466707Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2467094Z 
2025-06-04T21:52:29.2467552Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2468214Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationService.ts[0m:138:34]
2025-06-04T21:52:29.2468597Z  [2m137[0m │   ): Promise<{
2025-06-04T21:52:29.2468924Z  [2m138[0m │     personalizedRecommendations: any[]
2025-06-04T21:52:29.2469525Z      · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.2469984Z  [2m139[0m │     techniqueAdaptations: Map<string, TechniqueAdaptation>
2025-06-04T21:52:29.2470322Z      ╰────
2025-06-04T21:52:29.2470918Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2471298Z 
2025-06-04T21:52:29.2471739Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2472586Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:329:29]
2025-06-04T21:52:29.2472975Z  [2m328[0m │ 
2025-06-04T21:52:29.2473258Z  [2m329[0m │     const relevantEmotions: any[] = []
2025-06-04T21:52:29.2473447Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.2473542Z  [2m330[0m │ 
2025-06-04T21:52:29.2473638Z      ╰────
2025-06-04T21:52:29.2474137Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2474145Z 
2025-06-04T21:52:29.2474586Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2474899Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:945:18]
2025-06-04T21:52:29.2475059Z  [2m944[0m │     belief: CoreBelief,
2025-06-04T21:52:29.2475198Z  [2m945[0m │     baseEmotion: any,
2025-06-04T21:52:29.2475361Z      · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.2475637Z  [2m946[0m │     hasModelPattern: boolean,
2025-06-04T21:52:29.2475734Z      ╰────
2025-06-04T21:52:29.2476243Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2476250Z 
2025-06-04T21:52:29.2476682Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2477029Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:954:18]
2025-06-04T21:52:29.2477171Z  [2m953[0m │     belief: CoreBelief,
2025-06-04T21:52:29.2477311Z  [2m954[0m │     baseEmotion: any,
2025-06-04T21:52:29.2477467Z      · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.2477696Z  [2m955[0m │   ): 'brief' | 'moderate' | 'extended' | 'persistent' {
2025-06-04T21:52:29.2477800Z      ╰────
2025-06-04T21:52:29.2478318Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2478325Z 
2025-06-04T21:52:29.2478777Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2479207Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:972:24]
2025-06-04T21:52:29.2479404Z  [2m971[0m │   private generateBehavioralImpulses(
2025-06-04T21:52:29.2479563Z  [2m972[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2479736Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.2479898Z  [2m973[0m │     context: TriggeringContext,
2025-06-04T21:52:29.2479994Z      ╰────
2025-06-04T21:52:29.2480486Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2480502Z 
2025-06-04T21:52:29.2480947Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2481255Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:980:24]
2025-06-04T21:52:29.2481464Z  [2m979[0m │   private generateCopingRecommendations(
2025-06-04T21:52:29.2481618Z  [2m980[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2481791Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.2481963Z  [2m981[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2482058Z      ╰────
2025-06-04T21:52:29.2482552Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2482559Z 
2025-06-04T21:52:29.2482993Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2483434Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:989:24]
2025-06-04T21:52:29.2483605Z  [2m988[0m │   private assessRiskFactors(
2025-06-04T21:52:29.2483758Z  [2m989[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2483924Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.2484143Z  [2m990[0m │     vulnerabilities: EmotionalVulnerability[],
2025-06-04T21:52:29.2484233Z      ╰────
2025-06-04T21:52:29.2484731Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2484738Z 
2025-06-04T21:52:29.2485167Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2485484Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:999:24]
2025-06-04T21:52:29.2485666Z  [2m 998[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2485824Z  [2m 999[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2485999Z       · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.2486318Z  [2m1000[0m │     context: TriggeringContext,
2025-06-04T21:52:29.2486416Z       ╰────
2025-06-04T21:52:29.2486918Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2486924Z 
2025-06-04T21:52:29.2487515Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Variable 'modelEmotions' is declared but never used. Unused variables should start with a '_'.[0m
2025-06-04T21:52:29.2487827Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:327:11]
2025-06-04T21:52:29.2488099Z  [2m326[0m │     const baseEmotions = this.getBaseEmotionsForBelief(belief)
2025-06-04T21:52:29.2488386Z  [2m327[0m │     const modelEmotions = emotionalPatterns.map((p) => p.emotion)
2025-06-04T21:52:29.2488573Z      · [38;2;246;87;248m          ──────┬──────[0m
2025-06-04T21:52:29.2488891Z      ·                 [38;2;246;87;248m╰── [38;2;246;87;248m'modelEmotions' is declared here[0m[0m
2025-06-04T21:52:29.2489140Z  [2m328[0m │ 
2025-06-04T21:52:29.2489240Z      ╰────
2025-06-04T21:52:29.2489506Z [38;2;106;159;181m  help: [0mConsider removing this declaration.
2025-06-04T21:52:29.2489513Z 
2025-06-04T21:52:29.2490084Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'belief' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2490401Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:590:5]
2025-06-04T21:52:29.2490546Z  [2m589[0m │     situation: string,
2025-06-04T21:52:29.2490692Z  [2m590[0m │     belief: CoreBelief,
2025-06-04T21:52:29.2490836Z      · [38;2;246;87;248m    ───┬──[0m
2025-06-04T21:52:29.2491097Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'belief' is declared here[0m[0m
2025-06-04T21:52:29.2491222Z  [2m591[0m │   ): string {
2025-06-04T21:52:29.2491314Z      ╰────
2025-06-04T21:52:29.2491579Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2491586Z 
2025-06-04T21:52:29.2492144Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'model' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2492456Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:892:5]
2025-06-04T21:52:29.2492639Z  [2m891[0m │   private identifyVulnerabilities(
2025-06-04T21:52:29.2492796Z  [2m892[0m │     model: CognitiveModel,
2025-06-04T21:52:29.2492938Z      · [38;2;246;87;248m    ──┬──[0m
2025-06-04T21:52:29.2493191Z      ·       [38;2;246;87;248m╰── [38;2;246;87;248m'model' is declared here[0m[0m
2025-06-04T21:52:29.2493358Z  [2m893[0m │   ): EmotionalVulnerability[] {
2025-06-04T21:52:29.2493587Z      ╰────
2025-06-04T21:52:29.2493836Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2493842Z 
2025-06-04T21:52:29.2494410Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'model' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2494719Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:898:31]
2025-06-04T21:52:29.2494817Z  [2m897[0m │ 
2025-06-04T21:52:29.2495138Z  [2m898[0m │   private analyzeCascadeRisks(model: CognitiveModel): EmotionalCascade[] {
2025-06-04T21:52:29.2495336Z      · [38;2;246;87;248m                              ──┬──[0m
2025-06-04T21:52:29.2495626Z      ·                                 [38;2;246;87;248m╰── [38;2;246;87;248m'model' is declared here[0m[0m
2025-06-04T21:52:29.2495832Z  [2m899[0m │     // Implementation for cascade risk analysis
2025-06-04T21:52:29.2495929Z      ╰────
2025-06-04T21:52:29.2496177Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2496183Z 
2025-06-04T21:52:29.2496852Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'model' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2497171Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:904:5]
2025-06-04T21:52:29.2497365Z  [2m903[0m │   private calculateEmotionalProfile(
2025-06-04T21:52:29.2497514Z  [2m904[0m │     model: CognitiveModel,
2025-06-04T21:52:29.2497660Z      · [38;2;246;87;248m    ──┬──[0m
2025-06-04T21:52:29.2497904Z      ·       [38;2;246;87;248m╰── [38;2;246;87;248m'model' is declared here[0m[0m
2025-06-04T21:52:29.2498079Z  [2m905[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2498168Z      ╰────
2025-06-04T21:52:29.2498409Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2498421Z 
2025-06-04T21:52:29.2499152Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'triggers' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2499531Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:905:5]
2025-06-04T21:52:29.2499686Z  [2m904[0m │     model: CognitiveModel,
2025-06-04T21:52:29.2499856Z  [2m905[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2500010Z      · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.2500273Z      ·         [38;2;246;87;248m╰── [38;2;246;87;248m'triggers' is declared here[0m[0m
2025-06-04T21:52:29.2500492Z  [2m906[0m │     vulnerabilities: EmotionalVulnerability[],
2025-06-04T21:52:29.2500584Z      ╰────
2025-06-04T21:52:29.2500833Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2500841Z 
2025-06-04T21:52:29.2501450Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'vulnerabilities' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2501906Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:906:5]
2025-06-04T21:52:29.2502085Z  [2m905[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2502303Z  [2m906[0m │     vulnerabilities: EmotionalVulnerability[],
2025-06-04T21:52:29.2502467Z      · [38;2;246;87;248m    ───────┬───────[0m
2025-06-04T21:52:29.2502768Z      ·            [38;2;246;87;248m╰── [38;2;246;87;248m'vulnerabilities' is declared here[0m[0m
2025-06-04T21:52:29.2502870Z  [2m907[0m │   ) {
2025-06-04T21:52:29.2502961Z      ╰────
2025-06-04T21:52:29.2503212Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2503218Z 
2025-06-04T21:52:29.2503780Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'belief' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2504098Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:917:40]
2025-06-04T21:52:29.2504205Z  [2m916[0m │ 
2025-06-04T21:52:29.2504634Z  [2m917[0m │   private generateSituationsFromBelief(belief: CoreBelief): string[] {
2025-06-04T21:52:29.2504861Z      · [38;2;246;87;248m                                       ───┬──[0m
2025-06-04T21:52:29.2505172Z      ·                                           [38;2;246;87;248m╰── [38;2;246;87;248m'belief' is declared here[0m[0m
2025-06-04T21:52:29.2505378Z  [2m918[0m │     // Implementation for situation generation
2025-06-04T21:52:29.2505474Z      ╰────
2025-06-04T21:52:29.2505718Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2505724Z 
2025-06-04T21:52:29.2506299Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'belief' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2506606Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:923:5]
2025-06-04T21:52:29.2506790Z  [2m922[0m │   private identifyDistortions(
2025-06-04T21:52:29.2506934Z  [2m923[0m │     belief: CoreBelief,
2025-06-04T21:52:29.2507092Z      · [38;2;246;87;248m    ───┬──[0m
2025-06-04T21:52:29.2507346Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'belief' is declared here[0m[0m
2025-06-04T21:52:29.2507525Z  [2m924[0m │     patterns: DistortionPattern[],
2025-06-04T21:52:29.2507623Z      ╰────
2025-06-04T21:52:29.2507867Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2507874Z 
2025-06-04T21:52:29.2508452Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'patterns' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2508756Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:924:5]
2025-06-04T21:52:29.2508905Z  [2m923[0m │     belief: CoreBelief,
2025-06-04T21:52:29.2509285Z  [2m924[0m │     patterns: DistortionPattern[],
2025-06-04T21:52:29.2509467Z      · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.2509736Z      ·         [38;2;246;87;248m╰── [38;2;246;87;248m'patterns' is declared here[0m[0m
2025-06-04T21:52:29.2509873Z  [2m925[0m │   ): string[] {
2025-06-04T21:52:29.2509966Z      ╰────
2025-06-04T21:52:29.2510208Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2510221Z 
2025-06-04T21:52:29.2510782Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'belief' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2511090Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:931:5]
2025-06-04T21:52:29.2511291Z  [2m930[0m │   private generateBehavioralUrges(
2025-06-04T21:52:29.2511433Z  [2m931[0m │     belief: CoreBelief,
2025-06-04T21:52:29.2511582Z      · [38;2;246;87;248m    ───┬──[0m
2025-06-04T21:52:29.2511830Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'belief' is declared here[0m[0m
2025-06-04T21:52:29.2512231Z  [2m932[0m │     emotions: Array<{ emotion: string; intensity: number }>,
2025-06-04T21:52:29.2512323Z      ╰────
2025-06-04T21:52:29.2512579Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2512586Z 
2025-06-04T21:52:29.2513157Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotions' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2513463Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:932:5]
2025-06-04T21:52:29.2513601Z  [2m931[0m │     belief: CoreBelief,
2025-06-04T21:52:29.2513851Z  [2m932[0m │     emotions: Array<{ emotion: string; intensity: number }>,
2025-06-04T21:52:29.2513999Z      · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.2514262Z      ·         [38;2;246;87;248m╰── [38;2;246;87;248m'emotions' is declared here[0m[0m
2025-06-04T21:52:29.2514398Z  [2m933[0m │   ): string[] {
2025-06-04T21:52:29.2514488Z      ╰────
2025-06-04T21:52:29.2514737Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2514861Z 
2025-06-04T21:52:29.2515432Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'belief' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2515749Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:938:34]
2025-06-04T21:52:29.2515848Z  [2m937[0m │ 
2025-06-04T21:52:29.2516194Z  [2m938[0m │   private createCopingMechanisms(belief: CoreBelief, model: CognitiveModel) {
2025-06-04T21:52:29.2516402Z      · [38;2;246;87;248m                                 ───┬──[0m
2025-06-04T21:52:29.2516700Z      ·                                     [38;2;246;87;248m╰── [38;2;246;87;248m'belief' is declared here[0m[0m
2025-06-04T21:52:29.2516925Z  [2m939[0m │     // Implementation for coping mechanism creation
2025-06-04T21:52:29.2517034Z      ╰────
2025-06-04T21:52:29.2517277Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2517284Z 
2025-06-04T21:52:29.2517852Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'model' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2518165Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:938:54]
2025-06-04T21:52:29.2518266Z  [2m937[0m │ 
2025-06-04T21:52:29.2518642Z  [2m938[0m │   private createCopingMechanisms(belief: CoreBelief, model: CognitiveModel) {
2025-06-04T21:52:29.2519186Z      · [38;2;246;87;248m                                                     ──┬──[0m
2025-06-04T21:52:29.2519681Z      ·                                                        [38;2;246;87;248m╰── [38;2;246;87;248m'model' is declared here[0m[0m
2025-06-04T21:52:29.2519912Z  [2m939[0m │     // Implementation for coping mechanism creation
2025-06-04T21:52:29.2520029Z      ╰────
2025-06-04T21:52:29.2520285Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2520294Z 
2025-06-04T21:52:29.2520876Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'belief' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2521186Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:953:5]
2025-06-04T21:52:29.2521382Z  [2m952[0m │   private calculateEmotionDuration(
2025-06-04T21:52:29.2521527Z  [2m953[0m │     belief: CoreBelief,
2025-06-04T21:52:29.2521679Z      · [38;2;246;87;248m    ───┬──[0m
2025-06-04T21:52:29.2521930Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'belief' is declared here[0m[0m
2025-06-04T21:52:29.2522078Z  [2m954[0m │     baseEmotion: any,
2025-06-04T21:52:29.2522170Z      ╰────
2025-06-04T21:52:29.2522417Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2522574Z 
2025-06-04T21:52:29.2523180Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'baseEmotion' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2523496Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:954:5]
2025-06-04T21:52:29.2523638Z  [2m953[0m │     belief: CoreBelief,
2025-06-04T21:52:29.2523774Z  [2m954[0m │     baseEmotion: any,
2025-06-04T21:52:29.2523936Z      · [38;2;246;87;248m    ─────┬─────[0m
2025-06-04T21:52:29.2524207Z      ·          [38;2;246;87;248m╰── [38;2;246;87;248m'baseEmotion' is declared here[0m[0m
2025-06-04T21:52:29.2524440Z  [2m955[0m │   ): 'brief' | 'moderate' | 'extended' | 'persistent' {
2025-06-04T21:52:29.2524532Z      ╰────
2025-06-04T21:52:29.2524778Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2524785Z 
2025-06-04T21:52:29.2525364Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'triggers' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2525844Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:961:5]
2025-06-04T21:52:29.2526044Z  [2m960[0m │   private generateCognitiveResponse(
2025-06-04T21:52:29.2526219Z  [2m961[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2526367Z      · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.2526628Z      ·         [38;2;246;87;248m╰── [38;2;246;87;248m'triggers' is declared here[0m[0m
2025-06-04T21:52:29.2526768Z  [2m962[0m │     situation: string,
2025-06-04T21:52:29.2526859Z      ╰────
2025-06-04T21:52:29.2527107Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2527114Z 
2025-06-04T21:52:29.2527688Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'situation' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2528012Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:962:5]
2025-06-04T21:52:29.2528182Z  [2m961[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2528334Z  [2m962[0m │     situation: string,
2025-06-04T21:52:29.2528484Z      · [38;2;246;87;248m    ────┬────[0m
2025-06-04T21:52:29.2528752Z      ·         [38;2;246;87;248m╰── [38;2;246;87;248m'situation' is declared here[0m[0m
2025-06-04T21:52:29.2528854Z  [2m963[0m │   ) {
2025-06-04T21:52:29.2528952Z      ╰────
2025-06-04T21:52:29.2529431Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2529439Z 
2025-06-04T21:52:29.2530082Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionalResponse' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2530390Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:972:5]
2025-06-04T21:52:29.2530599Z  [2m971[0m │   private generateBehavioralImpulses(
2025-06-04T21:52:29.2530755Z  [2m972[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2530927Z      · [38;2;246;87;248m    ────────┬────────[0m
2025-06-04T21:52:29.2531242Z      ·             [38;2;246;87;248m╰── [38;2;246;87;248m'emotionalResponse' is declared here[0m[0m
2025-06-04T21:52:29.2531411Z  [2m973[0m │     context: TriggeringContext,
2025-06-04T21:52:29.2531509Z      ╰────
2025-06-04T21:52:29.2531751Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2531759Z 
2025-06-04T21:52:29.2532333Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'context' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2532640Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:973:5]
2025-06-04T21:52:29.2532798Z  [2m972[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2532960Z  [2m973[0m │     context: TriggeringContext,
2025-06-04T21:52:29.2533255Z      · [38;2;246;87;248m    ───┬───[0m
2025-06-04T21:52:29.2533509Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'context' is declared here[0m[0m
2025-06-04T21:52:29.2533651Z  [2m974[0m │   ): string[] {
2025-06-04T21:52:29.2533744Z      ╰────
2025-06-04T21:52:29.2533984Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2533991Z 
2025-06-04T21:52:29.2534610Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionalResponse' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2534914Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:980:5]
2025-06-04T21:52:29.2535118Z  [2m979[0m │   private generateCopingRecommendations(
2025-06-04T21:52:29.2535273Z  [2m980[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2535446Z      · [38;2;246;87;248m    ────────┬────────[0m
2025-06-04T21:52:29.2535753Z      ·             [38;2;246;87;248m╰── [38;2;246;87;248m'emotionalResponse' is declared here[0m[0m
2025-06-04T21:52:29.2535927Z  [2m981[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2536139Z      ╰────
2025-06-04T21:52:29.2536397Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2536404Z 
2025-06-04T21:52:29.2536974Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'triggers' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2537288Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:981:5]
2025-06-04T21:52:29.2537442Z  [2m980[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2537613Z  [2m981[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2537760Z      · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.2538017Z      ·         [38;2;246;87;248m╰── [38;2;246;87;248m'triggers' is declared here[0m[0m
2025-06-04T21:52:29.2538194Z  [2m982[0m │     context: TriggeringContext,
2025-06-04T21:52:29.2538285Z      ╰────
2025-06-04T21:52:29.2538529Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2538544Z 
2025-06-04T21:52:29.2539220Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'context' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2539535Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:982:5]
2025-06-04T21:52:29.2539702Z  [2m981[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2539868Z  [2m982[0m │     context: TriggeringContext,
2025-06-04T21:52:29.2540014Z      · [38;2;246;87;248m    ───┬───[0m
2025-06-04T21:52:29.2540270Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'context' is declared here[0m[0m
2025-06-04T21:52:29.2540369Z  [2m983[0m │   ) {
2025-06-04T21:52:29.2540466Z      ╰────
2025-06-04T21:52:29.2540709Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2540724Z 
2025-06-04T21:52:29.2541351Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionalResponse' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2541662Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:989:5]
2025-06-04T21:52:29.2541822Z  [2m988[0m │   private assessRiskFactors(
2025-06-04T21:52:29.2541979Z  [2m989[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2542147Z      · [38;2;246;87;248m    ────────┬────────[0m
2025-06-04T21:52:29.2542445Z      ·             [38;2;246;87;248m╰── [38;2;246;87;248m'emotionalResponse' is declared here[0m[0m
2025-06-04T21:52:29.2542663Z  [2m990[0m │     vulnerabilities: EmotionalVulnerability[],
2025-06-04T21:52:29.2542758Z      ╰────
2025-06-04T21:52:29.2543000Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2543007Z 
2025-06-04T21:52:29.2543767Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'vulnerabilities' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2544087Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:990:5]
2025-06-04T21:52:29.2544247Z  [2m989[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2544459Z  [2m990[0m │     vulnerabilities: EmotionalVulnerability[],
2025-06-04T21:52:29.2544630Z      · [38;2;246;87;248m    ───────┬───────[0m
2025-06-04T21:52:29.2544921Z      ·            [38;2;246;87;248m╰── [38;2;246;87;248m'vulnerabilities' is declared here[0m[0m
2025-06-04T21:52:29.2545083Z  [2m991[0m │     context: TriggeringContext,
2025-06-04T21:52:29.2545180Z      ╰────
2025-06-04T21:52:29.2545422Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2545429Z 
2025-06-04T21:52:29.2546003Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'context' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2546318Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:991:5]
2025-06-04T21:52:29.2546649Z  [2m990[0m │     vulnerabilities: EmotionalVulnerability[],
2025-06-04T21:52:29.2546819Z  [2m991[0m │     context: TriggeringContext,
2025-06-04T21:52:29.2546971Z      · [38;2;246;87;248m    ───┬───[0m
2025-06-04T21:52:29.2547223Z      ·        [38;2;246;87;248m╰── [38;2;246;87;248m'context' is declared here[0m[0m
2025-06-04T21:52:29.2547355Z  [2m992[0m │   ): string[] {
2025-06-04T21:52:29.2547447Z      ╰────
2025-06-04T21:52:29.2547695Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2547702Z 
2025-06-04T21:52:29.2548275Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'triggers' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2548594Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:998:5]
2025-06-04T21:52:29.2548808Z  [2m997[0m │   private identifyTherapeuticOpportunities(
2025-06-04T21:52:29.2549133Z  [2m998[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2549350Z      · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.2549617Z      ·         [38;2;246;87;248m╰── [38;2;246;87;248m'triggers' is declared here[0m[0m
2025-06-04T21:52:29.2549776Z  [2m999[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2549866Z      ╰────
2025-06-04T21:52:29.2550112Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2550119Z 
2025-06-04T21:52:29.2550742Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionalResponse' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2551061Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:999:5]
2025-06-04T21:52:29.2551385Z  [2m 998[0m │     triggers: EmotionalTrigger[],
2025-06-04T21:52:29.2551561Z  [2m 999[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2551739Z       · [38;2;246;87;248m    ────────┬────────[0m
2025-06-04T21:52:29.2552063Z       ·             [38;2;246;87;248m╰── [38;2;246;87;248m'emotionalResponse' is declared here[0m[0m
2025-06-04T21:52:29.2552239Z  [2m1000[0m │     context: TriggeringContext,
2025-06-04T21:52:29.2552332Z       ╰────
2025-06-04T21:52:29.2552589Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2552596Z 
2025-06-04T21:52:29.2553172Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'context' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.2553495Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/EmotionalTriggeringService.ts[0m:1000:5]
2025-06-04T21:52:29.2553656Z  [2m 999[0m │     emotionalResponse: any,
2025-06-04T21:52:29.2553837Z  [2m1000[0m │     context: TriggeringContext,
2025-06-04T21:52:29.2553996Z       · [38;2;246;87;248m    ───┬───[0m
2025-06-04T21:52:29.2554374Z       ·        [38;2;246;87;248m╰── [38;2;246;87;248m'context' is declared here[0m[0m
2025-06-04T21:52:29.2554514Z  [2m1001[0m │   ): string[] {
2025-06-04T21:52:29.2554613Z       ╰────
2025-06-04T21:52:29.2554864Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.2554871Z 
2025-06-04T21:52:29.2555329Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2555505Z    ╭─[[38;2;92;157;255;1msrc/lib/chat.ts[0m:8:17]
2025-06-04T21:52:29.2555653Z  [2m7[0m │   explanation: string
2025-06-04T21:52:29.2555792Z  [2m8[0m │   expertGuided: any
2025-06-04T21:52:29.2555951Z    · [38;2;246;87;248m                ───[0m
2025-06-04T21:52:29.2556065Z  [2m9[0m │   id: string
2025-06-04T21:52:29.2556157Z    ╰────
2025-06-04T21:52:29.2556681Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2556689Z 
2025-06-04T21:52:29.2557140Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2557327Z     ╭─[[38;2;92;157;255;1msrc/lib/chat.ts[0m:60:15]
2025-06-04T21:52:29.2557520Z  [2m59[0m │ export function createMentalHealthChat(
2025-06-04T21:52:29.2557658Z  [2m60[0m │   fheService: any,
2025-06-04T21:52:29.2557813Z     · [38;2;246;87;248m              ───[0m
2025-06-04T21:52:29.2558013Z  [2m61[0m │   options: MentalHealthChatOptions = {},
2025-06-04T21:52:29.2558106Z     ╰────
2025-06-04T21:52:29.2558609Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2558620Z 
2025-06-04T21:52:29.2559170Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2559402Z     ╭─[[38;2;92;157;255;1msrc/lib/fhe/seal-context.ts[0m:22:17]
2025-06-04T21:52:29.2559567Z  [2m21[0m │ export class SealContext {
2025-06-04T21:52:29.2559705Z  [2m22[0m │   private seal: any
2025-06-04T21:52:29.2559869Z     · [38;2;246;87;248m                ───[0m
2025-06-04T21:52:29.2560008Z  [2m23[0m │   private context: any
2025-06-04T21:52:29.2560102Z     ╰────
2025-06-04T21:52:29.2560602Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2560608Z 
2025-06-04T21:52:29.2561048Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2561258Z     ╭─[[38;2;92;157;255;1msrc/lib/fhe/seal-context.ts[0m:23:20]
2025-06-04T21:52:29.2561404Z  [2m22[0m │   private seal: any
2025-06-04T21:52:29.2561541Z  [2m23[0m │   private context: any
2025-06-04T21:52:29.2561840Z     · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.2562027Z  [2m24[0m │   private encryptionParameters: any
2025-06-04T21:52:29.2562128Z     ╰────
2025-06-04T21:52:29.2562631Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2562638Z 
2025-06-04T21:52:29.2563071Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2563285Z     ╭─[[38;2;92;157;255;1msrc/lib/fhe/seal-context.ts[0m:24:33]
2025-06-04T21:52:29.2563422Z  [2m23[0m │   private context: any
2025-06-04T21:52:29.2563606Z  [2m24[0m │   private encryptionParameters: any
2025-06-04T21:52:29.2563800Z     · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2564026Z  [2m25[0m │   private parameters: SealEncryptionParamsOptions
2025-06-04T21:52:29.2564128Z     ╰────
2025-06-04T21:52:29.2564618Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2564631Z 
2025-06-04T21:52:29.2565208Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2565426Z     ╭─[[38;2;92;157;255;1msrc/lib/fhe/seal-context.ts[0m:79:57]
2025-06-04T21:52:29.2565711Z  [2m78[0m │         logger.debug('Failed to load node-seal package', { error: err })
2025-06-04T21:52:29.2565972Z  [2m79[0m │         if (typeof window !== 'undefined' && (window as any).seal) {
2025-06-04T21:52:29.2566220Z     · [38;2;246;87;248m                                                        ───[0m
2025-06-04T21:52:29.2566409Z  [2m80[0m │           this.seal = (window as any).seal
2025-06-04T21:52:29.2566506Z     ╰────
2025-06-04T21:52:29.2567004Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2567020Z 
2025-06-04T21:52:29.2567470Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2567680Z     ╭─[[38;2;92;157;255;1msrc/lib/fhe/seal-context.ts[0m:80:34]
2025-06-04T21:52:29.2567942Z  [2m79[0m │         if (typeof window !== 'undefined' && (window as any).seal) {
2025-06-04T21:52:29.2568124Z  [2m80[0m │           this.seal = (window as any).seal
2025-06-04T21:52:29.2568326Z     · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.2568529Z  [2m81[0m │           logger.info('Using window.seal instance')
2025-06-04T21:52:29.2568626Z     ╰────
2025-06-04T21:52:29.2569273Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2569281Z 
2025-06-04T21:52:29.2569728Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2569964Z      ╭─[[38;2;92;157;255;1msrc/lib/fhe/seal-context.ts[0m:126:55]
2025-06-04T21:52:29.2570077Z  [2m125[0m │    */
2025-06-04T21:52:29.2570361Z  [2m126[0m │   private mapSecurityLevel(level: SealSecurityLevel): any {
2025-06-04T21:52:29.2570595Z      · [38;2;246;87;248m                                                      ───[0m
2025-06-04T21:52:29.2570739Z  [2m127[0m │     if (!this.seal) {
2025-06-04T21:52:29.2570831Z      ╰────
2025-06-04T21:52:29.2571335Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2571342Z 
2025-06-04T21:52:29.2571777Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2571999Z      ╭─[[38;2;92;157;255;1msrc/lib/fhe/seal-context.ts[0m:146:41]
2025-06-04T21:52:29.2572236Z  [2m145[0m │    */
2025-06-04T21:52:29.2572463Z  [2m146[0m │   private createEncryptionParameters(): any {
2025-06-04T21:52:29.2572684Z      · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.2572825Z  [2m147[0m │     if (!this.seal) {
2025-06-04T21:52:29.2572918Z      ╰────
2025-06-04T21:52:29.2573415Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2573429Z 
2025-06-04T21:52:29.2573863Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2574074Z      ╭─[[38;2;92;157;255;1msrc/lib/fhe/seal-context.ts[0m:206:27]
2025-06-04T21:52:29.2574177Z  [2m205[0m │    */
2025-06-04T21:52:29.2574600Z  [2m206[0m │   public getSealModule(): any { // Ideally, replace 'any' with a more specific SealModule type if available
2025-06-04T21:52:29.2574795Z      · [38;2;246;87;248m                          ───[0m
2025-06-04T21:52:29.2574930Z  [2m207[0m │     if (!this.seal) {
2025-06-04T21:52:29.2575027Z      ╰────
2025-06-04T21:52:29.2575635Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2575644Z 
2025-06-04T21:52:29.2576091Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2576299Z      ╭─[[38;2;92;157;255;1msrc/lib/fhe/seal-context.ts[0m:246:21]
2025-06-04T21:52:29.2576402Z  [2m245[0m │    */
2025-06-04T21:52:29.2576550Z  [2m246[0m │   public getSeal(): any {
2025-06-04T21:52:29.2576754Z      · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.2576916Z  [2m247[0m │     this.checkInitialized()
2025-06-04T21:52:29.2577007Z      ╰────
2025-06-04T21:52:29.2577507Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2577523Z 
2025-06-04T21:52:29.2577963Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2578176Z      ╭─[[38;2;92;157;255;1msrc/lib/fhe/seal-context.ts[0m:254:24]
2025-06-04T21:52:29.2578273Z  [2m253[0m │    */
2025-06-04T21:52:29.2578432Z  [2m254[0m │   public getContext(): any {
2025-06-04T21:52:29.2578649Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.2578849Z  [2m255[0m │     this.checkInitialized()
2025-06-04T21:52:29.2578942Z      ╰────
2025-06-04T21:52:29.2579654Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2579667Z 
2025-06-04T21:52:29.2580111Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2580381Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/services/redis.storage.ts[0m:37:35]
2025-06-04T21:52:29.2580480Z  [2m36[0m │ 
2025-06-04T21:52:29.2580669Z  [2m37[0m │   async get(key: string): Promise<any> {
2025-06-04T21:52:29.2580886Z     · [38;2;246;87;248m                                  ───[0m
2025-06-04T21:52:29.2581058Z  [2m38[0m │     await this.ensureConnection()
2025-06-04T21:52:29.2581156Z     ╰────
2025-06-04T21:52:29.2581684Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2581692Z 
2025-06-04T21:52:29.2582140Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2582390Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/services/redis.storage.ts[0m:43:33]
2025-06-04T21:52:29.2582489Z  [2m42[0m │ 
2025-06-04T21:52:29.2582711Z  [2m43[0m │   async set(key: string, value: any): Promise<void> {
2025-06-04T21:52:29.2583052Z     · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2583228Z  [2m44[0m │     await this.ensureConnection()
2025-06-04T21:52:29.2583320Z     ╰────
2025-06-04T21:52:29.2583840Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2583847Z 
2025-06-04T21:52:29.2584285Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2584641Z      ╭─[[38;2;92;157;255;1msrc/components/notification/NotificationPreferences.tsx[0m:128:64]
2025-06-04T21:52:29.2584838Z  [2m127[0m │             value={preferences.frequency}
2025-06-04T21:52:29.2585157Z  [2m128[0m │             onValueChange={(value) => updateFrequency(value as any)}
2025-06-04T21:52:29.2585403Z      · [38;2;246;87;248m                                                               ───[0m
2025-06-04T21:52:29.2585528Z  [2m129[0m │           >
2025-06-04T21:52:29.2585620Z      ╰────
2025-06-04T21:52:29.2586261Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2586269Z 
2025-06-04T21:52:29.2586748Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2587155Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/plugins/api.ts[0m:15:41]
2025-06-04T21:52:29.2587306Z  [2m14[0m │     events: {
2025-06-04T21:52:29.2587615Z  [2m15[0m │       on(event: string, handler: (data: any) => void): void {
2025-06-04T21:52:29.2587900Z     · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.2588101Z  [2m16[0m │         events.on(event, handler)
2025-06-04T21:52:29.2637635Z     ╰────
2025-06-04T21:52:29.2638309Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2638343Z 
2025-06-04T21:52:29.2638861Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2639323Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/plugins/api.ts[0m:18:42]
2025-06-04T21:52:29.2639457Z  [2m17[0m │       },
2025-06-04T21:52:29.2639728Z  [2m18[0m │       off(event: string, handler: (data: any) => void): void {
2025-06-04T21:52:29.2639957Z     · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.2640136Z  [2m19[0m │         events.off(event, handler)
2025-06-04T21:52:29.2640231Z     ╰────
2025-06-04T21:52:29.2640744Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2640758Z 
2025-06-04T21:52:29.2641226Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2641457Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/plugins/api.ts[0m:21:33]
2025-06-04T21:52:29.2641595Z  [2m20[0m │       },
2025-06-04T21:52:29.2641800Z  [2m21[0m │       emit(event: string, data: any): void {
2025-06-04T21:52:29.2642000Z     · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2642162Z  [2m22[0m │         events.emit(event, data)
2025-06-04T21:52:29.2642253Z     ╰────
2025-06-04T21:52:29.2642757Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2642765Z 
2025-06-04T21:52:29.2643209Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2643441Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/plugins/registry.ts[0m:99:41]
2025-06-04T21:52:29.2643539Z  [2m 98[0m │ 
2025-06-04T21:52:29.2643785Z  [2m 99[0m │   on(event: string, listener: (...args: any[]) => void): void {
2025-06-04T21:52:29.2644198Z      · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.2644391Z  [2m100[0m │     this.events.on(event, listener)
2025-06-04T21:52:29.2644484Z      ╰────
2025-06-04T21:52:29.2644986Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2644994Z 
2025-06-04T21:52:29.2645431Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2645665Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/plugins/registry.ts[0m:103:42]
2025-06-04T21:52:29.2645759Z  [2m102[0m │ 
2025-06-04T21:52:29.2646019Z  [2m103[0m │   off(event: string, listener: (...args: any[]) => void): void {
2025-06-04T21:52:29.2646229Z      · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.2646408Z  [2m104[0m │     this.events.off(event, listener)
2025-06-04T21:52:29.2646508Z      ╰────
2025-06-04T21:52:29.2647121Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2647131Z 
2025-06-04T21:52:29.2647577Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2647797Z     ╭─[[38;2;92;157;255;1msrc/lib/fhe/dynamic-fhe.tsx[0m:67:34]
2025-06-04T21:52:29.2647952Z  [2m66[0m │ export const useFHE = () => {
2025-06-04T21:52:29.2648145Z  [2m67[0m │   const [fhe, setFHE] = useState<any>(null);
2025-06-04T21:52:29.2648341Z     · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.2648544Z  [2m68[0m │   const [loading, setLoading] = useState(true);
2025-06-04T21:52:29.2648636Z     ╰────
2025-06-04T21:52:29.2649255Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2649274Z 
2025-06-04T21:52:29.2649734Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2650031Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/providers/allscripts.provider.ts[0m:116:26]
2025-06-04T21:52:29.2650238Z  [2m115[0m │   private async verifyAllscriptsFeatures(
2025-06-04T21:52:29.2650400Z  [2m116[0m │     capabilityStatement: any,
2025-06-04T21:52:29.2650579Z      · [38;2;246;87;248m                         ───[0m
2025-06-04T21:52:29.2650716Z  [2m117[0m │   ): Promise<void> {
2025-06-04T21:52:29.2650808Z      ╰────
2025-06-04T21:52:29.2651303Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2651310Z 
2025-06-04T21:52:29.2651743Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2652038Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/providers/allscripts.provider.ts[0m:137:13]
2025-06-04T21:52:29.2652275Z  [2m136[0m │     const smartExtension = security.extension?.find(
2025-06-04T21:52:29.2652407Z  [2m137[0m │       (ext: any) =>
2025-06-04T21:52:29.2652554Z      · [38;2;246;87;248m            ───[0m
2025-06-04T21:52:29.2652683Z  [2m138[0m │         ext.url ===
2025-06-04T21:52:29.2652771Z      ╰────
2025-06-04T21:52:29.2653263Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2653270Z 
2025-06-04T21:52:29.2653699Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2653982Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/providers/allscripts.provider.ts[0m:150:15]
2025-06-04T21:52:29.2654222Z  [2m149[0m │       const endpointUrl = smartExtension.extension?.find(
2025-06-04T21:52:29.2654652Z  [2m150[0m │         (ext: any) => ext.url === endpoint,
2025-06-04T21:52:29.2654806Z      · [38;2;246;87;248m              ───[0m
2025-06-04T21:52:29.2654943Z  [2m151[0m │       )?.valueUri
2025-06-04T21:52:29.2655033Z      ╰────
2025-06-04T21:52:29.2655526Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2655535Z 
2025-06-04T21:52:29.2655984Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2656328Z     ╭─[[38;2;92;157;255;1msrc/lib/fhe/examples/parameter-optimization-example.ts[0m:54:33]
2025-06-04T21:52:29.2656427Z  [2m53[0m │ 
2025-06-04T21:52:29.2656616Z  [2m54[0m │   const results: Record<string, any> = {}
2025-06-04T21:52:29.2656813Z     · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2656904Z  [2m55[0m │ 
2025-06-04T21:52:29.2657005Z     ╰────
2025-06-04T21:52:29.2657508Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2657515Z 
2025-06-04T21:52:29.2658068Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2658415Z      ╭─[[38;2;92;157;255;1msrc/lib/fhe/examples/parameter-optimization-example.ts[0m:99:33]
2025-06-04T21:52:29.2658512Z  [2m 98[0m │ 
2025-06-04T21:52:29.2658699Z  [2m 99[0m │   const results: Record<string, any> = {}
2025-06-04T21:52:29.2658892Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2659144Z  [2m100[0m │ 
2025-06-04T21:52:29.2659292Z      ╰────
2025-06-04T21:52:29.2659810Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2659817Z 
2025-06-04T21:52:29.2660272Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2660554Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:48:33]
2025-06-04T21:52:29.2660672Z  [2m47[0m │       vi.spyOn(
2025-06-04T21:52:29.2660857Z  [2m48[0m │         athenahealthProvider as any,
2025-06-04T21:52:29.2661052Z     · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2661206Z  [2m49[0m │         'validateEndpoint',
2025-06-04T21:52:29.2661296Z     ╰────
2025-06-04T21:52:29.2661793Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2661804Z 
2025-06-04T21:52:29.2662237Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2662513Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:54:33]
2025-06-04T21:52:29.2662633Z  [2m53[0m │       vi.spyOn(
2025-06-04T21:52:29.2662806Z  [2m54[0m │         athenahealthProvider as any,
2025-06-04T21:52:29.2663007Z     · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2663193Z  [2m55[0m │         'verifyAthenahealthEndpoints',
2025-06-04T21:52:29.2663290Z     ╰────
2025-06-04T21:52:29.2663784Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2663791Z 
2025-06-04T21:52:29.2664235Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2664500Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:88:40]
2025-06-04T21:52:29.2664734Z  [2m87[0m │         .mockResolvedValue([mockCapabilityStatement])
2025-06-04T21:52:29.2665042Z  [2m88[0m │       vi.spyOn(athenahealthProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2665405Z     · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.2665609Z  [2m89[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2665713Z     ╰────
2025-06-04T21:52:29.2666219Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2666226Z 
2025-06-04T21:52:29.2666676Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2666950Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:104:33]
2025-06-04T21:52:29.2667081Z  [2m103[0m │       vi.spyOn(
2025-06-04T21:52:29.2667267Z  [2m104[0m │         athenahealthProvider as any,
2025-06-04T21:52:29.2667459Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2667618Z  [2m105[0m │         'validateEndpoint',
2025-06-04T21:52:29.2667721Z      ╰────
2025-06-04T21:52:29.2668230Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2668349Z 
2025-06-04T21:52:29.2668802Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2669212Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:116:33]
2025-06-04T21:52:29.2669349Z  [2m115[0m │       vi.spyOn(
2025-06-04T21:52:29.2669537Z  [2m116[0m │         athenahealthProvider as any,
2025-06-04T21:52:29.2669728Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2669888Z  [2m117[0m │         'validateEndpoint',
2025-06-04T21:52:29.2669979Z      ╰────
2025-06-04T21:52:29.2670477Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2670501Z 
2025-06-04T21:52:29.2670939Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2671214Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:122:40]
2025-06-04T21:52:29.2671485Z  [2m121[0m │       const mockSearchResources = vi.fn().mockResolvedValue([])
2025-06-04T21:52:29.2671795Z  [2m122[0m │       vi.spyOn(athenahealthProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2672010Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.2672215Z  [2m123[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2672313Z      ╰────
2025-06-04T21:52:29.2672811Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2672818Z 
2025-06-04T21:52:29.2673262Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2673683Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:134:33]
2025-06-04T21:52:29.2673822Z  [2m133[0m │       vi.spyOn(
2025-06-04T21:52:29.2674000Z  [2m134[0m │         athenahealthProvider as any,
2025-06-04T21:52:29.2674196Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2674346Z  [2m135[0m │         'validateEndpoint',
2025-06-04T21:52:29.2674435Z      ╰────
2025-06-04T21:52:29.2674937Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2674944Z 
2025-06-04T21:52:29.2675373Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2675641Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:175:40]
2025-06-04T21:52:29.2675735Z  [2m174[0m │ 
2025-06-04T21:52:29.2676052Z  [2m175[0m │       vi.spyOn(athenahealthProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2676373Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.2676586Z  [2m176[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2676680Z      ╰────
2025-06-04T21:52:29.2677212Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2677219Z 
2025-06-04T21:52:29.2677651Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2677916Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:187:33]
2025-06-04T21:52:29.2678039Z  [2m186[0m │       vi.spyOn(
2025-06-04T21:52:29.2678219Z  [2m187[0m │         athenahealthProvider as any,
2025-06-04T21:52:29.2678406Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2678566Z  [2m188[0m │         'validateEndpoint',
2025-06-04T21:52:29.2678661Z      ╰────
2025-06-04T21:52:29.2679380Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2679391Z 
2025-06-04T21:52:29.2679857Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2680135Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:193:33]
2025-06-04T21:52:29.2680271Z  [2m192[0m │       vi.spyOn(
2025-06-04T21:52:29.2680455Z  [2m193[0m │         athenahealthProvider as any,
2025-06-04T21:52:29.2680655Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2680846Z  [2m194[0m │         'verifyAthenahealthEndpoints',
2025-06-04T21:52:29.2680943Z      ╰────
2025-06-04T21:52:29.2681446Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2681461Z 
2025-06-04T21:52:29.2681913Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2682182Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:211:40]
2025-06-04T21:52:29.2682282Z  [2m210[0m │ 
2025-06-04T21:52:29.2682591Z  [2m211[0m │       vi.spyOn(athenahealthProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2682803Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.2683010Z  [2m212[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2683102Z      ╰────
2025-06-04T21:52:29.2683612Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2683619Z 
2025-06-04T21:52:29.2684065Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2684498Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:223:33]
2025-06-04T21:52:29.2684629Z  [2m222[0m │       vi.spyOn(
2025-06-04T21:52:29.2684819Z  [2m223[0m │         athenahealthProvider as any,
2025-06-04T21:52:29.2685013Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2685171Z  [2m224[0m │         'validateEndpoint',
2025-06-04T21:52:29.2685260Z      ╰────
2025-06-04T21:52:29.2685760Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2685772Z 
2025-06-04T21:52:29.2686209Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2686483Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:229:33]
2025-06-04T21:52:29.2686616Z  [2m228[0m │       vi.spyOn(
2025-06-04T21:52:29.2686796Z  [2m229[0m │         athenahealthProvider as any,
2025-06-04T21:52:29.2687102Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2687299Z  [2m230[0m │         'verifyAthenahealthEndpoints',
2025-06-04T21:52:29.2687394Z      ╰────
2025-06-04T21:52:29.2687889Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2687896Z 
2025-06-04T21:52:29.2688339Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2688606Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/athenahealth.test.ts[0m:248:40]
2025-06-04T21:52:29.2688705Z  [2m247[0m │ 
2025-06-04T21:52:29.2689125Z  [2m248[0m │       vi.spyOn(athenahealthProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2689360Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.2689567Z  [2m249[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2689663Z      ╰────
2025-06-04T21:52:29.2690167Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2690175Z 
2025-06-04T21:52:29.2690624Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2690861Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/ehr.test.ts[0m:136:32]
2025-06-04T21:52:29.2691101Z  [2m135[0m │       // Mock the base provider's validateEndpoint method
2025-06-04T21:52:29.2691429Z  [2m136[0m │       vi.spyOn(epicProvider as any, 'validateEndpoint').mockResolvedValue(true)
2025-06-04T21:52:29.2691625Z      · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.2691724Z  [2m137[0m │ 
2025-06-04T21:52:29.2691823Z      ╰────
2025-06-04T21:52:29.2692329Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2692343Z 
2025-06-04T21:52:29.2692780Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2693020Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/ehr.test.ts[0m:198:32]
2025-06-04T21:52:29.2693124Z  [2m197[0m │       }
2025-06-04T21:52:29.2693453Z  [2m198[0m │       vi.spyOn(epicProvider as any, 'getClient').mockReturnValue(mockFhirClient)
2025-06-04T21:52:29.2693642Z      · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.2693741Z  [2m199[0m │ 
2025-06-04T21:52:29.2693831Z      ╰────
2025-06-04T21:52:29.2694327Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2694465Z 
2025-06-04T21:52:29.2694909Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2695149Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/ehr.test.ts[0m:214:32]
2025-06-04T21:52:29.2695386Z  [2m213[0m │       // Mock the validateEndpoint method to return false
2025-06-04T21:52:29.2695709Z  [2m214[0m │       vi.spyOn(epicProvider as any, 'validateEndpoint').mockResolvedValue(false)
2025-06-04T21:52:29.2695904Z      · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.2695997Z  [2m215[0m │ 
2025-06-04T21:52:29.2696091Z      ╰────
2025-06-04T21:52:29.2696588Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2696595Z 
2025-06-04T21:52:29.2697148Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.2697455Z     ╭─[[38;2;92;157;255;1msrc/components/demos/DebounceDemoComponent.tsx[0m:53:30]
2025-06-04T21:52:29.2697854Z  [2m52[0m │             <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
2025-06-04T21:52:29.2698059Z  [2m53[0m │               Current value: "{inputValue1}"
2025-06-04T21:52:29.2698247Z     · [38;2;246;87;248m                             ─[0m
2025-06-04T21:52:29.2698382Z  [2m54[0m │             </div>
2025-06-04T21:52:29.2698474Z     ╰────
2025-06-04T21:52:29.2698487Z 
2025-06-04T21:52:29.2699129Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.2699436Z     ╭─[[38;2;92;157;255;1msrc/components/demos/DebounceDemoComponent.tsx[0m:53:44]
2025-06-04T21:52:29.2699716Z  [2m52[0m │             <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
2025-06-04T21:52:29.2699906Z  [2m53[0m │               Current value: "{inputValue1}"
2025-06-04T21:52:29.2700137Z     · [38;2;246;87;248m                                           ─[0m
2025-06-04T21:52:29.2700264Z  [2m54[0m │             </div>
2025-06-04T21:52:29.2700367Z     ╰────
2025-06-04T21:52:29.2700375Z 
2025-06-04T21:52:29.2700910Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.2701212Z     ╭─[[38;2;92;157;255;1msrc/components/demos/DebounceDemoComponent.tsx[0m:95:30]
2025-06-04T21:52:29.2701489Z  [2m94[0m │             <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
2025-06-04T21:52:29.2701682Z  [2m95[0m │               Current value: "{inputValue2}"
2025-06-04T21:52:29.2701858Z     · [38;2;246;87;248m                             ─[0m
2025-06-04T21:52:29.2701989Z  [2m96[0m │             </div>
2025-06-04T21:52:29.2702079Z     ╰────
2025-06-04T21:52:29.2702085Z 
2025-06-04T21:52:29.2702626Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;[0m
2025-06-04T21:52:29.2702920Z     ╭─[[38;2;92;157;255;1msrc/components/demos/DebounceDemoComponent.tsx[0m:95:44]
2025-06-04T21:52:29.2703203Z  [2m94[0m │             <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
2025-06-04T21:52:29.2703391Z  [2m95[0m │               Current value: "{inputValue2}"
2025-06-04T21:52:29.2703611Z     · [38;2;246;87;248m                                           ─[0m
2025-06-04T21:52:29.2703739Z  [2m96[0m │             </div>
2025-06-04T21:52:29.2703830Z     ╰────
2025-06-04T21:52:29.2703837Z 
2025-06-04T21:52:29.2704297Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2704558Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:71:38]
2025-06-04T21:52:29.2704926Z  [2m70[0m │       // Mock the validateEndpoint method to return true
2025-06-04T21:52:29.2705255Z  [2m71[0m │       vi.spyOn(allscriptsProvider as any, 'validateEndpoint').mockResolvedValue(
2025-06-04T21:52:29.2705477Z     · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2705588Z  [2m72[0m │         true,
2025-06-04T21:52:29.2705684Z     ╰────
2025-06-04T21:52:29.2706189Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2706196Z 
2025-06-04T21:52:29.2706642Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2706899Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:77:31]
2025-06-04T21:52:29.2707015Z  [2m76[0m │       vi.spyOn(
2025-06-04T21:52:29.2707192Z  [2m77[0m │         allscriptsProvider as any,
2025-06-04T21:52:29.2707394Z     · [38;2;246;87;248m                              ───[0m
2025-06-04T21:52:29.2707580Z  [2m78[0m │         'verifyAllscriptsEndpoints',
2025-06-04T21:52:29.2707671Z     ╰────
2025-06-04T21:52:29.2708285Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2708294Z 
2025-06-04T21:52:29.2708737Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2709110Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:111:38]
2025-06-04T21:52:29.2709350Z  [2m110[0m │         .mockResolvedValue([mockCapabilityStatement])
2025-06-04T21:52:29.2709657Z  [2m111[0m │       vi.spyOn(allscriptsProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2709864Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2710075Z  [2m112[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2710179Z      ╰────
2025-06-04T21:52:29.2710687Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2710702Z 
2025-06-04T21:52:29.2711150Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2711421Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:126:38]
2025-06-04T21:52:29.2711651Z  [2m125[0m │       // Mock the validateEndpoint method to return false
2025-06-04T21:52:29.2711992Z  [2m126[0m │       vi.spyOn(allscriptsProvider as any, 'validateEndpoint').mockResolvedValue(
2025-06-04T21:52:29.2712197Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2712304Z  [2m127[0m │         false,
2025-06-04T21:52:29.2712406Z      ╰────
2025-06-04T21:52:29.2712904Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2712919Z 
2025-06-04T21:52:29.2713368Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2713629Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:135:38]
2025-06-04T21:52:29.2713861Z  [2m134[0m │       // Mock the validateEndpoint method to return true
2025-06-04T21:52:29.2714196Z  [2m135[0m │       vi.spyOn(allscriptsProvider as any, 'validateEndpoint').mockResolvedValue(
2025-06-04T21:52:29.2714401Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2714509Z  [2m136[0m │         true,
2025-06-04T21:52:29.2714604Z      ╰────
2025-06-04T21:52:29.2715102Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2715109Z 
2025-06-04T21:52:29.2715547Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2715947Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:141:38]
2025-06-04T21:52:29.2716219Z  [2m140[0m │       const mockSearchResources = vi.fn().mockResolvedValue([])
2025-06-04T21:52:29.2716517Z  [2m141[0m │       vi.spyOn(allscriptsProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2716721Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2716930Z  [2m142[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2717023Z      ╰────
2025-06-04T21:52:29.2717524Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2717530Z 
2025-06-04T21:52:29.2717963Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2718234Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:152:38]
2025-06-04T21:52:29.2718605Z  [2m151[0m │       // Mock the validateEndpoint method to return true
2025-06-04T21:52:29.2718947Z  [2m152[0m │       vi.spyOn(allscriptsProvider as any, 'validateEndpoint').mockResolvedValue(
2025-06-04T21:52:29.2719399Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2719522Z  [2m153[0m │         true,
2025-06-04T21:52:29.2719621Z      ╰────
2025-06-04T21:52:29.2720141Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2720149Z 
2025-06-04T21:52:29.2720592Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2720868Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:193:38]
2025-06-04T21:52:29.2721018Z  [2m192[0m │ 
2025-06-04T21:52:29.2721321Z  [2m193[0m │       vi.spyOn(allscriptsProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2721529Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2721740Z  [2m194[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2721830Z      ╰────
2025-06-04T21:52:29.2722328Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2722339Z 
2025-06-04T21:52:29.2722781Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2723038Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:204:38]
2025-06-04T21:52:29.2723272Z  [2m203[0m │       // Mock the validateEndpoint method to return true
2025-06-04T21:52:29.2723599Z  [2m204[0m │       vi.spyOn(allscriptsProvider as any, 'validateEndpoint').mockResolvedValue(
2025-06-04T21:52:29.2723809Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2723916Z  [2m205[0m │         true,
2025-06-04T21:52:29.2724018Z      ╰────
2025-06-04T21:52:29.2724515Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2724522Z 
2025-06-04T21:52:29.2724959Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2725216Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:210:31]
2025-06-04T21:52:29.2725349Z  [2m209[0m │       vi.spyOn(
2025-06-04T21:52:29.2725522Z  [2m210[0m │         allscriptsProvider as any,
2025-06-04T21:52:29.2725716Z      · [38;2;246;87;248m                              ───[0m
2025-06-04T21:52:29.2725900Z  [2m211[0m │         'verifyAllscriptsEndpoints',
2025-06-04T21:52:29.2726132Z      ╰────
2025-06-04T21:52:29.2726636Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2726642Z 
2025-06-04T21:52:29.2727082Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2727346Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:228:38]
2025-06-04T21:52:29.2727440Z  [2m227[0m │ 
2025-06-04T21:52:29.2727744Z  [2m228[0m │       vi.spyOn(allscriptsProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2727943Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2728150Z  [2m229[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2728240Z      ╰────
2025-06-04T21:52:29.2728737Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2728752Z 
2025-06-04T21:52:29.2729385Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2729786Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:239:38]
2025-06-04T21:52:29.2730026Z  [2m238[0m │       // Mock the validateEndpoint method to return true
2025-06-04T21:52:29.2730362Z  [2m239[0m │       vi.spyOn(allscriptsProvider as any, 'validateEndpoint').mockResolvedValue(
2025-06-04T21:52:29.2730561Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2730667Z  [2m240[0m │         true,
2025-06-04T21:52:29.2730763Z      ╰────
2025-06-04T21:52:29.2731258Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2731265Z 
2025-06-04T21:52:29.2731702Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2731971Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:245:31]
2025-06-04T21:52:29.2732104Z  [2m244[0m │       vi.spyOn(
2025-06-04T21:52:29.2732287Z  [2m245[0m │         allscriptsProvider as any,
2025-06-04T21:52:29.2732482Z      · [38;2;246;87;248m                              ───[0m
2025-06-04T21:52:29.2732669Z  [2m246[0m │         'verifyAllscriptsEndpoints',
2025-06-04T21:52:29.2732762Z      ╰────
2025-06-04T21:52:29.2733254Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2733261Z 
2025-06-04T21:52:29.2733696Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2733951Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:264:38]
2025-06-04T21:52:29.2734048Z  [2m263[0m │ 
2025-06-04T21:52:29.2734350Z  [2m264[0m │       vi.spyOn(allscriptsProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2734551Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2734760Z  [2m265[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2734850Z      ╰────
2025-06-04T21:52:29.2735348Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2735355Z 
2025-06-04T21:52:29.2735784Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2736040Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:336:38]
2025-06-04T21:52:29.2736141Z  [2m335[0m │       }
2025-06-04T21:52:29.2736433Z  [2m336[0m │       vi.spyOn(allscriptsProvider as any, 'getClient').mockReturnValue(
2025-06-04T21:52:29.2736628Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2736897Z  [2m337[0m │         mockFhirClient,
2025-06-04T21:52:29.2736987Z      ╰────
2025-06-04T21:52:29.2737492Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2737499Z 
2025-06-04T21:52:29.2737930Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2738190Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:366:38]
2025-06-04T21:52:29.2738289Z  [2m365[0m │       }
2025-06-04T21:52:29.2738578Z  [2m366[0m │       vi.spyOn(allscriptsProvider as any, 'getClient').mockReturnValue(
2025-06-04T21:52:29.2738788Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2738927Z  [2m367[0m │         mockFhirClient,
2025-06-04T21:52:29.2739124Z      ╰────
2025-06-04T21:52:29.2739619Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2739634Z 
2025-06-04T21:52:29.2740183Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2740448Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:389:38]
2025-06-04T21:52:29.2740553Z  [2m388[0m │       }
2025-06-04T21:52:29.2740838Z  [2m389[0m │       vi.spyOn(allscriptsProvider as any, 'getClient').mockReturnValue(
2025-06-04T21:52:29.2741037Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2741178Z  [2m390[0m │         mockFhirClient,
2025-06-04T21:52:29.2741269Z      ╰────
2025-06-04T21:52:29.2741759Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2741765Z 
2025-06-04T21:52:29.2742196Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2742463Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:410:38]
2025-06-04T21:52:29.2742566Z  [2m409[0m │       }
2025-06-04T21:52:29.2742846Z  [2m410[0m │       vi.spyOn(allscriptsProvider as any, 'getClient').mockReturnValue(
2025-06-04T21:52:29.2743039Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2743178Z  [2m411[0m │         mockFhirClient,
2025-06-04T21:52:29.2743267Z      ╰────
2025-06-04T21:52:29.2743759Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2743765Z 
2025-06-04T21:52:29.2744193Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2744451Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/allscripts.test.ts[0m:429:38]
2025-06-04T21:52:29.2744556Z  [2m428[0m │       }
2025-06-04T21:52:29.2744843Z  [2m429[0m │       vi.spyOn(allscriptsProvider as any, 'getClient').mockReturnValue(
2025-06-04T21:52:29.2745045Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2745186Z  [2m430[0m │         mockFhirClient,
2025-06-04T21:52:29.2745274Z      ╰────
2025-06-04T21:52:29.2745767Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2745774Z 
2025-06-04T21:52:29.2746201Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2746446Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/cerner.test.ts[0m:42:34]
2025-06-04T21:52:29.2746667Z  [2m41[0m │       // Mock the validateEndpoint method to return true
2025-06-04T21:52:29.2746971Z  [2m42[0m │       vi.spyOn(cernerProvider as any, 'validateEndpoint').mockResolvedValue(
2025-06-04T21:52:29.2747295Z     · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.2747402Z  [2m43[0m │         true,
2025-06-04T21:52:29.2747506Z     ╰────
2025-06-04T21:52:29.2748002Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2748009Z 
2025-06-04T21:52:29.2748447Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2748684Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/cerner.test.ts[0m:48:27]
2025-06-04T21:52:29.2748802Z  [2m47[0m │       vi.spyOn(
2025-06-04T21:52:29.2748962Z  [2m48[0m │         cernerProvider as any,
2025-06-04T21:52:29.2749254Z     · [38;2;246;87;248m                          ───[0m
2025-06-04T21:52:29.2749421Z  [2m49[0m │         'verifyCernerEndpoints',
2025-06-04T21:52:29.2749523Z     ╰────
2025-06-04T21:52:29.2750016Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2750023Z 
2025-06-04T21:52:29.2750580Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2750895Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/cerner.test.ts[0m:56:34]
2025-06-04T21:52:29.2751175Z  [2m55[0m │         .mockResolvedValue([{ resourceType: 'CapabilityStatement' }])
2025-06-04T21:52:29.2751449Z  [2m56[0m │       vi.spyOn(cernerProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2751644Z     · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.2751849Z  [2m57[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2751937Z     ╰────
2025-06-04T21:52:29.2752434Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2752449Z 
2025-06-04T21:52:29.2752888Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2753125Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/cerner.test.ts[0m:71:34]
2025-06-04T21:52:29.2753348Z  [2m70[0m │       // Mock the validateEndpoint method to return false
2025-06-04T21:52:29.2753655Z  [2m71[0m │       vi.spyOn(cernerProvider as any, 'validateEndpoint').mockResolvedValue(
2025-06-04T21:52:29.2753845Z     · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.2753956Z  [2m72[0m │         false,
2025-06-04T21:52:29.2754044Z     ╰────
2025-06-04T21:52:29.2754533Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2754543Z 
2025-06-04T21:52:29.2754972Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2755324Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/cerner.test.ts[0m:80:34]
2025-06-04T21:52:29.2755553Z  [2m79[0m │       // Mock the validateEndpoint method to return true
2025-06-04T21:52:29.2755852Z  [2m80[0m │       vi.spyOn(cernerProvider as any, 'validateEndpoint').mockResolvedValue(
2025-06-04T21:52:29.2756046Z     · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.2756151Z  [2m81[0m │         true,
2025-06-04T21:52:29.2756241Z     ╰────
2025-06-04T21:52:29.2756731Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2756738Z 
2025-06-04T21:52:29.2757173Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2757401Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/cerner.test.ts[0m:86:34]
2025-06-04T21:52:29.2757671Z  [2m85[0m │       const mockSearchResources = vi.fn().mockResolvedValue([])
2025-06-04T21:52:29.2758019Z  [2m86[0m │       vi.spyOn(cernerProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2758217Z     · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.2758416Z  [2m87[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2758508Z     ╰────
2025-06-04T21:52:29.2759127Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2759135Z 
2025-06-04T21:52:29.2759581Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2759813Z     ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/cerner.test.ts[0m:97:34]
2025-06-04T21:52:29.2760038Z  [2m96[0m │       // Mock the validateEndpoint method to return true
2025-06-04T21:52:29.2760348Z  [2m97[0m │       vi.spyOn(cernerProvider as any, 'validateEndpoint').mockResolvedValue(
2025-06-04T21:52:29.2760537Z     · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.2760652Z  [2m98[0m │         true,
2025-06-04T21:52:29.2760741Z     ╰────
2025-06-04T21:52:29.2761241Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2761248Z 
2025-06-04T21:52:29.2761681Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2761927Z      ╭─[[38;2;92;157;255;1msrc/lib/ehr/__tests__/cerner.test.ts[0m:112:34]
2025-06-04T21:52:29.2762023Z  [2m111[0m │ 
2025-06-04T21:52:29.2762302Z  [2m112[0m │       vi.spyOn(cernerProvider as any, 'getClient').mockReturnValue({
2025-06-04T21:52:29.2762498Z      · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.2762712Z  [2m113[0m │         searchResources: mockSearchResources,
2025-06-04T21:52:29.2762802Z      ╰────
2025-06-04T21:52:29.2763299Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2763310Z 
2025-06-04T21:52:29.2763740Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2763926Z     ╭─[[38;2;92;157;255;1msrc/lib/redis.ts[0m:31:39]
2025-06-04T21:52:29.2764101Z  [2m30[0m │     get: async (_key: string) => null,
2025-06-04T21:52:29.2764356Z  [2m31[0m │     set: async (_key: string, _value: any, _options?: any) => 'OK',
2025-06-04T21:52:29.2764563Z     · [38;2;246;87;248m                                      ───[0m
2025-06-04T21:52:29.2764731Z  [2m32[0m │     del: async (_key: string) => 1,
2025-06-04T21:52:29.2764825Z     ╰────
2025-06-04T21:52:29.2765315Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2765449Z 
2025-06-04T21:52:29.2765904Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2766082Z     ╭─[[38;2;92;157;255;1msrc/lib/redis.ts[0m:31:55]
2025-06-04T21:52:29.2766256Z  [2m30[0m │     get: async (_key: string) => null,
2025-06-04T21:52:29.2766506Z  [2m31[0m │     set: async (_key: string, _value: any, _options?: any) => 'OK',
2025-06-04T21:52:29.2766739Z     · [38;2;246;87;248m                                                      ───[0m
2025-06-04T21:52:29.2766906Z  [2m32[0m │     del: async (_key: string) => 1,
2025-06-04T21:52:29.2766999Z     ╰────
2025-06-04T21:52:29.2767490Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2767497Z 
2025-06-04T21:52:29.2767929Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2768108Z     ╭─[[38;2;92;157;255;1msrc/lib/redis.ts[0m:36:56]
2025-06-04T21:52:29.2768439Z  [2m35[0m │     expire: async (_key: string, _seconds: number) => 1,
2025-06-04T21:52:29.2768702Z  [2m36[0m │     hset: async (_key: string, _field: string, _value: any) => 1,
2025-06-04T21:52:29.2768934Z     · [38;2;246;87;248m                                                       ───[0m
2025-06-04T21:52:29.2769252Z  [2m37[0m │     hget: async (_key: string, _field: string) => null,
2025-06-04T21:52:29.2769344Z     ╰────
2025-06-04T21:52:29.2769836Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2769843Z 
2025-06-04T21:52:29.2770270Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2770454Z     ╭─[[38;2;92;157;255;1msrc/lib/redis.ts[0m:57:33]
2025-06-04T21:52:29.2770551Z  [2m56[0m │     })
2025-06-04T21:52:29.2770733Z  [2m57[0m │   : (createMockRedisClient() as any)
2025-06-04T21:52:29.2770933Z     · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2771028Z  [2m58[0m │ 
2025-06-04T21:52:29.2771115Z     ╰────
2025-06-04T21:52:29.2771613Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2771622Z 
2025-06-04T21:52:29.2772057Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2772233Z     ╭─[[38;2;92;157;255;1msrc/lib/redis.ts[0m:76:10]
2025-06-04T21:52:29.2772346Z  [2m75[0m │   key: string,
2025-06-04T21:52:29.2772451Z  [2m76[0m │   value: any,
2025-06-04T21:52:29.2772598Z     · [38;2;246;87;248m         ───[0m
2025-06-04T21:52:29.2772766Z  [2m77[0m │   expirationSeconds?: number,
2025-06-04T21:52:29.2772856Z     ╰────
2025-06-04T21:52:29.2773356Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2773363Z 
2025-06-04T21:52:29.2773803Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2773990Z      ╭─[[38;2;92;157;255;1msrc/lib/redis.ts[0m:120:13]
2025-06-04T21:52:29.2774198Z  [2m119[0m │   status: 'healthy' | 'degraded' | 'unhealthy'
2025-06-04T21:52:29.2774326Z  [2m120[0m │   details?: any
2025-06-04T21:52:29.2774475Z      · [38;2;246;87;248m            ───[0m
2025-06-04T21:52:29.2774573Z  [2m121[0m │ }> {
2025-06-04T21:52:29.2774662Z      ╰────
2025-06-04T21:52:29.2775156Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2775303Z 
2025-06-04T21:52:29.2775853Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;[0m
2025-06-04T21:52:29.2776100Z      ╭─[[38;2;92;157;255;1msrc/components/auth/LoginForm.tsx[0m:271:74]
2025-06-04T21:52:29.2776209Z  [2m270[0m │         <p>
2025-06-04T21:52:29.2776514Z  [2m271[0m │           Check your email for a link to reset your password. If it doesn't
2025-06-04T21:52:29.2776800Z      · [38;2;246;87;248m                                                                         ─[0m
2025-06-04T21:52:29.2777052Z  [2m272[0m │           appear within a few minutes, check your spam folder.
2025-06-04T21:52:29.2777143Z      ╰────
2025-06-04T21:52:29.2777150Z 
2025-06-04T21:52:29.2777694Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;[0m
2025-06-04T21:52:29.2777926Z      ╭─[[38;2;92;157;255;1msrc/components/auth/LoginForm.tsx[0m:426:16]
2025-06-04T21:52:29.2778044Z  [2m425[0m │           >
2025-06-04T21:52:29.2778234Z  [2m426[0m │             Don't have an account? Sign up
2025-06-04T21:52:29.2778497Z      · [38;2;246;87;248m               ─[0m
2025-06-04T21:52:29.2778637Z  [2m427[0m │           </button>
2025-06-04T21:52:29.2778728Z      ╰────
2025-06-04T21:52:29.2778735Z 
2025-06-04T21:52:29.2779285Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2779522Z      ╭─[[38;2;92;157;255;1msrc/lib/scripts/blog-publisher.ts[0m:160:37]
2025-06-04T21:52:29.2779704Z  [2m159[0m │   // Create a map of series to posts
2025-06-04T21:52:29.2779903Z  [2m160[0m │   const seriesMap = new Map<string, any[]>()
2025-06-04T21:52:29.2780114Z      · [38;2;246;87;248m                                    ───[0m
2025-06-04T21:52:29.2780206Z  [2m161[0m │ 
2025-06-04T21:52:29.2780299Z      ╰────
2025-06-04T21:52:29.2780813Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2780820Z 
2025-06-04T21:52:29.2781270Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2781489Z      ╭─[[38;2;92;157;255;1msrc/lib/monitoring/service.ts[0m:194:47]
2025-06-04T21:52:29.2781581Z  [2m193[0m │ 
2025-06-04T21:52:29.2781840Z  [2m194[0m │   private checkPerformanceThresholds(metrics: any): void {
2025-06-04T21:52:29.2782057Z      · [38;2;246;87;248m                                              ───[0m
2025-06-04T21:52:29.2782299Z  [2m195[0m │     const { slowRequestThreshold } = this.config.metrics
2025-06-04T21:52:29.2782387Z      ╰────
2025-06-04T21:52:29.2782884Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2782900Z 
2025-06-04T21:52:29.2783331Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2783556Z      ╭─[[38;2;92;157;255;1msrc/lib/monitoring/service.ts[0m:249:50]
2025-06-04T21:52:29.2783648Z  [2m248[0m │ 
2025-06-04T21:52:29.2783951Z  [2m249[0m │   private async triggerAlert(type: string, data: any): Promise<void> {
2025-06-04T21:52:29.2784174Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.2784378Z  [2m250[0m │     if (!this.config.alerts.enableAlerts) {
2025-06-04T21:52:29.2784468Z      ╰────
2025-06-04T21:52:29.2784966Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2784977Z 
2025-06-04T21:52:29.2785409Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2785754Z     ╭─[[38;2;92;157;255;1msrc/lib/monitoring/hooks.ts[0m:14:53]
2025-06-04T21:52:29.2785930Z  [2m13[0m │   const trackEvent = useCallback(
2025-06-04T21:52:29.2786196Z  [2m14[0m │     (eventName: string, properties?: Record<string, any>) => {
2025-06-04T21:52:29.2786429Z     · [38;2;246;87;248m                                                    ───[0m
2025-06-04T21:52:29.2786638Z  [2m15[0m │       // @ts-expect-error - Faro is loaded globally
2025-06-04T21:52:29.2786730Z     ╰────
2025-06-04T21:52:29.2787226Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2787233Z 
2025-06-04T21:52:29.2787668Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2787874Z     ╭─[[38;2;92;157;255;1msrc/lib/monitoring/hooks.ts[0m:25:45]
2025-06-04T21:52:29.2788040Z  [2m24[0m │   const trackError = useCallback(
2025-06-04T21:52:29.2788267Z  [2m25[0m │     (error: Error, context?: Record<string, any>) => {
2025-06-04T21:52:29.2788483Z     · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.2788798Z  [2m26[0m │       // @ts-expect-error - Faro is loaded globally
2025-06-04T21:52:29.2788896Z     ╰────
2025-06-04T21:52:29.2789500Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2789508Z 
2025-06-04T21:52:29.2789948Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2790152Z     ╭─[[38;2;92;157;255;1msrc/lib/monitoring/hooks.ts[0m:51:64]
2025-06-04T21:52:29.2790349Z  [2m50[0m │   const trackUserInteraction = useCallback(
2025-06-04T21:52:29.2790640Z  [2m51[0m │     (element: string, action: string, details?: Record<string, any>) => {
2025-06-04T21:52:29.2790894Z     · [38;2;246;87;248m                                                               ───[0m
2025-06-04T21:52:29.2791076Z  [2m52[0m │       trackEvent('user_interaction', {
2025-06-04T21:52:29.2791165Z     ╰────
2025-06-04T21:52:29.2791673Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2791680Z 
2025-06-04T21:52:29.2792110Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2792319Z     ╭─[[38;2;92;157;255;1msrc/lib/monitoring/hooks.ts[0m:64:64]
2025-06-04T21:52:29.2792493Z  [2m63[0m │   const trackPageView = useCallback(
2025-06-04T21:52:29.2792777Z  [2m64[0m │     (path: string, referrer?: string, details?: Record<string, any>) => {
2025-06-04T21:52:29.2793015Z     · [38;2;246;87;248m                                                               ───[0m
2025-06-04T21:52:29.2793178Z  [2m65[0m │       trackEvent('page_view', {
2025-06-04T21:52:29.2793278Z     ╰────
2025-06-04T21:52:29.2793777Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2793787Z 
2025-06-04T21:52:29.2794223Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'ChallengePrediction' is imported but never used.[0m
2025-06-04T21:52:29.2794645Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/services/__tests__/ComprehensiveOutcomePredictionService.test.ts[0m:15:8]
2025-06-04T21:52:29.2794822Z  [2m14[0m │   type TreatmentOutcomePrediction,
2025-06-04T21:52:29.2794973Z  [2m15[0m │   type ChallengePrediction,
2025-06-04T21:52:29.2795153Z     · [38;2;246;87;248m       ─────────┬─────────[0m
2025-06-04T21:52:29.2795466Z     ·                 [38;2;246;87;248m╰── [38;2;246;87;248m'ChallengePrediction' is imported here[0m[0m
2025-06-04T21:52:29.2795618Z  [2m16[0m │   type PredictionReport,
2025-06-04T21:52:29.2795872Z     ╰────
2025-06-04T21:52:29.2796117Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.2796124Z 
2025-06-04T21:52:29.2796556Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'PredictionReport' is imported but never used.[0m
2025-06-04T21:52:29.2796975Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/services/__tests__/ComprehensiveOutcomePredictionService.test.ts[0m:16:8]
2025-06-04T21:52:29.2797127Z  [2m15[0m │   type ChallengePrediction,
2025-06-04T21:52:29.2797272Z  [2m16[0m │   type PredictionReport,
2025-06-04T21:52:29.2797446Z     · [38;2;246;87;248m       ────────┬───────[0m
2025-06-04T21:52:29.2797748Z     ·                [38;2;246;87;248m╰── [38;2;246;87;248m'PredictionReport' is imported here[0m[0m
2025-06-04T21:52:29.2797889Z  [2m17[0m │   type OutcomeMetrics,
2025-06-04T21:52:29.2797980Z     ╰────
2025-06-04T21:52:29.2798215Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.2798222Z 
2025-06-04T21:52:29.2798668Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2799164Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:102:33]
2025-06-04T21:52:29.2799402Z  [2m101[0m │       const result = await verifyServerAuth({
2025-06-04T21:52:29.2799587Z  [2m102[0m │         cookies: mockCookies as any,
2025-06-04T21:52:29.2799785Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2799943Z  [2m103[0m │         request: mockRequest,
2025-06-04T21:52:29.2800032Z      ╰────
2025-06-04T21:52:29.2800548Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2800556Z 
2025-06-04T21:52:29.2801000Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2801282Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:120:33]
2025-06-04T21:52:29.2801483Z  [2m119[0m │       const result = await verifyServerAuth({
2025-06-04T21:52:29.2801664Z  [2m120[0m │         cookies: mockCookies as any,
2025-06-04T21:52:29.2801857Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2802008Z  [2m121[0m │         request: mockRequest,
2025-06-04T21:52:29.2802099Z      ╰────
2025-06-04T21:52:29.2802600Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2802607Z 
2025-06-04T21:52:29.2803044Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2803303Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:134:63]
2025-06-04T21:52:29.2803547Z  [2m133[0m │       vi.mocked(isAuthenticated).mockResolvedValue(true)
2025-06-04T21:52:29.2803818Z  [2m134[0m │       vi.mocked(getCurrentUser).mockResolvedValue(mockUser as any)
2025-06-04T21:52:29.2804079Z      · [38;2;246;87;248m                                                              ───[0m
2025-06-04T21:52:29.2804174Z  [2m135[0m │ 
2025-06-04T21:52:29.2804266Z      ╰────
2025-06-04T21:52:29.2804763Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2804770Z 
2025-06-04T21:52:29.2805217Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2805480Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:138:33]
2025-06-04T21:52:29.2805685Z  [2m137[0m │       const result = await verifyServerAuth({
2025-06-04T21:52:29.2805857Z  [2m138[0m │         cookies: mockCookies as any,
2025-06-04T21:52:29.2806048Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2806334Z  [2m139[0m │         request: mockRequest,
2025-06-04T21:52:29.2806424Z      ╰────
2025-06-04T21:52:29.2806926Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2806933Z 
2025-06-04T21:52:29.2807365Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2807624Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:155:12]
2025-06-04T21:52:29.2807758Z  [2m154[0m │         role: 'user',
2025-06-04T21:52:29.2807888Z  [2m155[0m │       } as any)
2025-06-04T21:52:29.2808037Z      · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.2808133Z  [2m156[0m │ 
2025-06-04T21:52:29.2808223Z      ╰────
2025-06-04T21:52:29.2808710Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2808729Z 
2025-06-04T21:52:29.2809267Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2809644Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:159:33]
2025-06-04T21:52:29.2809859Z  [2m158[0m │       const result = await verifyServerAuth({
2025-06-04T21:52:29.2810032Z  [2m159[0m │         cookies: mockCookies as any,
2025-06-04T21:52:29.2810226Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2810385Z  [2m160[0m │         request: mockRequest,
2025-06-04T21:52:29.2810479Z      ╰────
2025-06-04T21:52:29.2810974Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2810981Z 
2025-06-04T21:52:29.2811421Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2811686Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:179:63]
2025-06-04T21:52:29.2811933Z  [2m178[0m │       vi.mocked(isAuthenticated).mockResolvedValue(true)
2025-06-04T21:52:29.2812195Z  [2m179[0m │       vi.mocked(getCurrentUser).mockResolvedValue(mockUser as any)
2025-06-04T21:52:29.2812440Z      · [38;2;246;87;248m                                                              ───[0m
2025-06-04T21:52:29.2812532Z  [2m180[0m │ 
2025-06-04T21:52:29.2812620Z      ╰────
2025-06-04T21:52:29.2813115Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2813121Z 
2025-06-04T21:52:29.2813553Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2813813Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:191:33]
2025-06-04T21:52:29.2814019Z  [2m190[0m │       const result = await verifyServerAuth({
2025-06-04T21:52:29.2814193Z  [2m191[0m │         cookies: mockCookies as any,
2025-06-04T21:52:29.2814387Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2814540Z  [2m192[0m │         request: mockRequest,
2025-06-04T21:52:29.2814630Z      ╰────
2025-06-04T21:52:29.2815126Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2815133Z 
2025-06-04T21:52:29.2815566Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2815827Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:218:63]
2025-06-04T21:52:29.2816060Z  [2m217[0m │       vi.mocked(isAuthenticated).mockResolvedValue(true)
2025-06-04T21:52:29.2816324Z  [2m218[0m │       vi.mocked(getCurrentUser).mockResolvedValue(mockUser as any)
2025-06-04T21:52:29.2816684Z      · [38;2;246;87;248m                                                              ───[0m
2025-06-04T21:52:29.2816781Z  [2m219[0m │ 
2025-06-04T21:52:29.2816868Z      ╰────
2025-06-04T21:52:29.2817437Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2817448Z 
2025-06-04T21:52:29.2817884Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2818140Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:230:33]
2025-06-04T21:52:29.2818343Z  [2m229[0m │       const result = await verifyServerAuth({
2025-06-04T21:52:29.2818511Z  [2m230[0m │         cookies: mockCookies as any,
2025-06-04T21:52:29.2818700Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2818851Z  [2m231[0m │         request: mockRequest,
2025-06-04T21:52:29.2818950Z      ╰────
2025-06-04T21:52:29.2819547Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2819555Z 
2025-06-04T21:52:29.2819998Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2820256Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:259:63]
2025-06-04T21:52:29.2820490Z  [2m258[0m │       vi.mocked(isAuthenticated).mockResolvedValue(true)
2025-06-04T21:52:29.2820750Z  [2m259[0m │       vi.mocked(getCurrentUser).mockResolvedValue(mockUser as any)
2025-06-04T21:52:29.2820991Z      · [38;2;246;87;248m                                                              ───[0m
2025-06-04T21:52:29.2821082Z  [2m260[0m │ 
2025-06-04T21:52:29.2821170Z      ╰────
2025-06-04T21:52:29.2821668Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2821683Z 
2025-06-04T21:52:29.2822123Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2822386Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:280:53]
2025-06-04T21:52:29.2822628Z  [2m279[0m │       const apiRoute = protectedHandler(mockRouteHandler)
2025-06-04T21:52:29.2822857Z  [2m280[0m │       const result = await apiRoute(astroContext as any)
2025-06-04T21:52:29.2823083Z      · [38;2;246;87;248m                                                    ───[0m
2025-06-04T21:52:29.2823178Z  [2m281[0m │ 
2025-06-04T21:52:29.2823266Z      ╰────
2025-06-04T21:52:29.2823758Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2823764Z 
2025-06-04T21:52:29.2824198Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2824591Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:305:55]
2025-06-04T21:52:29.2824838Z  [2m304[0m │       const apiRoute = protectedHandler(mockRouteHandler)
2025-06-04T21:52:29.2825079Z  [2m305[0m │       const response = await apiRoute(astroContext as any)
2025-06-04T21:52:29.2825307Z      · [38;2;246;87;248m                                                      ───[0m
2025-06-04T21:52:29.2825403Z  [2m306[0m │ 
2025-06-04T21:52:29.2825492Z      ╰────
2025-06-04T21:52:29.2825983Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2825995Z 
2025-06-04T21:52:29.2826425Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2826681Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:325:12]
2025-06-04T21:52:29.2826829Z  [2m324[0m │         role: 'user',
2025-06-04T21:52:29.2826954Z  [2m325[0m │       } as any)
2025-06-04T21:52:29.2827219Z      · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.2827319Z  [2m326[0m │ 
2025-06-04T21:52:29.2827416Z      ╰────
2025-06-04T21:52:29.2827910Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2827916Z 
2025-06-04T21:52:29.2828354Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2828611Z      ╭─[[38;2;92;157;255;1msrc/lib/auth/__tests__/serverAuth.test.ts[0m:342:55]
2025-06-04T21:52:29.2828852Z  [2m341[0m │       const apiRoute = protectedHandler(mockRouteHandler)
2025-06-04T21:52:29.2829191Z  [2m342[0m │       const response = await apiRoute(astroContext as any)
2025-06-04T21:52:29.2829431Z      · [38;2;246;87;248m                                                      ───[0m
2025-06-04T21:52:29.2829537Z  [2m343[0m │ 
2025-06-04T21:52:29.2829630Z      ╰────
2025-06-04T21:52:29.2830133Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2830140Z 
2025-06-04T21:52:29.2830570Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2830934Z    ╭─[[38;2;92;157;255;1msrc/lib/ai/services/__tests__/PersonalizationLayerFactory.test.ts[0m:8:6]
2025-06-04T21:52:29.2831090Z  [2m7[0m │   getClientProfile: vi.fn(),
2025-06-04T21:52:29.2831194Z  [2m8[0m │ } as any
2025-06-04T21:52:29.2831333Z    · [38;2;246;87;248m     ───[0m
2025-06-04T21:52:29.2831428Z  [2m9[0m │ 
2025-06-04T21:52:29.2831515Z    ╰────
2025-06-04T21:52:29.2832008Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2832029Z 
2025-06-04T21:52:29.2832468Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2832836Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/services/__tests__/PersonalizationLayerFactory.test.ts[0m:13:6]
2025-06-04T21:52:29.2833023Z  [2m12[0m │   trackTechniqueAdaptation: vi.fn(),
2025-06-04T21:52:29.2833124Z  [2m13[0m │ } as any
2025-06-04T21:52:29.2833265Z     · [38;2;246;87;248m     ───[0m
2025-06-04T21:52:29.2833357Z  [2m14[0m │ 
2025-06-04T21:52:29.2833450Z     ╰────
2025-06-04T21:52:29.2833941Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2833947Z 
2025-06-04T21:52:29.2834380Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2834737Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/services/__tests__/PersonalizationLayerFactory.test.ts[0m:18:6]
2025-06-04T21:52:29.2834984Z  [2m17[0m │   set: vi.fn(),
2025-06-04T21:52:29.2835084Z  [2m18[0m │ } as any
2025-06-04T21:52:29.2835231Z     · [38;2;246;87;248m     ───[0m
2025-06-04T21:52:29.2835322Z  [2m19[0m │ 
2025-06-04T21:52:29.2835414Z     ╰────
2025-06-04T21:52:29.2835909Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2835916Z 
2025-06-04T21:52:29.2836345Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2836608Z     ╭─[[38;2;92;157;255;1msrc/lib/security/breach-notification.ts[0m:21:29]
2025-06-04T21:52:29.2836771Z  [2m20[0m │   priority?: 'normal' | 'urgent'
2025-06-04T21:52:29.2836934Z  [2m21[0m │   metadata?: Record<string, any>
2025-06-04T21:52:29.2837118Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.2837226Z  [2m22[0m │ }
2025-06-04T21:52:29.2837314Z     ╰────
2025-06-04T21:52:29.2837920Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2837928Z 
2025-06-04T21:52:29.2838366Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2838636Z      ╭─[[38;2;92;157;255;1msrc/lib/security/breach-notification.ts[0m:405:15]
2025-06-04T21:52:29.2838771Z  [2m404[0m │     breachId: string,
2025-06-04T21:52:29.2838904Z  [2m405[0m │     scenario: any,
2025-06-04T21:52:29.2839165Z      · [38;2;246;87;248m              ───[0m
2025-06-04T21:52:29.2839306Z  [2m406[0m │   ): Promise<void> {
2025-06-04T21:52:29.2839402Z      ╰────
2025-06-04T21:52:29.2839895Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2839912Z 
2025-06-04T21:52:29.2840348Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2840614Z      ╭─[[38;2;92;157;255;1msrc/lib/security/breach-notification.ts[0m:479:48]
2025-06-04T21:52:29.2840712Z  [2m478[0m │ 
2025-06-04T21:52:29.2840951Z  [2m479[0m │   static async getTrainingMaterials(): Promise<any> {
2025-06-04T21:52:29.2841173Z      · [38;2;246;87;248m                                               ───[0m
2025-06-04T21:52:29.2841278Z  [2m480[0m │     try {
2025-06-04T21:52:29.2841368Z      ╰────
2025-06-04T21:52:29.2841898Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2841909Z 
2025-06-04T21:52:29.2842686Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2843011Z     ╭─[[38;2;92;157;255;1msrc/lib/security/anonymizationPipeline.ts[0m:15:42]
2025-06-04T21:52:29.2843121Z  [2m14[0m │ // Types
2025-06-04T21:52:29.2843359Z  [2m15[0m │ export interface AnonymizationResult<T = any> {
2025-06-04T21:52:29.2843574Z     · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.2843710Z  [2m16[0m │   anonymized: T;
2025-06-04T21:52:29.2843799Z     ╰────
2025-06-04T21:52:29.2844300Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2844307Z 
2025-06-04T21:52:29.2844745Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2845019Z     ╭─[[38;2;92;157;255;1msrc/lib/security/anonymizationPipeline.ts[0m:43:41]
2025-06-04T21:52:29.2845115Z  [2m42[0m │  */
2025-06-04T21:52:29.2845326Z  [2m43[0m │ export async function anonymizeData<T = any>(
2025-06-04T21:52:29.2845697Z     · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.2845838Z  [2m44[0m │   input: string | T,
2025-06-04T21:52:29.2845932Z     ╰────
2025-06-04T21:52:29.2846439Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2846446Z 
2025-06-04T21:52:29.2846889Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2847141Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/breach-analytics.ts[0m:371:71]
2025-06-04T21:52:29.2847238Z  [2m370[0m │ 
2025-06-04T21:52:29.2847573Z  [2m371[0m │   static async generateReport(timeframe: AnalyticsTimeframe): Promise<any> {
2025-06-04T21:52:29.2847840Z      · [38;2;246;87;248m                                                                      ───[0m
2025-06-04T21:52:29.2847943Z  [2m372[0m │     try {
2025-06-04T21:52:29.2848046Z      ╰────
2025-06-04T21:52:29.2848541Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2848658Z 
2025-06-04T21:52:29.2849226Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2849459Z     ╭─[[38;2;92;157;255;1msrc/lib/auth/apiRouteTypes.ts[0m:9:32]
2025-06-04T21:52:29.2849631Z  [2m 8[0m │ export interface AuthAPIContext<
2025-06-04T21:52:29.2849868Z  [2m 9[0m │   Props extends Record<string, any> = Record<string, any>,
2025-06-04T21:52:29.2850063Z     · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.2850320Z  [2m10[0m │   Params extends Record<string, string | undefined> = Record<
2025-06-04T21:52:29.2850410Z     ╰────
2025-06-04T21:52:29.2850908Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2850926Z 
2025-06-04T21:52:29.2851367Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2851587Z     ╭─[[38;2;92;157;255;1msrc/lib/auth/apiRouteTypes.ts[0m:9:54]
2025-06-04T21:52:29.2851753Z  [2m 8[0m │ export interface AuthAPIContext<
2025-06-04T21:52:29.2851990Z  [2m 9[0m │   Props extends Record<string, any> = Record<string, any>,
2025-06-04T21:52:29.2852220Z     · [38;2;246;87;248m                                                     ───[0m
2025-06-04T21:52:29.2852473Z  [2m10[0m │   Params extends Record<string, string | undefined> = Record<
2025-06-04T21:52:29.2852562Z     ╰────
2025-06-04T21:52:29.2853067Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2853073Z 
2025-06-04T21:52:29.2853507Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2853738Z     ╭─[[38;2;92;157;255;1msrc/lib/auth/apiRouteTypes.ts[0m:26:32]
2025-06-04T21:52:29.2853911Z  [2m25[0m │ export type ProtectedAPIRoute<
2025-06-04T21:52:29.2854147Z  [2m26[0m │   Props extends Record<string, any> = Record<string, any>,
2025-06-04T21:52:29.2854338Z     · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.2854585Z  [2m27[0m │   Params extends Record<string, string | undefined> = Record<
2025-06-04T21:52:29.2854678Z     ╰────
2025-06-04T21:52:29.2855171Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2855178Z 
2025-06-04T21:52:29.2855610Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2855825Z     ╭─[[38;2;92;157;255;1msrc/lib/auth/apiRouteTypes.ts[0m:26:54]
2025-06-04T21:52:29.2856129Z  [2m25[0m │ export type ProtectedAPIRoute<
2025-06-04T21:52:29.2856365Z  [2m26[0m │   Props extends Record<string, any> = Record<string, any>,
2025-06-04T21:52:29.2856602Z     · [38;2;246;87;248m                                                     ───[0m
2025-06-04T21:52:29.2856847Z  [2m27[0m │   Params extends Record<string, string | undefined> = Record<
2025-06-04T21:52:29.2856940Z     ╰────
2025-06-04T21:52:29.2857434Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2857441Z 
2025-06-04T21:52:29.2857877Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2858087Z     ╭─[[38;2;92;157;255;1msrc/lib/auth/apiRouteTypes.ts[0m:47:32]
2025-06-04T21:52:29.2858258Z  [2m46[0m │ export type APIContextConverter<
2025-06-04T21:52:29.2858494Z  [2m47[0m │   Props extends Record<string, any> = Record<string, any>,
2025-06-04T21:52:29.2858687Z     · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.2859150Z  [2m48[0m │   Params extends Record<string, string | undefined> = Record<
2025-06-04T21:52:29.2859256Z     ╰────
2025-06-04T21:52:29.2859762Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2859770Z 
2025-06-04T21:52:29.2860208Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2860426Z     ╭─[[38;2;92;157;255;1msrc/lib/auth/apiRouteTypes.ts[0m:47:54]
2025-06-04T21:52:29.2860590Z  [2m46[0m │ export type APIContextConverter<
2025-06-04T21:52:29.2860828Z  [2m47[0m │   Props extends Record<string, any> = Record<string, any>,
2025-06-04T21:52:29.2861051Z     · [38;2;246;87;248m                                                     ───[0m
2025-06-04T21:52:29.2861308Z  [2m48[0m │   Params extends Record<string, string | undefined> = Record<
2025-06-04T21:52:29.2861396Z     ╰────
2025-06-04T21:52:29.2861906Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2861913Z 
2025-06-04T21:52:29.2862348Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2862563Z     ╭─[[38;2;92;157;255;1msrc/lib/auth/apiRouteTypes.ts[0m:59:32]
2025-06-04T21:52:29.2862746Z  [2m58[0m │ export type ProtectRouteFunction = <
2025-06-04T21:52:29.2862985Z  [2m59[0m │   Props extends Record<string, any> = Record<string, any>,
2025-06-04T21:52:29.2863167Z     · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.2863409Z  [2m60[0m │   Params extends Record<string, string | undefined> = Record<
2025-06-04T21:52:29.2863501Z     ╰────
2025-06-04T21:52:29.2864002Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2864009Z 
2025-06-04T21:52:29.2864453Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2864667Z     ╭─[[38;2;92;157;255;1msrc/lib/auth/apiRouteTypes.ts[0m:59:54]
2025-06-04T21:52:29.2864847Z  [2m58[0m │ export type ProtectRouteFunction = <
2025-06-04T21:52:29.2865079Z  [2m59[0m │   Props extends Record<string, any> = Record<string, any>,
2025-06-04T21:52:29.2865304Z     · [38;2;246;87;248m                                                     ───[0m
2025-06-04T21:52:29.2865547Z  [2m60[0m │   Params extends Record<string, string | undefined> = Record<
2025-06-04T21:52:29.2865638Z     ╰────
2025-06-04T21:52:29.2866128Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2866251Z 
2025-06-04T21:52:29.2866693Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2866926Z     ╭─[[38;2;92;157;255;1msrc/lib/analytics/compliance.ts[0m:17:41]
2025-06-04T21:52:29.2867028Z  [2m16[0m │    */
2025-06-04T21:52:29.2867297Z  [2m17[0m │   static async calculateScore(breaches: any[]): Promise<number> {
2025-06-04T21:52:29.2867503Z     · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.2867651Z  [2m18[0m │     // Mock implementation
2025-06-04T21:52:29.2867740Z     ╰────
2025-06-04T21:52:29.2868242Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2868249Z 
2025-06-04T21:52:29.2868678Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2868889Z     ╭─[[38;2;92;157;255;1msrc/lib/analytics/ml.ts[0m:17:40]
2025-06-04T21:52:29.2869085Z  [2m16[0m │    */
2025-06-04T21:52:29.2869499Z  [2m17[0m │   static async detectAnomalies(trends: any[]): Promise<number[]> {
2025-06-04T21:52:29.2869716Z     · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.2869865Z  [2m18[0m │     // Mock implementation
2025-06-04T21:52:29.2869954Z     ╰────
2025-06-04T21:52:29.2870447Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2870463Z 
2025-06-04T21:52:29.2870896Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2871095Z     ╭─[[38;2;92;157;255;1msrc/lib/analytics/ml.ts[0m:37:13]
2025-06-04T21:52:29.2871259Z  [2m36[0m │   static async predictBreaches(
2025-06-04T21:52:29.2871392Z  [2m37[0m │     trends: any[],
2025-06-04T21:52:29.2871552Z     · [38;2;246;87;248m            ───[0m
2025-06-04T21:52:29.2871679Z  [2m38[0m │     days: number,
2025-06-04T21:52:29.2871774Z     ╰────
2025-06-04T21:52:29.2872275Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2872281Z 
2025-06-04T21:52:29.2872717Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2872965Z      ╭─[[38;2;92;157;255;1msrc/e2e/breach-notification.spec.ts[0m:102:61]
2025-06-04T21:52:29.2873174Z  [2m101[0m │         // Store requests for later verification
2025-06-04T21:52:29.2873461Z  [2m102[0m │         const emailRequests: Array<{ url: string; postData: any }> = []
2025-06-04T21:52:29.2873707Z      · [38;2;246;87;248m                                                            ───[0m
2025-06-04T21:52:29.2873941Z  [2m103[0m │         await page.route('**/api/email', async (route) => {
2025-06-04T21:52:29.2874044Z      ╰────
2025-06-04T21:52:29.2874547Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2874554Z 
2025-06-04T21:52:29.2874987Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2875230Z      ╭─[[38;2;92;157;255;1msrc/e2e/breach-notification.spec.ts[0m:193:59]
2025-06-04T21:52:29.2875414Z  [2m192[0m │       // Store requests for verification
2025-06-04T21:52:29.2875697Z  [2m193[0m │       const emailRequests: Array<{ url: string; postData: any }> = []
2025-06-04T21:52:29.2875933Z      · [38;2;246;87;248m                                                          ───[0m
2025-06-04T21:52:29.2876167Z  [2m194[0m │       await page.route('**/api/email', async (route) => {
2025-06-04T21:52:29.2876257Z      ╰────
2025-06-04T21:52:29.2876758Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2876951Z 
2025-06-04T21:52:29.2877406Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2877653Z      ╭─[[38;2;92;157;255;1msrc/e2e/breach-notification.spec.ts[0m:298:59]
2025-06-04T21:52:29.2877834Z  [2m297[0m │       // Store requests for verification
2025-06-04T21:52:29.2878117Z  [2m298[0m │       const emailRequests: Array<{ url: string; postData: any }> = []
2025-06-04T21:52:29.2878350Z      · [38;2;246;87;248m                                                          ───[0m
2025-06-04T21:52:29.2878582Z  [2m299[0m │       await page.route('**/api/email', async (route) => {
2025-06-04T21:52:29.2878672Z      ╰────
2025-06-04T21:52:29.2879274Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2879289Z 
2025-06-04T21:52:29.2879733Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-empty-object-type): Do not use the empty object type literal.[0m
2025-06-04T21:52:29.2880097Z     ╭─[[38;2;92;157;255;1msrc/e2e/breach-notification.spec.ts[0m:38:20]
2025-06-04T21:52:29.2880268Z  [2m37[0m │   // Setup services before tests
2025-06-04T21:52:29.2880546Z  [2m38[0m │   redis: async (_: {}, use: (r: RedisService) => Promise<void>) => {
2025-06-04T21:52:29.2880714Z     · [38;2;246;87;248m                   ──[0m
2025-06-04T21:52:29.2880858Z  [2m39[0m │     // Initialize services
2025-06-04T21:52:29.2880954Z     ╰────
2025-06-04T21:52:29.2881499Z [38;2;106;159;181m  help: [0mTo avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.
2025-06-04T21:52:29.2881506Z 
2025-06-04T21:52:29.2881948Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-empty-object-type): Do not use the empty object type literal.[0m
2025-06-04T21:52:29.2882198Z     ╭─[[38;2;92;157;255;1msrc/e2e/breach-notification.spec.ts[0m:55:19]
2025-06-04T21:52:29.2882297Z  [2m54[0m │   },
2025-06-04T21:52:29.2882563Z  [2m55[0m │   auth: async (_: {}, use: (a: AuthService) => Promise<void>) => {
2025-06-04T21:52:29.2882724Z     · [38;2;246;87;248m                  ──[0m
2025-06-04T21:52:29.2882865Z  [2m56[0m │     // Setup environment
2025-06-04T21:52:29.2882960Z     ╰────
2025-06-04T21:52:29.2883499Z [38;2;106;159;181m  help: [0mTo avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.
2025-06-04T21:52:29.2883506Z 
2025-06-04T21:52:29.2884079Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1meslint-plugin-react-hooks(rules-of-hooks): message: `React Hook "Anonymous" cannot be called in an async function. [0m
2025-06-04T21:52:29.2884323Z     ╭─[[38;2;92;157;255;1msrc/e2e/breach-notification.spec.ts[0m:38:10]
2025-06-04T21:52:29.2884495Z  [2m37[0m │       // Setup services before tests
2025-06-04T21:52:29.2884963Z  [2m38[0m │ [38;2;246;87;248m╭[0m[38;2;246;87;248m─[0m[38;2;246;87;248m▶[0m   redis: async (_: {}, use: (r: RedisService) => Promise<void>) => {
2025-06-04T21:52:29.2885181Z  [2m39[0m │ [38;2;246;87;248m│[0m       // Initialize services
2025-06-04T21:52:29.2885419Z  [2m40[0m │ [38;2;246;87;248m│[0m       const redis = new RedisService({
2025-06-04T21:52:29.2885742Z  [2m41[0m │ [38;2;246;87;248m│[0m         url: process.env.REDIS_URL || 'redis://localhost:6379',
2025-06-04T21:52:29.2885969Z  [2m42[0m │ [38;2;246;87;248m│[0m         keyPrefix: 'test:breach:',
2025-06-04T21:52:29.2886163Z  [2m43[0m │ [38;2;246;87;248m│[0m         maxRetries: 3,
2025-06-04T21:52:29.2886361Z  [2m44[0m │ [38;2;246;87;248m│[0m         retryDelay: 100,
2025-06-04T21:52:29.2886511Z  [2m45[0m │ [38;2;246;87;248m│[0m       })
2025-06-04T21:52:29.2886719Z  [2m46[0m │ [38;2;246;87;248m│[0m       await redis.connect()
2025-06-04T21:52:29.2886856Z  [2m47[0m │ [38;2;246;87;248m│[0m   
2025-06-04T21:52:29.2887174Z  [2m48[0m │ [38;2;246;87;248m│[0m       await use(redis)
2025-06-04T21:52:29.2887313Z  [2m49[0m │ [38;2;246;87;248m│[0m   
2025-06-04T21:52:29.2887493Z  [2m50[0m │ [38;2;246;87;248m│[0m       // Cleanup
2025-06-04T21:52:29.2887736Z  [2m51[0m │ [38;2;246;87;248m│[0m       const pattern = 'test:breach:*'
2025-06-04T21:52:29.2887950Z  [2m52[0m │ [38;2;246;87;248m│[0m       await redis.del(pattern)
2025-06-04T21:52:29.2888164Z  [2m53[0m │ [38;2;246;87;248m│[0m       await redis.disconnect()
2025-06-04T21:52:29.2888423Z  [2m54[0m │ [38;2;246;87;248m╰[0m[38;2;246;87;248m─[0m[38;2;246;87;248m▶[0m   },
2025-06-04T21:52:29.2888692Z  [2m55[0m │       auth: async (_: {}, use: (a: AuthService) => Promise<void>) => {
2025-06-04T21:52:29.2888782Z     ╰────
2025-06-04T21:52:29.2888789Z 
2025-06-04T21:52:29.2889467Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1meslint-plugin-react-hooks(rules-of-hooks): message: `React Hook "Anonymous" cannot be called in an async function. [0m
2025-06-04T21:52:29.2889723Z     ╭─[[38;2;92;157;255;1msrc/e2e/breach-notification.spec.ts[0m:55:9]
2025-06-04T21:52:29.2889830Z  [2m54[0m │       },
2025-06-04T21:52:29.2890383Z  [2m55[0m │ [38;2;246;87;248m╭[0m[38;2;246;87;248m─[0m[38;2;246;87;248m▶[0m   auth: async (_: {}, use: (a: AuthService) => Promise<void>) => {
2025-06-04T21:52:29.2890597Z  [2m56[0m │ [38;2;246;87;248m│[0m       // Setup environment
2025-06-04T21:52:29.2890888Z  [2m57[0m │ [38;2;246;87;248m│[0m       process.env.ORGANIZATION_NAME = 'Test Healthcare'
2025-06-04T21:52:29.2891228Z  [2m58[0m │ [38;2;246;87;248m│[0m       process.env.SECURITY_CONTACT = 'security@test-healthcare.com'
2025-06-04T21:52:29.2891470Z  [2m59[0m │ [38;2;246;87;248m│[0m       process.env.ORGANIZATION_ADDRESS =
2025-06-04T21:52:29.2891737Z  [2m60[0m │ [38;2;246;87;248m│[0m         '123 Healthcare Ave, Medical City, MC 12345'
2025-06-04T21:52:29.2892058Z  [2m61[0m │ [38;2;246;87;248m│[0m       process.env.HHS_NOTIFICATION_EMAIL = 'hhs-test@example.com'
2025-06-04T21:52:29.2892447Z  [2m62[0m │ [38;2;246;87;248m│[0m       process.env.SECURITY_STAKEHOLDERS = 'security-team@test-healthcare.com'
2025-06-04T21:52:29.2892595Z  [2m63[0m │ [38;2;246;87;248m│[0m   
2025-06-04T21:52:29.2892849Z  [2m64[0m │ [38;2;246;87;248m│[0m       const auth = AuthService.getInstance()
2025-06-04T21:52:29.2892987Z  [2m65[0m │ [38;2;246;87;248m│[0m   
2025-06-04T21:52:29.2893180Z  [2m66[0m │ [38;2;246;87;248m│[0m       // Create test users
2025-06-04T21:52:29.2893502Z  [2m67[0m │ [38;2;246;87;248m│[0m       await auth.signUp('patient1@example.com', 'testpassword', {
2025-06-04T21:52:29.2893726Z  [2m68[0m │ [38;2;246;87;248m│[0m         fullName: 'Test Patient 1',
2025-06-04T21:52:29.2893884Z  [2m69[0m │ [38;2;246;87;248m│[0m       })
2025-06-04T21:52:29.2894197Z  [2m70[0m │ [38;2;246;87;248m│[0m       await auth.signUp('patient2@example.com', 'testpassword', {
2025-06-04T21:52:29.2894543Z  [2m71[0m │ [38;2;246;87;248m│[0m         fullName: 'Test Patient 2',
2025-06-04T21:52:29.2894696Z  [2m72[0m │ [38;2;246;87;248m│[0m       })
2025-06-04T21:52:29.2894844Z  [2m73[0m │ [38;2;246;87;248m│[0m   
2025-06-04T21:52:29.2895032Z  [2m74[0m │ [38;2;246;87;248m│[0m       await use(auth)
2025-06-04T21:52:29.2895174Z  [2m75[0m │ [38;2;246;87;248m│[0m   
2025-06-04T21:52:29.2895343Z  [2m76[0m │ [38;2;246;87;248m│[0m       // Cleanup
2025-06-04T21:52:29.2895542Z  [2m77[0m │ [38;2;246;87;248m│[0m       await auth.signOut()
2025-06-04T21:52:29.2895802Z  [2m78[0m │ [38;2;246;87;248m╰[0m[38;2;246;87;248m─[0m[38;2;246;87;248m▶[0m   },
2025-06-04T21:52:29.2895898Z  [2m79[0m │     })
2025-06-04T21:52:29.2895992Z     ╰────
2025-06-04T21:52:29.2896000Z 
2025-06-04T21:52:29.2896444Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2896692Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-components.tsx[0m:50:60]
2025-06-04T21:52:29.2896797Z  [2m49[0m │ 
2025-06-04T21:52:29.2897107Z  [2m50[0m │ export const DynamicMultidimensionalEmotionChart = (props: any) => (
2025-06-04T21:52:29.2897427Z     · [38;2;246;87;248m                                                           ───[0m
2025-06-04T21:52:29.2897626Z  [2m51[0m │   <Suspense fallback={<ThreeDLoading />}>
2025-06-04T21:52:29.2897717Z     ╰────
2025-06-04T21:52:29.2898229Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2898236Z 
2025-06-04T21:52:29.2898678Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2898927Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-components.tsx[0m:60:60]
2025-06-04T21:52:29.2899121Z  [2m59[0m │ 
2025-06-04T21:52:29.2899427Z  [2m60[0m │ export const DynamicEmotionTemporalAnalysisChart = (props: any) => (
2025-06-04T21:52:29.2899677Z     · [38;2;246;87;248m                                                           ───[0m
2025-06-04T21:52:29.2899898Z  [2m61[0m │   <Suspense fallback={<VisualizationLoading />}>
2025-06-04T21:52:29.2899995Z     ╰────
2025-06-04T21:52:29.2900494Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2900501Z 
2025-06-04T21:52:29.2900939Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2901178Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-components.tsx[0m:70:49]
2025-06-04T21:52:29.2901277Z  [2m69[0m │ 
2025-06-04T21:52:29.2901531Z  [2m70[0m │ export const DynamicTherapyChatSystem = (props: any) => (
2025-06-04T21:52:29.2901754Z     · [38;2;246;87;248m                                                ───[0m
2025-06-04T21:52:29.2901946Z  [2m71[0m │   <Suspense fallback={<DefaultLoading />}>
2025-06-04T21:52:29.2902049Z     ╰────
2025-06-04T21:52:29.2902551Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2902558Z 
2025-06-04T21:52:29.2902996Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2903236Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-components.tsx[0m:81:39]
2025-06-04T21:52:29.2903327Z  [2m80[0m │ 
2025-06-04T21:52:29.2903543Z  [2m81[0m │ export const DynamicFHEDemo = (props: any) => (
2025-06-04T21:52:29.2903747Z     · [38;2;246;87;248m                                      ───[0m
2025-06-04T21:52:29.2903940Z  [2m82[0m │   <Suspense fallback={<DefaultLoading />}>
2025-06-04T21:52:29.2904035Z     ╰────
2025-06-04T21:52:29.2904536Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2904667Z 
2025-06-04T21:52:29.2905112Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2905357Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-components.tsx[0m:92:46]
2025-06-04T21:52:29.2905448Z  [2m91[0m │ 
2025-06-04T21:52:29.2905688Z  [2m92[0m │ export const DynamicSwiperCarousel = (props: any) => (
2025-06-04T21:52:29.2905901Z     · [38;2;246;87;248m                                             ───[0m
2025-06-04T21:52:29.2906091Z  [2m93[0m │   <Suspense fallback={<DefaultLoading />}>
2025-06-04T21:52:29.2906179Z     ╰────
2025-06-04T21:52:29.2906669Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2906681Z 
2025-06-04T21:52:29.2907112Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2907369Z      ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-components.tsx[0m:103:46]
2025-06-04T21:52:29.2907468Z  [2m102[0m │ 
2025-06-04T21:52:29.2907818Z  [2m103[0m │ export const DynamicChartComponent = (props: any) => (
2025-06-04T21:52:29.2908045Z      · [38;2;246;87;248m                                             ───[0m
2025-06-04T21:52:29.2908262Z  [2m104[0m │   <Suspense fallback={<VisualizationLoading />}>
2025-06-04T21:52:29.2908358Z      ╰────
2025-06-04T21:52:29.2908852Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2908859Z 
2025-06-04T21:52:29.2909407Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2909656Z      ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-components.tsx[0m:114:52]
2025-06-04T21:52:29.2909755Z  [2m113[0m │ 
2025-06-04T21:52:29.2910034Z  [2m114[0m │ export const DynamicTreatmentPlanManager = (props: any) => (
2025-06-04T21:52:29.2910266Z      · [38;2;246;87;248m                                                   ───[0m
2025-06-04T21:52:29.2910470Z  [2m115[0m │   <Suspense fallback={<DefaultLoading />}>
2025-06-04T21:52:29.2910560Z      ╰────
2025-06-04T21:52:29.2911065Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2911072Z 
2025-06-04T21:52:29.2911506Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2911752Z      ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-components.tsx[0m:130:53]
2025-06-04T21:52:29.2911843Z  [2m129[0m │ 
2025-06-04T21:52:29.2912117Z  [2m130[0m │ export const DynamicParticleVisualization = (props: any) => (
2025-06-04T21:52:29.2912341Z      · [38;2;246;87;248m                                                    ───[0m
2025-06-04T21:52:29.2912541Z  [2m131[0m │   <Suspense fallback={<ThreeDLoading />}>
2025-06-04T21:52:29.2912630Z      ╰────
2025-06-04T21:52:29.2913134Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2913141Z 
2025-06-04T21:52:29.2913572Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2913817Z      ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-components.tsx[0m:138:56]
2025-06-04T21:52:29.2913999Z  [2m137[0m │ export const useThreeModule = () => {
2025-06-04T21:52:29.2914282Z  [2m138[0m │   const [threeModule, setThreeModule] = React.useState<any>(null);
2025-06-04T21:52:29.2914512Z      · [38;2;246;87;248m                                                       ───[0m
2025-06-04T21:52:29.2914607Z  [2m139[0m │   
2025-06-04T21:52:29.2914701Z      ╰────
2025-06-04T21:52:29.2915328Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2915335Z 
2025-06-04T21:52:29.2915781Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2916024Z      ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-components.tsx[0m:151:56]
2025-06-04T21:52:29.2916213Z  [2m150[0m │ export const useChartModule = () => {
2025-06-04T21:52:29.2916490Z  [2m151[0m │   const [chartModule, setChartModule] = React.useState<any>(null);
2025-06-04T21:52:29.2916726Z      · [38;2;246;87;248m                                                       ───[0m
2025-06-04T21:52:29.2916822Z  [2m152[0m │   
2025-06-04T21:52:29.2916917Z      ╰────
2025-06-04T21:52:29.2917414Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2917427Z 
2025-06-04T21:52:29.2917867Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2918294Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:106:54]
2025-06-04T21:52:29.2918495Z  [2m105[0m │     // Setup default mock implementations
2025-06-04T21:52:29.2918839Z  [2m106[0m │     ;(BreachNotificationSystem.listRecentBreaches as any).mockResolvedValue(
2025-06-04T21:52:29.2919173Z      · [38;2;246;87;248m                                                     ───[0m
2025-06-04T21:52:29.2919311Z  [2m107[0m │       mockBreaches,
2025-06-04T21:52:29.2919403Z      ╰────
2025-06-04T21:52:29.2919907Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2919914Z 
2025-06-04T21:52:29.2920351Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2920682Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:109:20]
2025-06-04T21:52:29.2920782Z  [2m108[0m │     )
2025-06-04T21:52:29.2920987Z  [2m109[0m │     ;(redis.get as any).mockResolvedValue(
2025-06-04T21:52:29.2921151Z      · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.2921296Z  [2m110[0m │       JSON.stringify({
2025-06-04T21:52:29.2921387Z      ╰────
2025-06-04T21:52:29.2921886Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2921893Z 
2025-06-04T21:52:29.2922327Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2922640Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:114:43]
2025-06-04T21:52:29.2922736Z  [2m113[0m │     )
2025-06-04T21:52:29.2923052Z  [2m114[0m │     ;(RiskScoring.calculateOverallRisk as any).mockResolvedValue(0.75)
2025-06-04T21:52:29.2923266Z      · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.2923566Z  [2m115[0m │     ;(RiskScoring.calculateDailyRisk as any).mockResolvedValue(0.65)
2025-06-04T21:52:29.2923661Z      ╰────
2025-06-04T21:52:29.2924153Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2924160Z 
2025-06-04T21:52:29.2924597Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2924902Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:115:41]
2025-06-04T21:52:29.2925205Z  [2m114[0m │     ;(RiskScoring.calculateOverallRisk as any).mockResolvedValue(0.75)
2025-06-04T21:52:29.2925493Z  [2m115[0m │     ;(RiskScoring.calculateDailyRisk as any).mockResolvedValue(0.65)
2025-06-04T21:52:29.2925840Z      · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.2926148Z  [2m116[0m │     ;(ComplianceMetrics.calculateScore as any).mockResolvedValue(0.98)
2025-06-04T21:52:29.2926247Z      ╰────
2025-06-04T21:52:29.2926738Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2926745Z 
2025-06-04T21:52:29.2927182Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2927493Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:116:43]
2025-06-04T21:52:29.2927783Z  [2m115[0m │     ;(RiskScoring.calculateDailyRisk as any).mockResolvedValue(0.65)
2025-06-04T21:52:29.2928078Z  [2m116[0m │     ;(ComplianceMetrics.calculateScore as any).mockResolvedValue(0.98)
2025-06-04T21:52:29.2928290Z      · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.2928615Z  [2m117[0m │     ;(NotificationEffectiveness.calculate as any).mockResolvedValue(0.95)
2025-06-04T21:52:29.2928814Z      ╰────
2025-06-04T21:52:29.2929646Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2929656Z 
2025-06-04T21:52:29.2930133Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2930452Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:117:46]
2025-06-04T21:52:29.2930753Z  [2m116[0m │     ;(ComplianceMetrics.calculateScore as any).mockResolvedValue(0.98)
2025-06-04T21:52:29.2931073Z  [2m117[0m │     ;(NotificationEffectiveness.calculate as any).mockResolvedValue(0.95)
2025-06-04T21:52:29.2931291Z      · [38;2;246;87;248m                                             ───[0m
2025-06-04T21:52:29.2931651Z  [2m118[0m │     ;(NotificationEffectiveness.calculateDaily as any).mockResolvedValue(0.92)
2025-06-04T21:52:29.2931744Z      ╰────
2025-06-04T21:52:29.2932254Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2932261Z 
2025-06-04T21:52:29.2932697Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2933014Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:118:51]
2025-06-04T21:52:29.2933326Z  [2m117[0m │     ;(NotificationEffectiveness.calculate as any).mockResolvedValue(0.95)
2025-06-04T21:52:29.2933671Z  [2m118[0m │     ;(NotificationEffectiveness.calculateDaily as any).mockResolvedValue(0.92)
2025-06-04T21:52:29.2933896Z      · [38;2;246;87;248m                                                  ───[0m
2025-06-04T21:52:29.2934229Z  [2m119[0m │     ;(MachineLearning.detectAnomalies as any).mockResolvedValue([0.1, 0.2])
2025-06-04T21:52:29.2934320Z      ╰────
2025-06-04T21:52:29.2934831Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2934838Z 
2025-06-04T21:52:29.2935273Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2935587Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:119:42]
2025-06-04T21:52:29.2935929Z  [2m118[0m │     ;(NotificationEffectiveness.calculateDaily as any).mockResolvedValue(0.92)
2025-06-04T21:52:29.2936252Z  [2m119[0m │     ;(MachineLearning.detectAnomalies as any).mockResolvedValue([0.1, 0.2])
2025-06-04T21:52:29.2936463Z      · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.2936751Z  [2m120[0m │     ;(MachineLearning.predictBreaches as any).mockResolvedValue([
2025-06-04T21:52:29.2936981Z      ╰────
2025-06-04T21:52:29.2937489Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2937502Z 
2025-06-04T21:52:29.2937936Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2938248Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:120:42]
2025-06-04T21:52:29.2938563Z  [2m119[0m │     ;(MachineLearning.detectAnomalies as any).mockResolvedValue([0.1, 0.2])
2025-06-04T21:52:29.2938841Z  [2m120[0m │     ;(MachineLearning.predictBreaches as any).mockResolvedValue([
2025-06-04T21:52:29.2939167Z      · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.2939351Z  [2m121[0m │       { value: 3, confidence: 0.8 },
2025-06-04T21:52:29.2939447Z      ╰────
2025-06-04T21:52:29.2939953Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2939959Z 
2025-06-04T21:52:29.2940517Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2940836Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:124:33]
2025-06-04T21:52:29.2940944Z  [2m123[0m │     ])
2025-06-04T21:52:29.2941187Z  [2m124[0m │     ;(RiskScoring.getFactors as any).mockResolvedValue([
2025-06-04T21:52:29.2941385Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2941597Z  [2m125[0m │       { name: 'factor1', weight: 0.8, score: 0.9 },
2025-06-04T21:52:29.2941691Z      ╰────
2025-06-04T21:52:29.2942188Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2942203Z 
2025-06-04T21:52:29.2942642Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2942957Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:128:33]
2025-06-04T21:52:29.2943057Z  [2m127[0m │     ])
2025-06-04T21:52:29.2943391Z  [2m128[0m │     ;(SecurityTrends.analyze as any).mockResolvedValue(['increasing', 'stable'])
2025-06-04T21:52:29.2943582Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.2943890Z  [2m129[0m │     ;(StatisticalAnalysis.calculateTrend as any).mockReturnValue(0.15)
2025-06-04T21:52:29.2943981Z      ╰────
2025-06-04T21:52:29.2944479Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2944486Z 
2025-06-04T21:52:29.2944920Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2945240Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:129:45]
2025-06-04T21:52:29.2945573Z  [2m128[0m │     ;(SecurityTrends.analyze as any).mockResolvedValue(['increasing', 'stable'])
2025-06-04T21:52:29.2945877Z  [2m129[0m │     ;(StatisticalAnalysis.calculateTrend as any).mockReturnValue(0.15)
2025-06-04T21:52:29.2946093Z      · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.2946341Z  [2m130[0m │     ;(FHE.encrypt as any).mockResolvedValue('encrypted_data')
2025-06-04T21:52:29.2946431Z      ╰────
2025-06-04T21:52:29.2946932Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2946938Z 
2025-06-04T21:52:29.2947371Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2947807Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:130:22]
2025-06-04T21:52:29.2948107Z  [2m129[0m │     ;(StatisticalAnalysis.calculateTrend as any).mockReturnValue(0.15)
2025-06-04T21:52:29.2948364Z  [2m130[0m │     ;(FHE.encrypt as any).mockResolvedValue('encrypted_data')
2025-06-04T21:52:29.2948535Z      · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.2948632Z  [2m131[0m │   })
2025-06-04T21:52:29.2948727Z      ╰────
2025-06-04T21:52:29.2949324Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2949332Z 
2025-06-04T21:52:29.2949775Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2950080Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:170:56]
2025-06-04T21:52:29.2950317Z  [2m169[0m │     it('should handle empty breach list', async () => {
2025-06-04T21:52:29.2950669Z  [2m170[0m │       ;(BreachNotificationSystem.listRecentBreaches as any).mockResolvedValue(
2025-06-04T21:52:29.2951052Z      · [38;2;246;87;248m                                                       ───[0m
2025-06-04T21:52:29.2951170Z  [2m171[0m │         [],
2025-06-04T21:52:29.2951264Z      ╰────
2025-06-04T21:52:29.2951757Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2951764Z 
2025-06-04T21:52:29.2952203Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2952507Z      ╭─[[38;2;92;157;255;1msrc/lib/analytics/__tests__/breach-analytics.test.ts[0m:279:48]
2025-06-04T21:52:29.2952906Z  [2m278[0m │     it('should include notification effectiveness insights when below threshold', async () => {
2025-06-04T21:52:29.2953224Z  [2m279[0m │       ;(NotificationEffectiveness.calculate as any).mockResolvedValue(0.94)
2025-06-04T21:52:29.2953458Z      · [38;2;246;87;248m                                               ───[0m
2025-06-04T21:52:29.2953560Z  [2m280[0m │ 
2025-06-04T21:52:29.2953650Z      ╰────
2025-06-04T21:52:29.2954149Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2954155Z 
2025-06-04T21:52:29.2954586Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2954790Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/index.ts[0m:20:45]
2025-06-04T21:52:29.2954886Z  [2m19[0m │  */
2025-06-04T21:52:29.2955180Z  [2m20[0m │ export function memoize<T extends (...args: any[]) => any>(fn: T): T {
2025-06-04T21:52:29.2955394Z     · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.2955613Z  [2m21[0m │   const cache = new Map<string, ReturnType<T>>()
2025-06-04T21:52:29.2955713Z     ╰────
2025-06-04T21:52:29.2956220Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2956227Z 
2025-06-04T21:52:29.2956661Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2956861Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/index.ts[0m:20:55]
2025-06-04T21:52:29.2956957Z  [2m19[0m │  */
2025-06-04T21:52:29.2957247Z  [2m20[0m │ export function memoize<T extends (...args: any[]) => any>(fn: T): T {
2025-06-04T21:52:29.2957473Z     · [38;2;246;87;248m                                                      ───[0m
2025-06-04T21:52:29.2957681Z  [2m21[0m │   const cache = new Map<string, ReturnType<T>>()
2025-06-04T21:52:29.2957775Z     ╰────
2025-06-04T21:52:29.2958275Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2958401Z 
2025-06-04T21:52:29.2958851Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2959181Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-three.tsx[0m:37:38]
2025-06-04T21:52:29.2959355Z  [2m36[0m │ export const useThree = () => {
2025-06-04T21:52:29.2959559Z  [2m37[0m │   const [three, setThree] = useState<any>(null);
2025-06-04T21:52:29.2959797Z     · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.2960017Z  [2m38[0m │   const [controls, setControls] = useState<any>(null);
2025-06-04T21:52:29.2960110Z     ╰────
2025-06-04T21:52:29.2960612Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2960619Z 
2025-06-04T21:52:29.2961057Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2961287Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-three.tsx[0m:38:44]
2025-06-04T21:52:29.2961610Z  [2m37[0m │   const [three, setThree] = useState<any>(null);
2025-06-04T21:52:29.2961838Z  [2m38[0m │   const [controls, setControls] = useState<any>(null);
2025-06-04T21:52:29.2962056Z     · [38;2;246;87;248m                                           ───[0m
2025-06-04T21:52:29.2962259Z  [2m39[0m │   const [loading, setLoading] = useState(true);
2025-06-04T21:52:29.2962348Z     ╰────
2025-06-04T21:52:29.2962846Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2962853Z 
2025-06-04T21:52:29.2963287Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2963513Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-three.tsx[0m:83:42]
2025-06-04T21:52:29.2963695Z  [2m82[0m │ // Dynamic Three.js scene component
2025-06-04T21:52:29.2963922Z  [2m83[0m │ export const DynamicThreeScene = (props: any) => (
2025-06-04T21:52:29.2964138Z     · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.2964331Z  [2m84[0m │   <Suspense fallback={<ThreeDLoading />}>
2025-06-04T21:52:29.2964420Z     ╰────
2025-06-04T21:52:29.2964925Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2964932Z 
2025-06-04T21:52:29.2965368Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2965595Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-three.tsx[0m:90:47]
2025-06-04T21:52:29.2965773Z  [2m89[0m │ // Dynamic emotion particle component
2025-06-04T21:52:29.2966018Z  [2m90[0m │ export const DynamicEmotionParticle = (props: any) => (
2025-06-04T21:52:29.2966245Z     · [38;2;246;87;248m                                              ───[0m
2025-06-04T21:52:29.2966432Z  [2m91[0m │   <Suspense fallback={<ThreeDLoading />}>
2025-06-04T21:52:29.2966535Z     ╰────
2025-06-04T21:52:29.2967031Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2967039Z 
2025-06-04T21:52:29.2967480Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2967699Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-three.tsx[0m:97:45]
2025-06-04T21:52:29.2967877Z  [2m96[0m │ // Dynamic spinning globe component
2025-06-04T21:52:29.2968111Z  [2m97[0m │ export const DynamicSpinningGlobe = (props: any) => (
2025-06-04T21:52:29.2968333Z     · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.2968515Z  [2m98[0m │   <Suspense fallback={<ThreeDLoading />}>
2025-06-04T21:52:29.2968731Z     ╰────
2025-06-04T21:52:29.2969341Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2969349Z 
2025-06-04T21:52:29.2969794Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2970029Z      ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-three.tsx[0m:104:60]
2025-06-04T21:52:29.2970266Z  [2m103[0m │ // Dynamic multidimensional emotion chart component
2025-06-04T21:52:29.2970580Z  [2m104[0m │ export const DynamicMultidimensionalEmotionChart = (props: any) => (
2025-06-04T21:52:29.2970834Z      · [38;2;246;87;248m                                                           ───[0m
2025-06-04T21:52:29.2971027Z  [2m105[0m │   <Suspense fallback={<ThreeDLoading />}>
2025-06-04T21:52:29.2971119Z      ╰────
2025-06-04T21:52:29.2971632Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2971639Z 
2025-06-04T21:52:29.2972204Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2972447Z      ╭─[[38;2;92;157;255;1msrc/lib/utils/dynamic-three.tsx[0m:111:40]
2025-06-04T21:52:29.2972611Z  [2m110[0m │ // Dynamic particle component
2025-06-04T21:52:29.2972836Z  [2m111[0m │ export const DynamicParticle = (props: any) => (
2025-06-04T21:52:29.2973038Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.2973231Z  [2m112[0m │   <Suspense fallback={<ThreeDLoading />}>
2025-06-04T21:52:29.2973320Z      ╰────
2025-06-04T21:52:29.2973820Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2973827Z 
2025-06-04T21:52:29.2974270Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2974480Z      ╭─[[38;2;92;157;255;1mscripts/load-test.ts[0m:279:36]
2025-06-04T21:52:29.2974575Z  [2m278[0m │ 
2025-06-04T21:52:29.2974818Z  [2m279[0m │   private async saveReport(report: any): Promise<void> {
2025-06-04T21:52:29.2975019Z      · [38;2;246;87;248m                                   ───[0m
2025-06-04T21:52:29.2975188Z  [2m280[0m │     const reportDir = './reports'
2025-06-04T21:52:29.2975284Z      ╰────
2025-06-04T21:52:29.2975776Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2975783Z 
2025-06-04T21:52:29.2976221Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2976582Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/__tests__/TreatmentPlanningService.test.ts[0m:735:71]
2025-06-04T21:52:29.2976834Z  [2m734[0m │ 
2025-06-04T21:52:29.2977148Z  [2m735[0m │       const errorService = new TreatmentPlanningService(errorStore as any)
2025-06-04T21:52:29.2977420Z      · [38;2;246;87;248m                                                                      ───[0m
2025-06-04T21:52:29.2977514Z  [2m736[0m │ 
2025-06-04T21:52:29.2977610Z      ╰────
2025-06-04T21:52:29.2978110Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2978117Z 
2025-06-04T21:52:29.2978561Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2978915Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/__tests__/TreatmentPlanningService.test.ts[0m:773:71]
2025-06-04T21:52:29.2979109Z  [2m772[0m │ 
2025-06-04T21:52:29.2979421Z  [2m773[0m │       const errorService = new TreatmentPlanningService(errorStore as any)
2025-06-04T21:52:29.2979677Z      · [38;2;246;87;248m                                                                      ───[0m
2025-06-04T21:52:29.2979890Z  [2m774[0m │ 
2025-06-04T21:52:29.2979988Z      ╰────
2025-06-04T21:52:29.2980495Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2980501Z 
2025-06-04T21:52:29.2980937Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2981168Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/phi-sanitizer.ts[0m:36:55]
2025-06-04T21:52:29.2981376Z  [2m35[0m │ export function sanitizeMessagesForLogging(
2025-06-04T21:52:29.2981693Z  [2m36[0m │   messages: Array<{ role: string; content: string } | any> | undefined | null,
2025-06-04T21:52:29.2981922Z     · [38;2;246;87;248m                                                      ───[0m
2025-06-04T21:52:29.2982044Z  [2m37[0m │ ): string {
2025-06-04T21:52:29.2982134Z     ╰────
2025-06-04T21:52:29.2982646Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2982653Z 
2025-06-04T21:52:29.2983090Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2983316Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/phi-sanitizer.ts[0m:63:24]
2025-06-04T21:52:29.2983513Z  [2m62[0m │ export function sanitizeObjectForLogging(
2025-06-04T21:52:29.2983719Z  [2m63[0m │   data: Record<string, any> | undefined | null,
2025-06-04T21:52:29.2983896Z     · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.2984006Z  [2m64[0m │ ): string {
2025-06-04T21:52:29.2984101Z     ╰────
2025-06-04T21:52:29.2984596Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2984612Z 
2025-06-04T21:52:29.2985081Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2985299Z     ╭─[[38;2;92;157;255;1msrc/lib/utils/phi-sanitizer.ts[0m:69:43]
2025-06-04T21:52:29.2985408Z  [2m68[0m │   try {
2025-06-04T21:52:29.2985627Z  [2m69[0m │     const sanitizedObject: Record<string, any> = {}
2025-06-04T21:52:29.2985847Z     · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.2986000Z  [2m70[0m │     for (const key in data) {
2025-06-04T21:52:29.2986095Z     ╰────
2025-06-04T21:52:29.2986591Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2986803Z 
2025-06-04T21:52:29.2987253Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2987636Z      ╭─[[38;2;92;157;255;1msrc/lib/browser/feature-detection.ts[0m:232:17]
2025-06-04T21:52:29.2987855Z  [2m231[0m │   if (process.env.NODE_ENV !== 'production') {
2025-06-04T21:52:29.2988147Z  [2m232[0m │     ;(window as any).__FEATURES__ = Object.fromEntries(featureSupport)
2025-06-04T21:52:29.2988312Z      · [38;2;246;87;248m                ───[0m
2025-06-04T21:52:29.2988416Z  [2m233[0m │   }
2025-06-04T21:52:29.2988508Z      ╰────
2025-06-04T21:52:29.2989113Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2989122Z 
2025-06-04T21:52:29.2989565Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2989780Z      ╭─[[38;2;92;157;255;1msrc/lib/browser/setup.ts[0m:106:19]
2025-06-04T21:52:29.2989965Z  [2m105[0m │     navigator.maxTouchPoints > 0 ||
2025-06-04T21:52:29.2990179Z  [2m106[0m │     (navigator as any).msMaxTouchPoints > 0
2025-06-04T21:52:29.2990339Z      · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.2990440Z  [2m107[0m │ 
2025-06-04T21:52:29.2990651Z      ╰────
2025-06-04T21:52:29.2991157Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2991168Z 
2025-06-04T21:52:29.2991604Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2991811Z      ╭─[[38;2;92;157;255;1msrc/lib/browser/setup.ts[0m:150:19]
2025-06-04T21:52:29.2991950Z  [2m149[0m │   const saveData =
2025-06-04T21:52:29.2992152Z  [2m150[0m │     (navigator as any).connection?.saveData ||
2025-06-04T21:52:29.2992317Z      · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.2992510Z  [2m151[0m │     /save-data=on/.test(document.cookie) ||
2025-06-04T21:52:29.2992614Z      ╰────
2025-06-04T21:52:29.2993106Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2993113Z 
2025-06-04T21:52:29.2993559Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2993795Z      ╭─[[38;2;92;157;255;1msrc/lib/browser/css-polyfills.ts[0m:151:39]
2025-06-04T21:52:29.2993971Z  [2m150[0m │           ([property, value]) => {
2025-06-04T21:52:29.2994180Z  [2m151[0m │             element.style[property as any] = value
2025-06-04T21:52:29.2994392Z      · [38;2;246;87;248m                                      ───[0m
2025-06-04T21:52:29.2994499Z  [2m152[0m │           },
2025-06-04T21:52:29.2994590Z      ╰────
2025-06-04T21:52:29.2995090Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2995105Z 
2025-06-04T21:52:29.2995543Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.2995797Z      ╭─[[38;2;92;157;255;1msrc/lib/browser/crypto-polyfill.ts[0m:165:47]
2025-06-04T21:52:29.2995932Z  [2m164[0m │                 null,
2025-06-04T21:52:29.2996140Z  [2m165[0m │                 new Uint8Array(hashBuffer) as any,
2025-06-04T21:52:29.2996361Z      · [38;2;246;87;248m                                              ───[0m
2025-06-04T21:52:29.2996492Z  [2m166[0m │               ),
2025-06-04T21:52:29.2996582Z      ╰────
2025-06-04T21:52:29.2997079Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.2997086Z 
2025-06-04T21:52:29.2997502Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'OutcomeForecast' is imported but never used.[0m
2025-06-04T21:52:29.2998003Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:13:3]
2025-06-04T21:52:29.2998139Z  [2m12[0m │   TreatmentPlan,
2025-06-04T21:52:29.2998272Z  [2m13[0m │   OutcomeForecast,
2025-06-04T21:52:29.2998449Z     · [38;2;246;87;248m  ───────┬───────[0m
2025-06-04T21:52:29.2998737Z     ·          [38;2;246;87;248m╰── [38;2;246;87;248m'OutcomeForecast' is imported here[0m[0m
2025-06-04T21:52:29.2998875Z  [2m14[0m │   RiskAssessment,
2025-06-04T21:52:29.2998967Z     ╰────
2025-06-04T21:52:29.2999313Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.2999321Z 
2025-06-04T21:52:29.2999736Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Type 'RiskAssessment' is imported but never used.[0m
2025-06-04T21:52:29.3000101Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:14:3]
2025-06-04T21:52:29.3000238Z  [2m13[0m │   OutcomeForecast,
2025-06-04T21:52:29.3000372Z  [2m14[0m │   RiskAssessment,
2025-06-04T21:52:29.3000547Z     · [38;2;246;87;248m  ───────┬──────[0m
2025-06-04T21:52:29.3000958Z     ·          [38;2;246;87;248m╰── [38;2;246;87;248m'RiskAssessment' is imported here[0m[0m
2025-06-04T21:52:29.3001147Z  [2m15[0m │ } from './TreatmentPlanningService'
2025-06-04T21:52:29.3001237Z     ╰────
2025-06-04T21:52:29.3001475Z [38;2;106;159;181m  help: [0mConsider removing this import.
2025-06-04T21:52:29.3001482Z 
2025-06-04T21:52:29.3002079Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3002474Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1370:36]
2025-06-04T21:52:29.3002570Z  [2m1369[0m │ 
2025-06-04T21:52:29.3002917Z  [2m1370[0m │   private calculateMotivationScore(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3003141Z       · [38;2;246;87;248m                                   ─────┬─────[0m
2025-06-04T21:52:29.3003471Z       ·                                         [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3003786Z  [2m1371[0m │     // Simplified calculation - in practice would analyze session content
2025-06-04T21:52:29.3003883Z       ╰────
2025-06-04T21:52:29.3004131Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3004138Z 
2025-06-04T21:52:29.3004696Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'goal' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3005078Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1381:42]
2025-06-04T21:52:29.3005178Z  [2m1380[0m │ 
2025-06-04T21:52:29.3005459Z  [2m1381[0m │   private calculateHistoricalSuccessRate(goal: Goal): number {
2025-06-04T21:52:29.3005683Z       · [38;2;246;87;248m                                         ──┬─[0m
2025-06-04T21:52:29.3005992Z       ·                                            [38;2;246;87;248m╰── [38;2;246;87;248m'goal' is declared here[0m[0m
2025-06-04T21:52:29.3006275Z  [2m1382[0m │     // Simplified calculation - would use actual historical data
2025-06-04T21:52:29.3006367Z       ╰────
2025-06-04T21:52:29.3006612Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3006619Z 
2025-06-04T21:52:29.3007206Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3007584Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1386:31]
2025-06-04T21:52:29.3007682Z  [2m1385[0m │ 
2025-06-04T21:52:29.3007991Z  [2m1386[0m │   private assessSupportSystem(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3008211Z       · [38;2;246;87;248m                              ─────┬─────[0m
2025-06-04T21:52:29.3008640Z       ·                                    [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3008814Z  [2m1387[0m │     // Simplified assessment
2025-06-04T21:52:29.3008908Z       ╰────
2025-06-04T21:52:29.3009261Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3009269Z 
2025-06-04T21:52:29.3009877Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionAnalyses' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3010255Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1460:5]
2025-06-04T21:52:29.3010447Z  [2m1459[0m │   private calculateBaselineSeverity(
2025-06-04T21:52:29.3010642Z  [2m1460[0m │     emotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3010808Z       · [38;2;246;87;248m    ───────┬───────[0m
2025-06-04T21:52:29.3011119Z       ·            [38;2;246;87;248m╰── [38;2;246;87;248m'emotionAnalyses' is declared here[0m[0m
2025-06-04T21:52:29.3011231Z  [2m1461[0m │   ): number {
2025-06-04T21:52:29.3011438Z       ╰────
2025-06-04T21:52:29.3011699Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3011705Z 
2025-06-04T21:52:29.3012295Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3012678Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1464:39]
2025-06-04T21:52:29.3012776Z  [2m1463[0m │   }
2025-06-04T21:52:29.3013135Z  [2m1464[0m │   private calculateTreatmentAdherence(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3020261Z       · [38;2;246;87;248m                                      ─────┬─────[0m
2025-06-04T21:52:29.3020726Z       ·                                            [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3020959Z  [2m1465[0m │     return Math.random() * 0.4 + 0.5
2025-06-04T21:52:29.3021073Z       ╰────
2025-06-04T21:52:29.3021347Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3021358Z 
2025-06-04T21:52:29.3022004Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionAnalyses' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3022400Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1468:5]
2025-06-04T21:52:29.3022606Z  [2m1467[0m │   private calculateEmotionRegulation(
2025-06-04T21:52:29.3022799Z  [2m1468[0m │     emotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3022972Z       · [38;2;246;87;248m    ───────┬───────[0m
2025-06-04T21:52:29.3023274Z       ·            [38;2;246;87;248m╰── [38;2;246;87;248m'emotionAnalyses' is declared here[0m[0m
2025-06-04T21:52:29.3023398Z  [2m1469[0m │   ): number {
2025-06-04T21:52:29.3023491Z       ╰────
2025-06-04T21:52:29.3023757Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3023766Z 
2025-06-04T21:52:29.3024371Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3024754Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1472:41]
2025-06-04T21:52:29.3024858Z  [2m1471[0m │   }
2025-06-04T21:52:29.3025230Z  [2m1472[0m │   private calculateCognitiveFlexibility(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3025470Z       · [38;2;246;87;248m                                        ─────┬─────[0m
2025-06-04T21:52:29.3025799Z       ·                                              [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3026173Z  [2m1473[0m │     return Math.random() * 0.4 + 0.4
2025-06-04T21:52:29.3026266Z       ╰────
2025-06-04T21:52:29.3026532Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3026541Z 
2025-06-04T21:52:29.3027155Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionAnalyses' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3027536Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1475:36]
2025-06-04T21:52:29.3027635Z  [2m1474[0m │   }
2025-06-04T21:52:29.3027998Z  [2m1475[0m │   private estimateComorbidityCount(emotionAnalyses: EmotionAnalysis[]): number {
2025-06-04T21:52:29.3028230Z       · [38;2;246;87;248m                                   ───────┬───────[0m
2025-06-04T21:52:29.3028563Z       ·                                           [38;2;246;87;248m╰── [38;2;246;87;248m'emotionAnalyses' is declared here[0m[0m
2025-06-04T21:52:29.3028756Z  [2m1476[0m │     return Math.random() * 0.3 + 0.1
2025-06-04T21:52:29.3028846Z       ╰────
2025-06-04T21:52:29.3029340Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3029352Z 
2025-06-04T21:52:29.3029984Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionAnalyses' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3030367Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1482:5]
2025-06-04T21:52:29.3030563Z  [2m1481[0m │   private calculateSymptomTrajectory(
2025-06-04T21:52:29.3030755Z  [2m1482[0m │     emotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3030922Z       · [38;2;246;87;248m    ───────┬───────[0m
2025-06-04T21:52:29.3031210Z       ·            [38;2;246;87;248m╰── [38;2;246;87;248m'emotionAnalyses' is declared here[0m[0m
2025-06-04T21:52:29.3031331Z  [2m1483[0m │   ): number {
2025-06-04T21:52:29.3031422Z       ╰────
2025-06-04T21:52:29.3031667Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3031674Z 
2025-06-04T21:52:29.3032276Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3032651Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1486:30]
2025-06-04T21:52:29.3032751Z  [2m1485[0m │   }
2025-06-04T21:52:29.3033056Z  [2m1486[0m │   private assessCopingSkills(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3033273Z       · [38;2;246;87;248m                             ─────┬─────[0m
2025-06-04T21:52:29.3033584Z       ·                                   [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3033763Z  [2m1487[0m │     return Math.random() * 0.4 + 0.4
2025-06-04T21:52:29.3033867Z       ╰────
2025-06-04T21:52:29.3034108Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3034114Z 
2025-06-04T21:52:29.3034730Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionAnalyses' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3035106Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1489:32]
2025-06-04T21:52:29.3035205Z  [2m1488[0m │   }
2025-06-04T21:52:29.3035544Z  [2m1489[0m │   private calculateStressLevel(emotionAnalyses: EmotionAnalysis[]): number {
2025-06-04T21:52:29.3035774Z       · [38;2;246;87;248m                               ───────┬───────[0m
2025-06-04T21:52:29.3036097Z       ·                                       [38;2;246;87;248m╰── [38;2;246;87;248m'emotionAnalyses' is declared here[0m[0m
2025-06-04T21:52:29.3036276Z  [2m1490[0m │     return Math.random() * 0.5 + 0.2
2025-06-04T21:52:29.3036490Z       ╰────
2025-06-04T21:52:29.3036736Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3036743Z 
2025-06-04T21:52:29.3037439Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3037824Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1492:35]
2025-06-04T21:52:29.3037923Z  [2m1491[0m │   }
2025-06-04T21:52:29.3038254Z  [2m1492[0m │   private assessSocialFunctioning(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3038477Z       · [38;2;246;87;248m                                  ─────┬─────[0m
2025-06-04T21:52:29.3038789Z       ·                                        [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3038967Z  [2m1493[0m │     return Math.random() * 0.4 + 0.4
2025-06-04T21:52:29.3039179Z       ╰────
2025-06-04T21:52:29.3039426Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3039434Z 
2025-06-04T21:52:29.3040031Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3040414Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1497:36]
2025-06-04T21:52:29.3040600Z  [2m1496[0m │   // Additional placeholder methods
2025-06-04T21:52:29.3040941Z  [2m1497[0m │   private calculateEngagementTrend(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3041166Z       · [38;2;246;87;248m                                   ─────┬─────[0m
2025-06-04T21:52:29.3041484Z       ·                                         [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3041657Z  [2m1498[0m │     return Math.random() * 0.6 + 0.2
2025-06-04T21:52:29.3041762Z       ╰────
2025-06-04T21:52:29.3042006Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3042013Z 
2025-06-04T21:52:29.3042631Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionAnalyses' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3043007Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1501:5]
2025-06-04T21:52:29.3043212Z  [2m1500[0m │   private calculateEmotionalVolatility(
2025-06-04T21:52:29.3043398Z  [2m1501[0m │     emotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3043567Z       · [38;2;246;87;248m    ───────┬───────[0m
2025-06-04T21:52:29.3043852Z       ·            [38;2;246;87;248m╰── [38;2;246;87;248m'emotionAnalyses' is declared here[0m[0m
2025-06-04T21:52:29.3043964Z  [2m1502[0m │   ): number {
2025-06-04T21:52:29.3044059Z       ╰────
2025-06-04T21:52:29.3044300Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3044434Z 
2025-06-04T21:52:29.3045037Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3045413Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1505:41]
2025-06-04T21:52:29.3045513Z  [2m1504[0m │   }
2025-06-04T21:52:29.3045871Z  [2m1505[0m │   private calculateResistanceIndicators(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3046105Z       · [38;2;246;87;248m                                        ─────┬─────[0m
2025-06-04T21:52:29.3046427Z       ·                                              [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3046608Z  [2m1506[0m │     return Math.random() * 0.4 + 0.1
2025-06-04T21:52:29.3046698Z       ╰────
2025-06-04T21:52:29.3046942Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3046957Z 
2025-06-04T21:52:29.3047647Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3048033Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1508:35]
2025-06-04T21:52:29.3048135Z  [2m1507[0m │   }
2025-06-04T21:52:29.3048467Z  [2m1508[0m │   private assessExternalStressors(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3048689Z       · [38;2;246;87;248m                                  ─────┬─────[0m
2025-06-04T21:52:29.3049187Z       ·                                        [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3049449Z  [2m1509[0m │     return Math.random() * 0.5 + 0.2
2025-06-04T21:52:29.3049544Z       ╰────
2025-06-04T21:52:29.3049798Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3049817Z 
2025-06-04T21:52:29.3050416Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3050800Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1514:39]
2025-06-04T21:52:29.3050900Z  [2m1513[0m │   }
2025-06-04T21:52:29.3051258Z  [2m1514[0m │   private calculateHomeworkCompletion(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3051486Z       · [38;2;246;87;248m                                      ─────┬─────[0m
2025-06-04T21:52:29.3051808Z       ·                                            [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3051985Z  [2m1515[0m │     return Math.random() * 0.4 + 0.5
2025-06-04T21:52:29.3052083Z       ╰────
2025-06-04T21:52:29.3052324Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3052338Z 
2025-06-04T21:52:29.3052931Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3053308Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1517:39]
2025-06-04T21:52:29.3053409Z  [2m1516[0m │   }
2025-06-04T21:52:29.3053759Z  [2m1517[0m │   private calculateTherapeuticRapport(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3053987Z       · [38;2;246;87;248m                                      ─────┬─────[0m
2025-06-04T21:52:29.3054303Z       ·                                            [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3054475Z  [2m1518[0m │     return Math.random() * 0.3 + 0.6
2025-06-04T21:52:29.3054571Z       ╰────
2025-06-04T21:52:29.3054811Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3054952Z 
2025-06-04T21:52:29.3055558Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3055937Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1520:36]
2025-06-04T21:52:29.3056039Z  [2m1519[0m │   }
2025-06-04T21:52:29.3056376Z  [2m1520[0m │   private calculateMotivationLevel(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3056603Z       · [38;2;246;87;248m                                   ─────┬─────[0m
2025-06-04T21:52:29.3056917Z       ·                                         [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3057102Z  [2m1521[0m │     return Math.random() * 0.4 + 0.4
2025-06-04T21:52:29.3057191Z       ╰────
2025-06-04T21:52:29.3057439Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3057455Z 
2025-06-04T21:52:29.3058151Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3058544Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1523:33]
2025-06-04T21:52:29.3058642Z  [2m1522[0m │   }
2025-06-04T21:52:29.3058967Z  [2m1523[0m │   private assessFeedbackQuality(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3059307Z       · [38;2;246;87;248m                                ─────┬─────[0m
2025-06-04T21:52:29.3059627Z       ·                                      [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3059808Z  [2m1524[0m │     return Math.random() * 0.4 + 0.4
2025-06-04T21:52:29.3059897Z       ╰────
2025-06-04T21:52:29.3060143Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3060160Z 
2025-06-04T21:52:29.3060749Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3061129Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1526:34]
2025-06-04T21:52:29.3061225Z  [2m1525[0m │   }
2025-06-04T21:52:29.3061555Z  [2m1526[0m │   private calculateGoalAlignment(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3061773Z       · [38;2;246;87;248m                                 ─────┬─────[0m
2025-06-04T21:52:29.3062089Z       ·                                       [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3062266Z  [2m1527[0m │     return Math.random() * 0.3 + 0.6
2025-06-04T21:52:29.3062360Z       ╰────
2025-06-04T21:52:29.3062602Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3062617Z 
2025-06-04T21:52:29.3063210Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3063586Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1531:34]
2025-06-04T21:52:29.3063769Z  [2m1530[0m │   // Challenge-specific calculations
2025-06-04T21:52:29.3064092Z  [2m1531[0m │   private calculateDefensiveness(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3064311Z       · [38;2;246;87;248m                                 ─────┬─────[0m
2025-06-04T21:52:29.3064617Z       ·                                       [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3064792Z  [2m1532[0m │     return Math.random() * 0.4 + 0.1
2025-06-04T21:52:29.3064881Z       ╰────
2025-06-04T21:52:29.3065119Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3065250Z 
2025-06-04T21:52:29.3065855Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3066233Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1534:39]
2025-06-04T21:52:29.3066333Z  [2m1533[0m │   }
2025-06-04T21:52:29.3066683Z  [2m1534[0m │   private calculateCollaborationLevel(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3066913Z       · [38;2;246;87;248m                                      ─────┬─────[0m
2025-06-04T21:52:29.3067231Z       ·                                            [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3067411Z  [2m1535[0m │     return Math.random() * 0.4 + 0.5
2025-06-04T21:52:29.3067499Z       ╰────
2025-06-04T21:52:29.3067758Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3067772Z 
2025-06-04T21:52:29.3068476Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3068877Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1537:38]
2025-06-04T21:52:29.3068976Z  [2m1536[0m │   }
2025-06-04T21:52:29.3069449Z  [2m1537[0m │   private calculateAttendanceDecline(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3069682Z       · [38;2;246;87;248m                                     ─────┬─────[0m
2025-06-04T21:52:29.3070008Z       ·                                           [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3070187Z  [2m1538[0m │     return Math.random() * 0.3 + 0.1
2025-06-04T21:52:29.3070285Z       ╰────
2025-06-04T21:52:29.3070536Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3070552Z 
2025-06-04T21:52:29.3071155Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3071543Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1540:38]
2025-06-04T21:52:29.3071642Z  [2m1539[0m │   }
2025-06-04T21:52:29.3071997Z  [2m1540[0m │   private calculateEngagementDecline(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3072221Z       · [38;2;246;87;248m                                     ─────┬─────[0m
2025-06-04T21:52:29.3072542Z       ·                                           [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3072717Z  [2m1541[0m │     return Math.random() * 0.3 + 0.1
2025-06-04T21:52:29.3072813Z       ╰────
2025-06-04T21:52:29.3073057Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3073071Z 
2025-06-04T21:52:29.3073695Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionAnalyses' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3074074Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1544:5]
2025-06-04T21:52:29.3074272Z  [2m1543[0m │   private calculateSymptomVolatility(
2025-06-04T21:52:29.3074466Z  [2m1544[0m │     emotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3074639Z       · [38;2;246;87;248m    ───────┬───────[0m
2025-06-04T21:52:29.3074928Z       ·            [38;2;246;87;248m╰── [38;2;246;87;248m'emotionAnalyses' is declared here[0m[0m
2025-06-04T21:52:29.3075050Z  [2m1545[0m │   ): number {
2025-06-04T21:52:29.3075139Z       ╰────
2025-06-04T21:52:29.3075383Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3075394Z 
2025-06-04T21:52:29.3076004Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'emotionAnalyses' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3076545Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1548:35]
2025-06-04T21:52:29.3076649Z  [2m1547[0m │   }
2025-06-04T21:52:29.3077041Z  [2m1548[0m │   private calculateStressIncrease(emotionAnalyses: EmotionAnalysis[]): number {
2025-06-04T21:52:29.3077281Z       · [38;2;246;87;248m                                  ───────┬───────[0m
2025-06-04T21:52:29.3077615Z       ·                                          [38;2;246;87;248m╰── [38;2;246;87;248m'emotionAnalyses' is declared here[0m[0m
2025-06-04T21:52:29.3077798Z  [2m1549[0m │     return Math.random() * 0.4 + 0.2
2025-06-04T21:52:29.3077888Z       ╰────
2025-06-04T21:52:29.3078135Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3078142Z 
2025-06-04T21:52:29.3078704Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'goals' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3079319Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1551:36]
2025-06-04T21:52:29.3079432Z  [2m1550[0m │   }
2025-06-04T21:52:29.3079708Z  [2m1551[0m │   private calculateProgressPlateau(goals: Goal[]): number {
2025-06-04T21:52:29.3079922Z       · [38;2;246;87;248m                                   ──┬──[0m
2025-06-04T21:52:29.3080221Z       ·                                      [38;2;246;87;248m╰── [38;2;246;87;248m'goals' is declared here[0m[0m
2025-06-04T21:52:29.3080397Z  [2m1552[0m │     return Math.random() * 0.4 + 0.2
2025-06-04T21:52:29.3080486Z       ╰────
2025-06-04T21:52:29.3080732Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3080739Z 
2025-06-04T21:52:29.3081330Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3081728Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1555:5]
2025-06-04T21:52:29.3081940Z  [2m1554[0m │   private calculateTechniqueEffectiveness(
2025-06-04T21:52:29.3082123Z  [2m1555[0m │     sessionData: TherapySession[],
2025-06-04T21:52:29.3082282Z       · [38;2;246;87;248m    ─────┬─────[0m
2025-06-04T21:52:29.3082564Z       ·          [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3082676Z  [2m1556[0m │   ): number {
2025-06-04T21:52:29.3082769Z       ╰────
2025-06-04T21:52:29.3083017Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3083023Z 
2025-06-04T21:52:29.3083616Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3084008Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1559:36]
2025-06-04T21:52:29.3084112Z  [2m1558[0m │   }
2025-06-04T21:52:29.3084459Z  [2m1559[0m │   private calculateHomeworkDecline(sessionData: TherapySession[]): number {
2025-06-04T21:52:29.3084685Z       · [38;2;246;87;248m                                   ─────┬─────[0m
2025-06-04T21:52:29.3085001Z       ·                                         [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3085187Z  [2m1560[0m │     return Math.random() * 0.3 + 0.1
2025-06-04T21:52:29.3085276Z       ╰────
2025-06-04T21:52:29.3085522Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3085528Z 
2025-06-04T21:52:29.3086122Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'sessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3086625Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1563:5]
2025-06-04T21:52:29.3086848Z  [2m1562[0m │   private calculateRecommendationAdherence(
2025-06-04T21:52:29.3087107Z  [2m1563[0m │     sessionData: TherapySession[],
2025-06-04T21:52:29.3087278Z       · [38;2;246;87;248m    ─────┬─────[0m
2025-06-04T21:52:29.3087554Z       ·          [38;2;246;87;248m╰── [38;2;246;87;248m'sessionData' is declared here[0m[0m
2025-06-04T21:52:29.3087671Z  [2m1564[0m │   ): number {
2025-06-04T21:52:29.3087763Z       ╰────
2025-06-04T21:52:29.3088013Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3088019Z 
2025-06-04T21:52:29.3088618Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'challengeType' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3089099Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1602:5]
2025-06-04T21:52:29.3089267Z  [2m1601[0m │     probability: number,
2025-06-04T21:52:29.3089525Z  [2m1602[0m │     challengeType: ChallengePrediction['challengeType'],
2025-06-04T21:52:29.3089699Z       · [38;2;246;87;248m    ──────┬──────[0m
2025-06-04T21:52:29.3089985Z       ·           [38;2;246;87;248m╰── [38;2;246;87;248m'challengeType' is declared here[0m[0m
2025-06-04T21:52:29.3090182Z  [2m1603[0m │   ): ChallengePrediction['severity'] {
2025-06-04T21:52:29.3090274Z       ╰────
2025-06-04T21:52:29.3090522Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3090528Z 
2025-06-04T21:52:29.3091101Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'features' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3091480Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1612:5]
2025-06-04T21:52:29.3091733Z  [2m1611[0m │     challengeType: ChallengePrediction['challengeType'],
2025-06-04T21:52:29.3091932Z  [2m1612[0m │     features: Record<string, number>,
2025-06-04T21:52:29.3092087Z       · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.3092364Z       ·         [38;2;246;87;248m╰── [38;2;246;87;248m'features' is declared here[0m[0m
2025-06-04T21:52:29.3092551Z  [2m1613[0m │   ): ChallengePrediction['duration'] {
2025-06-04T21:52:29.3092643Z       ╰────
2025-06-04T21:52:29.3092885Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3092891Z 
2025-06-04T21:52:29.3093467Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'features' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3093839Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1624:5]
2025-06-04T21:52:29.3093990Z  [2m1623[0m │     probability: number,
2025-06-04T21:52:29.3094169Z  [2m1624[0m │     features: Record<string, number>,
2025-06-04T21:52:29.3094450Z       · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.3094725Z       ·         [38;2;246;87;248m╰── [38;2;246;87;248m'features' is declared here[0m[0m
2025-06-04T21:52:29.3094874Z  [2m1625[0m │   ): ChallengeImpact {
2025-06-04T21:52:29.3094968Z       ╰────
2025-06-04T21:52:29.3095208Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3095215Z 
2025-06-04T21:52:29.3095812Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'challengeType' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3096183Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1645:5]
2025-06-04T21:52:29.3096377Z  [2m1644[0m │   private identifyChallengeTriggers(
2025-06-04T21:52:29.3096625Z  [2m1645[0m │     challengeType: ChallengePrediction['challengeType'],
2025-06-04T21:52:29.3096790Z       · [38;2;246;87;248m    ──────┬──────[0m
2025-06-04T21:52:29.3097080Z       ·           [38;2;246;87;248m╰── [38;2;246;87;248m'challengeType' is declared here[0m[0m
2025-06-04T21:52:29.3097374Z  [2m1646[0m │     features: Record<string, number>,
2025-06-04T21:52:29.3097471Z       ╰────
2025-06-04T21:52:29.3097717Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3097728Z 
2025-06-04T21:52:29.3098300Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'features' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3098668Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1646:5]
2025-06-04T21:52:29.3098920Z  [2m1645[0m │     challengeType: ChallengePrediction['challengeType'],
2025-06-04T21:52:29.3099198Z  [2m1646[0m │     features: Record<string, number>,
2025-06-04T21:52:29.3099356Z       · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.3099623Z       ·         [38;2;246;87;248m╰── [38;2;246;87;248m'features' is declared here[0m[0m
2025-06-04T21:52:29.3099778Z  [2m1647[0m │   ): ChallengeTrigger[] {
2025-06-04T21:52:29.3099868Z       ╰────
2025-06-04T21:52:29.3100124Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3100131Z 
2025-06-04T21:52:29.3100729Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'challengeType' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3101109Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1665:5]
2025-06-04T21:52:29.3101289Z  [2m1664[0m │   private identifyWarningSignals(
2025-06-04T21:52:29.3101542Z  [2m1665[0m │     challengeType: ChallengePrediction['challengeType'],
2025-06-04T21:52:29.3101701Z       · [38;2;246;87;248m    ──────┬──────[0m
2025-06-04T21:52:29.3101986Z       ·           [38;2;246;87;248m╰── [38;2;246;87;248m'challengeType' is declared here[0m[0m
2025-06-04T21:52:29.3102172Z  [2m1666[0m │     features: Record<string, number>,
2025-06-04T21:52:29.3102263Z       ╰────
2025-06-04T21:52:29.3102521Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3102527Z 
2025-06-04T21:52:29.3103098Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'features' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3103476Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1666:5]
2025-06-04T21:52:29.3103726Z  [2m1665[0m │     challengeType: ChallengePrediction['challengeType'],
2025-06-04T21:52:29.3103908Z  [2m1666[0m │     features: Record<string, number>,
2025-06-04T21:52:29.3104059Z       · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.3104324Z       ·         [38;2;246;87;248m╰── [38;2;246;87;248m'features' is declared here[0m[0m
2025-06-04T21:52:29.3104468Z  [2m1667[0m │   ): WarningSignal[] {
2025-06-04T21:52:29.3104692Z       ╰────
2025-06-04T21:52:29.3104938Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3104945Z 
2025-06-04T21:52:29.3105551Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'challengeType' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3105922Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1680:5]
2025-06-04T21:52:29.3106131Z  [2m1679[0m │   private generatePreventionStrategies(
2025-06-04T21:52:29.3106379Z  [2m1680[0m │     challengeType: ChallengePrediction['challengeType'],
2025-06-04T21:52:29.3106543Z       · [38;2;246;87;248m    ──────┬──────[0m
2025-06-04T21:52:29.3106820Z       ·           [38;2;246;87;248m╰── [38;2;246;87;248m'challengeType' is declared here[0m[0m
2025-06-04T21:52:29.3106996Z  [2m1681[0m │     features: Record<string, number>,
2025-06-04T21:52:29.3107100Z       ╰────
2025-06-04T21:52:29.3107339Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3107345Z 
2025-06-04T21:52:29.3108026Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'features' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3108405Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1681:5]
2025-06-04T21:52:29.3108655Z  [2m1680[0m │     challengeType: ChallengePrediction['challengeType'],
2025-06-04T21:52:29.3108831Z  [2m1681[0m │     features: Record<string, number>,
2025-06-04T21:52:29.3109080Z       · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.3109349Z       ·         [38;2;246;87;248m╰── [38;2;246;87;248m'features' is declared here[0m[0m
2025-06-04T21:52:29.3109513Z  [2m1682[0m │   ): PreventionStrategy[] {
2025-06-04T21:52:29.3109603Z       ╰────
2025-06-04T21:52:29.3109849Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3109866Z 
2025-06-04T21:52:29.3110466Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'challengeType' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3110839Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1696:5]
2025-06-04T21:52:29.3111029Z  [2m1695[0m │   private createInterventionPlan(
2025-06-04T21:52:29.3111278Z  [2m1696[0m │     challengeType: ChallengePrediction['challengeType'],
2025-06-04T21:52:29.3111436Z       · [38;2;246;87;248m    ──────┬──────[0m
2025-06-04T21:52:29.3111711Z       ·           [38;2;246;87;248m╰── [38;2;246;87;248m'challengeType' is declared here[0m[0m
2025-06-04T21:52:29.3111929Z  [2m1697[0m │     severity: ChallengePrediction['severity'],
2025-06-04T21:52:29.3112020Z       ╰────
2025-06-04T21:52:29.3112265Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3112280Z 
2025-06-04T21:52:29.3112859Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'severity' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3113237Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1697:5]
2025-06-04T21:52:29.3113483Z  [2m1696[0m │     challengeType: ChallengePrediction['challengeType'],
2025-06-04T21:52:29.3113698Z  [2m1697[0m │     severity: ChallengePrediction['severity'],
2025-06-04T21:52:29.3113847Z       · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.3114107Z       ·         [38;2;246;87;248m╰── [38;2;246;87;248m'severity' is declared here[0m[0m
2025-06-04T21:52:29.3114282Z  [2m1698[0m │     features: Record<string, number>,
2025-06-04T21:52:29.3114375Z       ╰────
2025-06-04T21:52:29.3114615Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3114621Z 
2025-06-04T21:52:29.3115365Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'features' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3115745Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1698:5]
2025-06-04T21:52:29.3115961Z  [2m1697[0m │     severity: ChallengePrediction['severity'],
2025-06-04T21:52:29.3116140Z  [2m1698[0m │     features: Record<string, number>,
2025-06-04T21:52:29.3116305Z       · [38;2;246;87;248m    ────┬───[0m
2025-06-04T21:52:29.3116568Z       ·         [38;2;246;87;248m╰── [38;2;246;87;248m'features' is declared here[0m[0m
2025-06-04T21:52:29.3116718Z  [2m1699[0m │   ): InterventionPlan {
2025-06-04T21:52:29.3116815Z       ╰────
2025-06-04T21:52:29.3117055Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3117062Z 
2025-06-04T21:52:29.3117668Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'newSessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3118050Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1880:5]
2025-06-04T21:52:29.3118378Z  [2m1879[0m │     prediction: TreatmentOutcomePrediction,
2025-06-04T21:52:29.3118568Z  [2m1880[0m │     newSessionData: TherapySession[],
2025-06-04T21:52:29.3118737Z       · [38;2;246;87;248m    ───────┬──────[0m
2025-06-04T21:52:29.3119124Z       ·            [38;2;246;87;248m╰── [38;2;246;87;248m'newSessionData' is declared here[0m[0m
2025-06-04T21:52:29.3119336Z  [2m1881[0m │     newEmotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3119425Z       ╰────
2025-06-04T21:52:29.3119670Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3119677Z 
2025-06-04T21:52:29.3120304Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'newEmotionAnalyses' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3120689Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1881:5]
2025-06-04T21:52:29.3120888Z  [2m1880[0m │     newSessionData: TherapySession[],
2025-06-04T21:52:29.3121090Z  [2m1881[0m │     newEmotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3121269Z       · [38;2;246;87;248m    ─────────┬────────[0m
2025-06-04T21:52:29.3121577Z       ·              [38;2;246;87;248m╰── [38;2;246;87;248m'newEmotionAnalyses' is declared here[0m[0m
2025-06-04T21:52:29.3121733Z  [2m1882[0m │     updatedGoals: Goal[],
2025-06-04T21:52:29.3121823Z       ╰────
2025-06-04T21:52:29.3122068Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3122074Z 
2025-06-04T21:52:29.3122670Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'updatedGoals' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3123046Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1882:5]
2025-06-04T21:52:29.3123255Z  [2m1881[0m │     newEmotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3123414Z  [2m1882[0m │     updatedGoals: Goal[],
2025-06-04T21:52:29.3123574Z       · [38;2;246;87;248m    ──────┬─────[0m
2025-06-04T21:52:29.3123855Z       ·           [38;2;246;87;248m╰── [38;2;246;87;248m'updatedGoals' is declared here[0m[0m
2025-06-04T21:52:29.3124054Z  [2m1883[0m │   ): Promise<TreatmentOutcomePrediction> {
2025-06-04T21:52:29.3124147Z       ╰────
2025-06-04T21:52:29.3124387Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3124393Z 
2025-06-04T21:52:29.3125002Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'newSessionData' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3125377Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1893:5]
2025-06-04T21:52:29.3125728Z  [2m1892[0m │     challengePrediction: ChallengePrediction,
2025-06-04T21:52:29.3125909Z  [2m1893[0m │     newSessionData: TherapySession[],
2025-06-04T21:52:29.3126083Z       · [38;2;246;87;248m    ───────┬──────[0m
2025-06-04T21:52:29.3126377Z       ·            [38;2;246;87;248m╰── [38;2;246;87;248m'newSessionData' is declared here[0m[0m
2025-06-04T21:52:29.3126574Z  [2m1894[0m │     newEmotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3126670Z       ╰────
2025-06-04T21:52:29.3126909Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3126916Z 
2025-06-04T21:52:29.3127538Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'newEmotionAnalyses' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3127908Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1894:5]
2025-06-04T21:52:29.3128101Z  [2m1893[0m │     newSessionData: TherapySession[],
2025-06-04T21:52:29.3128296Z  [2m1894[0m │     newEmotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3128579Z       · [38;2;246;87;248m    ─────────┬────────[0m
2025-06-04T21:52:29.3128892Z       ·              [38;2;246;87;248m╰── [38;2;246;87;248m'newEmotionAnalyses' is declared here[0m[0m
2025-06-04T21:52:29.3129149Z  [2m1895[0m │     updatedGoals: Goal[],
2025-06-04T21:52:29.3129244Z       ╰────
2025-06-04T21:52:29.3129486Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3129497Z 
2025-06-04T21:52:29.3130090Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'updatedGoals' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3130465Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1895:5]
2025-06-04T21:52:29.3130665Z  [2m1894[0m │     newEmotionAnalyses: EmotionAnalysis[],
2025-06-04T21:52:29.3130822Z  [2m1895[0m │     updatedGoals: Goal[],
2025-06-04T21:52:29.3130983Z       · [38;2;246;87;248m    ──────┬─────[0m
2025-06-04T21:52:29.3131270Z       ·           [38;2;246;87;248m╰── [38;2;246;87;248m'updatedGoals' is declared here[0m[0m
2025-06-04T21:52:29.3131460Z  [2m1896[0m │   ): Promise<ChallengePrediction> {
2025-06-04T21:52:29.3131551Z       ╰────
2025-06-04T21:52:29.3131793Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3131799Z 
2025-06-04T21:52:29.3132380Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'featureName' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3132751Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1928:5]
2025-06-04T21:52:29.3132950Z  [2m1927[0m │   private generateMitigationStrategies(
2025-06-04T21:52:29.3133100Z  [2m1928[0m │     featureName: string,
2025-06-04T21:52:29.3133407Z       · [38;2;246;87;248m    ─────┬─────[0m
2025-06-04T21:52:29.3133685Z       ·          [38;2;246;87;248m╰── [38;2;246;87;248m'featureName' is declared here[0m[0m
2025-06-04T21:52:29.3133853Z  [2m1929[0m │     predictionType: string,
2025-06-04T21:52:29.3133944Z       ╰────
2025-06-04T21:52:29.3134195Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3134202Z 
2025-06-04T21:52:29.3134806Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'predictionType' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3135182Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1929:5]
2025-06-04T21:52:29.3135329Z  [2m1928[0m │     featureName: string,
2025-06-04T21:52:29.3135484Z  [2m1929[0m │     predictionType: string,
2025-06-04T21:52:29.3135648Z       · [38;2;246;87;248m    ───────┬──────[0m
2025-06-04T21:52:29.3135938Z       ·            [38;2;246;87;248m╰── [38;2;246;87;248m'predictionType' is declared here[0m[0m
2025-06-04T21:52:29.3136081Z  [2m1930[0m │   ): string[] {
2025-06-04T21:52:29.3136174Z       ╰────
2025-06-04T21:52:29.3136532Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3136541Z 
2025-06-04T21:52:29.3137144Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'featureName' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3137526Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1939:40]
2025-06-04T21:52:29.3137627Z  [2m1938[0m │ 
2025-06-04T21:52:29.3137954Z  [2m1939[0m │   private generateMonitoringStrategies(featureName: string): string[] {
2025-06-04T21:52:29.3138186Z       · [38;2;246;87;248m                                       ─────┬─────[0m
2025-06-04T21:52:29.3138512Z       ·                                             [38;2;246;87;248m╰── [38;2;246;87;248m'featureName' is declared here[0m[0m
2025-06-04T21:52:29.3138632Z  [2m1940[0m │     return [
2025-06-04T21:52:29.3138726Z       ╰────
2025-06-04T21:52:29.3139091Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3139099Z 
2025-06-04T21:52:29.3139697Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'featureName' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3140072Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1948:5]
2025-06-04T21:52:29.3140279Z  [2m1947[0m │   private generateEnhancementStrategies(
2025-06-04T21:52:29.3140422Z  [2m1948[0m │     featureName: string,
2025-06-04T21:52:29.3140581Z       · [38;2;246;87;248m    ─────┬─────[0m
2025-06-04T21:52:29.3140853Z       ·          [38;2;246;87;248m╰── [38;2;246;87;248m'featureName' is declared here[0m[0m
2025-06-04T21:52:29.3141012Z  [2m1949[0m │     predictionType: string,
2025-06-04T21:52:29.3141111Z       ╰────
2025-06-04T21:52:29.3141351Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3141361Z 
2025-06-04T21:52:29.3141969Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'predictionType' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3142342Z       ╭─[[38;2;92;157;255;1msrc/lib/ai/services/ComprehensiveOutcomePredictionService.ts[0m:1949:5]
2025-06-04T21:52:29.3142486Z  [2m1948[0m │     featureName: string,
2025-06-04T21:52:29.3142638Z  [2m1949[0m │     predictionType: string,
2025-06-04T21:52:29.3142802Z       · [38;2;246;87;248m    ───────┬──────[0m
2025-06-04T21:52:29.3143084Z       ·            [38;2;246;87;248m╰── [38;2;246;87;248m'predictionType' is declared here[0m[0m
2025-06-04T21:52:29.3143214Z  [2m1950[0m │   ): string[] {
2025-06-04T21:52:29.3143303Z       ╰────
2025-06-04T21:52:29.3143547Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3143679Z 
2025-06-04T21:52:29.3144146Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3144477Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationLayerFactory.ts[0m:232:55]
2025-06-04T21:52:29.3144678Z  [2m231[0m │       // Get client profile and efficacy data
2025-06-04T21:52:29.3144998Z  [2m232[0m │       const clientProfile = await (this.repository as any).getClientProfile(
2025-06-04T21:52:29.3145232Z      · [38;2;246;87;248m                                                      ───[0m
2025-06-04T21:52:29.3145367Z  [2m233[0m │         clientId,
2025-06-04T21:52:29.3145457Z      ╰────
2025-06-04T21:52:29.3145964Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3145975Z 
2025-06-04T21:52:29.3146417Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3146746Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationLayerFactory.ts[0m:329:18]
2025-06-04T21:52:29.3147058Z  [2m328[0m │     // to accept these configuration options
2025-06-04T21:52:29.3147287Z  [2m329[0m │     ;(service as any).setLayerConfiguration(config)
2025-06-04T21:52:29.3147453Z      · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.3147549Z  [2m330[0m │   }
2025-06-04T21:52:29.3147641Z      ╰────
2025-06-04T21:52:29.3148144Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3148151Z 
2025-06-04T21:52:29.3148589Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3148908Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationLayerFactory.ts[0m:336:20]
2025-06-04T21:52:29.3149214Z  [2m335[0m │   private determineOptimalLayerType(
2025-06-04T21:52:29.3149368Z  [2m336[0m │     clientProfile: any,
2025-06-04T21:52:29.3149540Z      · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.3149681Z  [2m337[0m │     efficacyData: any,
2025-06-04T21:52:29.3149773Z      ╰────
2025-06-04T21:52:29.3150272Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3150279Z 
2025-06-04T21:52:29.3150712Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3151030Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationLayerFactory.ts[0m:337:19]
2025-06-04T21:52:29.3151175Z  [2m336[0m │     clientProfile: any,
2025-06-04T21:52:29.3151315Z  [2m337[0m │     efficacyData: any,
2025-06-04T21:52:29.3151477Z      · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.3151660Z  [2m338[0m │   ): PersonalizationLayerType {
2025-06-04T21:52:29.3151748Z      ╰────
2025-06-04T21:52:29.3152259Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3152266Z 
2025-06-04T21:52:29.3152699Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3153015Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationLayerFactory.ts[0m:368:20]
2025-06-04T21:52:29.3153199Z  [2m367[0m │   private calculateOptimalWeights(
2025-06-04T21:52:29.3153341Z  [2m368[0m │     clientProfile: any,
2025-06-04T21:52:29.3153498Z      · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.3153635Z  [2m369[0m │     efficacyData: any,
2025-06-04T21:52:29.3153726Z      ╰────
2025-06-04T21:52:29.3154221Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3154355Z 
2025-06-04T21:52:29.3154809Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3155127Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationLayerFactory.ts[0m:369:19]
2025-06-04T21:52:29.3155273Z  [2m368[0m │     clientProfile: any,
2025-06-04T21:52:29.3155408Z  [2m369[0m │     efficacyData: any,
2025-06-04T21:52:29.3155571Z      · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.3155781Z  [2m370[0m │   ): PersonalizationLayerConfig['weights'] {
2025-06-04T21:52:29.3155874Z      ╰────
2025-06-04T21:52:29.3156367Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3156374Z 
2025-06-04T21:52:29.3156811Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3157134Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationLayerFactory.ts[0m:426:20]
2025-06-04T21:52:29.3157430Z  [2m425[0m │   private determineOptimalStrategies(
2025-06-04T21:52:29.3157581Z  [2m426[0m │     clientProfile: any,
2025-06-04T21:52:29.3157740Z      · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.3157913Z  [2m427[0m │   ): PersonalizationStrategy[] {
2025-06-04T21:52:29.3158003Z      ╰────
2025-06-04T21:52:29.3158502Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3158508Z 
2025-06-04T21:52:29.3158938Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3159360Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationLayerFactory.ts[0m:467:20]
2025-06-04T21:52:29.3159544Z  [2m466[0m │   private calculateOptimalThreshold(
2025-06-04T21:52:29.3159697Z  [2m467[0m │     clientProfile: any,
2025-06-04T21:52:29.3159853Z      · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.3160002Z  [2m468[0m │     efficacyData: any,
2025-06-04T21:52:29.3160092Z      ╰────
2025-06-04T21:52:29.3160587Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3160600Z 
2025-06-04T21:52:29.3161042Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3161354Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/services/PersonalizationLayerFactory.ts[0m:468:19]
2025-06-04T21:52:29.3161499Z  [2m467[0m │     clientProfile: any,
2025-06-04T21:52:29.3161636Z  [2m468[0m │     efficacyData: any,
2025-06-04T21:52:29.3161796Z      · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.3161904Z  [2m469[0m │   ): number {
2025-06-04T21:52:29.3162003Z      ╰────
2025-06-04T21:52:29.3162491Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3162506Z 
2025-06-04T21:52:29.3162943Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3163215Z     ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:62:23]
2025-06-04T21:52:29.3163415Z  [2m61[0m │   let mockClients: Map<string, WebSocket>
2025-06-04T21:52:29.3163560Z  [2m62[0m │   let mockHttpServer: any
2025-06-04T21:52:29.3163729Z     · [38;2;246;87;248m                      ───[0m
2025-06-04T21:52:29.3163826Z  [2m63[0m │ 
2025-06-04T21:52:29.3163915Z     ╰────
2025-06-04T21:52:29.3164418Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3164547Z 
2025-06-04T21:52:29.3164992Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3165269Z     ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:83:27]
2025-06-04T21:52:29.3165604Z  [2m82[0m │     // Store reference to internal clients map (optional, if needed for assertions)
2025-06-04T21:52:29.3165784Z  [2m83[0m │     mockClients = (wss as any).clients
2025-06-04T21:52:29.3165963Z     · [38;2;246;87;248m                          ───[0m
2025-06-04T21:52:29.3166058Z  [2m84[0m │ 
2025-06-04T21:52:29.3166146Z     ╰────
2025-06-04T21:52:29.3166644Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3166650Z 
2025-06-04T21:52:29.3167086Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3167373Z      ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:114:40]
2025-06-04T21:52:29.3167601Z  [2m113[0m │     it('should add new client on connection', () => {
2025-06-04T21:52:29.3168000Z  [2m114[0m │       const handleConnection = (wss as any).handleConnection.bind(wss)
2025-06-04T21:52:29.3168224Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.3168408Z  [2m115[0m │       handleConnection(mockWebSocket)
2025-06-04T21:52:29.3168503Z      ╰────
2025-06-04T21:52:29.3169100Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3169108Z 
2025-06-04T21:52:29.3169553Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3169822Z      ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:154:40]
2025-06-04T21:52:29.3170086Z  [2m153[0m │     it('should handle encrypted messages with FHE', async () => {
2025-06-04T21:52:29.3170386Z  [2m154[0m │       const handleConnection = (wss as any).handleConnection.bind(wss)
2025-06-04T21:52:29.3170601Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.3170780Z  [2m155[0m │       handleConnection(mockWebSocket)
2025-06-04T21:52:29.3170873Z      ╰────
2025-06-04T21:52:29.3171366Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3171373Z 
2025-06-04T21:52:29.3171818Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3172082Z      ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:190:40]
2025-06-04T21:52:29.3172308Z  [2m189[0m │     it('should handle status updates', async () => {
2025-06-04T21:52:29.3172594Z  [2m190[0m │       const handleConnection = (wss as any).handleConnection.bind(wss)
2025-06-04T21:52:29.3172812Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.3172998Z  [2m191[0m │       handleConnection(mockWebSocket)
2025-06-04T21:52:29.3173089Z      ╰────
2025-06-04T21:52:29.3173588Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3173595Z 
2025-06-04T21:52:29.3174034Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3174299Z      ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:213:40]
2025-06-04T21:52:29.3174516Z  [2m212[0m │     it('should handle client disconnection', () => {
2025-06-04T21:52:29.3174803Z  [2m213[0m │       const handleConnection = (wss as any).handleConnection.bind(wss)
2025-06-04T21:52:29.3175007Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.3175333Z  [2m214[0m │       handleConnection(mockWebSocket)
2025-06-04T21:52:29.3175422Z      ╰────
2025-06-04T21:52:29.3175928Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3175935Z 
2025-06-04T21:52:29.3176369Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3176637Z      ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:231:40]
2025-06-04T21:52:29.3176910Z  [2m230[0m │     it('should handle message parsing errors', async () => {
2025-06-04T21:52:29.3177201Z  [2m231[0m │       const handleConnection = (wss as any).handleConnection.bind(wss)
2025-06-04T21:52:29.3177403Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.3177584Z  [2m232[0m │       handleConnection(mockWebSocket)
2025-06-04T21:52:29.3177690Z      ╰────
2025-06-04T21:52:29.3178185Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3178192Z 
2025-06-04T21:52:29.3178741Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3179107Z      ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:257:16]
2025-06-04T21:52:29.3179327Z  [2m256[0m │       mockClients.set(clientId, mockWebSocket)
2025-06-04T21:52:29.3179577Z  [2m257[0m │       ;(wss as any).sessions.set(sessionId, new Set([clientId]))
2025-06-04T21:52:29.3179742Z      · [38;2;246;87;248m               ───[0m
2025-06-04T21:52:29.3179833Z  [2m258[0m │ 
2025-06-04T21:52:29.3179925Z      ╰────
2025-06-04T21:52:29.3180419Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3180436Z 
2025-06-04T21:52:29.3180875Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3181148Z      ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:260:16]
2025-06-04T21:52:29.3181299Z  [2m259[0m │       // Broadcast message
2025-06-04T21:52:29.3181517Z  [2m260[0m │       ;(wss as any).broadcastToSession(sessionId, {
2025-06-04T21:52:29.3181671Z      · [38;2;246;87;248m               ───[0m
2025-06-04T21:52:29.3181816Z  [2m261[0m │         type: 'message',
2025-06-04T21:52:29.3181904Z      ╰────
2025-06-04T21:52:29.3182399Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3182406Z 
2025-06-04T21:52:29.3182835Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3183111Z      ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:285:40]
2025-06-04T21:52:29.3183365Z  [2m284[0m │     it('should handle FHE initialization errors', async () => {
2025-06-04T21:52:29.3183660Z  [2m285[0m │       const handleConnection = (wss as any).handleConnection.bind(wss)
2025-06-04T21:52:29.3183862Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.3184044Z  [2m286[0m │       handleConnection(mockWebSocket)
2025-06-04T21:52:29.3184131Z      ╰────
2025-06-04T21:52:29.3184630Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3184636Z 
2025-06-04T21:52:29.3185068Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3185331Z      ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:316:40]
2025-06-04T21:52:29.3185554Z  [2m315[0m │     it('should handle missing session ID', async () => {
2025-06-04T21:52:29.3185967Z  [2m316[0m │       const handleConnection = (wss as any).handleConnection.bind(wss)
2025-06-04T21:52:29.3186176Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.3186354Z  [2m317[0m │       handleConnection(mockWebSocket)
2025-06-04T21:52:29.3186447Z      ╰────
2025-06-04T21:52:29.3186939Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3186946Z 
2025-06-04T21:52:29.3187436Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-require-imports): Expected "import" statement instead of "require" call[0m
2025-06-04T21:52:29.3187701Z     ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:72:26]
2025-06-04T21:52:29.3188035Z  [2m71[0m │     // Create a mock WebSocket client instance for tests using the mock constructor
2025-06-04T21:52:29.3188315Z  [2m72[0m │     mockWebSocket = new (require('ws').WebSocket)() as WebSocket & {
2025-06-04T21:52:29.3188524Z     · [38;2;246;87;248m                         ─────────────[0m
2025-06-04T21:52:29.3188764Z  [2m73[0m │       send: MockFn
2025-06-04T21:52:29.3188862Z     ╰────
2025-06-04T21:52:29.3189213Z [38;2;106;159;181m  help: [0mDo not use CommonJS `require` calls
2025-06-04T21:52:29.3189221Z 
2025-06-04T21:52:29.3189734Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.3190001Z      ╭─[[38;2;92;157;255;1msrc/lib/websocket/__tests__/server.test.ts[0m:99:25]
2025-06-04T21:52:29.3190149Z  [2m 98[0m │       .mock.calls.find(
2025-06-04T21:52:29.3190384Z  [2m 99[0m │         (call: [string, Function]) => call[0] === 'connection',
2025-06-04T21:52:29.3190577Z      · [38;2;246;87;248m                        ────────[0m
2025-06-04T21:52:29.3190687Z  [2m100[0m │       )?.[1]
2025-06-04T21:52:29.3190788Z      ╰────
2025-06-04T21:52:29.3191190Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.3191198Z 
2025-06-04T21:52:29.3191644Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3191864Z     ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-client.ts[0m:10:29]
2025-06-04T21:52:29.3191995Z  [2m 9[0m │   user_id: string;
2025-06-04T21:52:29.3192166Z  [2m10[0m │   metadata?: Record<string, any>;
2025-06-04T21:52:29.3192352Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.3192496Z  [2m11[0m │   categories?: string[];
2025-06-04T21:52:29.3192584Z     ╰────
2025-06-04T21:52:29.3193089Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3193096Z 
2025-06-04T21:52:29.3193532Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3193759Z     ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-client.ts[0m:37:29]
2025-06-04T21:52:29.3193898Z  [2m36[0m │   appId?: string;
2025-06-04T21:52:29.3194068Z  [2m37[0m │   metadata?: Record<string, any>;
2025-06-04T21:52:29.3194251Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.3194391Z  [2m38[0m │   categories?: string[];
2025-06-04T21:52:29.3194483Z     ╰────
2025-06-04T21:52:29.3194977Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3194984Z 
2025-06-04T21:52:29.3195422Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3195633Z     ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-client.ts[0m:40:28]
2025-06-04T21:52:29.3195937Z  [2m39[0m │   sessionId?: string;
2025-06-04T21:52:29.3196100Z  [2m40[0m │   filters?: Record<string, any>;
2025-06-04T21:52:29.3196282Z     · [38;2;246;87;248m                           ───[0m
2025-06-04T21:52:29.3196478Z  [2m41[0m │ }
2025-06-04T21:52:29.3196572Z     ╰────
2025-06-04T21:52:29.3197076Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3197082Z 
2025-06-04T21:52:29.3197514Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3197728Z     ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-client.ts[0m:50:28]
2025-06-04T21:52:29.3197864Z  [2m49[0m │   sessionId?: string;
2025-06-04T21:52:29.3198028Z  [2m50[0m │   filters?: Record<string, any>;
2025-06-04T21:52:29.3198207Z     · [38;2;246;87;248m                           ───[0m
2025-06-04T21:52:29.3198303Z  [2m51[0m │ }
2025-06-04T21:52:29.3198399Z     ╰────
2025-06-04T21:52:29.3198894Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3198901Z 
2025-06-04T21:52:29.3199445Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3199662Z     ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-client.ts[0m:81:61]
2025-06-04T21:52:29.3199841Z  [2m80[0m │     // Fallback for browser environments
2025-06-04T21:52:29.3200158Z  [2m81[0m │     if (typeof globalThis !== 'undefined' && (globalThis as any).process?.env) {
2025-06-04T21:52:29.3200397Z     · [38;2;246;87;248m                                                            ───[0m
2025-06-04T21:52:29.3200611Z  [2m82[0m │       return (globalThis as any).process.env[key];
2025-06-04T21:52:29.3200702Z     ╰────
2025-06-04T21:52:29.3201197Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3201213Z 
2025-06-04T21:52:29.3201656Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3201865Z     ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-client.ts[0m:82:29]
2025-06-04T21:52:29.3202174Z  [2m81[0m │     if (typeof globalThis !== 'undefined' && (globalThis as any).process?.env) {
2025-06-04T21:52:29.3202381Z  [2m82[0m │       return (globalThis as any).process.env[key];
2025-06-04T21:52:29.3202564Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.3202660Z  [2m83[0m │     }
2025-06-04T21:52:29.3202751Z     ╰────
2025-06-04T21:52:29.3203247Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3203254Z 
2025-06-04T21:52:29.3203689Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3204033Z     ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-client.ts[0m:88:83]
2025-06-04T21:52:29.3204131Z  [2m87[0m │ 
2025-06-04T21:52:29.3204505Z  [2m88[0m │   private async makeRequest(endpoint: string, options: RequestInit = {}): Promise<any> {
2025-06-04T21:52:29.3204774Z     · [38;2;246;87;248m                                                                                  ───[0m
2025-06-04T21:52:29.3204939Z  [2m89[0m │     if (!this.config.apiKey) {
2025-06-04T21:52:29.3205027Z     ╰────
2025-06-04T21:52:29.3205525Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3205533Z 
2025-06-04T21:52:29.3205964Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3206189Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-client.ts[0m:134:17]
2025-06-04T21:52:29.3206292Z  [2m133[0m │ 
2025-06-04T21:52:29.3206434Z  [2m134[0m │     const body: any = {
2025-06-04T21:52:29.3206593Z      · [38;2;246;87;248m                ───[0m
2025-06-04T21:52:29.3206832Z  [2m135[0m │       messages,
2025-06-04T21:52:29.3206928Z      ╰────
2025-06-04T21:52:29.3207425Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3207435Z 
2025-06-04T21:52:29.3207868Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3208088Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-client.ts[0m:253:52]
2025-06-04T21:52:29.3208189Z  [2m252[0m │    */
2025-06-04T21:52:29.3208447Z  [2m253[0m │   async getMemoryHistory(userId?: string): Promise<any[]> {
2025-06-04T21:52:29.3208680Z      · [38;2;246;87;248m                                                   ───[0m
2025-06-04T21:52:29.3208882Z  [2m254[0m │     const params = new URLSearchParams({
2025-06-04T21:52:29.3208974Z      ╰────
2025-06-04T21:52:29.3209586Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3209594Z 
2025-06-04T21:52:29.3210035Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3210276Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/temporal/oscillations.ts[0m:157:8]
2025-06-04T21:52:29.3210439Z  [2m156[0m │ function getDimensionValue(
2025-06-04T21:52:29.3210548Z  [2m157[0m │   map: any,
2025-06-04T21:52:29.3210695Z      · [38;2;246;87;248m       ───[0m
2025-06-04T21:52:29.3210957Z  [2m158[0m │   dimension: 'pleasure' | 'valence' | 'arousal' | 'dominance',
2025-06-04T21:52:29.3211047Z      ╰────
2025-06-04T21:52:29.3211546Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3211561Z 
2025-06-04T21:52:29.3212002Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3212228Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-manager.ts[0m:268:83]
2025-06-04T21:52:29.3212322Z  [2m267[0m │ 
2025-06-04T21:52:29.3212705Z  [2m268[0m │   private async executePythonCommand(command: string, ...args: string[]): Promise<any> {
2025-06-04T21:52:29.3212975Z      · [38;2;246;87;248m                                                                                  ───[0m
2025-06-04T21:52:29.3213184Z  [2m269[0m │     return new Promise((resolve, reject) => {
2025-06-04T21:52:29.3213273Z      ╰────
2025-06-04T21:52:29.3213771Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3213778Z 
2025-06-04T21:52:29.3214210Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3214573Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-manager.ts[0m:341:38]
2025-06-04T21:52:29.3214668Z  [2m340[0m │ 
2025-06-04T21:52:29.3214886Z  [2m341[0m │     return result.results.map((item: any) => ({
2025-06-04T21:52:29.3215087Z      · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.3215223Z  [2m342[0m │       id: item.id,
2025-06-04T21:52:29.3215312Z      ╰────
2025-06-04T21:52:29.3215806Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3215813Z 
2025-06-04T21:52:29.3216252Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3216468Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-manager.ts[0m:364:39]
2025-06-04T21:52:29.3216574Z  [2m363[0m │ 
2025-06-04T21:52:29.3216789Z  [2m364[0m │     return result.memories.map((item: any) => ({
2025-06-04T21:52:29.3217100Z      · [38;2;246;87;248m                                      ───[0m
2025-06-04T21:52:29.3217237Z  [2m365[0m │       id: item.id,
2025-06-04T21:52:29.3217331Z      ╰────
2025-06-04T21:52:29.3217827Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3217834Z 
2025-06-04T21:52:29.3218270Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3218485Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-manager.ts[0m:399:63]
2025-06-04T21:52:29.3218582Z  [2m398[0m │ 
2025-06-04T21:52:29.3218884Z  [2m399[0m │   async getMemoryHistory(userId: string = 'default'): Promise<any[]> {
2025-06-04T21:52:29.3219231Z      · [38;2;246;87;248m                                                              ───[0m
2025-06-04T21:52:29.3219411Z  [2m400[0m │     if (!this.isInitialized) {
2025-06-04T21:52:29.3219500Z      ╰────
2025-06-04T21:52:29.3220005Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3220012Z 
2025-06-04T21:52:29.3220444Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3220664Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-manager.ts[0m:417:33]
2025-06-04T21:52:29.3220889Z  [2m416[0m │     const categoryCounts: Record<string, number> = {};
2025-06-04T21:52:29.3221086Z  [2m417[0m │     const recentActivity: Array<any> = [];
2025-06-04T21:52:29.3221275Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.3221369Z  [2m418[0m │ 
2025-06-04T21:52:29.3221459Z      ╰────
2025-06-04T21:52:29.3221954Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3221970Z 
2025-06-04T21:52:29.3222412Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3222637Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-manager.ts[0m:445:70]
2025-06-04T21:52:29.3222826Z  [2m444[0m │   // Utility methods for common use cases
2025-06-04T21:52:29.3223209Z  [2m445[0m │   async addUserPreference(userId: string, preference: string, value: any): Promise<void> {
2025-06-04T21:52:29.3223462Z      · [38;2;246;87;248m                                                                     ───[0m
2025-06-04T21:52:29.3223613Z  [2m446[0m │     await this.addMemory({
2025-06-04T21:52:29.3223706Z      ╰────
2025-06-04T21:52:29.3224199Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3224329Z 
2025-06-04T21:52:29.3224940Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Catch parameter 'error' is caught but never used. Unused caught errors should start with a '_'.[0m
2025-06-04T21:52:29.3225163Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/mem0-manager.ts[0m:293:18]
2025-06-04T21:52:29.3225311Z  [2m292[0m │           resolve(result);
2025-06-04T21:52:29.3225449Z  [2m293[0m │         } catch (error) {
2025-06-04T21:52:29.3225619Z      · [38;2;246;87;248m                 ──┬──[0m
2025-06-04T21:52:29.3225891Z      ·                    [38;2;246;87;248m╰── [38;2;246;87;248m'error' is declared here[0m[0m
2025-06-04T21:52:29.3226178Z  [2m294[0m │           reject(new Error(`Failed to parse Python output: ${stdout}`));
2025-06-04T21:52:29.3226267Z      ╰────
2025-06-04T21:52:29.3226502Z [38;2;106;159;181m  help: [0mConsider handling this error.
2025-06-04T21:52:29.3226510Z 
2025-06-04T21:52:29.3226950Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3227174Z    ╭─[[38;2;92;157;255;1msrc/utils/search-indexer.ts[0m:6:63]
2025-06-04T21:52:29.3227508Z  [2m5[0m │ // Mock implementation instead of using astro:content
2025-06-04T21:52:29.3227815Z  [2m6[0m │ async function getCollection(collectionName: string): Promise<any[]> {
2025-06-04T21:52:29.3228060Z    · [38;2;246;87;248m                                                              ───[0m
2025-06-04T21:52:29.3228160Z  [2m7[0m │   try {
2025-06-04T21:52:29.3228255Z    ╰────
2025-06-04T21:52:29.3228751Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3228757Z 
2025-06-04T21:52:29.3229306Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3229588Z     ╭─[[38;2;92;157;255;1msrc/lib/memory/__tests__/mem0-client.test.ts[0m:86:24]
2025-06-04T21:52:29.3229930Z  [2m85[0m │       const mockResponse = { id: '123', data: { memory: 'test memory' }, event: 'ADD' };
2025-06-04T21:52:29.3230155Z  [2m86[0m │       (global.fetch as any).mockResolvedValueOnce({
2025-06-04T21:52:29.3230331Z     · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.3230458Z  [2m87[0m │         ok: true,
2025-06-04T21:52:29.3230551Z     ╰────
2025-06-04T21:52:29.3231050Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3231057Z 
2025-06-04T21:52:29.3231494Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3231775Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/__tests__/mem0-client.test.ts[0m:116:24]
2025-06-04T21:52:29.3232108Z  [2m115[0m │       const mockResponse = { id: '123', data: { memory: 'test memory' }, event: 'ADD' };
2025-06-04T21:52:29.3232341Z  [2m116[0m │       (global.fetch as any).mockResolvedValueOnce({
2025-06-04T21:52:29.3232515Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.3232654Z  [2m117[0m │         ok: true,
2025-06-04T21:52:29.3232742Z      ╰────
2025-06-04T21:52:29.3233241Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3233247Z 
2025-06-04T21:52:29.3233682Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3233965Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/__tests__/mem0-client.test.ts[0m:158:24]
2025-06-04T21:52:29.3234066Z  [2m157[0m │       ];
2025-06-04T21:52:29.3234289Z  [2m158[0m │       (global.fetch as any).mockResolvedValueOnce({
2025-06-04T21:52:29.3234458Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.3234719Z  [2m159[0m │         ok: true,
2025-06-04T21:52:29.3234811Z      ╰────
2025-06-04T21:52:29.3235315Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3235327Z 
2025-06-04T21:52:29.3235759Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3236035Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/__tests__/mem0-client.test.ts[0m:180:24]
2025-06-04T21:52:29.3236198Z  [2m179[0m │       const mockResponse = [];
2025-06-04T21:52:29.3236416Z  [2m180[0m │       (global.fetch as any).mockResolvedValueOnce({
2025-06-04T21:52:29.3236595Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.3236721Z  [2m181[0m │         ok: true,
2025-06-04T21:52:29.3236815Z      ╰────
2025-06-04T21:52:29.3237310Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3237324Z 
2025-06-04T21:52:29.3237884Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3238167Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/__tests__/mem0-client.test.ts[0m:214:24]
2025-06-04T21:52:29.3238379Z  [2m213[0m │     it('should handle API errors', async () => {
2025-06-04T21:52:29.3238597Z  [2m214[0m │       (global.fetch as any).mockResolvedValueOnce({
2025-06-04T21:52:29.3238769Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.3238899Z  [2m215[0m │         ok: false,
2025-06-04T21:52:29.3239086Z      ╰────
2025-06-04T21:52:29.3239593Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3239600Z 
2025-06-04T21:52:29.3240031Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3240317Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/__tests__/mem0-client.test.ts[0m:228:24]
2025-06-04T21:52:29.3240544Z  [2m227[0m │     it('should handle network errors', async () => {
2025-06-04T21:52:29.3240868Z  [2m228[0m │       (global.fetch as any).mockRejectedValueOnce(new Error('Network error'));
2025-06-04T21:52:29.3241041Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.3241140Z  [2m229[0m │ 
2025-06-04T21:52:29.3241230Z      ╰────
2025-06-04T21:52:29.3241738Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3241744Z 
2025-06-04T21:52:29.3242186Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3242468Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/__tests__/mem0-client.test.ts[0m:238:24]
2025-06-04T21:52:29.3242755Z  [2m237[0m │     it('should return true for successful connection', async () => {
2025-06-04T21:52:29.3242985Z  [2m238[0m │       (global.fetch as any).mockResolvedValueOnce({
2025-06-04T21:52:29.3243164Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.3243299Z  [2m239[0m │         ok: true,
2025-06-04T21:52:29.3243388Z      ╰────
2025-06-04T21:52:29.3243888Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3243898Z 
2025-06-04T21:52:29.3244339Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3244617Z      ╭─[[38;2;92;157;255;1msrc/lib/memory/__tests__/mem0-client.test.ts[0m:250:24]
2025-06-04T21:52:29.3244881Z  [2m249[0m │     it('should return false for failed connection', async () => {
2025-06-04T21:52:29.3245212Z  [2m250[0m │       (global.fetch as any).mockRejectedValueOnce(new Error('Connection failed'));
2025-06-04T21:52:29.3245516Z      · [38;2;246;87;248m                       ───[0m
2025-06-04T21:52:29.3245611Z  [2m251[0m │ 
2025-06-04T21:52:29.3245711Z      ╰────
2025-06-04T21:52:29.3246211Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3246217Z 
2025-06-04T21:52:29.3246657Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3246834Z     ╭─[[38;2;92;157;255;1msrc/lib/convex.ts[0m:55:54]
2025-06-04T21:52:29.3246979Z  [2m54[0m │     // Log initial state
2025-06-04T21:52:29.3247220Z  [2m55[0m │     const initialState = client.connectionState() as any
2025-06-04T21:52:29.3247449Z     · [38;2;246;87;248m                                                     ───[0m
2025-06-04T21:52:29.3247577Z  [2m56[0m │     logger.info(
2025-06-04T21:52:29.3247676Z     ╰────
2025-06-04T21:52:29.3248172Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3248178Z 
2025-06-04T21:52:29.3248720Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3248910Z     ╭─[[38;2;92;157;255;1msrc/lib/convex.ts[0m:61:72]
2025-06-04T21:52:29.3249230Z  [2m60[0m │     // Use polling to monitor connection state changes
2025-06-04T21:52:29.3249553Z  [2m61[0m │     let previousState = getSimplifiedState(client.connectionState() as any)
2025-06-04T21:52:29.3249811Z     · [38;2;246;87;248m                                                                       ───[0m
2025-06-04T21:52:29.3249999Z  [2m62[0m │     const interval = setInterval(() => {
2025-06-04T21:52:29.3250087Z     ╰────
2025-06-04T21:52:29.3250586Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3250603Z 
2025-06-04T21:52:29.3251047Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3251230Z     ╭─[[38;2;92;157;255;1msrc/lib/convex.ts[0m:63:75]
2025-06-04T21:52:29.3251408Z  [2m62[0m │     const interval = setInterval(() => {
2025-06-04T21:52:29.3251733Z  [2m63[0m │       const currentState = getSimplifiedState(client.connectionState() as any)
2025-06-04T21:52:29.3251994Z     · [38;2;246;87;248m                                                                          ───[0m
2025-06-04T21:52:29.3252192Z  [2m64[0m │       if (currentState !== previousState) {
2025-06-04T21:52:29.3252280Z     ╰────
2025-06-04T21:52:29.3252775Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3252784Z 
2025-06-04T21:52:29.3253218Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3253406Z     ╭─[[38;2;92;157;255;1msrc/lib/convex.ts[0m:86:36]
2025-06-04T21:52:29.3253674Z  [2m85[0m │ // Helper function to simplify connection state into a string
2025-06-04T21:52:29.3253958Z  [2m86[0m │ function getSimplifiedState(state: any): ConnectionStateValue {
2025-06-04T21:52:29.3254166Z     · [38;2;246;87;248m                                   ───[0m
2025-06-04T21:52:29.3254276Z  [2m87[0m │   if (!state) {
2025-06-04T21:52:29.3254368Z     ╰────
2025-06-04T21:52:29.3254859Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3254866Z 
2025-06-04T21:52:29.3255308Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3255517Z      ╭─[[38;2;92;157;255;1msrc/lib/backup/verify.ts[0m:166:42]
2025-06-04T21:52:29.3255742Z  [2m165[0m │ 
2025-06-04T21:52:29.3255997Z  [2m166[0m │   private isValidBackupStructure(backup: any): boolean {
2025-06-04T21:52:29.3256218Z      · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.3256326Z  [2m167[0m │     return (
2025-06-04T21:52:29.3256416Z      ╰────
2025-06-04T21:52:29.3256915Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3256922Z 
2025-06-04T21:52:29.3257356Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3257568Z      ╭─[[38;2;92;157;255;1msrc/lib/backup/verify.ts[0m:176:37]
2025-06-04T21:52:29.3257661Z  [2m175[0m │ 
2025-06-04T21:52:29.3257895Z  [2m176[0m │   private verifyDataIntegrity(data: any): boolean {
2025-06-04T21:52:29.3258098Z      · [38;2;246;87;248m                                    ───[0m
2025-06-04T21:52:29.3258219Z  [2m177[0m │     try {
2025-06-04T21:52:29.3258312Z      ╰────
2025-06-04T21:52:29.3258921Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3258929Z 
2025-06-04T21:52:29.3259492Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3259704Z      ╭─[[38;2;92;157;255;1msrc/lib/backup/verify.ts[0m:209:33]
2025-06-04T21:52:29.3259799Z  [2m208[0m │ 
2025-06-04T21:52:29.3260019Z  [2m209[0m │   private verifyRedisData(data: any): boolean {
2025-06-04T21:52:29.3260213Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.3260320Z  [2m210[0m │     return (
2025-06-04T21:52:29.3260416Z      ╰────
2025-06-04T21:52:29.3260915Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3260931Z 
2025-06-04T21:52:29.3261377Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3261575Z      ╭─[[38;2;92;157;255;1msrc/lib/backup/verify.ts[0m:220:32]
2025-06-04T21:52:29.3261672Z  [2m219[0m │ 
2025-06-04T21:52:29.3261883Z  [2m220[0m │   private verifyFileData(data: any): boolean {
2025-06-04T21:52:29.3262074Z      · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.3262180Z  [2m221[0m │     return (
2025-06-04T21:52:29.3262270Z      ╰────
2025-06-04T21:52:29.3262766Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3262773Z 
2025-06-04T21:52:29.3263204Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3263417Z      ╭─[[38;2;92;157;255;1msrc/lib/backup/verify.ts[0m:232:34]
2025-06-04T21:52:29.3263508Z  [2m231[0m │ 
2025-06-04T21:52:29.3263724Z  [2m232[0m │   private verifyConfigData(data: any): boolean {
2025-06-04T21:52:29.3263927Z      · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.3264037Z  [2m233[0m │     return (
2025-06-04T21:52:29.3264125Z      ╰────
2025-06-04T21:52:29.3264624Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3264631Z 
2025-06-04T21:52:29.3265058Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3265259Z      ╭─[[38;2;92;157;255;1msrc/lib/backup/verify.ts[0m:263:43]
2025-06-04T21:52:29.3265350Z  [2m262[0m │ 
2025-06-04T21:52:29.3265623Z  [2m263[0m │   private async verifyRestoration(backup: any): Promise<void> {
2025-06-04T21:52:29.3265971Z      · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.3266225Z  [2m264[0m │     // Create temporary Redis instance for restoration testing
2025-06-04T21:52:29.3266317Z      ╰────
2025-06-04T21:52:29.3266817Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3266824Z 
2025-06-04T21:52:29.3267260Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3267459Z      ╭─[[38;2;92;157;255;1msrc/lib/backup/verify.ts[0m:287:33]
2025-06-04T21:52:29.3267554Z  [2m286[0m │ 
2025-06-04T21:52:29.3267754Z  [2m287[0m │   private extractTestData(data: any): any {
2025-06-04T21:52:29.3267945Z      · [38;2;246;87;248m                                ───[0m
2025-06-04T21:52:29.3268146Z  [2m288[0m │     // Extract a small sample of each data type
2025-06-04T21:52:29.3268238Z      ╰────
2025-06-04T21:52:29.3268738Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3268745Z 
2025-06-04T21:52:29.3269441Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3269659Z      ╭─[[38;2;92;157;255;1msrc/lib/backup/verify.ts[0m:287:39]
2025-06-04T21:52:29.3269751Z  [2m286[0m │ 
2025-06-04T21:52:29.3269955Z  [2m287[0m │   private extractTestData(data: any): any {
2025-06-04T21:52:29.3270160Z      · [38;2;246;87;248m                                      ───[0m
2025-06-04T21:52:29.3270363Z  [2m288[0m │     // Extract a small sample of each data type
2025-06-04T21:52:29.3270452Z      ╰────
2025-06-04T21:52:29.3270948Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3270955Z 
2025-06-04T21:52:29.3271397Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3271608Z      ╭─[[38;2;92;157;255;1msrc/lib/backup/verify.ts[0m:296:60]
2025-06-04T21:52:29.3271701Z  [2m295[0m │ 
2025-06-04T21:52:29.3272053Z  [2m296[0m │   private async restoreTestData(redis: RedisService, data: any): Promise<void> {
2025-06-04T21:52:29.3272293Z      · [38;2;246;87;248m                                                           ───[0m
2025-06-04T21:52:29.3272496Z  [2m297[0m │     // Implement test data restoration logic
2025-06-04T21:52:29.3272584Z      ╰────
2025-06-04T21:52:29.3273084Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3273094Z 
2025-06-04T21:52:29.3273533Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3273872Z      ╭─[[38;2;92;157;255;1msrc/lib/backup/verify.ts[0m:306:11]
2025-06-04T21:52:29.3274025Z  [2m305[0m │     redis: RedisService,
2025-06-04T21:52:29.3274136Z  [2m306[0m │     data: any,
2025-06-04T21:52:29.3274296Z      · [38;2;246;87;248m          ───[0m
2025-06-04T21:52:29.3274434Z  [2m307[0m │   ): Promise<void> {
2025-06-04T21:52:29.3274529Z      ╰────
2025-06-04T21:52:29.3275022Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3275029Z 
2025-06-04T21:52:29.3275469Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3275659Z     ╭─[[38;2;92;157;255;1msrc/utils/logger.ts[0m:41:39]
2025-06-04T21:52:29.3275769Z  [2m40[0m │   return {
2025-06-04T21:52:29.3275978Z  [2m41[0m │     debug: (message: string, ...args: any[]) => {
2025-06-04T21:52:29.3276187Z     · [38;2;246;87;248m                                      ───[0m
2025-06-04T21:52:29.3276396Z  [2m42[0m │       if (currentLogLevel <= LogLevel.DEBUG) {
2025-06-04T21:52:29.3276485Z     ╰────
2025-06-04T21:52:29.3277099Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3277108Z 
2025-06-04T21:52:29.3277551Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3277741Z     ╭─[[38;2;92;157;255;1msrc/utils/logger.ts[0m:47:38]
2025-06-04T21:52:29.3277835Z  [2m46[0m │ 
2025-06-04T21:52:29.3278037Z  [2m47[0m │     info: (message: string, ...args: any[]) => {
2025-06-04T21:52:29.3278239Z     · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.3278441Z  [2m48[0m │       if (currentLogLevel <= LogLevel.INFO) {
2025-06-04T21:52:29.3278533Z     ╰────
2025-06-04T21:52:29.3279127Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3279145Z 
2025-06-04T21:52:29.3279593Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3279779Z     ╭─[[38;2;92;157;255;1msrc/utils/logger.ts[0m:53:38]
2025-06-04T21:52:29.3279872Z  [2m52[0m │ 
2025-06-04T21:52:29.3280069Z  [2m53[0m │     warn: (message: string, ...args: any[]) => {
2025-06-04T21:52:29.3280272Z     · [38;2;246;87;248m                                     ───[0m
2025-06-04T21:52:29.3280465Z  [2m54[0m │       if (currentLogLevel <= LogLevel.WARN) {
2025-06-04T21:52:29.3280558Z     ╰────
2025-06-04T21:52:29.3281049Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3281056Z 
2025-06-04T21:52:29.3281496Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3281684Z     ╭─[[38;2;92;157;255;1msrc/utils/logger.ts[0m:59:47]
2025-06-04T21:52:29.3281781Z  [2m58[0m │ 
2025-06-04T21:52:29.3282017Z  [2m59[0m │     error: (message: string | Error, ...args: any[]) => {
2025-06-04T21:52:29.3282242Z     · [38;2;246;87;248m                                              ───[0m
2025-06-04T21:52:29.3282439Z  [2m60[0m │       if (currentLogLevel <= LogLevel.ERROR) {
2025-06-04T21:52:29.3282536Z     ╰────
2025-06-04T21:52:29.3283030Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3283038Z 
2025-06-04T21:52:29.3283476Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3283655Z     ╭─[[38;2;92;157;255;1msrc/utils/logger.ts[0m:85:12]
2025-06-04T21:52:29.3283789Z  [2m84[0m │   message: string,
2025-06-04T21:52:29.3284051Z  [2m85[0m │   ...args: any[]
2025-06-04T21:52:29.3284203Z     · [38;2;246;87;248m           ───[0m
2025-06-04T21:52:29.3284304Z  [2m86[0m │ ) {
2025-06-04T21:52:29.3284393Z     ╰────
2025-06-04T21:52:29.3284901Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3284908Z 
2025-06-04T21:52:29.3285344Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3285546Z     ╭─[[38;2;92;157;255;1msrc/utils/serverUtils.ts[0m:15:10]
2025-06-04T21:52:29.3285713Z  [2m14[0m │ export function safelyGetHeader(
2025-06-04T21:52:29.3285827Z  [2m15[0m │   astro: any,
2025-06-04T21:52:29.3285970Z     · [38;2;246;87;248m         ───[0m
2025-06-04T21:52:29.3286108Z  [2m16[0m │   headerName: string,
2025-06-04T21:52:29.3286203Z     ╰────
2025-06-04T21:52:29.3286697Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3286713Z 
2025-06-04T21:52:29.3287261Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3287465Z     ╭─[[38;2;92;157;255;1msrc/utils/serverUtils.ts[0m:35:41]
2025-06-04T21:52:29.3287566Z  [2m34[0m │  */
2025-06-04T21:52:29.3287867Z  [2m35[0m │ export function safelyGetHeaders(astro: any): Record<string, string> {
2025-06-04T21:52:29.3288080Z     · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.3288274Z  [2m36[0m │   // Only try to access headers in SSR context
2025-06-04T21:52:29.3288368Z     ╰────
2025-06-04T21:52:29.3288863Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3288869Z 
2025-06-04T21:52:29.3289410Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3289620Z     ╭─[[38;2;92;157;255;1msrc/utils/serverUtils.ts[0m:67:36]
2025-06-04T21:52:29.3289722Z  [2m66[0m │  */
2025-06-04T21:52:29.3289944Z  [2m67[0m │ export function getClientIP(astro: any): string {
2025-06-04T21:52:29.3290141Z     · [38;2;246;87;248m                                   ───[0m
2025-06-04T21:52:29.3290303Z  [2m68[0m │   if (!import.meta.env.SSR) {
2025-06-04T21:52:29.3290392Z     ╰────
2025-06-04T21:52:29.3290885Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3290892Z 
2025-06-04T21:52:29.3291323Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3291515Z     ╭─[[38;2;92;157;255;1msrc/utils/debounce.ts[0m:10:46]
2025-06-04T21:52:29.3291608Z  [2m 9[0m │  */
2025-06-04T21:52:29.3291871Z  [2m10[0m │ export function debounce<T extends (...args: any[]) => any>(
2025-06-04T21:52:29.3292087Z     · [38;2;246;87;248m                                             ───[0m
2025-06-04T21:52:29.3292202Z  [2m11[0m │   func: T,
2025-06-04T21:52:29.3292291Z     ╰────
2025-06-04T21:52:29.3292783Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3292789Z 
2025-06-04T21:52:29.3293224Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3293412Z     ╭─[[38;2;92;157;255;1msrc/utils/debounce.ts[0m:10:56]
2025-06-04T21:52:29.3293510Z  [2m 9[0m │  */
2025-06-04T21:52:29.3293761Z  [2m10[0m │ export function debounce<T extends (...args: any[]) => any>(
2025-06-04T21:52:29.3293994Z     · [38;2;246;87;248m                                                       ───[0m
2025-06-04T21:52:29.3294229Z  [2m11[0m │   func: T,
2025-06-04T21:52:29.3294321Z     ╰────
2025-06-04T21:52:29.3294825Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3294832Z 
2025-06-04T21:52:29.3295268Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3295453Z     ╭─[[38;2;92;157;255;1msrc/utils/debounce.ts[0m:17:26]
2025-06-04T21:52:29.3295552Z  [2m16[0m │ 
2025-06-04T21:52:29.3295807Z  [2m17[0m │   return function (this: any, ...args: Parameters<T>): void {
2025-06-04T21:52:29.3295985Z     · [38;2;246;87;248m                         ───[0m
2025-06-04T21:52:29.3296130Z  [2m18[0m │     const later = () => {
2025-06-04T21:52:29.3296217Z     ╰────
2025-06-04T21:52:29.3296709Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3296723Z 
2025-06-04T21:52:29.3297154Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3297486Z      ╭─[[38;2;92;157;255;1msrc/lib/admin/middleware.ts[0m:100:25]
2025-06-04T21:52:29.3297782Z  [2m 99[0m │     // Apply the admin context to the request for use in the route handler
2025-06-04T21:52:29.3297977Z  [2m100[0m │     ;(context.locals as any).admin = admin
2025-06-04T21:52:29.3298149Z      · [38;2;246;87;248m                        ───[0m
2025-06-04T21:52:29.3298250Z  [2m101[0m │ 
2025-06-04T21:52:29.3298340Z      ╰────
2025-06-04T21:52:29.3298834Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3298844Z 
2025-06-04T21:52:29.3299377Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3299582Z    ╭─[[38;2;92;157;255;1msrc/lib/db/KVStore.ts[0m:8:30]
2025-06-04T21:52:29.3299752Z  [2m7[0m │   private storagePrefix: string
2025-06-04T21:52:29.3299956Z  [2m8[0m │   private cache: Map<string, any> = new Map()
2025-06-04T21:52:29.3300142Z    · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.3300314Z  [2m9[0m │   private useLocalStorage: boolean
2025-06-04T21:52:29.3300409Z    ╰────
2025-06-04T21:52:29.3300901Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3300908Z 
2025-06-04T21:52:29.3301345Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3301541Z      ╭─[[38;2;92;157;255;1msrc/types/testing.ts[0m:243:29]
2025-06-04T21:52:29.3301677Z  [2m242[0m │   title: string
2025-06-04T21:52:29.3301846Z  [2m243[0m │   component?: ComponentType<any>
2025-06-04T21:52:29.3302040Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.3302186Z  [2m244[0m │   instructions?: string[]
2025-06-04T21:52:29.3302277Z      ╰────
2025-06-04T21:52:29.3302786Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3302793Z 
2025-06-04T21:52:29.3303228Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3303421Z      ╭─[[38;2;92;157;255;1msrc/types/testing.ts[0m:245:26]
2025-06-04T21:52:29.3303569Z  [2m244[0m │   instructions?: string[]
2025-06-04T21:52:29.3303729Z  [2m245[0m │   props?: Record<string, any>
2025-06-04T21:52:29.3303911Z      · [38;2;246;87;248m                         ───[0m
2025-06-04T21:52:29.3304009Z  [2m246[0m │ }
2025-06-04T21:52:29.3304099Z      ╰────
2025-06-04T21:52:29.3304612Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3304744Z 
2025-06-04T21:52:29.3305192Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3305380Z     ╭─[[38;2;92;157;255;1msrc/types/chat.ts[0m:88:20]
2025-06-04T21:52:29.3305547Z  [2m87[0m │     suggestedResources?: string[]
2025-06-04T21:52:29.3305684Z  [2m88[0m │     [key: string]: any
2025-06-04T21:52:29.3305852Z     · [38;2;246;87;248m                   ───[0m
2025-06-04T21:52:29.3305946Z  [2m89[0m │   }
2025-06-04T21:52:29.3306038Z     ╰────
2025-06-04T21:52:29.3306534Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3306541Z 
2025-06-04T21:52:29.3306974Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3307244Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:174:29]
2025-06-04T21:52:29.3307470Z  [2m173[0m │         on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3307780Z  [2m174[0m │         pipe: (destination: any) => destination
2025-06-04T21:52:29.3307971Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.3308074Z  [2m175[0m │       },
2025-06-04T21:52:29.3308163Z      ╰────
2025-06-04T21:52:29.3308660Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3308667Z 
2025-06-04T21:52:29.3309198Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3309466Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:178:29]
2025-06-04T21:52:29.3309683Z  [2m177[0m │         on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3309894Z  [2m178[0m │         pipe: (destination: any) => destination
2025-06-04T21:52:29.3310072Z      · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.3310182Z  [2m179[0m │       },
2025-06-04T21:52:29.3310271Z      ╰────
2025-06-04T21:52:29.3310769Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3310776Z 
2025-06-04T21:52:29.3311208Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3311468Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:229:34]
2025-06-04T21:52:29.3311564Z  [2m228[0m │     
2025-06-04T21:52:29.3311753Z  [2m229[0m │     emit(event: string, ...args: any[]) {
2025-06-04T21:52:29.3311949Z      · [38;2;246;87;248m                                 ───[0m
2025-06-04T21:52:29.3312159Z  [2m230[0m │       if (!this.listeners[event]) { return false; }
2025-06-04T21:52:29.3312262Z      ╰────
2025-06-04T21:52:29.3312762Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3312769Z 
2025-06-04T21:52:29.3313206Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3313458Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:242:37]
2025-06-04T21:52:29.3313723Z  [2m241[0m │     once(event: string, listener: (...args: unknown[]) => void) {
2025-06-04T21:52:29.3313919Z  [2m242[0m │       const onceWrapper = (...args: any[]) => {
2025-06-04T21:52:29.3314124Z      · [38;2;246;87;248m                                    ───[0m
2025-06-04T21:52:29.3314269Z  [2m243[0m │         listener(...args);
2025-06-04T21:52:29.3314360Z      ╰────
2025-06-04T21:52:29.3314852Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3314983Z 
2025-06-04T21:52:29.3315436Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3315692Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:254:22]
2025-06-04T21:52:29.3315928Z  [2m253[0m │   promisify: (fn: (...args: unknown[]) => unknown) => {
2025-06-04T21:52:29.3316087Z  [2m254[0m │     return (...args: any[]) => {
2025-06-04T21:52:29.3316258Z      · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.3316458Z  [2m255[0m │       return new Promise((resolve, reject) => {
2025-06-04T21:52:29.3316547Z      ╰────
2025-06-04T21:52:29.3317043Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3317050Z 
2025-06-04T21:52:29.3317554Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.3317820Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:171:37]
2025-06-04T21:52:29.3318037Z  [2m170[0m │     return {
2025-06-04T21:52:29.3318264Z  [2m171[0m │       on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3318482Z      · [38;2;246;87;248m                                    ────────[0m
2025-06-04T21:52:29.3318616Z  [2m172[0m │       stdout: { 
2025-06-04T21:52:29.3318705Z      ╰────
2025-06-04T21:52:29.3319206Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.3319214Z 
2025-06-04T21:52:29.3319715Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.3319973Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:173:39]
2025-06-04T21:52:29.3320108Z  [2m172[0m │       stdout: { 
2025-06-04T21:52:29.3320328Z  [2m173[0m │         on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3320555Z      · [38;2;246;87;248m                                      ────────[0m
2025-06-04T21:52:29.3320755Z  [2m174[0m │         pipe: (destination: any) => destination
2025-06-04T21:52:29.3320846Z      ╰────
2025-06-04T21:52:29.3321235Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.3321241Z 
2025-06-04T21:52:29.3321743Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.3321996Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:177:39]
2025-06-04T21:52:29.3322125Z  [2m176[0m │       stderr: { 
2025-06-04T21:52:29.3322338Z  [2m177[0m │         on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3322555Z      · [38;2;246;87;248m                                      ────────[0m
2025-06-04T21:52:29.3322765Z  [2m178[0m │         pipe: (destination: any) => destination
2025-06-04T21:52:29.3322857Z      ╰────
2025-06-04T21:52:29.3323252Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.3323259Z 
2025-06-04T21:52:29.3323753Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.[0m
2025-06-04T21:52:29.3324006Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:219:39]
2025-06-04T21:52:29.3324156Z  [2m218[0m │   EventEmitter: class {
2025-06-04T21:52:29.3324386Z  [2m219[0m │     private listeners: Record<string, Function[]> = {};
2025-06-04T21:52:29.3324598Z      · [38;2;246;87;248m                                      ────────[0m
2025-06-04T21:52:29.3324698Z  [2m220[0m │     
2025-06-04T21:52:29.3324788Z      ╰────
2025-06-04T21:52:29.3325340Z [38;2;106;159;181m  help: [0mPrefer explicitly defining any function parameters and return type.
2025-06-04T21:52:29.3325347Z 
2025-06-04T21:52:29.3325943Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'algorithm' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3326202Z     ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:42:16]
2025-06-04T21:52:29.3326386Z  [2m41[0m │   // Add other crypto methods as needed
2025-06-04T21:52:29.3326571Z  [2m42[0m │   createHash: (algorithm: string) => {
2025-06-04T21:52:29.3326739Z     · [38;2;246;87;248m               ────┬────[0m
2025-06-04T21:52:29.3327034Z     ·                    [38;2;246;87;248m╰── [38;2;246;87;248m'algorithm' is declared here[0m[0m
2025-06-04T21:52:29.3327375Z  [2m43[0m │     console.warn('crypto.createHash is not fully supported in browser environment');
2025-06-04T21:52:29.3327470Z     ╰────
2025-06-04T21:52:29.3327719Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3327737Z 
2025-06-04T21:52:29.3328427Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'encoding' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3328690Z     ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:46:18]
2025-06-04T21:52:29.3328863Z  [2m45[0m │       update: (data: string) => ({
2025-06-04T21:52:29.3329304Z  [2m46[0m │         digest: (encoding: string) => `browser-polyfill-hash-${data.substring(0, 8)}`
2025-06-04T21:52:29.3329481Z     · [38;2;246;87;248m                 ────┬───[0m
2025-06-04T21:52:29.3329774Z     ·                      [38;2;246;87;248m╰── [38;2;246;87;248m'encoding' is declared here[0m[0m
2025-06-04T21:52:29.3329875Z  [2m47[0m │       })
2025-06-04T21:52:29.3329970Z     ╰────
2025-06-04T21:52:29.3330214Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3330232Z 
2025-06-04T21:52:29.3330816Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'algorithm' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3331076Z     ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:53:20]
2025-06-04T21:52:29.3331410Z  [2m52[0m │   subtle: typeof window !== 'undefined' && window.crypto ? window.crypto.subtle : {
2025-06-04T21:52:29.3331662Z  [2m53[0m │     digest: async (algorithm: string, data: BufferSource) => {
2025-06-04T21:52:29.3331849Z     · [38;2;246;87;248m                   ────┬────[0m
2025-06-04T21:52:29.3332138Z     ·                        [38;2;246;87;248m╰── [38;2;246;87;248m'algorithm' is declared here[0m[0m
2025-06-04T21:52:29.3332474Z  [2m54[0m │       console.warn('crypto.subtle.digest fallback used - limited functionality');
2025-06-04T21:52:29.3332563Z     ╰────
2025-06-04T21:52:29.3332809Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3332827Z 
2025-06-04T21:52:29.3333390Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'data' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3333645Z     ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:53:39]
2025-06-04T21:52:29.3333974Z  [2m52[0m │   subtle: typeof window !== 'undefined' && window.crypto ? window.crypto.subtle : {
2025-06-04T21:52:29.3334223Z  [2m53[0m │     digest: async (algorithm: string, data: BufferSource) => {
2025-06-04T21:52:29.3334434Z     · [38;2;246;87;248m                                      ──┬─[0m
2025-06-04T21:52:29.3334729Z     ·                                         [38;2;246;87;248m╰── [38;2;246;87;248m'data' is declared here[0m[0m
2025-06-04T21:52:29.3335061Z  [2m54[0m │       console.warn('crypto.subtle.digest fallback used - limited functionality');
2025-06-04T21:52:29.3335150Z     ╰────
2025-06-04T21:52:29.3335396Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3335525Z 
2025-06-04T21:52:29.3336187Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'mode' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3336460Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:151:34]
2025-06-04T21:52:29.3336563Z  [2m150[0m │     },
2025-06-04T21:52:29.3336791Z  [2m151[0m │     access: async (path: string, mode?: number) => {
2025-06-04T21:52:29.3336991Z      · [38;2;246;87;248m                                 ──┬──[0m
2025-06-04T21:52:29.3337283Z      ·                                    [38;2;246;87;248m╰── [38;2;246;87;248m'mode' is declared here[0m[0m
2025-06-04T21:52:29.3337663Z  [2m152[0m │       console.warn(`fs.promises.access called with path: ${path} - not supported in browser`);
2025-06-04T21:52:29.3337757Z      ╰────
2025-06-04T21:52:29.3337997Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3338015Z 
2025-06-04T21:52:29.3338588Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3338847Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:171:12]
2025-06-04T21:52:29.3338959Z  [2m170[0m │     return {
2025-06-04T21:52:29.3339272Z  [2m171[0m │       on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3339430Z      · [38;2;246;87;248m           ──┬──[0m
2025-06-04T21:52:29.3339695Z      ·              [38;2;246;87;248m╰── [38;2;246;87;248m'event' is declared here[0m[0m
2025-06-04T21:52:29.3339825Z  [2m172[0m │       stdout: { 
2025-06-04T21:52:29.3339917Z      ╰────
2025-06-04T21:52:29.3340156Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3340163Z 
2025-06-04T21:52:29.3340744Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'callback' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3341011Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:171:27]
2025-06-04T21:52:29.3341133Z  [2m170[0m │     return {
2025-06-04T21:52:29.3341343Z  [2m171[0m │       on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3341543Z      · [38;2;246;87;248m                          ────┬───[0m
2025-06-04T21:52:29.3341832Z      ·                               [38;2;246;87;248m╰── [38;2;246;87;248m'callback' is declared here[0m[0m
2025-06-04T21:52:29.3341959Z  [2m172[0m │       stdout: { 
2025-06-04T21:52:29.3342050Z      ╰────
2025-06-04T21:52:29.3342292Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3342302Z 
2025-06-04T21:52:29.3342857Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3343244Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:173:14]
2025-06-04T21:52:29.3343376Z  [2m172[0m │       stdout: { 
2025-06-04T21:52:29.3343602Z  [2m173[0m │         on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3343770Z      · [38;2;246;87;248m             ──┬──[0m
2025-06-04T21:52:29.3344032Z      ·                [38;2;246;87;248m╰── [38;2;246;87;248m'event' is declared here[0m[0m
2025-06-04T21:52:29.3344240Z  [2m174[0m │         pipe: (destination: any) => destination
2025-06-04T21:52:29.3344329Z      ╰────
2025-06-04T21:52:29.3344572Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3344580Z 
2025-06-04T21:52:29.3345152Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'callback' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3345412Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:173:29]
2025-06-04T21:52:29.3345550Z  [2m172[0m │       stdout: { 
2025-06-04T21:52:29.3345770Z  [2m173[0m │         on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3346113Z      · [38;2;246;87;248m                            ────┬───[0m
2025-06-04T21:52:29.3346421Z      ·                                 [38;2;246;87;248m╰── [38;2;246;87;248m'callback' is declared here[0m[0m
2025-06-04T21:52:29.3346625Z  [2m174[0m │         pipe: (destination: any) => destination
2025-06-04T21:52:29.3346716Z      ╰────
2025-06-04T21:52:29.3346961Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3346967Z 
2025-06-04T21:52:29.3347523Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3347782Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:177:14]
2025-06-04T21:52:29.3347908Z  [2m176[0m │       stderr: { 
2025-06-04T21:52:29.3348134Z  [2m177[0m │         on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3348291Z      · [38;2;246;87;248m             ──┬──[0m
2025-06-04T21:52:29.3348565Z      ·                [38;2;246;87;248m╰── [38;2;246;87;248m'event' is declared here[0m[0m
2025-06-04T21:52:29.3348767Z  [2m178[0m │         pipe: (destination: any) => destination
2025-06-04T21:52:29.3348861Z      ╰────
2025-06-04T21:52:29.3349207Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3349214Z 
2025-06-04T21:52:29.3349795Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'callback' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3350050Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:177:29]
2025-06-04T21:52:29.3350181Z  [2m176[0m │       stderr: { 
2025-06-04T21:52:29.3350391Z  [2m177[0m │         on: (event: string, callback: Function) => {},
2025-06-04T21:52:29.3350600Z      · [38;2;246;87;248m                            ────┬───[0m
2025-06-04T21:52:29.3350906Z      ·                                 [38;2;246;87;248m╰── [38;2;246;87;248m'callback' is declared here[0m[0m
2025-06-04T21:52:29.3351107Z  [2m178[0m │         pipe: (destination: any) => destination
2025-06-04T21:52:29.3351208Z      ╰────
2025-06-04T21:52:29.3351449Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3351455Z 
2025-06-04T21:52:29.3352019Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3352271Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:199:8]
2025-06-04T21:52:29.3352413Z  [2m198[0m │   Readable: class {
2025-06-04T21:52:29.3352717Z  [2m199[0m │     on(event: string, listener: (...args: unknown[]) => void) { return this; }
2025-06-04T21:52:29.3352869Z      · [38;2;246;87;248m       ──┬──[0m
2025-06-04T21:52:29.3353253Z      ·          [38;2;246;87;248m╰── [38;2;246;87;248m'event' is declared here[0m[0m
2025-06-04T21:52:29.3353498Z  [2m200[0m │     pipe(destination: unknown) { return destination; }
2025-06-04T21:52:29.3353588Z      ╰────
2025-06-04T21:52:29.3353828Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3353839Z 
2025-06-04T21:52:29.3354410Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'listener' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3354667Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:199:23]
2025-06-04T21:52:29.3354800Z  [2m198[0m │   Readable: class {
2025-06-04T21:52:29.3355099Z  [2m199[0m │     on(event: string, listener: (...args: unknown[]) => void) { return this; }
2025-06-04T21:52:29.3355290Z      · [38;2;246;87;248m                      ────┬───[0m
2025-06-04T21:52:29.3355584Z      ·                           [38;2;246;87;248m╰── [38;2;246;87;248m'listener' is declared here[0m[0m
2025-06-04T21:52:29.3355814Z  [2m200[0m │     pipe(destination: unknown) { return destination; }
2025-06-04T21:52:29.3356012Z      ╰────
2025-06-04T21:52:29.3356265Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3356272Z 
2025-06-04T21:52:29.3356833Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3357089Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:204:8]
2025-06-04T21:52:29.3357222Z  [2m203[0m │   Writable: class {
2025-06-04T21:52:29.3357523Z  [2m204[0m │     on(event: string, listener: (...args: unknown[]) => void) { return this; }
2025-06-04T21:52:29.3357670Z      · [38;2;246;87;248m       ──┬──[0m
2025-06-04T21:52:29.3357928Z      ·          [38;2;246;87;248m╰── [38;2;246;87;248m'event' is declared here[0m[0m
2025-06-04T21:52:29.3358130Z  [2m205[0m │     write(chunk: unknown) { return true; }
2025-06-04T21:52:29.3358227Z      ╰────
2025-06-04T21:52:29.3358474Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3358481Z 
2025-06-04T21:52:29.3359154Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'listener' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3359414Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:204:23]
2025-06-04T21:52:29.3359548Z  [2m203[0m │   Writable: class {
2025-06-04T21:52:29.3359850Z  [2m204[0m │     on(event: string, listener: (...args: unknown[]) => void) { return this; }
2025-06-04T21:52:29.3360034Z      · [38;2;246;87;248m                      ────┬───[0m
2025-06-04T21:52:29.3360324Z      ·                           [38;2;246;87;248m╰── [38;2;246;87;248m'listener' is declared here[0m[0m
2025-06-04T21:52:29.3360520Z  [2m205[0m │     write(chunk: unknown) { return true; }
2025-06-04T21:52:29.3360615Z      ╰────
2025-06-04T21:52:29.3360855Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3360870Z 
2025-06-04T21:52:29.3361429Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'chunk' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3361682Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:205:11]
2025-06-04T21:52:29.3361984Z  [2m204[0m │     on(event: string, listener: (...args: unknown[]) => void) { return this; }
2025-06-04T21:52:29.3362169Z  [2m205[0m │     write(chunk: unknown) { return true; }
2025-06-04T21:52:29.3362328Z      · [38;2;246;87;248m          ──┬──[0m
2025-06-04T21:52:29.3362590Z      ·             [38;2;246;87;248m╰── [38;2;246;87;248m'chunk' is declared here[0m[0m
2025-06-04T21:52:29.3362701Z  [2m206[0m │     end() {}
2025-06-04T21:52:29.3362792Z      ╰────
2025-06-04T21:52:29.3363163Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3363170Z 
2025-06-04T21:52:29.3363738Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3363989Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:209:8]
2025-06-04T21:52:29.3364133Z  [2m208[0m │   Transform: class {
2025-06-04T21:52:29.3364431Z  [2m209[0m │     on(event: string, listener: (...args: unknown[]) => void) { return this; }
2025-06-04T21:52:29.3364581Z      · [38;2;246;87;248m       ──┬──[0m
2025-06-04T21:52:29.3364833Z      ·          [38;2;246;87;248m╰── [38;2;246;87;248m'event' is declared here[0m[0m
2025-06-04T21:52:29.3365024Z  [2m210[0m │     write(chunk: unknown) { return true; }
2025-06-04T21:52:29.3365115Z      ╰────
2025-06-04T21:52:29.3365357Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3365372Z 
2025-06-04T21:52:29.3366063Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'listener' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3366330Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:209:23]
2025-06-04T21:52:29.3366466Z  [2m208[0m │   Transform: class {
2025-06-04T21:52:29.3366768Z  [2m209[0m │     on(event: string, listener: (...args: unknown[]) => void) { return this; }
2025-06-04T21:52:29.3366949Z      · [38;2;246;87;248m                      ────┬───[0m
2025-06-04T21:52:29.3367233Z      ·                           [38;2;246;87;248m╰── [38;2;246;87;248m'listener' is declared here[0m[0m
2025-06-04T21:52:29.3367423Z  [2m210[0m │     write(chunk: unknown) { return true; }
2025-06-04T21:52:29.3367512Z      ╰────
2025-06-04T21:52:29.3367757Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3367763Z 
2025-06-04T21:52:29.3368331Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'chunk' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3368596Z      ╭─[[38;2;92;157;255;1msrc/lib/polyfills/browser-polyfills.ts[0m:210:11]
2025-06-04T21:52:29.3368895Z  [2m209[0m │     on(event: string, listener: (...args: unknown[]) => void) { return this; }
2025-06-04T21:52:29.3369186Z  [2m210[0m │     write(chunk: unknown) { return true; }
2025-06-04T21:52:29.3369343Z      · [38;2;246;87;248m          ──┬──[0m
2025-06-04T21:52:29.3369605Z      ·             [38;2;246;87;248m╰── [38;2;246;87;248m'chunk' is declared here[0m[0m
2025-06-04T21:52:29.3369712Z  [2m211[0m │     end() {}
2025-06-04T21:52:29.3369805Z      ╰────
2025-06-04T21:52:29.3370044Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3370051Z 
2025-06-04T21:52:29.3370506Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3370724Z    ╭─[[38;2;92;157;255;1msrc/lib/polyfills/buffer.ts[0m:6:19]
2025-06-04T21:52:29.3370940Z  [2m5[0m │ if (typeof globalThis.Buffer === 'undefined') {
2025-06-04T21:52:29.3371140Z  [2m6[0m │   ;(globalThis as any).Buffer = BufferOriginal
2025-06-04T21:52:29.3371299Z    · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.3371399Z  [2m7[0m │ }
2025-06-04T21:52:29.3371488Z    ╰────
2025-06-04T21:52:29.3371995Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3372002Z 
2025-06-04T21:52:29.3372441Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3372688Z     ╭─[[38;2;92;157;255;1msrc/lib/polyfills/node-polyfills.ts[0m:12:18]
2025-06-04T21:52:29.3372900Z  [2m11[0m │ if (typeof globalThis.Buffer === 'undefined') {
2025-06-04T21:52:29.3373226Z  [2m12[0m │   (globalThis as any).Buffer = BufferClass
2025-06-04T21:52:29.3373387Z     · [38;2;246;87;248m                 ───[0m
2025-06-04T21:52:29.3373486Z  [2m13[0m │ }
2025-06-04T21:52:29.3373584Z     ╰────
2025-06-04T21:52:29.3374084Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3374091Z 
2025-06-04T21:52:29.3374532Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3374810Z    ╭─[[38;2;92;157;255;1msrc/layouts/__tests__/DashboardLayout.test.ts[0m:8:27]
2025-06-04T21:52:29.3374959Z  [2m7[0m │ declare module 'vitest' {
2025-06-04T21:52:29.3375119Z  [2m8[0m │   interface Assertion<T = any> {
2025-06-04T21:52:29.3375301Z    · [38;2;246;87;248m                          ───[0m
2025-06-04T21:52:29.3375450Z  [2m9[0m │     toBeInTheDocument(): T
2025-06-04T21:52:29.3375552Z    ╰────
2025-06-04T21:52:29.3376043Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3376049Z 
2025-06-04T21:52:29.3376594Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3376855Z      ╭─[[38;2;92;157;255;1msrc/utils/accessibilityTestUtils.ts[0m:307:53]
2025-06-04T21:52:29.3376989Z  [2m306[0m │  */
2025-06-04T21:52:29.3377293Z  [2m307[0m │ export async function checkScreenReaderIssues(page: any): Promise<{
2025-06-04T21:52:29.3377524Z      · [38;2;246;87;248m                                                    ───[0m
2025-06-04T21:52:29.3377666Z  [2m308[0m │   hasIssues: boolean
2025-06-04T21:52:29.3377755Z      ╰────
2025-06-04T21:52:29.3378258Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3378275Z 
2025-06-04T21:52:29.3378708Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3378968Z      ╭─[[38;2;92;157;255;1msrc/utils/accessibilityTestUtils.ts[0m:577:51]
2025-06-04T21:52:29.3379279Z  [2m576[0m │  */
2025-06-04T21:52:29.3379596Z  [2m577[0m │ export async function checkHeadingHierarchy(page: any): Promise<{
2025-06-04T21:52:29.3379826Z      · [38;2;246;87;248m                                                  ───[0m
2025-06-04T21:52:29.3379964Z  [2m578[0m │   isValid: boolean
2025-06-04T21:52:29.3380055Z      ╰────
2025-06-04T21:52:29.3380558Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3380566Z 
2025-06-04T21:52:29.3381007Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3381268Z      ╭─[[38;2;92;157;255;1msrc/utils/accessibilityTestUtils.ts[0m:750:45]
2025-06-04T21:52:29.3381362Z  [2m749[0m │ 
2025-06-04T21:52:29.3381614Z  [2m750[0m │   toHaveValidHeadingStructure: async (page: any) => {
2025-06-04T21:52:29.3381832Z      · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.3382085Z  [2m751[0m │     const headingCheck = await checkHeadingHierarchy(page)
2025-06-04T21:52:29.3382177Z      ╰────
2025-06-04T21:52:29.3382673Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3382680Z 
2025-06-04T21:52:29.3383117Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3383316Z     ╭─[[38;2;92;157;255;1msrc/test/utils/astro.ts[0m:12:64]
2025-06-04T21:52:29.3383415Z  [2m11[0m │  */
2025-06-04T21:52:29.3383709Z  [2m12[0m │ export async function renderAstro<Props extends Record<string, any>>(
2025-06-04T21:52:29.3384104Z     · [38;2;246;87;248m                                                               ───[0m
2025-06-04T21:52:29.3384272Z  [2m13[0m │   Component: AstroComponent,
2025-06-04T21:52:29.3384366Z     ╰────
2025-06-04T21:52:29.3384861Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3384868Z 
2025-06-04T21:52:29.3385304Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3385500Z     ╭─[[38;2;92;157;255;1msrc/test/utils/astro.ts[0m:33:55]
2025-06-04T21:52:29.3385594Z  [2m32[0m │  */
2025-06-04T21:52:29.3385880Z  [2m33[0m │ export function createMockAstro(props: Record<string, any> = {}) {
2025-06-04T21:52:29.3386111Z     · [38;2;246;87;248m                                                      ───[0m
2025-06-04T21:52:29.3386230Z  [2m34[0m │   return {
2025-06-04T21:52:29.3386319Z     ╰────
2025-06-04T21:52:29.3386929Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3386937Z 
2025-06-04T21:52:29.3387378Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3387566Z     ╭─[[38;2;92;157;255;1msrc/test/setup.ts[0m:10:29]
2025-06-04T21:52:29.3387699Z  [2m 9[0m │   namespace Vi {
2025-06-04T21:52:29.3387873Z  [2m10[0m │     interface Assertion<T = any> {
2025-06-04T21:52:29.3388056Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.3388212Z  [2m11[0m │       toBeInTheDocument(): T
2025-06-04T21:52:29.3388301Z     ╰────
2025-06-04T21:52:29.3388789Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3388806Z 
2025-06-04T21:52:29.3389381Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3389576Z     ╭─[[38;2;92;157;255;1msrc/test/setup.ts[0m:20:31]
2025-06-04T21:52:29.3389699Z  [2m19[0m │ expect.extend({
2025-06-04T21:52:29.3389884Z  [2m20[0m │   toBeInTheDocument(received: any) {
2025-06-04T21:52:29.3392937Z     · [38;2;246;87;248m                              ───[0m
2025-06-04T21:52:29.3393272Z  [2m21[0m │     const pass = received !== null && received !== undefined
2025-06-04T21:52:29.3393379Z     ╰────
2025-06-04T21:52:29.3393909Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3393920Z 
2025-06-04T21:52:29.3394397Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3394593Z     ╭─[[38;2;92;157;255;1msrc/test/setup.ts[0m:30:29]
2025-06-04T21:52:29.3394711Z  [2m29[0m │   },
2025-06-04T21:52:29.3395000Z  [2m30[0m │   toHaveAttribute(received: any, attr: string, value?: string) {
2025-06-04T21:52:29.3395201Z     · [38;2;246;87;248m                            ───[0m
2025-06-04T21:52:29.3395414Z  [2m31[0m │     const hasAttr = received?.hasAttribute(attr)
2025-06-04T21:52:29.3395504Z     ╰────
2025-06-04T21:52:29.3396017Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3396024Z 
2025-06-04T21:52:29.3396481Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3396671Z     ╭─[[38;2;92;157;255;1msrc/test/setup.ts[0m:43:25]
2025-06-04T21:52:29.3396769Z  [2m42[0m │   },
2025-06-04T21:52:29.3397014Z  [2m43[0m │   toHaveClass(received: any, ...classNames: string[]) {
2025-06-04T21:52:29.3397364Z     · [38;2;246;87;248m                        ───[0m
2025-06-04T21:52:29.3397547Z  [2m44[0m │     const classList = received?.classList
2025-06-04T21:52:29.3397643Z     ╰────
2025-06-04T21:52:29.3398160Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3398167Z 
2025-06-04T21:52:29.3398623Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-namespace): ES2015 module syntax is preferred over namespaces.[0m
2025-06-04T21:52:29.3398807Z     ╭─[[38;2;92;157;255;1msrc/test/setup.ts[0m:9:3]
2025-06-04T21:52:29.3398947Z  [2m 8[0m │ declare global {
2025-06-04T21:52:29.3399230Z  [2m 9[0m │   namespace Vi {
2025-06-04T21:52:29.3399390Z     · [38;2;246;87;248m  ─────────[0m
2025-06-04T21:52:29.3399561Z  [2m10[0m │     interface Assertion<T = any> {
2025-06-04T21:52:29.3399653Z     ╰────
2025-06-04T21:52:29.3400038Z [38;2;106;159;181m  help: [0mReplace the namespace with an ES2015 module or use `declare module`
2025-06-04T21:52:29.3400058Z 
2025-06-04T21:52:29.3400503Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3400904Z      ╭─[[38;2;92;157;255;1msrc/load-tests/breach-notification.load.ts[0m:160:40]
2025-06-04T21:52:29.3401114Z  [2m159[0m │   const success = check(createResponse, {
2025-06-04T21:52:29.3401385Z  [2m160[0m │     'breach created successfully': (r: any) => r.status === 200,
2025-06-04T21:52:29.3401597Z      · [38;2;246;87;248m                                       ───[0m
2025-06-04T21:52:29.3401837Z  [2m161[0m │     'has breach ID': (r: any) => r.json('id') !== undefined,
2025-06-04T21:52:29.3401929Z      ╰────
2025-06-04T21:52:29.3402432Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3402439Z 
2025-06-04T21:52:29.3402877Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3403163Z      ╭─[[38;2;92;157;255;1msrc/load-tests/breach-notification.load.ts[0m:161:26]
2025-06-04T21:52:29.3403428Z  [2m160[0m │     'breach created successfully': (r: any) => r.status === 200,
2025-06-04T21:52:29.3403662Z  [2m161[0m │     'has breach ID': (r: any) => r.json('id') !== undefined,
2025-06-04T21:52:29.3403840Z      · [38;2;246;87;248m                         ───[0m
2025-06-04T21:52:29.3403939Z  [2m162[0m │   })
2025-06-04T21:52:29.3404028Z      ╰────
2025-06-04T21:52:29.3404524Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3404531Z 
2025-06-04T21:52:29.3404963Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3405235Z      ╭─[[38;2;92;157;255;1msrc/load-tests/breach-notification.load.ts[0m:200:46]
2025-06-04T21:52:29.3405535Z  [2m199[0m │     check(notificationResponse, {
2025-06-04T21:52:29.3405824Z  [2m200[0m │       'notifications sent successfully': (r: any) => r.status === 200,
2025-06-04T21:52:29.3406045Z      · [38;2;246;87;248m                                             ───[0m
2025-06-04T21:52:29.3406257Z  [2m201[0m │       'all notifications delivered': (r: any) => {
2025-06-04T21:52:29.3406350Z      ╰────
2025-06-04T21:52:29.3406844Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3406850Z 
2025-06-04T21:52:29.3407286Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3407553Z      ╭─[[38;2;92;157;255;1msrc/load-tests/breach-notification.load.ts[0m:201:42]
2025-06-04T21:52:29.3407834Z  [2m200[0m │       'notifications sent successfully': (r: any) => r.status === 200,
2025-06-04T21:52:29.3408048Z  [2m201[0m │       'all notifications delivered': (r: any) => {
2025-06-04T21:52:29.3408261Z      · [38;2;246;87;248m                                         ───[0m
2025-06-04T21:52:29.3408495Z  [2m202[0m │         const data = r.json()
2025-06-04T21:52:29.3408592Z      ╰────
2025-06-04T21:52:29.3409193Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3409202Z 
2025-06-04T21:52:29.3409644Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3409913Z      ╭─[[38;2;92;157;255;1msrc/load-tests/breach-notification.load.ts[0m:228:48]
2025-06-04T21:52:29.3410052Z  [2m227[0m │   check(response, {
2025-06-04T21:52:29.3410346Z  [2m228[0m │     'test environment setup successfully': (r: any) => r.status === 200,
2025-06-04T21:52:29.3410564Z      · [38;2;246;87;248m                                               ───[0m
2025-06-04T21:52:29.3410676Z  [2m229[0m │   })
2025-06-04T21:52:29.3410764Z      ╰────
2025-06-04T21:52:29.3411285Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3411292Z 
2025-06-04T21:52:29.3411745Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3412024Z      ╭─[[38;2;92;157;255;1msrc/load-tests/breach-notification.load.ts[0m:234:32]
2025-06-04T21:52:29.3412122Z  [2m233[0m │ 
2025-06-04T21:52:29.3412312Z  [2m234[0m │ export function teardown(data: any) {
2025-06-04T21:52:29.3412506Z      · [38;2;246;87;248m                               ───[0m
2025-06-04T21:52:29.3412666Z  [2m235[0m │   // Cleanup test environment
2025-06-04T21:52:29.3412755Z      ╰────
2025-06-04T21:52:29.3413255Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3413274Z 
2025-06-04T21:52:29.3413721Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3413993Z      ╭─[[38;2;92;157;255;1msrc/load-tests/breach-notification.load.ts[0m:245:53]
2025-06-04T21:52:29.3414130Z  [2m244[0m │   check(response, {
2025-06-04T21:52:29.3414448Z  [2m245[0m │     'test environment cleaned up successfully': (r: any) => r.status === 200,
2025-06-04T21:52:29.3414680Z      · [38;2;246;87;248m                                                    ───[0m
2025-06-04T21:52:29.3414776Z  [2m246[0m │   })
2025-06-04T21:52:29.3414867Z      ╰────
2025-06-04T21:52:29.3415363Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3415369Z 
2025-06-04T21:52:29.3415807Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3416302Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/datasets/__tests__/patient-psi-integration.test.ts[0m:80:28]
2025-06-04T21:52:29.3416587Z  [2m79[0m │       const normalizedResult = await integration.normalizeModel(
2025-06-04T21:52:29.3416752Z  [2m80[0m │         mockPatientData as any,
2025-06-04T21:52:29.3416943Z     · [38;2;246;87;248m                           ───[0m
2025-06-04T21:52:29.3417044Z  [2m81[0m │       )
2025-06-04T21:52:29.3417137Z     ╰────
2025-06-04T21:52:29.3417646Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3417653Z 
2025-06-04T21:52:29.3418103Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3418464Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/datasets/__tests__/patient-psi-integration.test.ts[0m:157:25]
2025-06-04T21:52:29.3418758Z  [2m156[0m │       const normalizedResults = await integration.normalizeModels(
2025-06-04T21:52:29.3419133Z  [2m157[0m │         mockPatients as any[],
2025-06-04T21:52:29.3419336Z      · [38;2;246;87;248m                        ───[0m
2025-06-04T21:52:29.3419447Z  [2m158[0m │       )
2025-06-04T21:52:29.3419540Z      ╰────
2025-06-04T21:52:29.3420060Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3420066Z 
2025-06-04T21:52:29.3420512Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3420871Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/datasets/__tests__/patient-psi-integration.test.ts[0m:185:30]
2025-06-04T21:52:29.3421147Z  [2m184[0m │       const normalizedResult = await integration.normalizeModel(
2025-06-04T21:52:29.3421333Z  [2m185[0m │         incompletePatient as any,
2025-06-04T21:52:29.3421525Z      · [38;2;246;87;248m                             ───[0m
2025-06-04T21:52:29.3421629Z  [2m186[0m │       )
2025-06-04T21:52:29.3421729Z      ╰────
2025-06-04T21:52:29.3422227Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3422238Z 
2025-06-04T21:52:29.3422678Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3422969Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-llama/MentalLLaMAAdapter.ts[0m:34:22]
2025-06-04T21:52:29.3423118Z  [2m33[0m │     textSample: string;
2025-06-04T21:52:29.3423266Z  [2m34[0m │     decisionDetails: any;
2025-06-04T21:52:29.3423443Z     · [38;2;246;87;248m                     ───[0m
2025-06-04T21:52:29.3423580Z  [2m35[0m │   }): Promise<void>;
2025-06-04T21:52:29.3423674Z     ╰────
2025-06-04T21:52:29.3424185Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3424193Z 
2025-06-04T21:52:29.3424691Z   [38;2;225;80;80;1m×[0m [38;2;225;80;80;1mtypescript-eslint(no-require-imports): Expected "import" statement instead of "require" call[0m
2025-06-04T21:52:29.3424986Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-llama/MentalLLaMAAdapter.ts[0m:332:78]
2025-06-04T21:52:29.3425207Z  [2m331[0m │                     // Import the crisis protocol system
2025-06-04T21:52:29.3425572Z  [2m332[0m │                     const { CrisisRiskDetector, initializeCrisisProtocol } = require('../crisis')
2025-06-04T21:52:29.3425875Z      · [38;2;246;87;248m                                                                             ────────────────────[0m
2025-06-04T21:52:29.3425969Z  [2m333[0m │ 
2025-06-04T21:52:29.3426057Z      ╰────
2025-06-04T21:52:29.3426320Z [38;2;106;159;181m  help: [0mDo not use CommonJS `require` calls
2025-06-04T21:52:29.3426483Z 
2025-06-04T21:52:29.3426934Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3427330Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-llama/analyzers/DepressionDetectionAnalyzer.ts[0m:100:21]
2025-06-04T21:52:29.3427433Z  [2m 99[0m │       }
2025-06-04T21:52:29.3427585Z  [2m100[0m │     } catch (error: any) {
2025-06-04T21:52:29.3427753Z      · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.3428058Z  [2m101[0m │       logger.error(`Error during depression analysis: ${error.message}`, {
2025-06-04T21:52:29.3428148Z      ╰────
2025-06-04T21:52:29.3428641Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3428648Z 
2025-06-04T21:52:29.3429187Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3429569Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/mental-llama/analyzers/AnxietyDetectionAnalyzer.ts[0m:98:21]
2025-06-04T21:52:29.3429670Z  [2m97[0m │       }
2025-06-04T21:52:29.3429936Z  [2m98[0m │     } catch (error: any) {
2025-06-04T21:52:29.3430111Z     · [38;2;246;87;248m                    ───[0m
2025-06-04T21:52:29.3430393Z  [2m99[0m │       logger.error(`Error during anxiety analysis: ${error.message}`, {
2025-06-04T21:52:29.3430486Z     ╰────
2025-06-04T21:52:29.3430979Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3430986Z 
2025-06-04T21:52:29.3431424Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3431748Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/validation/ContinuousValidationRunner.ts[0m:396:14]
2025-06-04T21:52:29.3431914Z  [2m395[0m │   public async handleWebhook(
2025-06-04T21:52:29.3432058Z  [2m396[0m │     payload: any,
2025-06-04T21:52:29.3432212Z      · [38;2;246;87;248m             ───[0m
2025-06-04T21:52:29.3432360Z  [2m397[0m │     signature: string,
2025-06-04T21:52:29.3432453Z      ╰────
2025-06-04T21:52:29.3432944Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3432951Z 
2025-06-04T21:52:29.3433384Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3433706Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/validation/ContinuousValidationRunner.ts[0m:574:45]
2025-06-04T21:52:29.3433804Z  [2m573[0m │ 
2025-06-04T21:52:29.3434149Z  [2m574[0m │   private validateWebhookSignature(payload: any, signature: string): boolean {
2025-06-04T21:52:29.3434366Z      · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.3434654Z  [2m575[0m │     // In a real implementation, this would verify the HMAC signature
2025-06-04T21:52:29.3434744Z      ╰────
2025-06-04T21:52:29.3435249Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3435256Z 
2025-06-04T21:52:29.3435836Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'payload' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3436161Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/validation/ContinuousValidationRunner.ts[0m:574:36]
2025-06-04T21:52:29.3436263Z  [2m573[0m │ 
2025-06-04T21:52:29.3436603Z  [2m574[0m │   private validateWebhookSignature(payload: any, signature: string): boolean {
2025-06-04T21:52:29.3436816Z      · [38;2;246;87;248m                                   ───┬───[0m
2025-06-04T21:52:29.3437128Z      ·                                       [38;2;246;87;248m╰── [38;2;246;87;248m'payload' is declared here[0m[0m
2025-06-04T21:52:29.3437527Z  [2m575[0m │     // In a real implementation, this would verify the HMAC signature
2025-06-04T21:52:29.3437620Z      ╰────
2025-06-04T21:52:29.3437879Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3437887Z 
2025-06-04T21:52:29.3438475Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1meslint(no-unused-vars): Parameter 'signature' is declared but never used. Unused parameters should start with a '_'.[0m
2025-06-04T21:52:29.3438798Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/validation/ContinuousValidationRunner.ts[0m:574:50]
2025-06-04T21:52:29.3438894Z  [2m573[0m │ 
2025-06-04T21:52:29.3439332Z  [2m574[0m │   private validateWebhookSignature(payload: any, signature: string): boolean {
2025-06-04T21:52:29.3439576Z      · [38;2;246;87;248m                                                 ────┬────[0m
2025-06-04T21:52:29.3439903Z      ·                                                      [38;2;246;87;248m╰── [38;2;246;87;248m'signature' is declared here[0m[0m
2025-06-04T21:52:29.3440186Z  [2m575[0m │     // In a real implementation, this would verify the HMAC signature
2025-06-04T21:52:29.3440391Z      ╰────
2025-06-04T21:52:29.3440648Z [38;2;106;159;181m  help: [0mConsider removing this parameter.
2025-06-04T21:52:29.3440655Z 
2025-06-04T21:52:29.3441102Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3441395Z    ╭─[[38;2;92;157;255;1msrc/lib/ai/validation/__tests__/vitest-globals.ts[0m:7:43]
2025-06-04T21:52:29.3441495Z  [2m6[0m │ 
2025-06-04T21:52:29.3441695Z  [2m7[0m │ export const { describe } = globalThis as any
2025-06-04T21:52:29.3441914Z    · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.3442094Z  [2m8[0m │ export const { it } = globalThis as any
2025-06-04T21:52:29.3442186Z    ╰────
2025-06-04T21:52:29.3442685Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3442703Z 
2025-06-04T21:52:29.3443152Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3443440Z    ╭─[[38;2;92;157;255;1msrc/lib/ai/validation/__tests__/vitest-globals.ts[0m:8:37]
2025-06-04T21:52:29.3443636Z  [2m7[0m │ export const { describe } = globalThis as any
2025-06-04T21:52:29.3443809Z  [2m8[0m │ export const { it } = globalThis as any
2025-06-04T21:52:29.3444014Z    · [38;2;246;87;248m                                    ───[0m
2025-06-04T21:52:29.3444206Z  [2m9[0m │ export const { expect } = globalThis as any
2025-06-04T21:52:29.3444294Z    ╰────
2025-06-04T21:52:29.3444801Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3444808Z 
2025-06-04T21:52:29.3445257Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3445560Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/validation/__tests__/vitest-globals.ts[0m:9:41]
2025-06-04T21:52:29.3445738Z  [2m 8[0m │ export const { it } = globalThis as any
2025-06-04T21:52:29.3445929Z  [2m 9[0m │ export const { expect } = globalThis as any
2025-06-04T21:52:29.3446138Z     · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.3446319Z  [2m10[0m │ export const { vi } = globalThis as any
2025-06-04T21:52:29.3446409Z     ╰────
2025-06-04T21:52:29.3446911Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3446917Z 
2025-06-04T21:52:29.3447353Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3447776Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/validation/__tests__/vitest-globals.ts[0m:10:37]
2025-06-04T21:52:29.3447965Z  [2m 9[0m │ export const { expect } = globalThis as any
2025-06-04T21:52:29.3448155Z  [2m10[0m │ export const { vi } = globalThis as any
2025-06-04T21:52:29.3448358Z     · [38;2;246;87;248m                                    ───[0m
2025-06-04T21:52:29.3448566Z  [2m11[0m │ export const { beforeEach } = globalThis as any
2025-06-04T21:52:29.3448658Z     ╰────
2025-06-04T21:52:29.3449251Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3449258Z 
2025-06-04T21:52:29.3449698Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3449988Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/validation/__tests__/vitest-globals.ts[0m:11:45]
2025-06-04T21:52:29.3450166Z  [2m10[0m │ export const { vi } = globalThis as any
2025-06-04T21:52:29.3450379Z  [2m11[0m │ export const { beforeEach } = globalThis as any
2025-06-04T21:52:29.3450598Z     · [38;2;246;87;248m                                            ───[0m
2025-06-04T21:52:29.3450924Z  [2m12[0m │ export const { afterEach } = globalThis as any
2025-06-04T21:52:29.3451024Z     ╰────
2025-06-04T21:52:29.3451521Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3451528Z 
2025-06-04T21:52:29.3451972Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3452258Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/validation/__tests__/vitest-globals.ts[0m:12:44]
2025-06-04T21:52:29.3452463Z  [2m11[0m │ export const { beforeEach } = globalThis as any
2025-06-04T21:52:29.3452661Z  [2m12[0m │ export const { afterEach } = globalThis as any
2025-06-04T21:52:29.3452876Z     · [38;2;246;87;248m                                           ───[0m
2025-06-04T21:52:29.3452974Z     ╰────
2025-06-04T21:52:29.3453479Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3453489Z 
2025-06-04T21:52:29.3453919Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3454104Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/utils.ts[0m:16:35]
2025-06-04T21:52:29.3454353Z  [2m15[0m │   // Check if the provider supports documentation generation
2025-06-04T21:52:29.3454528Z  [2m16[0m │   const { provider } = service as any
2025-06-04T21:52:29.3454729Z     · [38;2;246;87;248m                                  ───[0m
2025-06-04T21:52:29.3454937Z  [2m17[0m │   if (!provider || typeof provider !== 'object') {
2025-06-04T21:52:29.3455029Z     ╰────
2025-06-04T21:52:29.3455524Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3455540Z 
2025-06-04T21:52:29.3455989Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3456173Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/utils.ts[0m:57:19]
2025-06-04T21:52:29.3456361Z  [2m56[0m │ export function extractEmotionalThemes(
2025-06-04T21:52:29.3456505Z  [2m57[0m │   analyses: Array<any>,
2025-06-04T21:52:29.3456670Z     · [38;2;246;87;248m                  ───[0m
2025-06-04T21:52:29.3456939Z  [2m58[0m │ ): Array<{ theme: string; intensity: number; frequency: number }> {
2025-06-04T21:52:29.3457028Z     ╰────
2025-06-04T21:52:29.3457523Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3457530Z 
2025-06-04T21:52:29.3457960Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3458272Z     ╭─[[38;2;92;157;255;1msrc/lib/ai/utils.ts[0m:68:43]
2025-06-04T21:52:29.3458545Z  [2m67[0m │     if (analysis.emotions && Array.isArray(analysis.emotions)) {
2025-06-04T21:52:29.3458765Z  [2m68[0m │       analysis.emotions.forEach((emotion: any) => {
2025-06-04T21:52:29.3458977Z     · [38;2;246;87;248m                                          ───[0m
2025-06-04T21:52:29.3459277Z  [2m69[0m │         const type = emotion.type || 'unknown'
2025-06-04T21:52:29.3459365Z     ╰────
2025-06-04T21:52:29.3459862Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3459869Z 
2025-06-04T21:52:29.3460301Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3460633Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/performance/__tests__/EdgeComputing.test.ts[0m:110:41]
2025-06-04T21:52:29.3460825Z  [2m109[0m │       expect(status.enabled).toBe(true)
2025-06-04T21:52:29.3461250Z  [2m110[0m │       expect((status.availableModels as any[]).length).toBeGreaterThan(0)
2025-06-04T21:52:29.3461471Z      · [38;2;246;87;248m                                        ───[0m
2025-06-04T21:52:29.3461569Z  [2m111[0m │ 
2025-06-04T21:52:29.3461667Z      ╰────
2025-06-04T21:52:29.3462164Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3462170Z 
2025-06-04T21:52:29.3462608Z   [38;2;244;191;117;1m⚠[0m [38;2;244;191;117;1mtypescript-eslint(no-explicit-any): Unexpected any. Specify a different type.[0m
2025-06-04T21:52:29.3462928Z      ╭─[[38;2;92;157;255;1msrc/lib/ai/performance/__tests__/EdgeComputing.test.ts[0m:152:50]
2025-06-04T21:52:29.3463023Z  [2m151[0m │ 
2025-06-04T21:52:29.3463254Z  [2m152[0m │       const result = await manager.processOnEdge<any>(
2025-06-04T21:52:29.3463488Z      · [38;2;246;87;248m                                                 ───[0m
2025-06-04T21:52:29.3463643Z  [2m153[0m │         'emotion-detection',
2025-06-04T21:52:29.3463742Z      ╰────
2025-06-04T21:52:29.3464237Z [38;2;106;159;181m  help: [0mUse `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.
2025-06-04T21:52:29.3464243Z 
2025-06-04T21:52:29.3464371Z Found 955 warnings and 38 errors.
2025-06-04T21:52:29.3464538Z Finished in 341ms on 1421 files using 4 threads.
2025-06-04T21:52:29.3464771Z  ELIFECYCLE  Command failed with exit code 1.
2025-06-04T21:52:29.3474886Z ##[error]Process completed with exit code 1.
2025-06-04T21:52:29.3529964Z Post job cleanup.
2025-06-04T21:52:29.4061715Z Pruning is unnecessary.
2025-06-04T21:52:29.4149215Z Post job cleanup.
2025-06-04T21:52:29.5078511Z [command]/usr/bin/git version
2025-06-04T21:52:29.5118801Z git version 2.49.0
2025-06-04T21:52:29.5163349Z Temporarily overriding HOME='/home/runner/work/_temp/be9d1649-bdb6-4330-aee4-bfd051188d32' before making global git config changes
2025-06-04T21:52:29.5164879Z Adding repository directory to the temporary git global config as a safe directory
2025-06-04T21:52:29.5177622Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/pixelated/pixelated
2025-06-04T21:52:29.5216978Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-06-04T21:52:29.5251114Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-06-04T21:52:29.5552523Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-06-04T21:52:29.5576090Z http.https://github.com/.extraheader
2025-06-04T21:52:29.5589370Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2025-06-04T21:52:29.5620878Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-06-04T21:52:29.6023816Z Cleaning up orphan processes
