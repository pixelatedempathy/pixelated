trigger:
  branches:
    include:
    - main
    - master
    - develop
  paths:
    include:
    - src/**
    - infra/**
    - Dockerfile.azure
    - azure-pipelines.yml
    - package.json
    - pnpm-lock.yaml

pr:
  branches:
    include:
    - master
    - develop

variables:
- name: buildConfiguration
  value: Release
- name: nodeVersion
  value: 24.x
- name: dockerTag
  value: $(Build.BuildId)
- name: azureSubscription
  value: "pixelated-service-connection"
- name: resourceGroupName
  value: pixelated-rg
- name: appServiceName
  value: pixelated
- name: containerAppName
  value: pixelated-web
- name: containerRegistryPrefix
  value: pixelatedcr
- name: imageName
  value: pixelated-web
- name: azureLocation
  value: eastus
- name: environment
  value: production
- name: customDomain
  value: "pixelatedempathy.com"
- name: PYTHONWARNINGS
  value: "ignore::FutureWarning"

pool:
  name: Default
  demands:
  - agent.os -equals Linux
  - docker

stages:
- stage: Build
  displayName: Build Application
  jobs:
  - job: BuildApp
    displayName: Build Node.js Application
    pool:
      name: Default
    steps:
    - checkout: self
    - task: NodeTool@0
      displayName: Use Node.js $(nodeVersion)
      inputs:
        versionSpec: $(nodeVersion)

    - script: |
        npm install -g pnpm@10.15.0
        pnpm config set store-dir $(Agent.WorkFolder)/.pnpm-store
        mkdir -p $(Agent.WorkFolder)/.pnpm-store
      displayName: Install and configure pnpm

    - task: Cache@2
      displayName: Cache pnpm dependencies
      inputs:
        key: 'pnpm-v2 | "$(Agent.OS)" | pnpm-lock.yaml'
        restoreKeys: |
          pnpm-v2 | "$(Agent.OS)"
          pnpm | "$(Agent.OS)"
        path: $(Agent.WorkFolder)/.pnpm-store

    - script: |
        # Install dependencies with optimizations
        pnpm install --frozen-lockfile --prefer-offline
      displayName: Install dependencies

    - script: |
        # Install Node.js 24.x in container using nvm (no sudo)
        set -e
        export NVM_DIR="$HOME/.nvm"
        mkdir -p $NVM_DIR
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
        . $NVM_DIR/nvm.sh
        nvm install 24
        nvm use 24
        node --version
        which node
        echo "Node.js installation complete."
      displayName: "Install Node.js 24.x in container (pre-build)"

    - script: |
        set -eu
        # Guarantee all Astro/Vite cache directories AND their parents exist before Cache@2
        mkdir -p "$(Build.SourcesDirectory)/node_modules/.astro" "$(Build.SourcesDirectory)/.astro" "$(Agent.WorkFolder)/.astro-cache" "$(Build.SourcesDirectory)/node_modules/.vite"
        touch "$(Build.SourcesDirectory)/node_modules/.astro/.gitkeep" "$(Build.SourcesDirectory)/.astro/.gitkeep" "$(Agent.WorkFolder)/.astro-cache/.gitkeep" "$(Build.SourcesDirectory)/node_modules/.vite/.gitkeep"
      displayName: "Ensure cache directories exist and are non-empty (absolute paths) before Cache@2"

    - task: Cache@2
      displayName: Cache Astro build artifacts
      inputs:
        key: 'astro-build-v2 | "$(Agent.OS)" | $(Build.SourceBranchName) | $(Build.SourceVersion) | package.json | pnpm-lock.yaml'
        restoreKeys: |
          astro-build-v2 | "$(Agent.OS)" | $(Build.SourceBranchName)
          astro-build-v2 | "$(Agent.OS)"
          astro-build | "$(Agent.OS)"
        path: |
          $(Build.SourcesDirectory)/node_modules/.astro
          $(Build.SourcesDirectory)/.astro
          $(Agent.WorkFolder)/.astro-cache
          $(Build.SourcesDirectory)/node_modules/.vite
      continueOnError: false

    - script: |
        # Build with optimizations and cache configuration
        export NODE_OPTIONS="--max-old-space-size=4096"
        export ASTRO_CACHE_DIR="$(Agent.WorkFolder)/.astro-cache"
        export CI=true
        export ASTRO_TELEMETRY_DISABLED=1
        # Ensure cache directories exist and have proper permissions
        mkdir -p "$ASTRO_CACHE_DIR" node_modules/.vite node_modules/.astro .astro
        chmod -R 755 "$ASTRO_CACHE_DIR" node_modules/.vite node_modules/.astro .astro 2>/dev/null || true
        pnpm run build
      displayName: Build application

    - script: |
        # Preserve cache artifacts after build
        echo "Build completed. Cache directories status:"

        # Ensure all cache directories exist
        mkdir -p node_modules/.astro .astro "$ASTRO_CACHE_DIR" node_modules/.vite

        # Check and report directory contents
        if [ -d "node_modules/.astro" ]; then
          echo "node_modules/.astro/ contents:"
          ls -la node_modules/.astro/ || echo "Empty directory"
        fi

        if [ -d ".astro" ]; then
          echo ".astro/ contents:"
          ls -la .astro/ || echo "Empty directory"
        fi

        if [ -d "$ASTRO_CACHE_DIR" ]; then
          echo "ASTRO_CACHE_DIR contents:"
          ls -la "$ASTRO_CACHE_DIR" || echo "Empty directory"
        fi

        if [ -d "node_modules/.vite" ]; then
          echo "Vite cache contents:"
          ls -la node_modules/.vite || echo "Empty directory"
        fi

        # Ensure cache directories have at least placeholder files for next cache save
        touch node_modules/.astro/.gitkeep .astro/.gitkeep "$ASTRO_CACHE_DIR/.gitkeep" node_modules/.vite/.gitkeep

        echo "Cache preservation completed"
      displayName: Preserve cache artifacts
      env:
        ASTRO_CACHE_DIR: $(Agent.WorkFolder)/.astro-cache

# ...[No further changes have been made to the file content]...
  