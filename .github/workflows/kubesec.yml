# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Kubesec

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
  - cron: '30 3 * * 4'

jobs:
  kubesec-scan:
    name: Kubesec Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Kubesec and jq
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        curl -sSL https://github.com/controlplaneio/kubesec/releases/download/v2.13.0/kubesec_linux_amd64.tar.gz | tar -xz
        sudo mv kubesec /usr/local/bin/
        kubesec version

    - name: Scan Kubernetes manifests with Kubesec
      id: kubesec-scan
      run: |
        echo "üîç Scanning Kubernetes manifests for security issues..."
        SCAN_FAILED=false
        SCAN_RESULTS=""

        # Find and scan all YAML files in clusters directory
        for manifest in clusters/**/*.yaml clusters/**/*.yml; do
          if [ -f "$manifest" ]; then
            echo "üìÑ Scanning: $manifest"
            SCORE=$(kubesec scan "$manifest" --format json | jq -r '.[0].score' || echo "0")
            GRADE=$(kubesec scan "$manifest" --format json | jq -r '.[0].grade' || echo "UNKNOWN")

            echo "  Score: $SCORE | Grade: $GRADE"

            # Check for critical security issues
            ISSUES=$(kubesec scan "$manifest" --format json | jq -r '.[0].scoring.advise[]? | select(.selector != null) | "\(.selector): \(.reason)"' || echo "")

            if [ -n "$ISSUES" ]; then
              echo "  ‚ö†Ô∏è Security issues found:"
              echo "$ISSUES" | sed 's/^/    - /'
              SCAN_FAILED=true
            fi

            # Fail if grade is D or F
            if [ "$GRADE" = "D" ] || [ "$GRADE" = "F" ]; then
              echo "  ‚ùå CRITICAL: Manifest has grade $GRADE"
              SCAN_FAILED=true
            fi

            SCAN_RESULTS="${SCAN_RESULTS}\n$manifest: Score=$SCORE, Grade=$GRADE"
          fi
        done

        echo "üìä Scan Summary:"
        echo -e "$SCAN_RESULTS"

        if [ "$SCAN_FAILED" = "true" ]; then
          echo "::error::Kubesec security scan found critical issues. Please review and fix the security violations above."
          exit 1
        else
          echo "‚úÖ All manifests passed Kubesec security scan"
        fi

    - name: Run yamllint (style check, non-blocking)
      continue-on-error: true
      run: |
        python -m pip install yamllint --quiet
        yamllint clusters/**/*.yaml clusters/**/*.yml || echo "‚ö†Ô∏è YAML linting issues found (non-blocking)"
