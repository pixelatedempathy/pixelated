# -----------------------------------------------------------
# GitHub Actions Deploy Workflow: Usage & Secrets Documentation
#
# This workflow deploys the Pixelated Empathy project to a VPS
# on every push to the main branch using rsync and SSH.
#
# Required GitHub Secrets:
#   - VPS_HOST:        VPS IP address or hostname (default: 45.55.211.39)
#   - VPS_USER:        SSH username for VPS (default: root)
#   - VPS_PORT:        SSH port (default: 22)
#   - SSH_KEY:         Private SSH key (contents, not path)
#   - DOMAIN:          Domain name (default: pixelatedempathy.com)
#
# How to set up:
# 1. Generate an SSH key pair (if you don't have one):
#      ssh-keygen -t ed25519 -C "github-deploy"
#    Add the public key to ~/.ssh/authorized_keys on your VPS.
# 2. In GitHub repo settings, add the private key as the SSH_KEY secret.
# 3. Add VPS_HOST, VPS_USER, VPS_PORT, and DOMAIN as secrets.
# 4. Ensure your VPS user has sudo privileges and Docker permissions.
# 5. On push to main, the workflow will sync, build, and deploy.
#
# Notes:
# - The workflow archives old deployment in /root/pixelated-backup on the VPS.
# - Caddy config is updated if DOMAIN is set.
# - All commands run non-interactively; errors will fail the workflow.
# -----------------------------------------------------------
name: Deploy to VPS

permissions:
  contents: read
  id-token: write

on:
  push:
    branches:
    - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_PORT: ${{ secrets.VPS_PORT }}
      DOMAIN: ${{ secrets.DOMAIN }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH key
      run: |
        echo "${{ secrets.SSH_KEY }}" > /tmp/deploy_key
        chmod 600 /tmp/deploy_key
        eval $(ssh-agent -s)
        ssh-add /tmp/deploy_key
        mkdir -p ~/.ssh
        echo "Host *\n  StrictHostKeyChecking no\n" > ~/.ssh/config

    - name: Write rsync exclude file
      run: |
        cat > /tmp/rsync-exclude << 'EOF'
        .git/
        node_modules/
        .next/
        .nuxt/
        dist/
        build/
        coverage/
        .cache/
        *.log
        .DS_Store
        Thumbs.db
        __pycache__/
        *.pyc
        *.pyo
        .pytest_cache/
        .mypy_cache/
        venv/
        .venv/
        ai/venv/
        ai/.venv/
        ai/*.pt
        ai/*.pth
        ai/*.model
        ai/*.pkl
        .docker/
        docker-compose.override.yml
        temp/
        tmp/
        # Exclude massive AI training data files
        ai/datasets/
        ai/data/
        ai/database/
        ai/pipelines/data/
        ai/dataset_pipeline/
        ai/temporal_analysis_data*.jsonl
        ai/*.jsonl
        ai/*.csv
        ai/*.npy
        ai/*.db
        ai/*.sqlite
        ai/*.sqlite3
        # Exclude other large files
        *.zip
        *.tar.gz
        *.rar
        *.7z
        *.bak
        *.backup
        EOF

    - name: Archive old repo on VPS
      run: |
        ssh -i /tmp/deploy_key -p $VPS_PORT -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
          set -e
          if [ -d "/root/pixelated" ]; then
            sudo systemctl stop caddy || true
            sudo docker stop pixelated-app || true
            sudo mv /root/pixelated /root/pixelated-backup
            echo "Old repo archived to /root/pixelated-backup"
          else
            echo "/root/pixelated does not exist, nothing to archive"
          fi
        EOF

    - name: Rsync project to VPS
      run: |
        rsync -avz --progress --delete --exclude-from=/tmp/rsync-exclude -e "ssh -i /tmp/deploy_key -p $VPS_PORT -o StrictHostKeyChecking=no" ./ $VPS_USER@$VPS_HOST:/root/pixelated

    - name: Set up VPS environment
      run: >-
        ssh -i /tmp/deploy_key -p $VPS_PORT -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
          set -e

          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m'

          print_status() { echo -e "${GREEN}[VPS]${NC} $1"; }
          print_error() { echo -e "${RED}[VPS ERROR]${NC} $1"; }

          print_status "Setting up VPS environment..."

          # Update system
          print_status "Updating system packages..."
          sudo apt-get update -y
          sudo apt-get upgrade -y

          # Install security basics
          print_status "Installing security packages (ufw, fail2ban, unattended-upgrades)..."
          sudo apt-get install -y ufw fail2ban unattended-upgrades

          # Configure UFW firewall
          print_status "Configuring UFW firewall rules..."
          sudo ufw allow $VPS_PORT/tcp
          sudo ufw allow 80/tcp
          sudo ufw allow 443/tcp
          sudo ufw default deny incoming
          sudo ufw default allow outgoing
          sudo ufw --force enable

          # Enable and start fail2ban
          print_status "Enabling fail2ban for SSH brute-force protection..."
          sudo systemctl enable fail2ban
          sudo systemctl start fail2ban

          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            print_status "Installing Docker..."
            curl -fsSL https://get.docker.com | sudo sh
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $VPS_USER 2>/dev/null || true
          fi

          # Install Node.js 24 via nvm
          NODE_VERSION=$(command -v node && node --version || echo "none")
          if [[ "$NODE_VERSION" != "v24"* ]]; then
            print_status "Current Node version: $NODE_VERSION, upgrading to Node.js 24 via nvm..."
            if [[ -s "$HOME/.nvm/nvm.sh" ]]; then
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            else
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
              if ! grep -q "NVM_DIR" ~/.bashrc; then
                echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc
                echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bashrc
                echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> ~/.bashrc
              fi
            fi
            nvm install 24
            nvm use 24
            nvm alias default 24
            print_status "Node.js 24 installation completed"
          else
            print_status "Node.js 24 already installed: $NODE_VERSION"
          fi

          # Install pnpm if not present
          if ! command -v pnpm &> /dev/null; then
            print_status "Installing pnpm..."
            npm install -g pnpm
          fi

          # Install Git if not present
          if ! command -v git &> /dev/null; then
            print_status "Installing Git..."
            sudo apt-get install -y git
          fi

          print_status "VPS environment setup complete"
        EOF

    - name: Set up project on VPS
      run: |
        ssh -i /tmp/deploy_key -p $VPS_PORT -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
          set -e

          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m'

          print_status() { echo -e "${GREEN}[VPS]${NC} $1"; }
          print_error() { echo -e "${RED}[VPS ERROR]${NC} $1"; }

          cd /root/pixelated

          # Clean cached state
          print_status "Cleaning cached state..."
          rm -rf node_modules/.pnpm ~/.pnpm-store ~/.cache/pnpm .astro
          pnpm store prune || true

          # Load nvm environment and ensure Node 22 is active
          print_status "Loading Node.js environment..."
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

          nvm use 22 || {
            print_error "Failed to switch to Node 22"
            nvm list
            exit 1
          }

          export PATH="$NVM_DIR/versions/node/v22.18.0/bin:$PATH"

          NODE_VERSION=$(node --version)
          WHICH_NODE=$(which node)
          print_status "Using Node version: $NODE_VERSION from $WHICH_NODE"

          if [[ "$NODE_VERSION" != "v22"* ]]; then
            print_error "Wrong Node version: $NODE_VERSION (expected v22.x)"
            exit 1
          fi

          # Install pnpm with Node 22
          print_status "Installing pnpm with Node 22..."
          npm install -g pnpm

          PNPM_VERSION=$(pnpm --version)
          WHICH_PNPM=$(which pnpm)
          PNPM_NODE_VERSION=$(pnpm exec node --version)
          print_status "Using pnpm version: $PNPM_VERSION from $WHICH_PNPM"
          print_status "pnpm is using Node version: $PNPM_NODE_VERSION"

          if [[ "$PNPM_NODE_VERSION" != "v22"* ]]; then
            print_error "pnpm is using wrong Node version: $PNPM_NODE_VERSION"
            exit 1
          fi

          print_status "Installing project dependencies..."
          if ! pnpm install --no-frozen-lockfile; then
            print_status "Frozen lockfile failed, regenerating lockfile..."
            pnpm install --no-frozen-lockfile
          fi

          print_status "Building project..."
          export NODE_OPTIONS="--max-old-space-size=8192"
          pnpm build

          print_status "Building Docker container..."
          docker build -t pixelated-empathy:latest .

          print_status "Project setup complete"
        EOF

    - name: Deploy application
      run: |
        ssh -i /tmp/deploy_key -p $VPS_PORT -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << EOF
          set -e

          print_status() { echo -e "\${GREEN}[VPS]\${NC} \$1"; }
          print_error() { echo -e "\${RED}[VPS ERROR]\${NC} \$1"; }

          cd /root/pixelated

          # Stop existing container
          print_status "Stopping existing container..."
          docker stop pixelated-app 2>/dev/null || true
          docker rm pixelated-app 2>/dev/null || true

          # Set up environment variables
          PUBLIC_URL="http://$VPS_HOST"
          CORS_ORIGINS="http://$VPS_HOST,https://$VPS_HOST"
          if [[ -n "$DOMAIN" ]]; then
            PUBLIC_URL="https://$DOMAIN"
            CORS_ORIGINS="\$CORS_ORIGINS,http://$DOMAIN,https://$DOMAIN"
          fi

          # Run new container
          print_status "Starting new container..."
          docker run -d \\
            --name pixelated-app \\
            --restart unless-stopped \\
            -p 4321:4321 \\
            -e NODE_ENV=production \\
            -e PORT=4321 \\
            -e WEB_PORT=4321 \\
            -e LOG_LEVEL=info \\
            -e ENABLE_RATE_LIMITING=true \\
            -e RATE_LIMIT_WINDOW=60 \\
            -e RATE_LIMIT_MAX_REQUESTS=100 \\
            -e ENABLE_HIPAA_COMPLIANCE=true \\
            -e ENABLE_AUDIT_LOGGING=true \\
            -e ENABLE_DATA_MASKING=true \\
            -e ASTRO_TELEMETRY_DISABLED=1 \\
            -e PUBLIC_URL="\$PUBLIC_URL" \\
            -e CORS_ORIGINS="\$CORS_ORIGINS" \\
            pixelated-empathy:latest

          # Wait for container to start
          sleep 15

          # Check container status
          if docker ps | grep -q pixelated-app; then
            print_status "Container is running"
            docker logs --tail 10 pixelated-app
          else
            print_error "Container failed to start"
            docker logs pixelated-app
            exit 1
          fi

          print_status "Application deployment completed!"
        EOF

    - name: Configure Caddy (if domain is set)
      run: |
        if [[ -n "$DOMAIN" ]]; then
          # Create Caddyfile locally first
          cat > /tmp/Caddyfile << EOF
        $DOMAIN {
            reverse_proxy localhost:4321
            encode gzip
            header {
                Strict-Transport-Security max-age=31536000;
                X-Content-Type-Options nosniff
                X-Frame-Options DENY
                X-XSS-Protection "1; mode=block"
                Referrer-Policy strict-origin-when-cross-origin
            }
            handle /api/health* {
                reverse_proxy localhost:4321
            }
            handle /assets/* {
                reverse_proxy localhost:4321
                header Cache-Control "public, max-age=31536000, immutable"
            }
            handle {
                reverse_proxy localhost:4321
            }
        }
        goat.pixelatedempathy.tech {
            reverse_proxy localhost:11434
        }
        EOF

          # Upload and configure
          scp -i /tmp/deploy_key -P $VPS_PORT -o StrictHostKeyChecking=no /tmp/Caddyfile $VPS_USER@$VPS_HOST:/tmp/
          ssh -i /tmp/deploy_key -p $VPS_PORT -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << EOF
            set -e
            echo "Installing Caddy for domain: $DOMAIN"
            sudo apt-get install -y caddy
            sudo systemctl enable caddy
            sudo mv /tmp/Caddyfile /etc/caddy/Caddyfile
            sudo caddy validate --config /etc/caddy/Caddyfile
            sudo systemctl restart caddy
          EOF
        fi

    - name: Clean up SSH key
      run: rm -f /tmp/deploy_key /tmp/rsync-exclude
