<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/MONGODB_SETUP.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MONGODB_SETUP.md" />
              <option name="updatedContent" value="# MongoDB Setup Guide for Pixelated Project&#10;&#10;## Option 1: Local MongoDB Installation&#10;&#10;### Install MongoDB on Linux (Ubuntu/Debian)&#10;```bash&#10;# Update package list&#10;sudo apt update&#10;&#10;# Install MongoDB&#10;sudo apt install -y mongodb&#10;&#10;# Start MongoDB service&#10;sudo systemctl start mongodb&#10;sudo systemctl enable mongodb&#10;&#10;# Check status&#10;sudo systemctl status mongodb&#10;```&#10;&#10;### Install MongoDB on macOS&#10;```bash&#10;# Using Homebrew&#10;brew install mongodb-community&#10;brew services start mongodb-community&#10;```&#10;&#10;### Install MongoDB on Windows&#10;1. Download MongoDB Community Server from https://www.mongodb.com/try/download/community&#10;2. Run the installer&#10;3. Start MongoDB as a service&#10;&#10;### Verify Installation&#10;```bash&#10;# Check if MongoDB is running&#10;mongosh --eval &quot;db.adminCommand('ismaster')&quot;&#10;```&#10;&#10;## Option 2: MongoDB Atlas (Cloud - Recommended for Development)&#10;&#10;1. **Create Account**: Go to https://www.mongodb.com/atlas&#10;2. **Create Cluster**: &#10;   - Choose M0 Sandbox (Free tier)&#10;   - Select your preferred cloud provider and region&#10;3. **Database Access**:&#10;   - Create a database user with read/write access&#10;   - Note the username and password&#10;4. **Network Access**:&#10;   - Add your IP address to the whitelist&#10;   - For development, you can use `0.0.0.0/0` (allow from anywhere)&#10;5. **Get Connection String**:&#10;   - Click &quot;Connect&quot; on your cluster&#10;   - Choose &quot;Connect your application&quot;&#10;   - Copy the connection string&#10;&#10;### Update .env for MongoDB Atlas&#10;```env&#10;MONGODB_URI=&quot;mongodb+srv://username:password@cluster0.xxxxx.mongodb.net/?retryWrites=true&amp;w=majority&quot;&#10;MONGODB_DB_NAME=&quot;pixelated_empathy&quot;&#10;JWT_SECRET=&quot;your-secure-jwt-secret-change-this-in-production&quot;&#10;JWT_EXPIRES_IN=&quot;7d&quot;&#10;```&#10;&#10;## Option 3: Docker MongoDB (Quick Setup)&#10;&#10;### Create docker-compose.mongodb.yml&#10;```yaml&#10;version: '3.8'&#10;services:&#10;  mongodb:&#10;    image: mongo:7.0&#10;    container_name: pixelated-mongodb&#10;    restart: unless-stopped&#10;    ports:&#10;      - &quot;27017:27017&quot;&#10;    environment:&#10;      MONGO_INITDB_ROOT_USERNAME: admin&#10;      MONGO_INITDB_ROOT_PASSWORD: password123&#10;      MONGO_INITDB_DATABASE: pixelated_empathy&#10;    volumes:&#10;      - mongodb_data:/data/db&#10;      - ./scripts/mongo-init:/docker-entrypoint-initdb.d&#10;    networks:&#10;      - pixelated-network&#10;&#10;volumes:&#10;  mongodb_data:&#10;&#10;networks:&#10;  pixelated-network:&#10;    driver: bridge&#10;```&#10;&#10;### Start with Docker&#10;```bash&#10;# Start MongoDB container&#10;docker-compose -f docker-compose.mongodb.yml up -d&#10;&#10;# Check if running&#10;docker ps&#10;&#10;# View logs&#10;docker-compose -f docker-compose.mongodb.yml logs mongodb&#10;```&#10;&#10;### Update .env for Docker MongoDB&#10;```env&#10;MONGODB_URI=&quot;mongodb://admin:password123@localhost:27017/pixelated_empathy?authSource=admin&quot;&#10;MONGODB_DB_NAME=&quot;pixelated_empathy&quot;&#10;JWT_SECRET=&quot;your-secure-jwt-secret-change-this-in-production&quot;&#10;JWT_EXPIRES_IN=&quot;7d&quot;&#10;```&#10;&#10;## Initialize Database (After MongoDB is Running)&#10;&#10;```bash&#10;# Initialize database structure&#10;pnpm mongodb:init&#10;&#10;# Seed with sample data&#10;pnpm mongodb:seed&#10;&#10;# Check migration status&#10;pnpm mongodb:migrate status&#10;```&#10;&#10;## Verify Setup&#10;&#10;```bash&#10;# Test health endpoint&#10;curl http://localhost:4321/api/v1/health&#10;&#10;# Start development server&#10;pnpm dev&#10;```&#10;&#10;## Troubleshooting&#10;&#10;### Connection Issues&#10;- Ensure MongoDB is running: `sudo systemctl status mongodb` (Linux)&#10;- Check firewall settings&#10;- Verify connection string format&#10;- For Atlas: Check network access whitelist&#10;&#10;### Authentication Issues&#10;- Verify username/password in connection string&#10;- Check database user permissions&#10;- For local MongoDB: authentication might be disabled by default&#10;&#10;### Performance Issues&#10;- Monitor connection pool settings&#10;- Check indexes are created properly&#10;- Use MongoDB Compass for visual debugging&#10;&#10;## Production Considerations&#10;&#10;1. **Security**:&#10;   - Change default passwords&#10;   - Enable authentication&#10;   - Use SSL/TLS connections&#10;   - Restrict network access&#10;&#10;2. **Performance**:&#10;   - Set up proper indexes&#10;   - Configure connection pooling&#10;   - Monitor query performance&#10;&#10;3. **Backup**:&#10;   - Set up automated backups&#10;   - Test restore procedures&#10;   - Consider point-in-time recovery&#10;&#10;4. **Monitoring**:&#10;   - Use MongoDB Atlas monitoring&#10;   - Set up alerts for connection issues&#10;   - Monitor database performance metrics" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ai/.lfsconfig">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai/.lfsconfig" />
              <option name="originalContent" value="[lfs]&#10;url = https://git.pixelatedempathy.tech/chad/ai.git&#10;&#10;" />
              <option name="updatedContent" value="[lfs]&#10;url = https://gitlab.com/pixelatedtech/ai.git/info/lfs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/deploy-vps-rsync.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/deploy-vps-rsync.sh" />
              <option name="originalContent" value="#!/bin/bash&#10;&#10;# Deploy Pixelated Empathy to VPS using rsync&#10;# This uploads the entire project and sets up the environment&#10;&#10;set -e&#10;&#10;# Configuration&#10;VPS_HOST=${1:-&quot;208.117.84.253&quot;}&#10;VPS_USER=${2:-&quot;root&quot;}&#10;VPS_PORT=${3:-&quot;22&quot;}&#10;SSH_KEY=${4:-&quot;&quot;}&#10;DOMAIN=${5:-&quot;pixelatedempathy.com&quot;}&#10;LOCAL_PROJECT_DIR=&quot;/home/vivi/pixelated&quot;&#10;REMOTE_PROJECT_DIR=&quot;/root/pixelated&quot;&#10;&#10;# Colors&#10;RED='\033[0;31m'&#10;GREEN='\033[0;32m'&#10;YELLOW='\033[1;33m'&#10;BLUE='\033[0;34m'&#10;NC='\033[0m'&#10;&#10;print_status() { echo -e &quot;${GREEN}[INFO]${NC} $1&quot;; }&#10;print_warning() { echo -e &quot;${YELLOW}[WARNING]${NC} $1&quot;; }&#10;print_error() { echo -e &quot;${RED}[ERROR]${NC} $1&quot;; }&#10;print_header() { echo -e &quot;${BLUE}[STEP]${NC} $1&quot;; }&#10;&#10;# Show usage&#10;show_usage() {&#10;    echo &quot;Usage: $0 [VPS_HOST] [VPS_USER] [VPS_PORT] [SSH_KEY] [DOMAIN]&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Examples:&quot;&#10;    echo &quot;  $0&quot;&#10;    echo &quot;  $0 208.117.84.253 root 22&quot;&#10;    echo &quot;  $0 208.117.84.253 root 22 ~/.ssh/planet pixelatedempathy.com&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;This script syncs the entire project to VPS and sets up deployment&quot;&#10;    exit 1&#10;}&#10;&#10;print_header &quot; Deploying Pixelated Empathy to VPS via rsync&quot;&#10;print_status &quot;Target: $VPS_USER@$VPS_HOST:$VPS_PORT&quot;&#10;print_status &quot;Domain: ${DOMAIN:-&quot;IP-based access&quot;}&quot;&#10;print_status &quot;Local dir: $LOCAL_PROJECT_DIR&quot;&#10;print_status &quot;Remote dir: $REMOTE_PROJECT_DIR&quot;&#10;&#10;# Build SSH command&#10;SSH_CMD=&quot;ssh&quot;&#10;RSYNC_SSH_OPTS=&quot;&quot;&#10;if [[ -n &quot;$SSH_KEY&quot; ]]; then&#10;    SSH_CMD=&quot;$SSH_CMD -i $SSH_KEY&quot;&#10;    RSYNC_SSH_OPTS=&quot;-e 'ssh -i $SSH_KEY -p $VPS_PORT'&quot;&#10;else&#10;    RSYNC_SSH_OPTS=&quot;-e 'ssh -p $VPS_PORT'&quot;&#10;fi&#10;SSH_CMD=&quot;$SSH_CMD -p $VPS_PORT -o StrictHostKeyChecking=no&quot;&#10;&#10;# Test SSH connection&#10;print_header &quot;Testing SSH connection...&quot;&#10;if $SSH_CMD &quot;$VPS_USER@$VPS_HOST&quot; &quot;echo 'SSH connection successful'&quot; 2&gt;/dev/null; then&#10;    print_status &quot;✅ SSH connection working&quot;&#10;else&#10;    print_error &quot;❌ SSH connection failed&quot;&#10;    exit 1&#10;fi&#10;&#10;# Create rsync exclude file&#10;print_header &quot;Preparing rsync exclusions...&quot;&#10;cat &gt; /tmp/rsync-exclude &lt;&lt; 'EOF'&#10;.git/&#10;node_modules/&#10;.next/&#10;.nuxt/&#10;dist/&#10;build/&#10;coverage/&#10;.cache/&#10;.vscode/&#10;.idea/&#10;*.log&#10;.env&#10;.env.local&#10;.env.production&#10;.DS_Store&#10;Thumbs.db&#10;__pycache__/&#10;*.pyc&#10;*.pyo&#10;.pytest_cache/&#10;.mypy_cache/&#10;venv/&#10;.venv/&#10;ai/venv/&#10;ai/.venv/&#10;ai/models/&#10;ai/data/&#10;ai/checkpoints/&#10;ai/*.pt&#10;ai/*.pth&#10;ai/*.model&#10;ai/*.pkl&#10;.docker/&#10;docker-compose.override.yml&#10;temp/&#10;tmp/&#10;EOF&#10;&#10;print_status &quot;✅ Rsync exclusions prepared&quot;&#10;&#10;# Sync project files&#10;print_header &quot;Syncing project files to VPS...&quot;&#10;print_status &quot;This may take a few minutes for the initial sync...&quot;&#10;&#10;if eval rsync -avz --progress --delete \&#10;    --exclude-from=/tmp/rsync-exclude \&#10;    &quot;$LOCAL_PROJECT_DIR/&quot; \&#10;    &quot;$VPS_USER@$VPS_HOST:$REMOTE_PROJECT_DIR/&quot; \&#10;    &quot;$RSYNC_SSH_OPTS&quot;; then&#10;    print_status &quot;✅ Project files synced successfully&quot;&#10;else&#10;    print_error &quot;❌ Rsync failed&quot;&#10;    exit 1&#10;fi&#10;&#10;# Set up VPS environment&#10;print_header &quot;Setting up VPS environment...&quot;&#10;$SSH_CMD &quot;$VPS_USER@$VPS_HOST&quot; &lt;&lt; EOF&#10;set -e&#10;&#10;# Colors for remote output&#10;RED='\033[0;31m'&#10;GREEN='\033[0;32m'&#10;YELLOW='\033[1;33m'&#10;BLUE='\033[0;34m'&#10;NC='\033[0m'&#10;&#10;print_status() { echo -e &quot;\${GREEN}[VPS]${NC} \$1&quot;; }&#10;print_error() { echo -e &quot;\${RED}[VPS ERROR]${NC} \$1&quot;; }&#10;&#10;print_status &quot;Setting up VPS environment...&quot;&#10;&#10;# Update system&#10;print_status &quot;Updating system packages...&quot;&#10;apt-get update -y&#10;&#10;# Install Docker if not present&#10;if ! command -v docker &amp;&gt; /dev/null; then&#10;    print_status &quot;Installing Docker...&quot;&#10;    curl -fsSL https://get.docker.com | sh&#10;    systemctl start docker&#10;    systemctl enable docker&#10;    usermod -aG docker $VPS_USER 2&gt;/dev/null || true&#10;fi&#10;&#10;# Install Node.js if not present or wrong version&#10;if ! command -v node &amp;&gt; /dev/null || [[ &quot;\$(node --version)&quot; != &quot;v22&quot;* ]]; then&#10;    print_status &quot;Installing Node.js 22 via nvm...&quot;&#10;&#10;    # Check if nvm is already installed&#10;    if [[ -s &quot;\$HOME/.nvm/nvm.sh&quot; ]]; then&#10;        print_status &quot;nvm already installed, loading existing installation...&quot;&#10;        export NVM_DIR=&quot;\$HOME/.nvm&quot;&#10;        [ -s &quot;\$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/nvm.sh&quot;&#10;        [ -s &quot;\$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/bash_completion&quot;&#10;    else&#10;        print_status &quot;Installing nvm (first time setup)...&quot;&#10;        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash&#10;        export NVM_DIR=&quot;\$HOME/.nvm&quot;&#10;        [ -s &quot;\$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/nvm.sh&quot;&#10;        [ -s &quot;\$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/bash_completion&quot;&#10;&#10;        # Add nvm to bashrc for future sessions&#10;        if ! grep -q &quot;NVM_DIR&quot; ~/.bashrc; then&#10;            echo 'export NVM_DIR=&quot;\$HOME/.nvm&quot;' &gt;&gt; ~/.bashrc&#10;            echo '[ -s &quot;\$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/nvm.sh&quot;' &gt;&gt; ~/.bashrc&#10;            echo '[ -s &quot;\$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/bash_completion&quot;' &gt;&gt; ~/.bashrc&#10;        fi&#10;    fi&#10;&#10;    # Install and use Node 22&#10;    nvm install 22&#10;    nvm use 22&#10;    nvm alias default 22&#10;fi&#10;&#10;# Install pnpm if not present&#10;if ! command -v pnpm &amp;&gt; /dev/null; then&#10;    print_status &quot;Installing pnpm...&quot;&#10;    npm install -g pnpm&#10;fi&#10;&#10;# Install Git if not present&#10;if ! command -v git &amp;&gt; /dev/null; then&#10;    print_status &quot;Installing Git...&quot;&#10;    apt-get install -y git&#10;fi&#10;&#10;# Install Caddy if domain is configured&#10;if [[ -n &quot;$DOMAIN&quot; ]] &amp;&amp; ! command -v caddy &amp;&gt; /dev/null; then&#10;    print_status &quot;Installing Caddy for domain: $DOMAIN&quot;&#10;    apt-get install -y debian-keyring debian-archive-keyring apt-transport-https&#10;    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg&#10;    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list&#10;    apt-get update&#10;    apt-get install -y caddy&#10;    systemctl enable caddy&#10;fi&#10;&#10;print_status &quot;✅ VPS environment setup complete&quot;&#10;EOF&#10;&#10;# Set up project on VPS&#10;print_header &quot;Setting up project on VPS...&quot;&#10;$SSH_CMD &quot;$VPS_USER@$VPS_HOST&quot; &lt;&lt; EOF&#10;set -e&#10;&#10;print_status() { echo -e &quot;\${GREEN}[VPS]${NC} \$1&quot;; }&#10;print_error() { echo -e &quot;\${RED}[VPS ERROR]${NC} \$1&quot;; }&#10;&#10;cd $REMOTE_PROJECT_DIR&#10;&#10;print_status &quot;Installing project dependencies...&quot;&#10;pnpm install&#10;&#10;print_status &quot;Building project...&quot;&#10;pnpm build&#10;&#10;print_status &quot;Building Docker container...&quot;&#10;docker build -t pixelated-empathy:latest .&#10;&#10;print_status &quot;✅ Project setup complete&quot;&#10;EOF&#10;&#10;# Deploy the application&#10;print_header &quot;Deploying application...&quot;&#10;$SSH_CMD &quot;$VPS_USER@$VPS_HOST&quot; &lt;&lt; EOF&#10;set -e&#10;&#10;print_status() { echo -e &quot;\${GREEN}[VPS]${NC} \$1&quot;; }&#10;print_error() { echo -e &quot;\${RED}[VPS ERROR]${NC} \$1&quot;; }&#10;&#10;cd $REMOTE_PROJECT_DIR&#10;&#10;# Stop existing container&#10;print_status &quot;Stopping existing container...&quot;&#10;docker stop pixelated-app 2&gt;/dev/null || true&#10;docker rm pixelated-app 2&gt;/dev/null || true&#10;&#10;# Set up environment variables&#10;PUBLIC_URL=&quot;http://$VPS_HOST&quot;&#10;CORS_ORIGINS=&quot;http://$VPS_HOST,https://$VPS_HOST&quot;&#10;&#10;if [[ -n &quot;$DOMAIN&quot; ]]; then&#10;    PUBLIC_URL=&quot;https://$DOMAIN&quot;&#10;    CORS_ORIGINS=&quot;\$CORS_ORIGINS,http://$DOMAIN,https://$DOMAIN&quot;&#10;fi&#10;&#10;# Run new container&#10;print_status &quot;Starting new container...&quot;&#10;docker run -d \\&#10;  --name pixelated-app \\&#10;  --restart unless-stopped \\&#10;  -p 4321:4321 \\&#10;  -e NODE_ENV=production \\&#10;  -e PORT=4321 \\&#10;  -e WEB_PORT=4321 \\&#10;  -e LOG_LEVEL=info \\&#10;  -e ENABLE_RATE_LIMITING=true \\&#10;  -e RATE_LIMIT_WINDOW=60 \\&#10;  -e RATE_LIMIT_MAX_REQUESTS=100 \\&#10;  -e ENABLE_HIPAA_COMPLIANCE=true \\&#10;  -e ENABLE_AUDIT_LOGGING=true \\&#10;  -e ENABLE_DATA_MASKING=true \\&#10;  -e ASTRO_TELEMETRY_DISABLED=1 \\&#10;  -e PUBLIC_URL=&quot;\$PUBLIC_URL&quot; \\&#10;  -e CORS_ORIGINS=&quot;\$CORS_ORIGINS&quot; \\&#10;  pixelated-empathy:latest&#10;&#10;# Wait for container to start&#10;sleep 15&#10;&#10;# Check container status&#10;if docker ps | grep -q pixelated-app; then&#10;    print_status &quot;✅ Container is running&quot;&#10;    docker logs --tail 10 pixelated-app&#10;else&#10;    print_error &quot;❌ Container failed to start&quot;&#10;    docker logs pixelated-app&#10;    exit 1&#10;fi&#10;&#10;# Configure Caddy if domain is set&#10;if [[ -n &quot;$DOMAIN&quot; ]]; then&#10;    print_status &quot;Configuring Caddy for domain: $DOMAIN&quot;&#10;    cat &gt; /etc/caddy/Caddyfile &lt;&lt; 'CADDY_EOF'&#10;$DOMAIN {&#10;    reverse_proxy localhost:4321&#10;&#10;    # Enable compression&#10;    encode gzip&#10;&#10;    # Security headers&#10;    header {&#10;        # Enable HSTS&#10;        Strict-Transport-Security max-age=31536000;&#10;        # Prevent MIME sniffing&#10;        X-Content-Type-Options nosniff&#10;        # Prevent clickjacking&#10;        X-Frame-Options DENY&#10;        # XSS protection&#10;        X-XSS-Protection &quot;1; mode=block&quot;&#10;        # Referrer policy&#10;        Referrer-Policy strict-origin-when-cross-origin&#10;    }&#10;&#10;    # Health check endpoint&#10;    handle /api/health* {&#10;        reverse_proxy localhost:4321&#10;    }&#10;&#10;    # Static assets with long cache&#10;    handle /assets/* {&#10;        reverse_proxy localhost:4321&#10;        header Cache-Control &quot;public, max-age=31536000, immutable&quot;&#10;    }&#10;&#10;    # All other requests&#10;    handle {&#10;        reverse_proxy localhost:4321&#10;    }&#10;}&#10;CADDY_EOF&#10;&#10;    # Test and reload Caddy&#10;    print_status &quot;Testing Caddy configuration...&quot;&#10;    caddy validate --config /etc/caddy/Caddyfile&#10;&#10;    print_status &quot;Starting Caddy...&quot;&#10;    systemctl restart caddy&#10;fi&#10;&#10;print_status &quot;✅ Application deployment completed!&quot;&#10;&#10;# Show access URLs&#10;print_status &quot;Application URLs:&quot;&#10;print_status &quot;  Direct: http://$VPS_HOST:4321&quot;&#10;if [[ -n &quot;$DOMAIN&quot; ]]; then&#10;    print_status &quot;  Domain: https://$DOMAIN&quot;&#10;fi&#10;EOF&#10;&#10;# Clean up&#10;rm -f /tmp/rsync-exclude&#10;&#10;print_header &quot; Deployment completed successfully!&quot;&#10;print_status &quot;&quot;&#10;print_status &quot;Your application is now running on:&quot;&#10;print_status &quot;  Direct access: http://$VPS_HOST:4321&quot;&#10;if [[ -n &quot;$DOMAIN&quot; ]]; then&#10;    print_status &quot;  Domain access: https://$DOMAIN&quot;&#10;fi&#10;print_status &quot;&quot;&#10;print_status &quot;For future updates, you can either:&quot;&#10;print_status &quot;  1. Run this script again to sync all changes&quot;&#10;print_status &quot;  2. SSH to the VPS and use 'git pull' in $REMOTE_PROJECT_DIR&quot;&#10;print_status &quot;&quot;&#10;print_status &quot;SSH to your VPS: ssh $VPS_USER@$VPS_HOST&quot;&#10;" />
              <option name="updatedContent" value="#!/bin/bash&#10;&#10;# Deploy Pixelated Empathy to VPS using rsync&#10;# This uploads the entire project and sets up the environment&#10;&#10;set -e&#10;&#10;# Configuration&#10;VPS_HOST=${1:-&quot;208.117.84.253&quot;}&#10;VPS_USER=${2:-&quot;root&quot;}&#10;VPS_PORT=${3:-&quot;22&quot;}&#10;SSH_KEY=${4:-&quot;&quot;}&#10;DOMAIN=${5:-&quot;pixelatedempathy.com&quot;}&#10;LOCAL_PROJECT_DIR=&quot;/home/vivi/pixelated&quot;&#10;REMOTE_PROJECT_DIR=&quot;/root/pixelated&quot;&#10;&#10;# Colors&#10;RED='\033[0;31m'&#10;GREEN='\033[0;32m'&#10;YELLOW='\033[1;33m'&#10;BLUE='\033[0;34m'&#10;NC='\033[0m'&#10;&#10;print_status() { echo -e &quot;${GREEN}[INFO]${NC} $1&quot;; }&#10;print_warning() { echo -e &quot;${YELLOW}[WARNING]${NC} $1&quot;; }&#10;print_error() { echo -e &quot;${RED}[ERROR]${NC} $1&quot;; }&#10;print_header() { echo -e &quot;${BLUE}[STEP]${NC} $1&quot;; }&#10;&#10;# Show usage&#10;show_usage() {&#10;    echo &quot;Usage: $0 [VPS_HOST] [VPS_USER] [VPS_PORT] [SSH_KEY] [DOMAIN]&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Examples:&quot;&#10;    echo &quot;  $0&quot;&#10;    echo &quot;  $0 208.117.84.253 root 22&quot;&#10;    echo &quot;  $0 208.117.84.253 root 22 ~/.ssh/planet pixelatedempathy.com&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;This script syncs the entire project to VPS and sets up deployment&quot;&#10;    exit 1&#10;}&#10;&#10;print_header &quot; Deploying Pixelated Empathy to VPS via rsync&quot;&#10;print_status &quot;Target: $VPS_USER@$VPS_HOST:$VPS_PORT&quot;&#10;print_status &quot;Domain: ${DOMAIN:-&quot;IP-based access&quot;}&quot;&#10;print_status &quot;Local dir: $LOCAL_PROJECT_DIR&quot;&#10;print_status &quot;Remote dir: $REMOTE_PROJECT_DIR&quot;&#10;&#10;# Build SSH command&#10;SSH_CMD=&quot;ssh&quot;&#10;RSYNC_SSH_OPTS=&quot;&quot;&#10;if [[ -n &quot;$SSH_KEY&quot; ]]; then&#10;    SSH_CMD=&quot;$SSH_CMD -i $SSH_KEY&quot;&#10;    RSYNC_SSH_OPTS=&quot;-e 'ssh -i $SSH_KEY -p $VPS_PORT'&quot;&#10;else&#10;    RSYNC_SSH_OPTS=&quot;-e 'ssh -p $VPS_PORT'&quot;&#10;fi&#10;SSH_CMD=&quot;$SSH_CMD -p $VPS_PORT -o StrictHostKeyChecking=no&quot;&#10;&#10;# Test SSH connection&#10;print_header &quot;Testing SSH connection...&quot;&#10;if $SSH_CMD &quot;$VPS_USER@$VPS_HOST&quot; &quot;echo 'SSH connection successful'&quot; 2&gt;/dev/null; then&#10;    print_status &quot;✅ SSH connection working&quot;&#10;else&#10;    print_error &quot;❌ SSH connection failed&quot;&#10;    exit 1&#10;fi&#10;&#10;# Create rsync exclude file&#10;print_header &quot;Preparing rsync exclusions...&quot;&#10;cat &gt; /tmp/rsync-exclude &lt;&lt; 'EOF'&#10;.git/&#10;node_modules/&#10;.next/&#10;.nuxt/&#10;dist/&#10;build/&#10;coverage/&#10;.cache/&#10;.vscode/&#10;.idea/&#10;*.log&#10;.env&#10;.env.local&#10;.env.production&#10;.DS_Store&#10;Thumbs.db&#10;__pycache__/&#10;*.pyc&#10;*.pyo&#10;.pytest_cache/&#10;.mypy_cache/&#10;venv/&#10;.venv/&#10;ai/venv/&#10;ai/.venv/&#10;ai/models/&#10;ai/data/&#10;ai/checkpoints/&#10;ai/*.pt&#10;ai/*.pth&#10;ai/*.model&#10;ai/*.pkl&#10;.docker/&#10;docker-compose.override.yml&#10;temp/&#10;tmp/&#10;EOF&#10;&#10;print_status &quot;✅ Rsync exclusions prepared&quot;&#10;&#10;# Sync project files&#10;print_header &quot;Syncing project files to VPS...&quot;&#10;print_status &quot;This may take a few minutes for the initial sync...&quot;&#10;&#10;if eval rsync -avz --progress --delete \&#10;    --exclude-from=/tmp/rsync-exclude \&#10;    &quot;$LOCAL_PROJECT_DIR/&quot; \&#10;    &quot;$VPS_USER@$VPS_HOST:$REMOTE_PROJECT_DIR/&quot; \&#10;    &quot;$RSYNC_SSH_OPTS&quot;; then&#10;    print_status &quot;✅ Project files synced successfully&quot;&#10;else&#10;    print_error &quot;❌ Rsync failed&quot;&#10;    exit 1&#10;fi&#10;&#10;# Set up VPS environment&#10;print_header &quot;Setting up VPS environment...&quot;&#10;$SSH_CMD &quot;$VPS_USER@$VPS_HOST&quot; &lt;&lt; EOF&#10;set -e&#10;&#10;# Colors for remote output&#10;RED='\033[0;31m'&#10;GREEN='\033[0;32m'&#10;YELLOW='\033[1;33m'&#10;BLUE='\033[0;34m'&#10;NC='\033[0m'&#10;&#10;print_status() { echo -e &quot;\${GREEN}[VPS]${NC} \$1&quot;; }&#10;print_error() { echo -e &quot;\${RED}[VPS ERROR]${NC} \$1&quot;; }&#10;&#10;print_status &quot;Setting up VPS environment...&quot;&#10;&#10;# Update system&#10;print_status &quot;Updating system packages...&quot;&#10;apt-get update -y&#10;&#10;# Install Docker if not present&#10;if ! command -v docker &amp;&gt; /dev/null; then&#10;    print_status &quot;Installing Docker...&quot;&#10;    curl -fsSL https://get.docker.com | sh&#10;    systemctl start docker&#10;    systemctl enable docker&#10;    usermod -aG docker $VPS_USER 2&gt;/dev/null || true&#10;fi&#10;&#10;# Install Node.js if not present or wrong version&#10;NODE_VERSION=\$(command -v node &amp;&amp; node --version || echo &quot;none&quot;)&#10;if [[ &quot;\$NODE_VERSION&quot; != &quot;v22&quot;* ]]; then&#10;    print_status &quot;Current Node version: \$NODE_VERSION, upgrading to Node.js 22 via nvm...&quot;&#10;    &#10;    # Check if nvm is already installed&#10;    if [[ -s &quot;\$HOME/.nvm/nvm.sh&quot; ]]; then&#10;        print_status &quot;nvm already installed, loading existing installation...&quot;&#10;        export NVM_DIR=&quot;\$HOME/.nvm&quot;&#10;        [ -s &quot;\$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/nvm.sh&quot;&#10;        [ -s &quot;\$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/bash_completion&quot;&#10;    else&#10;        print_status &quot;Installing nvm (first time setup)...&quot;&#10;        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash&#10;        export NVM_DIR=&quot;\$HOME/.nvm&quot;&#10;        [ -s &quot;\$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/nvm.sh&quot;&#10;        [ -s &quot;\$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/bash_completion&quot;&#10;        &#10;        # Add nvm to bashrc for future sessions&#10;        if ! grep -q &quot;NVM_DIR&quot; ~/.bashrc; then&#10;            echo 'export NVM_DIR=&quot;\$HOME/.nvm&quot;' &gt;&gt; ~/.bashrc&#10;            echo '[ -s &quot;\$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/nvm.sh&quot;' &gt;&gt; ~/.bashrc&#10;            echo '[ -s &quot;\$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;\$NVM_DIR/bash_completion&quot;' &gt;&gt; ~/.bashrc&#10;        fi&#10;    fi&#10;    &#10;    # Install and use Node 22&#10;    nvm install 22&#10;    nvm use 22&#10;    nvm alias default 22&#10;    print_status &quot;Node.js 22 installation completed&quot;&#10;else&#10;    print_status &quot;Node.js 22 already installed: \$NODE_VERSION&quot;&#10;fi&#10;&#10;# Install pnpm if not present&#10;if ! command -v pnpm &amp;&gt; /dev/null; then&#10;    print_status &quot;Installing pnpm...&quot;&#10;    npm install -g pnpm&#10;fi&#10;&#10;# Install Git if not present&#10;if ! command -v git &amp;&gt; /dev/null; then&#10;    print_status &quot;Installing Git...&quot;&#10;    apt-get install -y git&#10;fi&#10;&#10;# Install Caddy if domain is configured&#10;if [[ -n &quot;$DOMAIN&quot; ]] &amp;&amp; ! command -v caddy &amp;&gt; /dev/null; then&#10;    print_status &quot;Installing Caddy for domain: $DOMAIN&quot;&#10;    apt-get install -y debian-keyring debian-archive-keyring apt-transport-https&#10;    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg&#10;    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list&#10;    apt-get update&#10;    apt-get install -y caddy&#10;    systemctl enable caddy&#10;fi&#10;&#10;print_status &quot;✅ VPS environment setup complete&quot;&#10;EOF&#10;&#10;# Set up project on VPS&#10;print_header &quot;Setting up project on VPS...&quot;&#10;$SSH_CMD &quot;$VPS_USER@$VPS_HOST&quot; &lt;&lt; EOF&#10;set -e&#10;&#10;print_status() { echo -e &quot;\${GREEN}[VPS]${NC} \$1&quot;; }&#10;print_error() { echo -e &quot;\${RED}[VPS ERROR]${NC} \$1&quot;; }&#10;&#10;cd $REMOTE_PROJECT_DIR&#10;&#10;print_status &quot;Installing project dependencies...&quot;&#10;pnpm install&#10;&#10;print_status &quot;Building project...&quot;&#10;pnpm build&#10;&#10;print_status &quot;Building Docker container...&quot;&#10;docker build -t pixelated-empathy:latest .&#10;&#10;print_status &quot;✅ Project setup complete&quot;&#10;EOF&#10;&#10;# Deploy the application&#10;print_header &quot;Deploying application...&quot;&#10;$SSH_CMD &quot;$VPS_USER@$VPS_HOST&quot; &lt;&lt; EOF&#10;set -e&#10;&#10;print_status() { echo -e &quot;\${GREEN}[VPS]${NC} \$1&quot;; }&#10;print_error() { echo -e &quot;\${RED}[VPS ERROR]${NC} \$1&quot;; }&#10;&#10;cd $REMOTE_PROJECT_DIR&#10;&#10;# Stop existing container&#10;print_status &quot;Stopping existing container...&quot;&#10;docker stop pixelated-app 2&gt;/dev/null || true&#10;docker rm pixelated-app 2&gt;/dev/null || true&#10;&#10;# Set up environment variables&#10;PUBLIC_URL=&quot;http://$VPS_HOST&quot;&#10;CORS_ORIGINS=&quot;http://$VPS_HOST,https://$VPS_HOST&quot;&#10;&#10;if [[ -n &quot;$DOMAIN&quot; ]]; then&#10;    PUBLIC_URL=&quot;https://$DOMAIN&quot;&#10;    CORS_ORIGINS=&quot;\$CORS_ORIGINS,http://$DOMAIN,https://$DOMAIN&quot;&#10;fi&#10;&#10;# Run new container&#10;print_status &quot;Starting new container...&quot;&#10;docker run -d \\&#10;  --name pixelated-app \\&#10;  --restart unless-stopped \\&#10;  -p 4321:4321 \\&#10;  -e NODE_ENV=production \\&#10;  -e PORT=4321 \\&#10;  -e WEB_PORT=4321 \\&#10;  -e LOG_LEVEL=info \\&#10;  -e ENABLE_RATE_LIMITING=true \\&#10;  -e RATE_LIMIT_WINDOW=60 \\&#10;  -e RATE_LIMIT_MAX_REQUESTS=100 \\&#10;  -e ENABLE_HIPAA_COMPLIANCE=true \\&#10;  -e ENABLE_AUDIT_LOGGING=true \\&#10;  -e ENABLE_DATA_MASKING=true \\&#10;  -e ASTRO_TELEMETRY_DISABLED=1 \\&#10;  -e PUBLIC_URL=&quot;\$PUBLIC_URL&quot; \\&#10;  -e CORS_ORIGINS=&quot;\$CORS_ORIGINS&quot; \\&#10;  pixelated-empathy:latest&#10;&#10;# Wait for container to start&#10;sleep 15&#10;&#10;# Check container status&#10;if docker ps | grep -q pixelated-app; then&#10;    print_status &quot;✅ Container is running&quot;&#10;    docker logs --tail 10 pixelated-app&#10;else&#10;    print_error &quot;❌ Container failed to start&quot;&#10;    docker logs pixelated-app&#10;    exit 1&#10;fi&#10;&#10;# Configure Caddy if domain is set&#10;if [[ -n &quot;$DOMAIN&quot; ]]; then&#10;    print_status &quot;Configuring Caddy for domain: $DOMAIN&quot;&#10;    cat &gt; /etc/caddy/Caddyfile &lt;&lt; 'CADDY_EOF'&#10;$DOMAIN {&#10;    reverse_proxy localhost:4321&#10;&#10;    # Enable compression&#10;    encode gzip&#10;&#10;    # Security headers&#10;    header {&#10;        # Enable HSTS&#10;        Strict-Transport-Security max-age=31536000;&#10;        # Prevent MIME sniffing&#10;        X-Content-Type-Options nosniff&#10;        # Prevent clickjacking&#10;        X-Frame-Options DENY&#10;        # XSS protection&#10;        X-XSS-Protection &quot;1; mode=block&quot;&#10;        # Referrer policy&#10;        Referrer-Policy strict-origin-when-cross-origin&#10;    }&#10;&#10;    # Health check endpoint&#10;    handle /api/health* {&#10;        reverse_proxy localhost:4321&#10;    }&#10;&#10;    # Static assets with long cache&#10;    handle /assets/* {&#10;        reverse_proxy localhost:4321&#10;        header Cache-Control &quot;public, max-age=31536000, immutable&quot;&#10;    }&#10;&#10;    # All other requests&#10;    handle {&#10;        reverse_proxy localhost:4321&#10;    }&#10;}&#10;CADDY_EOF&#10;&#10;    # Test and reload Caddy&#10;    print_status &quot;Testing Caddy configuration...&quot;&#10;    caddy validate --config /etc/caddy/Caddyfile&#10;&#10;    print_status &quot;Starting Caddy...&quot;&#10;    systemctl restart caddy&#10;fi&#10;&#10;print_status &quot;✅ Application deployment completed!&quot;&#10;&#10;# Show access URLs&#10;print_status &quot;Application URLs:&quot;&#10;print_status &quot;  Direct: http://$VPS_HOST:4321&quot;&#10;if [[ -n &quot;$DOMAIN&quot; ]]; then&#10;    print_status &quot;  Domain: https://$DOMAIN&quot;&#10;fi&#10;EOF&#10;&#10;# Clean up&#10;rm -f /tmp/rsync-exclude&#10;&#10;print_header &quot; Deployment completed successfully!&quot;&#10;print_status &quot;&quot;&#10;print_status &quot;Your application is now running on:&quot;&#10;print_status &quot;  Direct access: http://$VPS_HOST:4321&quot;&#10;if [[ -n &quot;$DOMAIN&quot; ]]; then&#10;    print_status &quot;  Domain access: https://$DOMAIN&quot;&#10;fi&#10;print_status &quot;&quot;&#10;print_status &quot;For future updates, you can either:&quot;&#10;print_status &quot;  1. Run this script again to sync all changes&quot;&#10;print_status &quot;  2. SSH to the VPS and use 'git pull' in $REMOTE_PROJECT_DIR&quot;&#10;print_status &quot;&quot;&#10;print_status &quot;SSH to your VPS: ssh $VPS_USER@$VPS_HOST&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>