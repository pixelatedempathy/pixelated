---
// inspired by: https://github.com/antfu/antfu.me/blob/main/src/components/ArtDots.vue
---

<bg-dot
  class="z--1 fixed top-0 bottom-0 left-0 right-0 pointer-events-none print:hidden dark:invert"
  client:load
>
</bg-dot>

<script type="module">
  import loadP5 from '../../utils/loadP5.js';
  
  // Only run on client-side to prevent SSR hydration mismatches
  if (typeof window === 'undefined') {
    console.warn('Dot background component requires browser environment');
  } else {
    // Use shared utility to load p5.js
    let p5;
    loadP5().then((loadedP5) => {
      p5 = loadedP5;

    if (!p5) {
      console.error('Failed to load p5.js library');
    } else {
      class BgDotElement extends HTMLElement {
        p5Instance = null

        constructor() {
          super()
          this.p5Instance = null
        }

        connectedCallback() {
          const sketch = (p) => {
            const BACKGROUND = '#fff'
            const SCALE = 200
            const LENGTH = 10
            const SPACING = 15

            let width = window.innerWidth
            let height = window.innerHeight

            const existingPoints = new Set()
            const points = []

            function getForceOnPoint(x, y, z) {
              return (p.noise(x / SCALE, y / SCALE, z) - 0.5) * 2 * p.TWO_PI
            }

            function getLength(x, y, t) {
              return (p.noise(x / SCALE, y / SCALE, t * 2) + 0.5) * LENGTH
            }

            function addPoints() {
              for (let x = -SPACING / 2; x < width + SPACING; x += SPACING) {
                for (let y = -SPACING / 2; y < height + SPACING; y += SPACING) {
                  const id = `${x}-${y}`
                  if (existingPoints.has(id)) continue
                  existingPoints.add(id)
                  points.push({ x, y, opacity: Math.random() * 0.5 + 0.5 })
                }
              }
            }

            p.setup = () => {
              p.createCanvas(width, height)
              p.background(BACKGROUND)
              p.frameRate(30)
              addPoints()
            }

            p.windowResized = () => {
              width = window.innerWidth
              height = window.innerHeight
              p.resizeCanvas(width, height)
              existingPoints.clear()
              points.length = 0
              addPoints()
            }

            p.draw = () => {
              p.background(BACKGROUND)

              const t = +new Date() / 10000
              for (const point of points) {
                const { x, y } = point
                const rad = getForceOnPoint(x, y, t)
                const length = getLength(x, y, t)
                const nx = x + p.cos(rad) * length
                const ny = y + p.sin(rad) * length
                p.stroke(
                  200,
                  200,
                  200,
                  (Math.abs(p.cos(rad)) * 0.8 + 0.2) * point.opacity * 255,
                )
                p.strokeWeight(2)
                p.point(nx, ny)
              }
            }
          }

          this.p5Instance = new p5(sketch, this)
        }

        // after switching pages, stop the animation loop
        disconnectedCallback() {
          if (this.p5Instance) {
            this.p5Instance.remove()
            this.p5Instance = null
          }
        }
      }

      customElements.define('bg-dot', BgDotElement);
    }).catch(error => {
      console.error('Failed to load p5.js:', error);
    });
  }
</script>