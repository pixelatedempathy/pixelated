name: Demo Pages Specialized CI/CD

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write

on:
  workflow_call:
    inputs:
      risk_level:
        required: true
        type: string
      test_strategy:
        required: true
        type: string
    outputs:
      demo_validation_status:
        description: "Demo pages validation status"
        value: ${{ jobs.demo-validation.outputs.status }}

env:
  NODE_VERSION: 22.16.0
  PNPM_VERSION: 10.14.0
  PLAYWRIGHT_VERSION: 1.40.0

jobs:
  # Brutalist Design System Compliance Check
  brutalist-compliance:
    name: Brutalist Design System Compliance
    runs-on: ubuntu-latest
    outputs:
      compliance_score: ${{ steps.check-compliance.outputs.score }}
      violations: ${{ steps.check-compliance.outputs.violations }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Brutalist Design System Compliance Check
        id: check-compliance
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');
          
          // Get demo pages
          const demoDir = 'src/pages/demo';
          const demoFiles = fs.readdirSync(demoDir).filter(f => f.endsWith('.astro'));
          
          console.log('Checking brutalist compliance for:', demoFiles);
          
          let totalScore = 0;
          let violations = [];
          
          for (const file of demoFiles) {
            const filePath = path.join(demoDir, file);
            const content = fs.readFileSync(filePath, 'utf8');
            
            let fileScore = 100;
            let fileViolations = [];
            
            // Check for brutalist components usage
            const brutalistComponents = [
              'BrutalistCard',
              'BrutalistButton', 
              'BrutalistBadge',
              'BrutalistContainer'
            ];
            
            let usedComponents = 0;
            brutalistComponents.forEach(component => {
              if (content.includes(component)) {
                usedComponents++;
              }
            });
            
            if (usedComponents === 0) {
              fileScore -= 50;
              fileViolations.push('No brutalist components detected');
            } else if (usedComponents < 2) {
              fileScore -= 25;
              fileViolations.push('Limited brutalist component usage');
            }
            
            // Check for brutalist CSS classes
            const brutalistClasses = [
              'brutalist-',
              'bg-brutalist-',
              'text-brutalist-',
              'border-brutalist-'
            ];
            
            let usedClasses = 0;
            brutalistClasses.forEach(cls => {
              if (content.includes(cls)) {
                usedClasses++;
              }
            });
            
            if (usedClasses === 0) {
              fileScore -= 30;
              fileViolations.push('No brutalist CSS classes found');
            }
            
            // Check for mental health friendly colors (no purple)
            if (content.includes('purple') || content.includes('#800080') || content.includes('rgb(128, 0, 128)')) {
              fileScore -= 40;
              fileViolations.push('Purple colors detected (not mental health friendly)');
            }
            
            // Check for accessibility attributes
            const a11yAttributes = ['aria-label', 'role=', 'tabindex=', 'alt='];
            let a11yCount = 0;
            a11yAttributes.forEach(attr => {
              if (content.includes(attr)) {
                a11yCount++;
              }
            });
            
            if (a11yCount < 2) {
              fileScore -= 20;
              fileViolations.push('Insufficient accessibility attributes');
            }
            
            console.log(\`\${file}: Score \${fileScore}/100\`);
            if (fileViolations.length > 0) {
              console.log('  Violations:', fileViolations.join(', '));
              violations.push(...fileViolations.map(v => \`\${file}: \${v}\`));
            }
            
            totalScore += fileScore;
          }
          
          const averageScore = Math.round(totalScore / demoFiles.length);
          console.log('Average Compliance Score:', averageScore);
          
          execSync(\`echo 'score=\${averageScore}' >> \$GITHUB_OUTPUT\`);
          execSync(\`echo 'violations=' + JSON.stringify(violations) + ' >> \$GITHUB_OUTPUT\`);
          "

      - name: Generate Compliance Report
        run: |
          echo "## 🎨 Brutalist Design System Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Score:** ${{ steps.check-compliance.outputs.score }}/100" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.check-compliance.outputs.score }}" -lt "80" ]]; then
            echo "⚠️ **Compliance issues detected:**" >> $GITHUB_STEP_SUMMARY
            echo '${{ steps.check-compliance.outputs.violations }}' | jq -r '.[]' | while read violation; do
              echo "- $violation" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "✅ **Excellent compliance with brutalist design system!**" >> $GITHUB_STEP_SUMMARY
          fi

  # Visual Regression Testing
  visual-regression:
    name: Visual Regression Testing
    runs-on: ubuntu-latest
    needs: brutalist-compliance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium firefox webkit

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Start application for testing
        run: |
          pnpm start &
          sleep 30
        env:
          NODE_ENV: test

      - name: Run Visual Regression Tests
        run: |
          # Create visual regression test script
          cat > visual-regression-test.js << 'EOF'
          const { test, expect } = require('@playwright/test');
          const fs = require('fs');
          const path = require('path');
          
          // Get all demo pages
          const demoPages = [
            '/demo/bias-detection',
            '/demo/chat', 
            '/demo/clinical-vault-trainer',
            '/demo/emotion-progress',
            '/demo/emotion-visualization',
            '/demo/enhanced-bias-detection',
            '/demo/fhe',
            '/demo/psychology-pipeline-processor',
            '/demo/psychology-pipeline',
            '/demo/security-bias-detection-engine',
            '/demo/synthetic-training-generator'
          ];
          
          for (const pagePath of demoPages) {
            test(`Visual regression for ${pagePath}`, async ({ page }) => {
              await page.goto(`http://localhost:4321${pagePath}`);
              
              // Wait for page to be fully loaded
              await page.waitForLoadState('networkidle');
              
              // Wait for any animations to complete
              await page.waitForTimeout(2000);
              
              // Take screenshot and compare
              await expect(page).toHaveScreenshot(`${pagePath.replace(/\//g, '-')}.png`, {
                fullPage: true,
                threshold: 0.3,
                maxDiffPixels: 1000
              });
              
              // Test responsive design
              await page.setViewportSize({ width: 768, height: 1024 });
              await page.waitForTimeout(1000);
              await expect(page).toHaveScreenshot(`${pagePath.replace(/\//g, '-')}-tablet.png`, {
                fullPage: true,
                threshold: 0.3,
                maxDiffPixels: 1000
              });
              
              await page.setViewportSize({ width: 375, height: 667 });
              await page.waitForTimeout(1000);
              await expect(page).toHaveScreenshot(`${pagePath.replace(/\//g, '-')}-mobile.png`, {
                fullPage: true,
                threshold: 0.3,
                maxDiffPixels: 1000
              });
            });
          }
          EOF
          
          # Run the visual regression tests
          pnpm exec playwright test visual-regression-test.js --project=chromium

      - name: Upload Visual Regression Results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-regression-results
          path: |
            test-results/
            playwright-report/

  # Accessibility Validation
  accessibility-validation:
    name: Accessibility Validation
    runs-on: ubuntu-latest
    needs: brutalist-compliance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Install accessibility testing tools
        run: |
          pnpm add -D @axe-core/playwright axe-core lighthouse

      - name: Build and start application
        run: |
          pnpm build
          pnpm start &
          sleep 30

      - name: Run Accessibility Tests
        run: |
          # Create accessibility test script
          cat > accessibility-test.js << 'EOF'
          const { test, expect } = require('@playwright/test');
          const { injectAxe, checkA11y } = require('@axe-core/playwright');
          
          const demoPages = [
            '/demo/bias-detection',
            '/demo/chat',
            '/demo/clinical-vault-trainer',
            '/demo/emotion-progress',
            '/demo/emotion-visualization'
          ];
          
          for (const pagePath of demoPages) {
            test(`Accessibility test for ${pagePath}`, async ({ page }) => {
              await page.goto(`http://localhost:4321${pagePath}`);
              await page.waitForLoadState('networkidle');
              
              // Inject axe-core
              await injectAxe(page);
              
              // Run accessibility checks
              await checkA11y(page, null, {
                detailedReport: true,
                detailedReportOptions: { html: true },
                rules: {
                  'color-contrast': { enabled: true },
                  'keyboard-navigation': { enabled: true },
                  'focus-management': { enabled: true },
                  'aria-labels': { enabled: true }
                }
              });
            });
          }
          EOF
          
          pnpm exec playwright test accessibility-test.js

  # Performance Benchmarking
  performance-benchmark:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    needs: [brutalist-compliance, visual-regression]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build and start application
        run: |
          pnpm build
          pnpm start &
          sleep 30

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Run Performance Benchmarks
        run: |
          # Create performance benchmark script
          mkdir -p performance-reports
          
          DEMO_PAGES=(
            "/demo/bias-detection"
            "/demo/chat"
            "/demo/clinical-vault-trainer"
            "/demo/emotion-progress"
            "/demo/emotion-visualization"
          )
          
          for page in "${DEMO_PAGES[@]}"; do
            echo "Benchmarking performance for $page"
            lighthouse "http://localhost:4321$page" \
              --output=json \
              --output-path="performance-reports${page//\//-}.json" \
              --chrome-flags="--headless --no-sandbox" \
              --quiet
          done
          
          # Generate performance summary
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          const reportDir = 'performance-reports';
          const reports = fs.readdirSync(reportDir).filter(f => f.endsWith('.json'));
          
          console.log('## 🚀 Performance Benchmark Results');
          console.log('| Page | Performance | Accessibility | Best Practices | SEO |');
          console.log('|------|-------------|---------------|----------------|-----|');
          
          for (const reportFile of reports) {
            const report = JSON.parse(fs.readFileSync(path.join(reportDir, reportFile), 'utf8'));
            const pageName = reportFile.replace('.json', '').replace(/-/g, '/');
            
            const performance = Math.round(report.lhr.categories.performance.score * 100);
            const accessibility = Math.round(report.lhr.categories.accessibility.score * 100);
            const bestPractices = Math.round(report.lhr.categories['best-practices'].score * 100);
            const seo = Math.round(report.lhr.categories.seo.score * 100);
            
            console.log(\`| \${pageName} | \${performance} | \${accessibility} | \${bestPractices} | \${seo} |\`);
          }
          " >> $GITHUB_STEP_SUMMARY

      - name: Upload Performance Reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: performance-reports/

  # Demo Validation Summary
  demo-validation:
    name: Demo Validation Summary
    runs-on: ubuntu-latest
    needs: [brutalist-compliance, visual-regression, accessibility-validation, performance-benchmark]
    if: always()
    outputs:
      status: ${{ steps.summary.outputs.status }}
      
    steps:
      - name: Generate Validation Summary
        id: summary
        run: |
          COMPLIANCE_SCORE="${{ needs.brutalist-compliance.outputs.compliance_score }}"
          VISUAL_STATUS="${{ needs.visual-regression.result }}"
          A11Y_STATUS="${{ needs.accessibility-validation.result }}"
          PERF_STATUS="${{ needs.performance-benchmark.result }}"
          
          echo "## 📋 Demo Pages Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Validation Type | Status | Score/Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------|--------|--------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Brutalist Compliance | ✅ | ${COMPLIANCE_SCORE}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Regression | ${VISUAL_STATUS} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${A11Y_STATUS} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${PERF_STATUS} | - |" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          OVERALL_STATUS="success"
          if [[ "$VISUAL_STATUS" == "failure" ]] || [[ "$A11Y_STATUS" == "failure" ]] || [[ "$PERF_STATUS" == "failure" ]]; then
            OVERALL_STATUS="failure"
          elif [[ "$COMPLIANCE_SCORE" -lt "70" ]]; then
            OVERALL_STATUS="failure"
          fi
          
          echo "status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "## 🎯 Overall Demo Validation: $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
