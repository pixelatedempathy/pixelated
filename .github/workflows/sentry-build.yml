name: Build & Sentry Release

permissions:
  contents: read
  packages: write
on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_OPTIONS: "--max-old-space-size=4096"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.19.0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build (with Sentry envs if provided)
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          PUBLIC_SENTRY_DSN: ${{ secrets.PUBLIC_SENTRY_DSN }}
          SENTRY_RELEASE: ${{ github.sha }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          echo "Building with SENTRY_RELEASE=${SENTRY_RELEASE}"
          pnpm build

      - name: Create Sentry release and upload source maps (optional)
        if: ${{ env.SENTRY_AUTH_TOKEN != '' }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_RELEASE: ${{ github.sha }}
        run: |
          # Install sentry-cli if not available and then create a release and upload source maps
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli --version
          sentry-cli releases new ${SENTRY_RELEASE}
          sentry-cli releases files ${SENTRY_RELEASE} upload-sourcemaps ./dist --rewrite --strip-prefix ./ --strip-common-prefix
          sentry-cli releases finalize ${SENTRY_RELEASE}

      - name: Build Docker image (automated)
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_RELEASE: ${{ github.sha }}
          PUBLIC_SENTRY_DSN: ${{ secrets.PUBLIC_SENTRY_DSN }}
        run: |
          # Build image with multiple tags for different environments
          IMAGE_TAG_SHA=ghcr.io/${{ github.repository_owner }}/pixelated:${{ github.sha }}
          IMAGE_TAG_BRANCH=ghcr.io/${{ github.repository_owner }}/pixelated:${{ github.ref_name }}
          IMAGE_TAG_LATEST=ghcr.io/${{ github.repository_owner }}/pixelated:latest

          echo "🔧 Building Docker image with multiple tags..."
          docker build \
            --tag $IMAGE_TAG_SHA \
            --tag $IMAGE_TAG_BRANCH \
            --tag $IMAGE_TAG_LATEST \
            --build-arg SENTRY_DSN="${SENTRY_DSN}" \
            --build-arg SENTRY_AUTH_TOKEN="${SENTRY_AUTH_TOKEN}" \
            --build-arg SENTRY_RELEASE="${SENTRY_RELEASE}" \
            --build-arg PUBLIC_SENTRY_DSN="${PUBLIC_SENTRY_DSN}" \
            .

          # Store image tags for later steps
          echo "IMAGE_TAG_SHA=$IMAGE_TAG_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG_BRANCH=$IMAGE_TAG_BRANCH" >> $GITHUB_ENV
          echo "IMAGE_TAG_LATEST=$IMAGE_TAG_LATEST" >> $GITHUB_ENV

      - name: Authenticate with GitHub Container Registry
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # Use GITHUB_TOKEN for authentication (more secure, no need for separate PAT)
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker images
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          echo "📤 Pushing Docker images..."
          
          # Explicitly login to GHCR using GITHUB_TOKEN to ensure authentication
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Verify authentication
          echo "🔍 Verifying Docker authentication with GHCR..."
          docker info | grep -i "registry"
          
          # Push images with individual error handling
          echo "📦 Pushing $IMAGE_TAG_SHA..."
          if docker push $IMAGE_TAG_SHA; then
            echo "✅ Successfully pushed $IMAGE_TAG_SHA"
          else
            echo "❌ Failed to push $IMAGE_TAG_SHA"
            exit 1
          fi

          echo "📦 Pushing $IMAGE_TAG_BRANCH..."
          if docker push $IMAGE_TAG_BRANCH; then
            echo "✅ Successfully pushed $IMAGE_TAG_BRANCH"
          else
            echo "❌ Failed to push $IMAGE_TAG_BRANCH"
            exit 1
          fi

          echo "📦 Pushing $IMAGE_TAG_LATEST..."
          if docker push $IMAGE_TAG_LATEST; then
            echo "✅ Successfully pushed $IMAGE_TAG_LATEST"
          else
            echo "❌ Failed to push $IMAGE_TAG_LATEST"
            exit 1
          fi

          echo "🎉 All Docker images pushed successfully!"

          # Push images with individual error handling
          echo "📦 Pushing $IMAGE_TAG_SHA..."
          if docker push $IMAGE_TAG_SHA; then
            echo "✅ Successfully pushed $IMAGE_TAG_SHA"
          else
            echo "❌ Failed to push $IMAGE_TAG_SHA"
            exit 1
          fi

          echo "📦 Pushing $IMAGE_TAG_BRANCH..."
          if docker push $IMAGE_TAG_BRANCH; then
            echo "✅ Successfully pushed $IMAGE_TAG_BRANCH"
          else
            echo "❌ Failed to push $IMAGE_TAG_BRANCH"
            exit 1
          fi

          echo "📦 Pushing $IMAGE_TAG_LATEST..."
          if docker push $IMAGE_TAG_LATEST; then
            echo "✅ Successfully pushed $IMAGE_TAG_LATEST"
          else
            echo "❌ Failed to push $IMAGE_TAG_LATEST"
            exit 1
          fi

          echo "🎉 All Docker images pushed successfully!"

          # Create deployment metadata
          cat > deployment-metadata.json << EOF
          {
            "image_tags": [
              "$IMAGE_TAG_SHA",
              "$IMAGE_TAG_BRANCH",
              "$IMAGE_TAG_LATEST"
            ],
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "build_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "sentry_release": "${{ github.sha }}"
          }
          EOF

      - name: Create deployment notification
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          echo "🚀 Deployment ready for production"
          echo "📦 Image: $IMAGE_TAG_SHA"
          echo "🎯 Branch: ${{ github.ref_name }}"
          echo "🔖 Commit: ${{ github.sha }}"

          # Output deployment information
          cat deployment-metadata.json

          # Trigger deployment workflow if configured
          if [ -n "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" ]; then
            curl -X POST \
              -H "Content-Type: application/json" \
              -d @deployment-metadata.json \
              "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" || echo "⚠️ Deployment webhook failed"
          fi
