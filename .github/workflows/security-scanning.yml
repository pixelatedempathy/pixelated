name: Security Scanning

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]
  schedule:
  - cron: '0 0 * * *'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install UV (preferred Python installer)
      run: |
        # Ensure pip is available, then install uv; non-fatal if install fails
        python3 -m pip install --upgrade pip || true
        python3 -m pip install --no-cache-dir uv || true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@v0.16.1
      with:
        scan-type: 'fs'
        scanners: 'vuln,secret,misconfig'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'
        exit-code: '1'
    - name: Run Checkov scan
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: .
        framework: all
        output_format: sarif
        output_file_path: checkov-results.sarif
        skip_check: ""
        skip_path: "clusters/**"
        log_level: WARNING
        container_user: 0
        soft_fail: false

    - name: Check for Checkov SARIF file
      id: checkov_sarif
      run: |
        if [ -s checkov-results.sarif ]; then
          echo "found=true" >> "$GITHUB_OUTPUT"
        else
          echo "found=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Check for Trivy SARIF file
      id: trivy_sarif
      run: |
        if [ -s trivy-results.sarif ]; then
          echo "found=true" >> "$GITHUB_OUTPUT"
        else
          echo "found=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Create diagnostic artifact when Trivy SARIF missing
      if: ${{ steps.trivy_sarif.outputs.found == 'false' }}
      run: |
        echo "Trivy SARIF not produced (vulnerability DB download may have failed)." > trivy-missing.txt || true
      continue-on-error: true

    - name: Upload Trivy diagnostic artifact
      if: ${{ steps.trivy_sarif.outputs.found == 'false' }}
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: trivy-diagnostic
        path: trivy-missing.txt

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: ${{ always() && steps.trivy_sarif.outputs.found == 'true' }}
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload Trivy SARIF as artifact
      uses: actions/upload-artifact@v4
      if: ${{ always() && steps.trivy_sarif.outputs.found == 'true' }}
      continue-on-error: true
      with:
        name: trivy-sarif
        path: trivy-results.sarif

    - name: Upload Checkov scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: ${{ always() && steps.checkov_sarif.outputs.found == 'true' }}
      continue-on-error: true
      with:
        sarif_file: 'checkov-results.sarif'

    - name: Create diagnostic artifact when Checkov SARIF missing
      if: ${{ steps.checkov_sarif.outputs.found == 'false' }}
      run: |
        echo "Checkov SARIF not produced." > checkov-missing.txt || true
      continue-on-error: true

    - name: Upload Checkov diagnostic artifact
      if: ${{ steps.checkov_sarif.outputs.found == 'false' }}
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: checkov-diagnostic
        path: checkov-missing.txt

    - name: Upload Checkov SARIF as artifact
      uses: actions/upload-artifact@v4
      if: ${{ always() && steps.checkov_sarif.outputs.found == 'true' }}
      continue-on-error: true
      with:
        name: checkov-sarif
        path: checkov-results.sarif

    # --- COSIGN INTEGRATION START ---
    - name: Install Cosign
      run: |
        curl -sSL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
        chmod +x cosign
        sudo mv cosign /usr/local/bin/cosign

    # Example: Sign built image after push (replace IMAGE_NAME and TAG as appropriate)
    # Requires OIDC or COSIGN_PRIVATE_KEY secret configured in repo
    - name: Sign container image with Cosign
      env:
        COSIGN_EXPERIMENTAL: "true"
        # If using keyless OIDC signing, no key needed
        # If using key, uncomment below and set secret in repo
        # COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      run: |
        # Replace IMAGE_NAME and TAG with actual values
        IMAGE_NAME="ghcr.io/${{ github.repository }}/pixelated-app"
        IMAGE_TAG="${{ github.sha }}"
        # If using keyless signing (OIDC)
        cosign sign --yes "${IMAGE_NAME}:${IMAGE_TAG}"
        # If using key (uncomment below)
        # echo "${COSIGN_PRIVATE_KEY}" > cosign.key
        # cosign sign --key cosign.key "${IMAGE_NAME}:${IMAGE_TAG}"
        # rm -f cosign.key

    - name: Upload Cosign signature artifact
      run: |
        IMAGE_NAME="ghcr.io/${{ github.repository }}/pixelated-app"
        IMAGE_TAG="${{ github.sha }}"
        cosign download attestation "${IMAGE_NAME}:${IMAGE_TAG}" > cosign-attestation.json || true
      continue-on-error: true
      # Upload attestation file if produced
    - name: Upload Cosign attestation
      uses: actions/upload-artifact@v4
      with:
        name: cosign-attestation
        path: cosign-attestation.json

    # Verify signature before promotion/publish
    - name: Verify container image signature with Cosign
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        IMAGE_NAME="ghcr.io/${{ github.repository }}/pixelated-app"
        IMAGE_TAG="${{ github.sha }}"
        cosign verify "${IMAGE_NAME}:${IMAGE_TAG}"
      # Fail job if verification fails
      continue-on-error: false

    - name: Upload Cosign verification log
      run: |
        IMAGE_NAME="ghcr.io/${{ github.repository }}/pixelated-app"
        IMAGE_TAG="${{ github.sha }}"
        cosign verify "${IMAGE_NAME}:${IMAGE_TAG}" > cosign-verify.log 2>&1 || true
      continue-on-error: true
    - name: Upload Cosign verification artifact
      uses: actions/upload-artifact@v4
      with:
        name: cosign-verify-log
        path: cosign-verify.log
    # --- COSIGN INTEGRATION END ---

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Run security audit
      run: pnpm audit --audit-level moderate

    - name: Check for known vulnerabilities
      run: pnpm audit --json > audit-results.json || true

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: audit-results.json
