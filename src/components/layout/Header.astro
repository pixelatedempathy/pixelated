---
// Note: This is a new header component created to address your feedback.
// The original has been backed up to Header.astro.bak

const navLinks = [
  { name: 'Training Demos', href: '/demo-hub' },
  { name: 'Features', href: '/features' },
  { name: 'Blog', href: '/blog' },
  { name: 'Dashboard', href: '/dashboard' },
];

// A simple dark mode toggle placeholder component might be needed if not globally available
// For example, using a component like 'accessible-astro-components/DarkMode'
---

<header class="sticky top-0 z-50 w-full backdrop-blur-lg bg-black/30 border-b border-slate-300/10">
  <div class="max-w-6xl mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Site branding -->
      <div class="flex items-center">
        <a class="flex items-center gap-3 hover:opacity-80 transition-opacity" href="/">
          <img
            src="/favicon.svg"
            alt="Pixelated Empathy Logo"
            class="w-8 h-8 flex-shrink-0"
          />
          <span class="text-xl font-bold text-slate-100 font-geist tracking-tight whitespace-nowrap">
            Pixelated Empathy
          </span>
        </a>
      </div>

      <!-- Desktop navigation -->
      <nav class="hidden md:flex items-center ml-auto">
        <!-- Desktop menu links -->
        <ul class="flex items-center space-x-8">
          {navLinks.map(link => (
            <li>
              <a
                href={link.href}
                class="text-sm font-medium text-slate-300 hover:text-green-400 transition-colors duration-200 font-geist"
              >
                {link.name}
              </a>
            </li>
          ))}
        </ul>

        <!-- Dark mode toggle -->
        <div class="ml-8 flex items-center">
          <button
            id="theme-toggle"
            class="p-2 text-slate-400 hover:text-green-400 hover:bg-slate-800/50 rounded-lg transition-all duration-200"
            aria-label="Toggle theme"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
            </svg>
          </button>
        </div>
      </nav>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          id="mobile-menu-button"
          class="p-2 text-slate-400 hover:text-green-400 hover:bg-slate-800/50 rounded-lg transition-all duration-200"
          aria-label="Toggle mobile menu"
          aria-expanded="false"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div id="mobile-menu" class="hidden md:hidden bg-black/95 backdrop-blur-lg border-b border-slate-300/10">
    <div class="px-4 py-4 space-y-2">
      {navLinks.map(link => (
        <a
          href={link.href}
          class="block px-3 py-2 text-base font-medium text-slate-300 hover:text-green-400 hover:bg-slate-800/50 rounded-lg transition-all duration-200 font-geist"
        >
          {link.name}
        </a>
      ))}
    </div>
  </div>
</header>

<script is:inline>
  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  const html = document.documentElement;

  const applyTheme = (theme) => {
    if (theme === 'dark') {
      html.classList.add('dark');
    } else {
      html.classList.remove('dark');
    }
  };

  if (themeToggle) {
    themeToggle.addEventListener('click', () => {
      const isDark = html.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'light' : 'dark');
      applyTheme(isDark ? 'light' : 'dark');
    });
  }

  // Apply theme on initial load
  const savedTheme = localStorage.getItem('theme') || 'dark';
  applyTheme(savedTheme);

  // Mobile menu functionality
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      const isOpen = !mobileMenu.classList.contains('hidden');

      if (isOpen) {
        mobileMenu.classList.add('hidden');
        mobileMenuButton.setAttribute('aria-expanded', 'false');
      } else {
        mobileMenu.classList.remove('hidden');
        mobileMenuButton.setAttribute('aria-expanded', 'true');
      }
    });

    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!mobileMenuButton.contains(e.target) && !mobileMenu.contains(e.target)) {
        mobileMenu.classList.add('hidden');
        mobileMenuButton.setAttribute('aria-expanded', 'false');
      }
    });
  }
</script>
