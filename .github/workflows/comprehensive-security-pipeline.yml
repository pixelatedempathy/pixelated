name: Comprehensive Security & Compliance Pipeline

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write
  id-token: write

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Target environment (development/staging/production)'
      compliance_level:
        required: false
        type: string
        default: 'standard'
        description: 'Compliance level (standard/hipaa/enterprise)'
    outputs:
      security_score:
        description: "Overall security score"
        value: ${{ jobs.security_summary.outputs.security_score }}
      compliance_status:
        description: "Compliance validation status"
        value: ${{ jobs.compliance_summary.outputs.status }}

env:
  NODE_VERSION: '22.16.0'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '10.14.0'

jobs:
  # Advanced Threat Detection
  threat_detection:
    name: Advanced Threat Detection
    runs-on: ubuntu-latest
    outputs:
      threat_level: ${{ steps.detect_threats.outputs.threat_level }}
      threats_found: ${{ steps.detect_threats.outputs.threats_found }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Python for Security Analysis
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Security Analysis Tools
        run: |
          pip install bandit safety semgrep
          pip install requests beautifulsoup4 lxml

      - name: Advanced Threat Detection
        id: detect_threats
        run: |
          echo "🔍 Running advanced threat detection..."
          
          # Initialize threat tracking
          THREAT_LEVEL="low"
          THREATS_FOUND=()
          THREAT_SCORE=0
          
          # 1. Static Code Analysis with Bandit (Python)
          if find . -name "*.py" -type f | head -1 | grep -q .; then
            echo "Running Bandit security analysis..."
            if bandit -r . -f json -o bandit-report.json 2>/dev/null; then
              BANDIT_ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
              if [[ $BANDIT_ISSUES -gt 0 ]]; then
                THREAT_SCORE=$((THREAT_SCORE + BANDIT_ISSUES * 5))
                THREATS_FOUND+=("Python security issues detected ($BANDIT_ISSUES)")
              fi
            fi
          fi
          
          # 2. Dependency Vulnerability Scanning
          echo "Scanning for vulnerable dependencies..."
          if [[ -f "package.json" ]]; then
            # Node.js dependencies
            npm audit --audit-level moderate --json > npm-audit.json 2>/dev/null || true
            if [[ -f "npm-audit.json" ]]; then
              VULN_COUNT=$(jq '.metadata.vulnerabilities.total' npm-audit.json 2>/dev/null || echo "0")
              if [[ $VULN_COUNT -gt 0 ]]; then
                THREAT_SCORE=$((THREAT_SCORE + VULN_COUNT * 3))
                THREATS_FOUND+=("Node.js vulnerabilities detected ($VULN_COUNT)")
              fi
            fi
          fi
          
          if [[ -f "requirements.txt" ]]; then
            # Python dependencies
            safety check --json > safety-report.json 2>/dev/null || true
            if [[ -f "safety-report.json" ]]; then
              SAFETY_ISSUES=$(jq '. | length' safety-report.json 2>/dev/null || echo "0")
              if [[ $SAFETY_ISSUES -gt 0 ]]; then
                THREAT_SCORE=$((THREAT_SCORE + SAFETY_ISSUES * 3))
                THREATS_FOUND+=("Python dependency vulnerabilities ($SAFETY_ISSUES)")
              fi
            fi
          fi
          
          # 3. Secrets Detection
          echo "Scanning for exposed secrets..."
          SECRET_PATTERNS=(
            "password\s*=\s*['\"][^'\"]{8,}['\"]"
            "api[_-]?key\s*=\s*['\"][^'\"]{16,}['\"]"
            "secret\s*=\s*['\"][^'\"]{16,}['\"]"
            "token\s*=\s*['\"][^'\"]{20,}['\"]"
            "-----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----"
            "sk_live_[a-zA-Z0-9]{24,}"
            "pk_live_[a-zA-Z0-9]{24,}"
          )
          
          SECRET_COUNT=0
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -E "$pattern" --include="*.js" --include="*.ts" --include="*.py" --include="*.astro" . 2>/dev/null | grep -v node_modules | grep -q .; then
              SECRET_COUNT=$((SECRET_COUNT + 1))
            fi
          done
          
          if [[ $SECRET_COUNT -gt 0 ]]; then
            THREAT_SCORE=$((THREAT_SCORE + SECRET_COUNT * 15))
            THREATS_FOUND+=("Potential secrets exposed in code ($SECRET_COUNT)")
          fi
          
          # 4. Malicious Code Patterns
          echo "Scanning for malicious code patterns..."
          MALICIOUS_PATTERNS=(
            "eval\s*\("
            "exec\s*\("
            "document\.write\s*\("
            "innerHTML\s*="
            "dangerouslySetInnerHTML"
            "subprocess\.call"
            "os\.system"
          )
          
          MALICIOUS_COUNT=0
          for pattern in "${MALICIOUS_PATTERNS[@]}"; do
            if grep -r -E "$pattern" --include="*.js" --include="*.ts" --include="*.py" --include="*.astro" . 2>/dev/null | grep -v node_modules | grep -q .; then
              MALICIOUS_COUNT=$((MALICIOUS_COUNT + 1))
            fi
          done
          
          if [[ $MALICIOUS_COUNT -gt 0 ]]; then
            THREAT_SCORE=$((THREAT_SCORE + MALICIOUS_COUNT * 10))
            THREATS_FOUND+=("Potentially dangerous code patterns ($MALICIOUS_COUNT)")
          fi
          
          # 5. Configuration Security Issues
          echo "Checking configuration security..."
          CONFIG_ISSUES=0
          
          # Check for insecure configurations
          if grep -r "ssl.*false\|tls.*false\|secure.*false" --include="*.json" --include="*.yml" --include="*.yaml" . 2>/dev/null | grep -v node_modules | grep -q .; then
            CONFIG_ISSUES=$((CONFIG_ISSUES + 1))
            THREATS_FOUND+=("Insecure SSL/TLS configuration detected")
          fi
          
          if grep -r "debug.*true\|development" --include="*.json" --include="*.yml" . 2>/dev/null | grep -v node_modules | grep -q .; then
            CONFIG_ISSUES=$((CONFIG_ISSUES + 1))
            THREATS_FOUND+=("Debug mode enabled in configuration")
          fi
          
          THREAT_SCORE=$((THREAT_SCORE + CONFIG_ISSUES * 8))
          
          # Determine threat level
          if [[ $THREAT_SCORE -ge 50 ]]; then
            THREAT_LEVEL="critical"
          elif [[ $THREAT_SCORE -ge 30 ]]; then
            THREAT_LEVEL="high"
          elif [[ $THREAT_SCORE -ge 15 ]]; then
            THREAT_LEVEL="medium"
          else
            THREAT_LEVEL="low"
          fi
          
          echo "Threat Level: $THREAT_LEVEL"
          echo "Threat Score: $THREAT_SCORE"
          echo "Threats Found: ${THREATS_FOUND[@]}"
          
          echo "threat_level=$THREAT_LEVEL" >> $GITHUB_OUTPUT
          echo "threats_found=$(printf '%s\n' "${THREATS_FOUND[@]}" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT

      - name: Generate Threat Detection Report
        run: |
          echo "## 🔍 Advanced Threat Detection Report" >> $GITHUB_STEP_SUMMARY
          echo "**Threat Level:** ${{ steps.detect_threats.outputs.threat_level }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.detect_threats.outputs.threat_level }}" == "low" ]]; then
            echo "✅ No significant threats detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Threats Detected:**" >> $GITHUB_STEP_SUMMARY
            echo '${{ steps.detect_threats.outputs.threats_found }}' | jq -r '.[]' | while read threat; do
              echo "- ⚠️ $threat" >> $GITHUB_STEP_SUMMARY
            done
          fi

  # HIPAA Compliance Deep Scan
  hipaa_deep_scan:
    name: HIPAA Compliance Deep Scan
    runs-on: ubuntu-latest
    if: ${{ inputs.compliance_level == 'hipaa' || inputs.compliance_level == 'enterprise' }}
    outputs:
      hipaa_score: ${{ steps.hipaa_scan.outputs.score }}
      violations: ${{ steps.hipaa_scan.outputs.violations }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: HIPAA Compliance Deep Scan
        id: hipaa_scan
        run: |
          echo "🏥 Running HIPAA compliance deep scan..."
          
          HIPAA_SCORE=100
          VIOLATIONS=()
          
          # 1. Encryption Requirements (§164.312(a)(2)(iv))
          echo "Checking encryption requirements..."
          ENCRYPTION_IMPLEMENTED=false
          
          if [[ -d "src/lib/fhe" ]] || [[ -d "src/lib/crypto" ]]; then
            if find src/lib/fhe src/lib/crypto -name "*.ts" -o -name "*.js" 2>/dev/null | xargs grep -l "encrypt\|cipher\|homomorphic" 2>/dev/null | grep -q .; then
              ENCRYPTION_IMPLEMENTED=true
            fi
          fi
          
          if [[ "$ENCRYPTION_IMPLEMENTED" == "false" ]]; then
            HIPAA_SCORE=$((HIPAA_SCORE - 25))
            VIOLATIONS+=("§164.312(a)(2)(iv): Missing encryption implementation for PHI")
          fi
          
          # 2. Access Control (§164.312(a)(1))
          echo "Checking access control implementation..."
          ACCESS_CONTROL_IMPLEMENTED=false
          
          if [[ -d "src/lib/auth" ]] || [[ -d "src/middleware" ]]; then
            if find src/lib/auth src/middleware -name "*.ts" -o -name "*.js" 2>/dev/null | xargs grep -l "auth\|permission\|role" 2>/dev/null | grep -q .; then
              ACCESS_CONTROL_IMPLEMENTED=true
            fi
          fi
          
          if [[ "$ACCESS_CONTROL_IMPLEMENTED" == "false" ]]; then
            HIPAA_SCORE=$((HIPAA_SCORE - 20))
            VIOLATIONS+=("§164.312(a)(1): Insufficient access control mechanisms")
          fi
          
          # 3. Audit Controls (§164.312(b))
          echo "Checking audit controls..."
          AUDIT_IMPLEMENTED=false
          
          if [[ -d "src/lib/audit" ]] || [[ -f "src/pages/admin/audit-logs.astro" ]]; then
            AUDIT_IMPLEMENTED=true
          fi
          
          if [[ "$AUDIT_IMPLEMENTED" == "false" ]]; then
            HIPAA_SCORE=$((HIPAA_SCORE - 20))
            VIOLATIONS+=("§164.312(b): Missing comprehensive audit logging system")
          fi
          
          # 4. Integrity (§164.312(c)(1))
          echo "Checking data integrity controls..."
          INTEGRITY_IMPLEMENTED=false
          
          if find . -name "*.ts" -o -name "*.js" | xargs grep -l "hash\|checksum\|integrity\|validation" 2>/dev/null | grep -q .; then
            INTEGRITY_IMPLEMENTED=true
          fi
          
          if [[ "$INTEGRITY_IMPLEMENTED" == "false" ]]; then
            HIPAA_SCORE=$((HIPAA_SCORE - 15))
            VIOLATIONS+=("§164.312(c)(1): Missing data integrity controls")
          fi
          
          # 5. Transmission Security (§164.312(e)(1))
          echo "Checking transmission security..."
          TRANSMISSION_SECURITY=false
          
          if grep -r "https\|tls\|ssl" --include="*.ts" --include="*.js" --include="*.json" . 2>/dev/null | grep -v node_modules | grep -q .; then
            TRANSMISSION_SECURITY=true
          fi
          
          if [[ "$TRANSMISSION_SECURITY" == "false" ]]; then
            HIPAA_SCORE=$((HIPAA_SCORE - 15))
            VIOLATIONS+=("§164.312(e)(1): Missing transmission security controls")
          fi
          
          # 6. Patient Rights Implementation
          echo "Checking patient rights implementation..."
          PATIENT_RIGHTS_IMPLEMENTED=false
          
          if [[ -f "src/pages/admin/patient-rights.astro" ]] || [[ -d "src/lib/patient-rights" ]]; then
            PATIENT_RIGHTS_IMPLEMENTED=true
          fi
          
          if [[ "$PATIENT_RIGHTS_IMPLEMENTED" == "false" ]]; then
            HIPAA_SCORE=$((HIPAA_SCORE - 10))
            VIOLATIONS+=("§164.524: Missing patient rights management system")
          fi
          
          echo "HIPAA Compliance Score: $HIPAA_SCORE/100"
          echo "Violations: ${VIOLATIONS[@]}"
          
          echo "score=$HIPAA_SCORE" >> $GITHUB_OUTPUT
          echo "violations=$(printf '%s\n' "${VIOLATIONS[@]}" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT

      - name: Generate HIPAA Compliance Report
        run: |
          echo "## 🏥 HIPAA Compliance Deep Scan Report" >> $GITHUB_STEP_SUMMARY
          echo "**Compliance Score:** ${{ steps.hipaa_scan.outputs.score }}/100" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.hipaa_scan.outputs.score }}" -ge "90" ]]; then
            echo "✅ **Excellent HIPAA compliance!**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.hipaa_scan.outputs.score }}" -ge "80" ]]; then
            echo "⚠️ **Good HIPAA compliance with minor issues**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **HIPAA compliance issues require attention**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Violations:**" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.hipaa_scan.outputs.violations }}' | jq -r '.[]' | while read violation; do
            echo "- $violation" >> $GITHUB_STEP_SUMMARY
          done

  # Mental Health Data Protection Audit
  mental_health_data_audit:
    name: Mental Health Data Protection Audit
    runs-on: ubuntu-latest
    outputs:
      protection_score: ${{ steps.data_audit.outputs.score }}
      recommendations: ${{ steps.data_audit.outputs.recommendations }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Mental Health Data Protection Audit
        id: data_audit
        run: |
          echo "🧠 Auditing mental health data protection..."
          
          PROTECTION_SCORE=100
          RECOMMENDATIONS=()
          
          # 1. Crisis Data Protection
          echo "Checking crisis intervention data protection..."
          if [[ -d "src/pages/api/crisis" ]] || [[ -d "src/lib/crisis" ]]; then
            if ! find src/pages/api/crisis src/lib/crisis -name "*.ts" -o -name "*.js" 2>/dev/null | xargs grep -l "encrypt\|secure\|protect" 2>/dev/null | grep -q .; then
              PROTECTION_SCORE=$((PROTECTION_SCORE - 25))
              RECOMMENDATIONS+=("Implement encryption for crisis intervention data")
            fi
          else
            RECOMMENDATIONS+=("Consider implementing crisis intervention data handling")
          fi
          
          # 2. Bias Detection Security
          echo "Checking bias detection security..."
          if [[ -d "src/lib/ai/bias-detection" ]]; then
            if ! find src/lib/ai/bias-detection -name "*.ts" -o -name "*.js" | xargs grep -l "sanitize\|validate\|secure" 2>/dev/null | grep -q .; then
              PROTECTION_SCORE=$((PROTECTION_SCORE - 20))
              RECOMMENDATIONS+=("Add input sanitization and validation to bias detection")
            fi
          fi
          
          # 3. FHE Implementation Quality
          echo "Checking FHE implementation quality..."
          if [[ -d "src/lib/fhe" ]]; then
            FHE_FILES=$(find src/lib/fhe -name "*.ts" -o -name "*.js" | wc -l)
            if [[ $FHE_FILES -lt 3 ]]; then
              PROTECTION_SCORE=$((PROTECTION_SCORE - 15))
              RECOMMENDATIONS+=("Expand FHE implementation for comprehensive protection")
            fi
          else
            PROTECTION_SCORE=$((PROTECTION_SCORE - 30))
            RECOMMENDATIONS+=("Implement Fully Homomorphic Encryption for mental health data")
          fi
          
          # 4. Data Anonymization
          echo "Checking data anonymization capabilities..."
          if ! find . -name "*.ts" -o -name "*.js" | xargs grep -l "anonymize\|pseudonymize\|deidentify" 2>/dev/null | grep -q .; then
            PROTECTION_SCORE=$((PROTECTION_SCORE - 15))
            RECOMMENDATIONS+=("Implement data anonymization capabilities")
          fi
          
          # 5. Secure Communication Channels
          echo "Checking secure communication channels..."
          if [[ -d "src/pages/api/chat" ]] || [[ -d "src/lib/chat" ]]; then
            if ! find src/pages/api/chat src/lib/chat -name "*.ts" -o -name "*.js" 2>/dev/null | xargs grep -l "encrypt\|secure\|tls" 2>/dev/null | grep -q .; then
              PROTECTION_SCORE=$((PROTECTION_SCORE - 20))
              RECOMMENDATIONS+=("Implement end-to-end encryption for chat communications")
            fi
          fi
          
          echo "Mental Health Data Protection Score: $PROTECTION_SCORE/100"
          echo "Recommendations: ${RECOMMENDATIONS[@]}"
          
          echo "score=$PROTECTION_SCORE" >> $GITHUB_OUTPUT
          echo "recommendations=$(printf '%s\n' "${RECOMMENDATIONS[@]}" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT

      - name: Generate Data Protection Report
        run: |
          echo "## 🧠 Mental Health Data Protection Audit" >> $GITHUB_STEP_SUMMARY
          echo "**Protection Score:** ${{ steps.data_audit.outputs.score }}/100" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.data_audit.outputs.score }}" -ge "90" ]]; then
            echo "✅ **Excellent data protection measures!**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.data_audit.outputs.score }}" -ge "75" ]]; then
            echo "⚠️ **Good data protection with room for improvement**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Data protection requires significant enhancement**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Recommendations:**" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.data_audit.outputs.recommendations }}' | jq -r '.[]' | while read rec; do
            echo "- $rec" >> $GITHUB_STEP_SUMMARY
          done

  # Security Policy Enforcement
  security_policy_enforcement:
    name: Security Policy Enforcement
    runs-on: ubuntu-latest
    needs: [threat_detection, hipaa_deep_scan, mental_health_data_audit]
    if: ${{ always() }}
    outputs:
      enforcement_status: ${{ steps.enforce_policies.outputs.status }}
      
    steps:
      - name: Enforce Security Policies
        id: enforce_policies
        run: |
          echo "🛡️ Enforcing security policies..."
          
          THREAT_LEVEL="${{ needs.threat_detection.outputs.threat_level }}"
          HIPAA_SCORE="${{ needs.hipaa_deep_scan.outputs.hipaa_score }}"
          PROTECTION_SCORE="${{ needs.mental_health_data_audit.outputs.protection_score }}"
          ENVIRONMENT="${{ inputs.environment }}"
          COMPLIANCE_LEVEL="${{ inputs.compliance_level }}"
          
          ENFORCEMENT_STATUS="passed"
          POLICY_VIOLATIONS=()
          
          # Production environment policies
          if [[ "$ENVIRONMENT" == "production" ]]; then
            if [[ "$THREAT_LEVEL" == "high" || "$THREAT_LEVEL" == "critical" ]]; then
              ENFORCEMENT_STATUS="failed"
              POLICY_VIOLATIONS+=("High/Critical threats detected - production deployment blocked")
            fi
            
            if [[ "$COMPLIANCE_LEVEL" == "hipaa" ]] && [[ -n "$HIPAA_SCORE" ]] && [[ $HIPAA_SCORE -lt 85 ]]; then
              ENFORCEMENT_STATUS="failed"
              POLICY_VIOLATIONS+=("HIPAA compliance score below production threshold (85)")
            fi
            
            if [[ $PROTECTION_SCORE -lt 80 ]]; then
              ENFORCEMENT_STATUS="failed"
              POLICY_VIOLATIONS+=("Mental health data protection score below production threshold (80)")
            fi
          fi
          
          # Staging environment policies
          if [[ "$ENVIRONMENT" == "staging" ]]; then
            if [[ "$THREAT_LEVEL" == "critical" ]]; then
              ENFORCEMENT_STATUS="failed"
              POLICY_VIOLATIONS+=("Critical threats detected - staging deployment blocked")
            fi
            
            if [[ "$COMPLIANCE_LEVEL" == "hipaa" ]] && [[ -n "$HIPAA_SCORE" ]] && [[ $HIPAA_SCORE -lt 75 ]]; then
              ENFORCEMENT_STATUS="warning"
              POLICY_VIOLATIONS+=("HIPAA compliance score below staging recommendation (75)")
            fi
          fi
          
          # Enterprise compliance policies
          if [[ "$COMPLIANCE_LEVEL" == "enterprise" ]]; then
            if [[ "$THREAT_LEVEL" != "low" ]]; then
              ENFORCEMENT_STATUS="warning"
              POLICY_VIOLATIONS+=("Enterprise compliance requires low threat level")
            fi
            
            if [[ -n "$HIPAA_SCORE" ]] && [[ $HIPAA_SCORE -lt 95 ]]; then
              ENFORCEMENT_STATUS="warning"
              POLICY_VIOLATIONS+=("Enterprise compliance recommends HIPAA score ≥95")
            fi
          fi
          
          echo "Enforcement Status: $ENFORCEMENT_STATUS"
          echo "Policy Violations: ${POLICY_VIOLATIONS[@]}"
          
          echo "status=$ENFORCEMENT_STATUS" >> $GITHUB_OUTPUT

      - name: Generate Policy Enforcement Report
        run: |
          echo "## 🛡️ Security Policy Enforcement" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.enforce_policies.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Compliance Level:** ${{ inputs.compliance_level }}" >> $GITHUB_STEP_SUMMARY
          
          case "${{ steps.enforce_policies.outputs.status }}" in
            "passed")
              echo "✅ **All security policies satisfied**" >> $GITHUB_STEP_SUMMARY
              ;;
            "warning")
              echo "⚠️ **Security policies passed with warnings**" >> $GITHUB_STEP_SUMMARY
              ;;
            "failed")
              echo "❌ **Security policy violations detected**" >> $GITHUB_STEP_SUMMARY
              ;;
          esac

  # Security Summary
  security_summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [threat_detection, hipaa_deep_scan, mental_health_data_audit, security_policy_enforcement]
    if: ${{ always() }}
    outputs:
      security_score: ${{ steps.calculate_score.outputs.score }}
      
    steps:
      - name: Calculate Overall Security Score
        id: calculate_score
        run: |
          THREAT_LEVEL="${{ needs.threat_detection.outputs.threat_level }}"
          HIPAA_SCORE="${{ needs.hipaa_deep_scan.outputs.hipaa_score }}"
          PROTECTION_SCORE="${{ needs.mental_health_data_audit.outputs.protection_score }}"
          ENFORCEMENT_STATUS="${{ needs.security_policy_enforcement.outputs.enforcement_status }}"
          
          # Base security score calculation
          SECURITY_SCORE=100
          
          # Threat level impact
          case $THREAT_LEVEL in
            "critical") SECURITY_SCORE=$((SECURITY_SCORE - 40)) ;;
            "high") SECURITY_SCORE=$((SECURITY_SCORE - 25)) ;;
            "medium") SECURITY_SCORE=$((SECURITY_SCORE - 10)) ;;
            "low") SECURITY_SCORE=$((SECURITY_SCORE - 0)) ;;
          esac
          
          # HIPAA compliance impact
          if [[ -n "$HIPAA_SCORE" ]]; then
            HIPAA_IMPACT=$(( (100 - HIPAA_SCORE) / 4 ))
            SECURITY_SCORE=$((SECURITY_SCORE - HIPAA_IMPACT))
          fi
          
          # Data protection impact
          PROTECTION_IMPACT=$(( (100 - PROTECTION_SCORE) / 3 ))
          SECURITY_SCORE=$((SECURITY_SCORE - PROTECTION_IMPACT))
          
          # Policy enforcement impact
          case $ENFORCEMENT_STATUS in
            "failed") SECURITY_SCORE=$((SECURITY_SCORE - 20)) ;;
            "warning") SECURITY_SCORE=$((SECURITY_SCORE - 5)) ;;
            "passed") SECURITY_SCORE=$((SECURITY_SCORE + 0)) ;;
          esac
          
          # Ensure score is within bounds
          SECURITY_SCORE=$(( SECURITY_SCORE < 0 ? 0 : SECURITY_SCORE ))
          SECURITY_SCORE=$(( SECURITY_SCORE > 100 ? 100 : SECURITY_SCORE ))
          
          echo "score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          
          echo "## 🎯 Comprehensive Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Security Score:** $SECURITY_SCORE/100" >> $GITHUB_STEP_SUMMARY
          echo "**Threat Level:** $THREAT_LEVEL" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "$HIPAA_SCORE" ]]; then
            echo "**HIPAA Compliance:** $HIPAA_SCORE/100" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Data Protection:** $PROTECTION_SCORE/100" >> $GITHUB_STEP_SUMMARY
          echo "**Policy Enforcement:** $ENFORCEMENT_STATUS" >> $GITHUB_STEP_SUMMARY

  # Compliance Summary
  compliance_summary:
    name: Compliance Summary
    runs-on: ubuntu-latest
    needs: [hipaa_deep_scan, mental_health_data_audit, security_policy_enforcement]
    if: ${{ always() }}
    outputs:
      status: ${{ steps.compliance_status.outputs.status }}
      
    steps:
      - name: Determine Compliance Status
        id: compliance_status
        run: |
          HIPAA_SCORE="${{ needs.hipaa_deep_scan.outputs.hipaa_score }}"
          PROTECTION_SCORE="${{ needs.mental_health_data_audit.outputs.protection_score }}"
          ENFORCEMENT_STATUS="${{ needs.security_policy_enforcement.outputs.enforcement_status }}"
          COMPLIANCE_LEVEL="${{ inputs.compliance_level }}"
          
          # Determine overall compliance status
          COMPLIANCE_STATUS="compliant"
          
          if [[ "$ENFORCEMENT_STATUS" == "failed" ]]; then
            COMPLIANCE_STATUS="non-compliant"
          elif [[ "$COMPLIANCE_LEVEL" == "hipaa" ]] && [[ -n "$HIPAA_SCORE" ]] && [[ $HIPAA_SCORE -lt 80 ]]; then
            COMPLIANCE_STATUS="non-compliant"
          elif [[ $PROTECTION_SCORE -lt 70 ]]; then
            COMPLIANCE_STATUS="non-compliant"
          elif [[ "$ENFORCEMENT_STATUS" == "warning" ]]; then
            COMPLIANCE_STATUS="compliant-with-warnings"
          fi
          
          echo "status=$COMPLIANCE_STATUS" >> $GITHUB_OUTPUT
          
          echo "## 📋 Final Compliance Status: $COMPLIANCE_STATUS" >> $GITHUB_STEP_SUMMARY
