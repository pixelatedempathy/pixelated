---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
function formatDate(dateInput: any, options: any = {}) {
  if (!dateInput) return '-';
  const date = new Date(dateInput);
  const defaultOptions = { year: 'numeric', month: 'long', day: 'numeric' } as any;
  return date.toLocaleDateString('en-US', { ...defaultOptions, ...options });
}
function getReadingTime(content: string) {
  const wordsPerMinute = 200;
  const words = content.split(/\s+/).length;
  const minutes = Math.ceil(words / wordsPerMinute);
  return `${minutes} min read`;
}

export const prerender = true;

type BlogPost = CollectionEntry<'blog'>;

const allPosts = await getCollection('blog', ({ data }: BlogPost) => {
  return import.meta.env.PROD ? !data.draft : true;
});

const posts = allPosts.sort((a: BlogPost, b: BlogPost) =>
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
).slice(0, 6); // Show recent posts

// Get tags sorted by frequency and select the top 6
const tagFrequency = {};
allPosts.forEach((post) => {
  (post.data.tags || []).forEach((tag) => {
    tagFrequency[tag] = (tagFrequency[tag] || 0) + 1;
  });
});
const allTags = Object.keys(tagFrequency);
const topTags = allTags
  .sort((a, b) => tagFrequency[b] - tagFrequency[a])
  .slice(0, 6);
---

<BaseLayout title="Blog" description="Writing on therapy, technology, and digital empathy.">
  <div class="max-w-4xl mx-auto px-4 py-12">
    <!-- Hero Section -->
    <header class="mb-16">
      <h1 class="text-4xl md:text-5xl font-bold tracking-tight mb-4">
        Writing on therapy, technology, and digital empathy.
      </h1>
      <p class="text-lg text-slate-400 mb-6">
        Welcome to our corner of the internet. We're sharing thoughts on creating meaningful therapeutic experiences through technology.
      </p>
      <a href="/about" class="text-green-400 hover:text-green-300 transition-colors font-medium">
        More about us →
      </a>
    </header>

    <!-- Recent Posts -->
    <section class="mb-16">
      <div class="flex items-center justify-between mb-8">
        <h2 class="text-2xl font-bold">Recent Posts</h2>
        <a href="/blog/page/1" class="text-green-400 hover:text-green-300 transition-colors font-medium">
          View all posts →
        </a>
      </div>

      <div class="space-y-8">
        {posts.map((post: BlogPost) => (
          <article class="group">
            <div class="flex flex-col sm:flex-row gap-4">
              <div class="flex-shrink-0 text-sm text-slate-400 sm:w-32">
                {formatDate(new Date(post.data.pubDate))}
                <span class="hidden sm:block mt-1">
                  {getReadingTime(post.body)}
                </span>
              </div>

              <div class="flex-1">
                <h3 class="text-xl font-bold mb-2 group-hover:text-green-400 transition-colors">
                  <a href={`/blog/${post.slug}`} class="block">
                    {post.data.title}
                  </a>
                </h3>

                <p class="text-slate-300 mb-3 leading-relaxed">
                  {post.data.description}
                </p>

                {post.data.tags && post.data.tags.length > 0 && (
                  <div class="flex flex-wrap gap-2">
                    {post.data.tags.map((tag: string) => (
                      <a
                        href={`/blog/tags/${tag}`}
                        class="text-xs text-green-400 hover:text-green-300 transition-colors"
                      >
                        #{tag}
                      </a>
                    ))}
                  </div>
                )}

                <a
                  href={`/blog/${post.slug}`}
                  class="inline-flex items-center mt-3 text-sm text-slate-400 hover:text-green-400 transition-colors group-hover:text-green-400"
                >
                  Read article
                  <span class="ml-1 group-hover:translate-x-1 transition-transform">→</span>
                </a>
              </div>
            </div>
          </article>
        ))}
      </div>
    </section>

    <!-- Explore Topics -->
    <section>
      <div class="flex items-center justify-between mb-8">
        <h2 class="text-2xl font-bold">Explore Topics</h2>
        <a href="/blog/tags" class="text-green-400 hover:text-green-300 transition-colors font-medium">
          View all topics →
        </a>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {topTags.filter(Boolean).map((tag) => {
          const tagPosts = allPosts.filter((post: BlogPost) => post.data.tags?.includes(tag));
          return (
            <a
              href={`/blog/tags/${tag}`}
              class="group block p-6 rounded-lg border border-slate-700 bg-slate-800/40 hover:border-green-400/50 hover:bg-slate-800/60 transition-all"
            >
              <div class="flex items-center justify-between mb-2">
                <h3 class="font-bold text-lg group-hover:text-green-400 transition-colors">
                  #{tag}
                </h3>
                <span class="text-sm text-slate-400">
                  {tagPosts.length} post{tagPosts.length !== 1 ? 's' : ''}
                </span>
              </div>
              <p class="text-sm text-slate-400">
                Explore articles about {tag}
              </p>
            </a>
          );
        })}
      </div>
    </section>
  </div>
</BaseLayout>
