#!/bin/bash
set -e

# Pixelated Empathy - Main Deployment Script
# ==========================================

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="pixelated-empathy"
DOCKER_IMAGE="$PROJECT_NAME"
COMPOSE_FILE="docker-compose.yml"
ENV_FILE=".env"

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed"
        exit 1
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        log_error "Docker Compose is not installed"
        exit 1
    fi
    
    # Check if Docker daemon is running
    if ! docker info &> /dev/null; then
        log_error "Docker daemon is not running"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

check_environment() {
    log_info "Checking environment configuration..."
    
    if [ ! -f "$ENV_FILE" ]; then
        if [ -f ".env.example" ]; then
            log_warning ".env file not found, copying from .env.example"
            cp .env.example .env
        else
            log_error ".env file not found and no .env.example available"
            exit 1
        fi
    fi
    
    # Check required environment variables
    source .env
    required_vars=("NODE_ENV" "DATABASE_URL" "JWT_SECRET")
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            log_warning "Environment variable $var is not set"
        fi
    done
    
    log_success "Environment configuration checked"
}

build_application() {
    log_info "Building application..."
    
    # Build Docker image
    docker build -t $DOCKER_IMAGE:latest . || {
        log_error "Failed to build Docker image"
        exit 1
    }
    
    log_success "Application built successfully"
}

run_tests() {
    log_info "Running tests..."
    
    # Run tests in Docker container
    docker run --rm -v $(pwd):/app -w /app $DOCKER_IMAGE:latest npm test || {
        log_warning "Tests failed, but continuing deployment"
    }
    
    log_success "Tests completed"
}

deploy_local() {
    log_info "Deploying locally with Docker Compose..."
    
    # Stop existing containers
    docker-compose down || true
    
    # Start services
    docker-compose up -d || {
        log_error "Failed to start services with Docker Compose"
        exit 1
    }
    
    # Wait for services to be ready
    log_info "Waiting for services to be ready..."
    sleep 10
    
    # Health check
    if curl -f http://localhost:3000/health &> /dev/null; then
        log_success "Local deployment successful - Application is running at http://localhost:3000"
    else
        log_warning "Application may not be fully ready yet"
    fi
}

deploy_production() {
    log_info "Deploying to production..."
    
    # Tag image for production
    docker tag $DOCKER_IMAGE:latest $DOCKER_IMAGE:prod
    
    # Production deployment logic would go here
    # This could include:
    # - Pushing to container registry
    # - Updating Kubernetes deployments
    # - Running database migrations
    # - Blue-green deployment
    
    log_success "Production deployment completed"
}

cleanup() {
    log_info "Cleaning up..."
    
    # Remove dangling images
    docker image prune -f || true
    
    log_success "Cleanup completed"
}

show_help() {
    echo "Pixelated Empathy Deployment Script"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  local       Deploy locally using Docker Compose (default)"
    echo "  production  Deploy to production environment"
    echo "  build       Build application only"
    echo "  test        Run tests only"
    echo "  clean       Clean up Docker resources"
    echo "  help        Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                # Deploy locally"
    echo "  $0 local          # Deploy locally"
    echo "  $0 production     # Deploy to production"
    echo "  $0 build          # Build only"
}

# Main deployment logic
main() {
    local command=${1:-local}
    
    case $command in
        "local")
            check_prerequisites
            check_environment
            build_application
            run_tests
            deploy_local
            cleanup
            ;;
        "production")
            check_prerequisites
            check_environment
            build_application
            run_tests
            deploy_production
            cleanup
            ;;
        "build")
            check_prerequisites
            build_application
            ;;
        "test")
            check_prerequisites
            run_tests
            ;;
        "clean")
            cleanup
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            log_error "Unknown command: $command"
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"