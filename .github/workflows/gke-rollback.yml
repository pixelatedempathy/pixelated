name: GKE Rollback

permissions:
  contents: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to rollback"
        required: true
        type: choice
        options:
          - production
          - staging
      revision:
        description: "Specific revision to rollback to (optional)"
        required: false
        type: string
      auto_rollback:
        description: "Enable automatic rollback on failure"
        required: false
        type: boolean
        default: true

env:
  NODE_VERSION: "24"
  PNPM_VERSION: "10.20.0"

jobs:
  rollback-staging:
    name: Rollback Staging
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging'
    concurrency:
      group: staging_environment
      cancel-in-progress: true
    permissions:
      contents: write
      deployments: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Determine rollback target
        id: get-target
        run: |
          if [ -n "${{ github.event.inputs.revision }}" ]; then
            echo "Using specified revision: ${{ github.event.inputs.revision }}"
            echo "target=${{ github.event.inputs.revision }}" >> $GITHUB_OUTPUT
            git checkout ${{ github.event.inputs.revision }}
          else
            # Find previous staging tag
            if node scripts/tag-manager.cjs validate staging; then
              TAGS=$(git tag -l "staging-*" --sort=-committerdate)
              TAG=$(echo "$TAGS" | sed -n '2p')
              if [ -n "$TAG" ]; then
                echo "target=$TAG" >> $GITHUB_OUTPUT
                echo "Rolling back to: $TAG"
                git checkout $TAG
              else
                echo "::error::No previous staging tag found for rollback"
                exit 1
              fi
            else
              echo "::error::Cannot rollback - insufficient staging tags"
              exit 1
            fi
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          universe: googleapis.com
          cleanup_credentials: true
          access_token_lifetime: 3600s
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform
          id_token_include_email: false

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Execute rollback
        env:
          ROLLBACK_TARGET: ${{ steps.get-target.outputs.target }}
          AUTO_ROLLBACK: ${{ github.event.inputs.auto_rollback }}
        run: |
          echo "🔄 Rolling back GKE deployment to: $ROLLBACK_TARGET"

          # Check rollout history
          echo "📊 Rollout history:"
          kubectl rollout history deployment/${{ secrets.GKE_DEPLOYMENT_NAME }}

          # Get current image for comparison
          CURRENT_IMAGE=$(kubectl get deployment ${{ secrets.GKE_DEPLOYMENT_NAME }} -o jsonpath='{.spec.template.spec.containers[0].image}')
          echo "📋 Current image: $CURRENT_IMAGE"

          # Rollback to previous revision
          if kubectl rollout undo deployment/${{ secrets.GKE_DEPLOYMENT_NAME }}; then
            echo "✅ Rollback initiated"
            
            # Wait for rollback to complete
            if kubectl rollout status deployment/${{ secrets.GKE_DEPLOYMENT_NAME }} --timeout=300s; then
              # Verify rollback
              NEW_IMAGE=$(kubectl get deployment ${{ secrets.GKE_DEPLOYMENT_NAME }} -o jsonpath='{.spec.template.spec.containers[0].image}')
              echo "📋 New image after rollback: $NEW_IMAGE"
              
              kubectl get deployment ${{ secrets.GKE_DEPLOYMENT_NAME }}
              kubectl get pods -l app=pixelated
              
              # Run health checks
              echo "🔍 Running post-rollback health checks..."
              if . ./scripts/health-check-comprehensive.sh; then
                echo "✅ GKE rollback completed successfully"
                echo "health_status=healthy" >> $GITHUB_OUTPUT
              else
                echo "❌ Post-rollback health checks failed"
                if [ "$AUTO_ROLLBACK" = "true" ]; then
                  echo "🔄 Attempting to rollback further..."
                  kubectl rollout undo deployment/${{ secrets.GKE_DEPLOYMENT_NAME }}
                  kubectl rollout status deployment/${{ secrets.GKE_DEPLOYMENT_NAME }} --timeout=300s
                fi
                exit 1
              fi
            else
              echo "❌ Rollback deployment failed"
              kubectl describe deployment ${{ secrets.GKE_DEPLOYMENT_NAME }}
              kubectl get events --sort-by=.metadata.creationTimestamp
              exit 1
            fi
          else
            echo "❌ Rollback failed"
            exit 1
          fi

      - name: Create rollback tag
        env:
          PUSH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          TAG_NAME="rollback-staging-${TIMESTAMP}"

          echo "Creating rollback tag: $TAG_NAME"
          git tag "$TAG_NAME" -m "Rollback to $ROLLBACK_TARGET on $(date)"
          GIT_PUSH_REMOTE=${{ env.GIT_PUSH_REMOTE || 'origin' }}
          git push "$GIT_PUSH_REMOTE" "$TAG_NAME"
        # env merged above

  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    concurrency:
      group: production_environment
      cancel-in-progress: true
    permissions:
      contents: write
      deployments: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Determine rollback target
        id: get-target
        run: |
          if [ -n "${{ github.event.inputs.revision }}" ]; then
            echo "Using specified revision: ${{ github.event.inputs.revision }}"
            echo "target=${{ github.event.inputs.revision }}" >> $GITHUB_OUTPUT
            git checkout ${{ github.event.inputs.revision }}
          else
            # Find previous production tag
            if node scripts/tag-manager.cjs validate production; then
              TAGS=$(git tag -l "production-*" --sort=-committerdate)
              TAG=$(echo "$TAGS" | sed -n '2p')
              if [ -n "$TAG" ]; then
                echo "target=$TAG" >> $GITHUB_OUTPUT
                echo "Rolling back to: $TAG"
                git checkout $TAG
              else
                echo "::error::No previous production tag found for rollback"
                exit 1
              fi
            else
              echo "::error::Cannot rollback - insufficient production tags"
              exit 1
            fi
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          universe: googleapis.com
          cleanup_credentials: true
          access_token_lifetime: 3600s
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform
          id_token_include_email: false

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Execute rollback
        env:
          ROLLBACK_TARGET: ${{ steps.get-target.outputs.target }}
          AUTO_ROLLBACK: ${{ github.event.inputs.auto_rollback }}
        run: |
          echo "🔄 Rolling back GKE deployment to: $ROLLBACK_TARGET"

          # Check rollout history
          echo "📊 Rollout history:"
          kubectl rollout history deployment/${{ secrets.GKE_DEPLOYMENT_NAME }}

          # Get current image for comparison
          CURRENT_IMAGE=$(kubectl get deployment ${{ secrets.GKE_DEPLOYMENT_NAME }} -o jsonpath='{.spec.template.spec.containers[0].image}')
          echo "📋 Current image: $CURRENT_IMAGE"

          # Rollback to previous revision
          if kubectl rollout undo deployment/${{ secrets.GKE_DEPLOYMENT_NAME }}; then
            echo "✅ Rollback initiated"
            
            # Wait for rollback to complete
            if kubectl rollout status deployment/${{ secrets.GKE_DEPLOYMENT_NAME }} --timeout=300s; then
              # Verify rollback
              NEW_IMAGE=$(kubectl get deployment ${{ secrets.GKE_DEPLOYMENT_NAME }} -o jsonpath='{.spec.template.spec.containers[0].image}')
              echo "📋 New image after rollback: $NEW_IMAGE"
              
              kubectl get deployment ${{ secrets.GKE_DEPLOYMENT_NAME }}
              kubectl get pods -l app=pixelated
              
              # Run health checks
              echo "🔍 Running post-rollback health checks..."
              if . ./scripts/health-check-comprehensive.sh; then
                echo "✅ GKE rollback completed successfully"
                echo "health_status=healthy" >> $GITHUB_OUTPUT
              else
                echo "❌ Post-rollback health checks failed"
                if [ "$AUTO_ROLLBACK" = "true" ]; then
                  echo "🔄 Attempting to rollback further..."
                  kubectl rollout undo deployment/${{ secrets.GKE_DEPLOYMENT_NAME }}
                  kubectl rollout status deployment/${{ secrets.GKE_DEPLOYMENT_NAME }} --timeout=300s
                fi
                exit 1
              fi
            else
              echo "❌ Rollback deployment failed"
              kubectl describe deployment ${{ secrets.GKE_DEPLOYMENT_NAME }}
              kubectl get events --sort-by=.metadata.creationTimestamp
              exit 1
            fi
          else
            echo "❌ Rollback failed"
            exit 1
          fi

      - name: Create rollback tag
        env:
          PUSH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          TAG_NAME="rollback-production-${TIMESTAMP}"

          echo "Creating rollback tag: $TAG_NAME"
          git tag "$TAG_NAME" -m "Rollback to $ROLLBACK_TARGET on $(date)"
          GIT_PUSH_REMOTE=${{ env.GIT_PUSH_REMOTE || 'origin' }}
          git push "$GIT_PUSH_REMOTE" "$TAG_NAME"
        # env merged above

      - name: Send rollback notification
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            ROLLBACK_TARGET="${{ steps.get-target.outputs.target }}"
            HEALTH_STATUS="${{ steps.execute-rollback.outputs.health_status }}"
            
            curl -X POST \
              -H "Content-Type: application/json" \
              -d "{
                \"text\": \"🔄 GKE Rollback Completed\",\n
                \"attachments\": [\n
                  {\n
                    \"color\": \"${HEALTH_STATUS:-unknown}\" == \"healthy\" ? \"good\" : \"danger\",\n
                    \"fields\": [\n
                      {\"title\": \"Environment\", \"value\": \"Production\", \"short\": true},\n
                      {\"title\": \"Target\", \"value\": \"$ROLLBACK_TARGET\", \"short\": true},\n
                      {\"title\": \"Status\", \"value\": \"${HEALTH_STATUS:-unknown}\", \"short\": true},\n
                      {\"title\": \"Triggered By\", \"value\": \"${{ github.actor }}\", \"short\": true}\n
                    ]\n
                  }\n
                ]\n
              }" \
              "$SLACK_WEBHOOK_URL" || echo "⚠️ Slack notification failed"
          fi
