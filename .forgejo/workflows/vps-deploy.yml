name: VPS Deployment

on:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      vps_host:
        description: 'VPS Host IP'
        required: true
        default: '209.208.79.191'
      vps_user:
        description: 'VPS Username'
        required: true
        default: 'vivi'
      vps_port:
        description: 'SSH Port'
        required: true
        default: '22'
      domain:
        description: 'Domain name (optional)'
        required: false
        default: 'pixelatedempathy.com'
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - docker-only

env:
  NODE_VERSION: 22.16.0
  PNPM_VERSION: 10.14.0
  DOCKER_IMAGE: pixelated-empathy
  CONTAINER_NAME: pixelated-app
  APP_PORT: 4321
  REGISTRY: ${{ github.server_url }}/${{ github.repository }}

jobs:
  # Prepare environment variables from secrets
  prepare-env:
    name: Prepare Environment Variables
    runs-on: ubuntu-latest
    outputs:
      env-content: ${{ steps.env-prep.outputs.env-content }}
    
    steps:
      - name: Prepare environment file content
        id: env-prep
        run: |
          # Create .env content from secrets and variables
          cat > /tmp/env_content << 'EOF'
          # Environment variables for Pixelated Empathy
          NODE_ENV=production
          PORT=4321
          WEB_PORT=4321
          LOG_LEVEL=info
          ENABLE_RATE_LIMITING=true
          RATE_LIMIT_WINDOW=60
          RATE_LIMIT_MAX_REQUESTS=100
          ENABLE_HIPAA_COMPLIANCE=true
          ENABLE_AUDIT_LOGGING=true
          ENABLE_DATA_MASKING=true
          ASTRO_TELEMETRY_DISABLED=1
          
          # Authentication & User Management
          PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          
          # Database Configuration
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          MONGODB_DB_NAME=${{ secrets.MONGODB_DB_NAME }}
          PGHOST=${{ secrets.PGHOST }}
          PGDATABASE=${{ secrets.PGDATABASE }}
          PGUSER=${{ secrets.PGUSER }}
          PGPASSWORD=${{ secrets.PGPASSWORD }}
          
          # Redis Configuration
          UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          
          # AI/LLM Services
          LLM_PROVIDER=${{ secrets.LLM_PROVIDER }}
          LLM_MODEL=${{ secrets.LLM_MODEL }}
          LLM_ENDPOINT=${{ secrets.LLM_ENDPOINT }}
          LLM_API_KEY=${{ secrets.LLM_API_KEY }}
          LLM_API_VERSION=${{ secrets.LLM_API_VERSION }}
          
          EMBEDDING_PROVIDER=${{ secrets.EMBEDDING_PROVIDER }}
          EMBEDDING_MODEL=${{ secrets.EMBEDDING_MODEL }}
          EMBEDDING_ENDPOINT=${{ secrets.EMBEDDING_ENDPOINT }}
          EMBEDDING_API_KEY=${{ secrets.EMBEDDING_API_KEY }}
          EMBEDDING_API_VERSION=${{ secrets.EMBEDDING_API_VERSION }}
          
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
          
          OLLAMA_BASE_URL=${{ secrets.OLLAMA_BASE_URL }}
          
          # External API Keys
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
          HUGGINGFACE_API_KEY=${{ secrets.HUGGINGFACE_API_KEY }}
          OPENMEMORY_API_KEY=${{ secrets.OPENMEMORY_API_KEY }}
          OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
          REPLICATE_API_TOKEN=${{ secrets.REPLICATE_API_TOKEN }}
          SMITHERY_API_KEY=${{ secrets.SMITHERY_API_KEY }}
          SOURCEBOT_API_KEY=${{ secrets.SOURCEBOT_API_KEY }}
          
          # Email & Communication
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          
          # File Storage
          DROPBOX_TOKEN=${{ secrets.DROPBOX_TOKEN }}
          
          # Deployment & CI/CD
          FLY_API_TOKEN=${{ secrets.FLY_API_TOKEN }}
          G_TOKEN=${{ secrets.G_TOKEN }}
          GITGUARDIAN_API_KEY=${{ secrets.GITGUARDIAN_API_KEY }}
          TRUNK_API_TOKEN=${{ secrets.TRUNK_API_TOKEN }}
          GCM_CREDENTIAL_STORE=${{ secrets.GCM_CREDENTIAL_STORE }}
          
          # Monitoring & Analytics
          NEW_RELIC_AI_MONITORING_ENABLED=${{ secrets.NEW_RELIC_AI_MONITORING_ENABLED }}
          NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED=${{ secrets.NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED }}
          NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED=${{ secrets.NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED }}
          NEW_RELIC_APP_NAME=${{ secrets.NEW_RELIC_APP_NAME }}
          NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }}
          
          SENTRY_ACCESS_TOKEN=${{ secrets.SENTRY_ACCESS_TOKEN }}
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          SENTRY_ORG=${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}
          SENTRY_PUBLIC_DSN=${{ secrets.SENTRY_PUBLIC_DSN }}
          
          # Frontend Environment Variables
          VITE_AUTH_TOKEN=${{ secrets.VITE_AUTH_TOKEN }}
          VITE_SENTRY_DSN=${{ secrets.VITE_SENTRY_DSN }}
          EOF
          
          # Convert to base64 for safe output
          ENV_CONTENT_B64=$(base64 -w 0 /tmp/env_content)
          echo "env-content=$ENV_CONTENT_B64" >> $GITHUB_OUTPUT
          
          echo "✅ Environment variables prepared from secrets"

  # Build and prepare deployment artifacts
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [prepare-env]
    outputs:
      build-artifacts: ${{ steps.upload.outputs.build-artifacts }}
      registry-host: ${{ steps.reg.outputs.host }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run linting
        continue-on-error: true
        run: pnpm run lint

      - name: Run type checking
        continue-on-error: true
        run: |
          echo "Running type checking..."
          pnpm run type-check || {
            echo "❌ Type checking found issues but continuing deployment"
            exit 0
          }
          echo "✅ Type checking passed"

      - name: Run tests
        continue-on-error: true
        run: |
          echo "Running tests..."
          pnpm test || {
            echo "❌ Tests failed but continuing deployment"
            exit 0
          }
          echo "✅ Tests passed"

      - name: Build application
        run: |
          export NODE_ENV=production
          export NODE_OPTIONS="--max-old-space-size=8192"
          pnpm build

      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy built application
          cp -r dist/ deployment/
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/
          cp Dockerfile deployment/
          cp docker-compose.yml deployment/ 2>/dev/null || true
          
          # Copy configuration files
          cp astro.config.mjs deployment/ 2>/dev/null || true
          cp astro.config.ts deployment/ 2>/dev/null || true
          cp tsconfig.json deployment/ 2>/dev/null || true
          
          # Copy scripts and configs
          cp -r scripts/ deployment/ 2>/dev/null || true
          cp -r docker/ deployment/ 2>/dev/null || true
          cp -r infra/ deployment/ 2>/dev/null || true

      - name: Ensure Docker CLI
        run: |
          if ! command -v docker >/dev/null 2>&1; then
            echo "Installing Docker CLI..."
            sudo apt-get update -qq
            sudo apt-get install -y docker.io
          fi
          docker --version

      - name: Derive registry host
        id: reg
        run: |
          SERVER="${GITHUB_SERVER_URL}"
          SERVER="${SERVER#https://}"
          SERVER="${SERVER#http://}"
          echo "host=${SERVER}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Forgejo Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.reg.outputs.host }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.reg.outputs.host }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:latest
            ${{ steps.reg.outputs.host }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Upload build artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment/
          retention-days: 1

  # Deploy to VPS
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build, prepare-env]
    environment: vps-production
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: deployment/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H -p ${{ github.event.inputs.vps_port || '22' }} ${{ github.event.inputs.vps_host || '209.208.79.191' }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -p ${{ github.event.inputs.vps_port || '22' }} ${{ github.event.inputs.vps_user || 'vivi' }}@${{ github.event.inputs.vps_host || '209.208.79.191' }} "echo 'SSH connection successful'"

      - name: Copy deployment package to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          source: "deployment/"
          target: "/home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated/"
          strip_components: 1

      - name: Update system packages (full deployment)
        uses: appleboy/ssh-action@v1.0.3
        if: github.event.inputs.deploy_type == 'full'
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            echo "🔄 Updating system packages..."
            sudo apt-get update -y
            sudo apt-get upgrade -y
            
            echo "🔒 Installing security packages..."
            sudo apt-get install -y ufw fail2ban unattended-upgrades
            
            echo "🔥 Configuring UFW firewall..."
            sudo ufw allow ${{ github.event.inputs.vps_port || '22' }}/tcp
            sudo ufw allow 80/tcp
            sudo ufw allow 443/tcp
            sudo ufw default deny incoming
            sudo ufw default allow outgoing
            sudo ufw --force enable
            
            echo "🛡️ Enabling fail2ban..."
            sudo systemctl enable fail2ban
            sudo systemctl start fail2ban

      - name: Install Docker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "🐳 Installing Docker..."
              curl -fsSL https://get.docker.com | sudo sh
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ${{ github.event.inputs.vps_user || 'vivi' }} 2>/dev/null || true
            else
              echo "✅ Docker already installed"
            fi

      - name: Install Node.js and pnpm
        uses: appleboy/ssh-action@v1.0.3
        if: github.event.inputs.deploy_type != 'docker-only'
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            cd /home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated
            
            # Install Node.js 22 if needed
            NODE_VERSION=$(command -v node && node --version || echo "none")
            if [[ "$NODE_VERSION" != "v22"* ]]; then
              echo "📦 Installing Node.js 22..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              nvm install 22
              nvm use 22
              nvm alias default 22
            else
              echo "✅ Node.js already installed"
            fi
            
            # Install pnpm if needed
            if ! command -v pnpm &> /dev/null; then
              echo "📦 Installing pnpm..."
              npm install -g pnpm
            else
              echo "✅ pnpm already installed"
            fi

      - name: Build application on VPS
        uses: appleboy/ssh-action@v1.0.3
        if: github.event.inputs.deploy_type != 'docker-only'
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            cd /home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated
            
            echo "📦 Installing dependencies..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 22
            pnpm install --no-frozen-lockfile
            
            echo "🔨 Building application..."
            export NODE_ENV=production
            export NODE_OPTIONS="--max-old-space-size=8192"
            pnpm build

      - name: Login to Forgejo Container Registry on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            echo "🔐 Logging in to Forgejo Container Registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ needs.build.outputs.registry-host }} -u ${{ github.actor }} --password-stdin

      - name: Pull and deploy Docker image
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            cd /home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated
            
            echo "🛑 Stopping existing container..."
            docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            
            echo "📥 Pulling Docker image from registry..."
            docker pull ${{ needs.build.outputs.registry-host }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:latest
            
            echo "🧹 Cleaning up old images..."
            docker image prune -f

      - name: Deploy container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            cd /home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated
            
            # Set up environment variables
            PUBLIC_URL="http://${{ github.event.inputs.vps_host || '209.208.79.191' }}"
            CORS_ORIGINS="http://${{ github.event.inputs.vps_host || '209.208.79.191' }},https://${{ github.event.inputs.vps_host || '209.208.79.191' }}"
            
            if [[ -n "${{ github.event.inputs.domain }}" ]]; then
              PUBLIC_URL="https://${{ github.event.inputs.domain }}"
              CORS_ORIGINS="$CORS_ORIGINS,http://${{ github.event.inputs.domain }},https://${{ github.event.inputs.domain }}"
            fi
            
            echo "🚀 Starting new container..."
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
              -e NODE_ENV=production \
              -e PORT=${{ env.APP_PORT }} \
              -e WEB_PORT=${{ env.APP_PORT }} \
              -e LOG_LEVEL=info \
              -e ENABLE_RATE_LIMITING=true \
              -e RATE_LIMIT_WINDOW=60 \
              -e RATE_LIMIT_MAX_REQUESTS=100 \
              -e ENABLE_HIPAA_COMPLIANCE=true \
              -e ENABLE_AUDIT_LOGGING=true \
              -e ENABLE_DATA_MASKING=true \
              -e ASTRO_TELEMETRY_DISABLED=1 \
              -e PUBLIC_URL="$PUBLIC_URL" \
              -e CORS_ORIGINS="$CORS_ORIGINS" \
              ${{ needs.build.outputs.registry-host }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:latest
            
            echo "⏳ Waiting for container to start..."
            sleep 15
            
            if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
              echo "✅ Container is running"
              docker logs --tail 10 ${{ env.CONTAINER_NAME }}
            else
              echo "❌ Container failed to start"
              docker logs ${{ env.CONTAINER_NAME }}
              exit 1
            fi

      - name: Install and configure Caddy
        uses: appleboy/ssh-action@v1.0.3
        if: github.event.inputs.domain != ''
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            if ! command -v caddy &> /dev/null; then
              echo "🌐 Installing Caddy..."
              sudo apt-get install -y debian-keyring debian-archive-keyring apt-transport-https
              curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
              curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
              sudo apt-get update
              sudo apt-get install -y caddy
              sudo systemctl enable caddy
            fi
            
            echo "⚙️ Configuring Caddy for domain: ${{ github.event.inputs.domain }}"
            sudo tee /etc/caddy/Caddyfile > /dev/null << 'CADDY_EOF'
            ${{ github.event.inputs.domain }} {
                reverse_proxy localhost:${{ env.APP_PORT }}
                
                # Enable compression
                encode gzip
                
                # Security headers
                header {
                    # Enable HSTS
                    Strict-Transport-Security max-age=31536000;
                    # Prevent MIME sniffing
                    X-Content-Type-Options nosniff
                    # Prevent clickjacking
                    X-Frame-Options DENY
                    # XSS protection
                    X-XSS-Protection "1; mode=block"
                    # Referrer policy
                    Referrer-Policy strict-origin-when-cross-origin
                }
                
                # Health check endpoint
                handle /api/health* {
                    reverse_proxy localhost:${{ env.APP_PORT }}
                }
                
                # Static assets with long cache
                handle /assets/* {
                    reverse_proxy localhost:${{ env.APP_PORT }}
                    header Cache-Control "public, max-age=31536000, immutable"
                }
                
                # All other requests
                handle {
                    reverse_proxy localhost:${{ env.APP_PORT }}
                }
            }
            
            goat.pixelatedempathy.tech {
                reverse_proxy localhost:11434
            }
            CADDY_EOF
            
            echo "🔍 Testing Caddy configuration..."
            sudo caddy validate --config /etc/caddy/Caddyfile
            
            echo "🔄 Starting Caddy..."
            sudo systemctl restart caddy

      - name: Deploy environment file
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.vps_host || '209.208.79.191' }}
          username: ${{ github.event.inputs.vps_user || 'vivi' }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ github.event.inputs.vps_port || '22' }}
          script: |
            cd /home/${{ github.event.inputs.vps_user || 'vivi' }}/pixelated
            
            # Decode and create .env file from prepared content
            echo '${{ needs.prepare-env.outputs.env-content }}' | base64 -d > .env
            
            # Set proper permissions
            chmod 600 .env
            
            # Restart container to pick up new environment
            docker restart ${{ env.CONTAINER_NAME }}
            
            echo "✅ Environment file deployed and container restarted"

      - name: Health check
        run: |
          VPS_HOST="${{ github.event.inputs.vps_host || '209.208.79.191' }}"
          VPS_PORT="${{ github.event.inputs.vps_port || '22' }}"
          VPS_USER="${{ github.event.inputs.vps_user || 'vivi' }}"
          DOMAIN="${{ github.event.inputs.domain || 'pixelatedempathy.com' }}"
          APP_PORT="${{ env.APP_PORT }}"
          
          echo "🔍 Performing health check..."
          
          # Wait for application to be ready
          sleep 30
          
          # Test direct access
          if curl -f -s "http://$VPS_HOST:$APP_PORT/api/health" > /dev/null; then
            echo "✅ Direct access health check passed"
          else
            echo "❌ Direct access health check failed"
            exit 1
          fi
          
          # Test domain access if configured
          if [[ -n "$DOMAIN" ]]; then
            if curl -f -s "https://$DOMAIN/api/health" > /dev/null; then
              echo "✅ Domain access health check passed"
            else
              echo "❌ Domain access health check failed"
              exit 1
            fi
          fi
          
          echo "🎉 All health checks passed!"

  # Post-deployment verification
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: Check application status
        run: |
          VPS_HOST="${{ github.event.inputs.vps_host || '209.208.79.191' }}"
          VPS_PORT="${{ github.event.inputs.vps_port || '22' }}"
          VPS_USER="${{ github.event.inputs.vps_user || 'vivi' }}"
          DOMAIN="${{ github.event.inputs.domain || 'pixelatedempathy.com' }}"
          APP_PORT="${{ env.APP_PORT }}"
          
          echo "🔍 Final deployment verification..."
          
          # Check container status
          ssh -p $VPS_PORT $VPS_USER@$VPS_HOST "docker ps | grep ${{ env.CONTAINER_NAME }}"
          
          # Check application logs
          ssh -p $VPS_PORT $VPS_USER@$VPS_HOST "docker logs --tail 20 ${{ env.CONTAINER_NAME }}"
          
          # Check Caddy status if domain is configured
          if [[ -n "$DOMAIN" ]]; then
            ssh -p $VPS_PORT $VPS_USER@$VPS_HOST "sudo systemctl status caddy"
          fi
          
          echo "✅ Deployment verification completed"
          echo ""
          echo "🌐 Application URLs:"
          echo "  Direct: http://$VPS_HOST:$APP_PORT"
          if [[ -n "$DOMAIN" ]]; then
            echo "  Domain: https://$DOMAIN"
          fi
          echo ""
          echo "🔧 SSH Access:"
          echo "  ssh -p $VPS_PORT $VPS_USER@$VPS_HOST"
