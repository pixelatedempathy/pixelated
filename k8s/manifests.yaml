---
# Kubernetes Manifests for Pixelated Empathy GKE Deployment

apiVersion: v1
kind: Namespace
metadata:
  name: pixelated
  labels:
    name: pixelated
    app.kubernetes.io/name: pixelated
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: namespace
    app.kubernetes.io/part-of: pixelated-empathy
    app.kubernetes.io/managed-by: gitlab-ci
---
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-registry
  namespace: pixelated
  labels:
    app.kubernetes.io/name: pixelated
    app.kubernetes.io/component: registry-secret
type: kubernetes.io/dockerconfigjson
data:
  # This will be populated by the CI/CD pipeline
  .dockerconfigjson: e30K  # Empty JSON object base64 encoded
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pixelated-config
  namespace: pixelated
  labels:
    app.kubernetes.io/name: pixelated
    app.kubernetes.io/component: config
data:
  NODE_ENV: "production"
  PORT: "4321"
  ASTRO_TELEMETRY_DISABLED: "1"
  # Add other non-sensitive configuration here

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pixelated
  namespace: pixelated
  labels:
    app: pixelated
    app.kubernetes.io/name: pixelated
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: web-server
    app.kubernetes.io/part-of: pixelated-empathy
    app.kubernetes.io/managed-by: gitlab-ci
  annotations:
    deployment.kubernetes.io/revision: "1"
    app.gitlab.com/app: pixelated
    app.gitlab.com/env: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: pixelated
      app.kubernetes.io/name: pixelated
  template:
    metadata:
      labels:
        app: pixelated
        app.kubernetes.io/name: pixelated
        app.kubernetes.io/instance: production
        app.kubernetes.io/component: web-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4321"
        prometheus.io/path: "/metrics"
        # Force pod restart on config changes
        checksum/config: "placeholder"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: pixelated
      automountServiceAccountToken: false
      containers:
        - name: pixelated
          image: registry.gitlab.com/gemcity/pixelated:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 4321
              name: http
              protocol: TCP
          envFrom:
            - configMapRef:
                name: pixelated-config
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBERNETES_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
              ephemeral-storage: "1Gi"
            limits:
              memory: "2Gi"
              cpu: "2"
              ephemeral-storage: "2Gi"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 4321
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /api/health
              port: 4321
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          startupProbe:
            httpGet:
              path: /api/health
              port: 4321
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            capabilities:
              drop:
                - ALL
              add:
                - CHOWN
                - SETGID
                - SETUID
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: var-tmp
              mountPath: /var/tmp
            - name: cache
              mountPath: /app/.cache
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
            medium: Memory
        - name: var-tmp
          emptyDir:
            sizeLimit: 50Mi
            medium: Memory
        - name: cache
          emptyDir:
            sizeLimit: 500Mi
      imagePullSecrets:
        - name: gitlab-registry
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: "kubernetes.io/arch"
          operator: "Equal"
          value: "amd64"
          effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - pixelated
                topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pixelated
  namespace: pixelated
  labels:
    app.kubernetes.io/name: pixelated
    app.kubernetes.io/component: service-account
automountServiceAccountToken: false
---
apiVersion: v1
kind: Service
metadata:
  name: pixelated-service
  namespace: pixelated
  labels:
    app: pixelated
    app.kubernetes.io/name: pixelated
    app.kubernetes.io/component: service
  annotations:
    service.beta.kubernetes.io/load-balancer-source-ranges: "0.0.0.0/0"
spec:
  selector:
    app: pixelated
    app.kubernetes.io/name: pixelated
  ports:
  - name: http
    port: 80
    targetPort: 4321
    protocol: TCP
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pixelated-ingress
  namespace: pixelated
  labels:
    app.kubernetes.io/name: pixelated
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "pixelated-ip"
    networking.gke.io/managed-certificates: "pixelated-ssl-cert"
    kubernetes.io/ingress.allow-http: "false"
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; media-src 'self'; object-src 'none'; child-src 'self'; frame-ancestors 'self'; form-action 'self'; base-uri 'self';" always;
spec:
  rules:
  - host: pixelatedempathy.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pixelated-service
            port:
              number: 80
  - host: www.pixelatedempathy.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pixelated-service
            port:
              number: 80
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: pixelated-ssl-cert
  namespace: pixelated
spec:
  domains:
  - pixelatedempathy.com
  - www.pixelatedempathy.com
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pixelated-hpa
  namespace: pixelated
  labels:
    app.kubernetes.io/name: pixelated
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pixelated
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pixelated-pdb
  namespace: pixelated
  labels:
    app.kubernetes.io/name: pixelated
    app.kubernetes.io/component: disruption-budget
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: pixelated
      app.kubernetes.io/name: pixelated
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pixelated-network-policy
  namespace: pixelated
  labels:
    app.kubernetes.io/name: pixelated
    app.kubernetes.io/component: network-policy
spec:
  podSelector:
    matchLabels:
      app: pixelated
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 4321
  egress:
    - {}  # Allow all egress traffic (can be restricted based on requirements)
