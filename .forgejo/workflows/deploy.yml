name: Deploy Pixelated Empathy to VPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  IMAGE_NAME: pixelated-empathy
  CONTAINER_NAME: pixelated-empathy
  APP_PORT: 4321
  HOST_PORT: 80

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Save Docker image
      run: |
        docker save ${{ env.IMAGE_NAME }}:latest | gzip > ${{ env.IMAGE_NAME }}.tar.gz
        ls -lh ${{ env.IMAGE_NAME }}.tar.gz

    - name: Stop existing container on VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          echo "🛑 Stopping existing container..."
          docker stop ${{ env.CONTAINER_NAME }} || echo "Container not running"
          docker rm ${{ env.CONTAINER_NAME }} || echo "Container not found"

    - name: Copy Docker image to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        source: "${{ env.IMAGE_NAME }}.tar.gz"
        target: "/tmp/"

    - name: Deploy new container on VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          echo "📦 Loading Docker image..."
          cd /tmp
          docker load < ${{ env.IMAGE_NAME }}.tar.gz
          rm ${{ env.IMAGE_NAME }}.tar.gz

          echo "🚀 Starting new container..."
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            -p ${{ env.HOST_PORT }}:${{ env.APP_PORT }} \
            -e NODE_ENV=production \
            -e HOST=0.0.0.0 \
            -e PORT=${{ env.APP_PORT }} \
            --health-cmd="curl -f http://localhost:${{ env.APP_PORT }}/api/health/simple || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-start-period=30s \
            --health-retries=3 \
            ${{ env.IMAGE_NAME }}:latest

          echo "⏳ Waiting for container to be healthy..."
          timeout 120 bash -c 'until docker inspect --format="{{.State.Health.Status}}" ${{ env.CONTAINER_NAME }} | grep -q "healthy"; do sleep 5; echo "Waiting for health check..."; done' || {
            echo "❌ Container failed to become healthy"
            docker logs ${{ env.CONTAINER_NAME }}
            exit 1
          }

          echo "✅ Container is healthy!"
          docker ps | grep ${{ env.CONTAINER_NAME }}

          echo "🧹 Cleaning up old images..."
          docker image prune -f

          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application should be available at: http://${{ secrets.VPS_HOST }}"
