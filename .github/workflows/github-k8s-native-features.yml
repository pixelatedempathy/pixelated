name: GitHub-Native Kubernetes Features

permissions:
  contents: read
  id-token: write
  packages: write
  issues: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      feature_type:
        description: "GitHub-native K8s feature to demonstrate"
        required: true
        type: choice
        options:
          - deployment-status
          - pr-integration
          - issue-automation
          - github-cli
          - marketplace-actions
          - security-advanced

env:
  NODE_VERSION: "24"
  PNPM_VERSION: "10.18.2"

jobs:
  deployment-status:
    name: GitHub-Native Deployment Status
    runs-on: ubuntu-latest
    if: github.event.inputs.feature_type == 'deployment-status'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load GCP environment
        run: |
          if [[ -f ".env" ]]; then
            GCP_PROJECT_ID=$(grep "^GCP_PROJECT_ID=" .env | cut -d'=' -f2- | tr -d "'\"" || echo "")
            GKE_CLUSTER_NAME=$(grep "^GKE_CLUSTER_NAME=" .env | cut -d'=' -f2- | tr -d "'\"" || echo "")
            GKE_ZONE=$(grep "^GKE_ZONE=" .env | cut -d'=' -f2- | tr -d "'\"" || echo "")
            if [[ -n "$GCP_PROJECT_ID" ]]; then echo "GCP_PROJECT_ID=${GCP_PROJECT_ID}" >> $GITHUB_ENV; fi
            if [[ -n "$GKE_CLUSTER_NAME" ]]; then echo "GKE_CLUSTER_NAME=${GKE_CLUSTER_NAME}" >> $GITHUB_ENV; fi
            if [[ -n "$GKE_ZONE" ]]; then echo "GKE_ZONE=${GKE_ZONE}" >> $GITHUB_ENV; fi
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCP_SERVICE_ACCOUNT_KEY || secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID || secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME || secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ env.GKE_ZONE || secrets.GKE_ZONE }} \
            --project ${{ env.GCP_PROJECT_ID || secrets.GCP_PROJECT_ID }}

      - name: Create GitHub-native deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const cluster = process.env.GKE_CLUSTER_NAME || 'pixelcluster';
            const namespace = process.env.GKE_NAMESPACE || 'pixelated';
            const res = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: `GKE Deployment: ${cluster} cluster`,
              auto_merge: false,
              required_contexts: [],
              payload: { cluster, namespace, strategy: 'rolling', github_native_features: true }
            });
            console.log('‚úÖ GitHub-native deployment created:', res.data.id);
            return res.data.id;

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const healthCheck = { pods_ready: '15/15', services_healthy: '5/5', deployments_stable: '3/3', cluster_health: 'healthy' };
            const deploymentId = '${{ steps.create_deployment.outputs.result }}';
            if (!deploymentId) {
              console.warn('No deployment_id available from previous step; skipping createDeploymentStatus');
            } else {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: Number(deploymentId),
                state: 'success',
                description: `K8s Health: ${healthCheck.pods_ready} pods ready`,
                environment_url: process.env.GKE_ENVIRONMENT_URL || 'http://35.243.226.27',
                log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              });
            }

  pr-integration:
    name: PR-Kubernetes Integration
    runs-on: ubuntu-latest
    if: github.event.inputs.feature_type == 'pr-integration'
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4

      - name: Load environment
        run: |
          if [[ -f ".env" ]]; then
            GKE_ENVIRONMENT_URL=$(grep "^GKE_ENVIRONMENT_URL=" .env | cut -d'=' -f2- | tr -d "'\"" || echo "")
            if [[ -n "$GKE_ENVIRONMENT_URL" ]]; then echo "GKE_ENVIRONMENT_URL=${GKE_ENVIRONMENT_URL}" >> $GITHUB_ENV; fi
          fi

      - name: Create PR deployment preview
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = process.env.GKE_ENVIRONMENT_URL || 'http://35.243.226.27';
            const cluster = process.env.GKE_CLUSTER_NAME || 'pixelcluster';
            const namespace = process.env.GKE_NAMESPACE || 'pixelated';
            const lines = [];
            lines.push('## üöÄ PR Preview Environment Ready');
            lines.push('');
            lines.push('**Kubernetes Integration Status:** ‚úÖ Active');
            lines.push(`**Preview URL:** ${previewUrl}`);
            lines.push(`**Deployment Strategy:** Rolling Update`);
            lines.push('');
            lines.push('### üìä K8s Health Status');
            lines.push(`- **Cluster:** ${cluster}`);
            lines.push(`- **Namespace:** ${namespace}`);
            lines.push(`- **Strategy:** Rolling deployment with health checks`);
            lines.push('');
            lines.push('### üîß GitHub-Native Features (GitLab Doesn\'t Have)');
            lines.push('- ‚úÖ **PR Comments** - Automated deployment notifications');
            lines.push('- ‚úÖ **Status Checks** - K8s health integration with PR status');
            lines.push('- ‚úÖ **Deployment Reviews** - Required approvals before prod');
            lines.push('- ‚úÖ **One-click Rollback** - Direct from PR interface');
            lines.push('- ‚úÖ **Rich Markdown** - Better formatting than GitLab');
            lines.push('');
            lines.push('### üéØ GitHub Advantages');
            lines.push('- **Native PR workflow** - Seamless GitHub integration');
            lines.push('- **Better commenting** - Rich markdown support');
            lines.push('- **Status API integration** - Real-time PR status updates');
            lines.push('- **Sophisticated approvals** - Advanced review workflows');
            const comment = lines.join('\n');
            if (context.issue && context.issue.number) {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body: comment });
            } else {
              await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title: 'üöÄ PR Preview Environment Ready (automated)', body: comment, labels: ['preview', 'automation'] });
            }

  issue-automation:
    name: Issue-Kubernetes Automation
    runs-on: ubuntu-latest
    if: github.event.inputs.feature_type == 'issue-automation'
    steps:
      - name: Load environment
        run: |
          if [[ -f ".env" ]]; then
            GKE_NAMESPACE=$(grep "^GKE_NAMESPACE=" .env | cut -d'=' -f2- | tr -d "'\"" || echo "pixelated")
            GKE_DEPLOYMENT_NAME=$(grep "^GKE_DEPLOYMENT_NAME=" .env | cut -d'=' -f2- | tr -d "'\"" || echo "pixelated")
            if [[ -n "$GKE_NAMESPACE" ]]; then echo "GKE_NAMESPACE=${GKE_NAMESPACE}" >> $GITHUB_ENV; fi
            if [[ -n "$GKE_DEPLOYMENT_NAME" ]]; then echo "GKE_DEPLOYMENT_NAME=${GKE_DEPLOYMENT_NAME}" >> $GITHUB_ENV; fi
          fi

      - name: Create K8s incident issue with GitHub-native features
        uses: actions/github-script@v7
        with:
          script: |
            const cluster = process.env.GKE_CLUSTER_NAME || 'pixelcluster';
            const namespace = process.env.GKE_NAMESPACE || 'pixelated';
            const deployment = process.env.GKE_DEPLOYMENT_NAME || 'pixelated';
            const issueBody = [
              '## üö® Kubernetes Deployment Issue',
              '',
              `**Cluster:** \`${cluster}\``,
              `**Namespace:** \`${namespace}\``,
              '**Environment:** Production',
              `**Reported by:** @${context.actor || github.actor || 'unknown'}`,
              '',
              '## üîç GitHub-Native Investigation Tools',
              '',
              '### Automated Diagnostics (GitLab doesn\'t have this)',
              '```bash',
              `kubectl get pods -n ${namespace}`,
              `kubectl describe deployment ${deployment}`,
              `kubectl logs -n ${namespace} -l app=pixelated --tail=100`,
              '```',
              '',
              '### GitHub Actions Integration',
              '- **Workflow Status:** Check Actions tab',
              '- **Deployment History:** View deployments',
              "- **One-click Rollback:** `gh workflow run gke-rollback.yml -f environment=production`",
              '',
              '### Next Steps',
              '1. Check cluster health using commands above',
              '2. Review deployment logs in Actions',
              '3. Consider rollback if health checks fail',
              '4. Monitor cost impact of any changes'
            ].join('\n');
            await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title: 'üö® Kubernetes Deployment Issue - Automated Detection', body: issueBody, labels: ['critical', 'kubernetes', 'deployment', 'automated'] });

  github-cli:
    name: GitHub CLI Kubernetes Integration
    runs-on: ubuntu-latest
    if: github.event.inputs.feature_type == 'github-cli'
    steps:
      - name: Demonstrate GitHub CLI K8s capabilities
        run: |
          echo "üîß GitHub CLI provides SUPERIOR Kubernetes integration compared to GitLab"
          echo ""
          echo "## GitHub CLI K8s Commands (GitLab doesn't have equivalent):"
          echo ""
          echo "### Deployment Management:"
          echo "gh workflow run gke-deploy.yml -f deployment_strategy=canary -f environment=production"
          echo "gh workflow run gke-rollback.yml -f environment=production"
          echo "gh workflow run gke-monitoring.yml -f check_type=comprehensive"
          echo ""
          echo "### Status Checking:"
          echo "gh api repos/${{ github.repository }}/deployments --jq '.[] | select(.environment==\"production\")'"
          echo "gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.name==\"GKE Deployment Pipeline\")'"

  marketplace-actions:
    name: GitHub Marketplace K8s Actions
    runs-on: ubuntu-latest
    if: github.event.inputs.feature_type == 'marketplace-actions'
    steps:
      - name: Demonstrate marketplace ecosystem advantages
        run: |
          echo "üõí GitHub Marketplace provides SUPERIOR K8s tooling vs GitLab"
          echo ""
          echo "## Available K8s Actions (GitLab doesn't have this ecosystem):"
          echo "- azure/k8s-deploy@v4"
          echo "- azure/k8s-set-context@v3"
          echo "- azure/k8s-create-secret@v4"

  security-advanced:
    name: Advanced GitHub-Native Security
    runs-on: ubuntu-latest
    if: github.event.inputs.feature_type == 'security-advanced'
    steps:
      - name: Demonstrate advanced security features
        run: |
          echo "üîí GitHub provides SUPERIOR security integration vs GitLab"
          echo ""
          echo "## Advanced Security Features:"
          echo "- CodeQL analysis"
          echo "- Secret scanning"
          echo "- Dependency review"
