{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "3.2.464", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_310", "name": "Ensure CloudFront distributions should have origin failover configured", "shortDescription": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "fullDescription": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "help": {"text": "Ensure CloudFront distributions should have origin failover configured\nResource: aws_cloudfront_distribution.static_assets"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-310"}, {"id": "CKV_AWS_86", "name": "Ensure CloudFront distribution has Access Logging enabled", "shortDescription": {"text": "Ensure CloudFront distribution has Access Logging enabled"}, "fullDescription": {"text": "Ensure CloudFront distribution has Access Logging enabled"}, "help": {"text": "Ensure CloudFront distribution has Access Logging enabled\nResource: aws_cloudfront_distribution.static_assets"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/logging-20"}, {"id": "CKV_AWS_68", "name": "CloudFront Distribution should have WAF enabled", "shortDescription": {"text": "CloudFront Distribution should have WAF enabled"}, "fullDescription": {"text": "CloudFront Distribution should have WAF enabled"}, "help": {"text": "CloudFront Distribution should have WAF enabled\nResource: aws_cloudfront_distribution.static_assets"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-27"}, {"id": "CKV_AWS_374", "name": "Ensure AWS CloudFront web distribution has geo restriction enabled", "shortDescription": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "fullDescription": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "help": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled\nResource: aws_cloudfront_distribution.static_assets"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-374"}, {"id": "CKV2_AWS_62", "name": "Ensure S3 buckets should have event notifications enabled", "shortDescription": {"text": "Ensure S3 buckets should have event notifications enabled"}, "fullDescription": {"text": "Ensure S3 buckets should have event notifications enabled"}, "help": {"text": "Ensure S3 buckets should have event notifications enabled\nResource: aws_s3_bucket.app_data"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-62"}, {"id": "CKV2_AWS_47", "name": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability", "shortDescription": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "fullDescription": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "help": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability\nResource: aws_cloudfront_distribution.static_assets"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-47"}, {"id": "CKV_AWS_18", "name": "Ensure the S3 bucket has access logging enabled", "shortDescription": {"text": "Ensure the S3 bucket has access logging enabled"}, "fullDescription": {"text": "Ensure the S3 bucket has access logging enabled"}, "help": {"text": "Ensure the S3 bucket has access logging enabled\nResource: aws_s3_bucket.app_data"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-13-enable-logging"}, {"id": "CKV2_AWS_32", "name": "Ensure CloudFront distribution has a response headers policy attached", "shortDescription": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "fullDescription": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "help": {"text": "Ensure CloudFront distribution has a response headers policy attached\nResource: aws_cloudfront_distribution.static_assets"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-networking-65"}, {"id": "CKV_AWS_144", "name": "Ensure that S3 bucket has cross-region replication enabled", "shortDescription": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "fullDescription": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "help": {"text": "Ensure that S3 bucket has cross-region replication enabled\nResource: aws_s3_bucket.app_data"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-bucket-has-cross-region-replication-enabled"}, {"id": "CKV_AWS_145", "name": "Ensure that S3 buckets are encrypted with KMS by default", "shortDescription": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "fullDescription": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "help": {"text": "Ensure that S3 buckets are encrypted with KMS by default\nResource: aws_s3_bucket.app_data"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-buckets-are-encrypted-with-kms-by-default"}, {"id": "CKV2_AWS_69", "name": "Ensure AWS RDS database instance configured with encryption in transit", "shortDescription": {"text": "Ensure AWS RDS database instance configured with encryption in transit"}, "fullDescription": {"text": "Ensure AWS RDS database instance configured with encryption in transit"}, "help": {"text": "Ensure AWS RDS database instance configured with encryption in transit\nResource: aws_db_instance.main"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-2-69"}, {"id": "CKV2_AWS_61", "name": "Ensure that an S3 bucket has a lifecycle configuration", "shortDescription": {"text": "Ensure that an S3 bucket has a lifecycle configuration"}, "fullDescription": {"text": "Ensure that an S3 bucket has a lifecycle configuration"}, "help": {"text": "Ensure that an S3 bucket has a lifecycle configuration\nResource: aws_s3_bucket.app_data"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-61"}, {"id": "CKV_K8S_13", "name": "Memory limits should be set", "shortDescription": {"text": "Memory limits should be set"}, "fullDescription": {"text": "Memory limits should be set"}, "help": {"text": "Memory limits should be set\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-12"}, {"id": "CKV_K8S_30", "name": "Apply security context to your containers", "shortDescription": {"text": "Apply security context to your containers"}, "fullDescription": {"text": "Apply security context to your containers"}, "help": {"text": "Apply security context to your containers\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-28"}, {"id": "CKV_K8S_20", "name": "Containers should not run with allowPrivilegeEscalation", "shortDescription": {"text": "Containers should not run with allowPrivilegeEscalation"}, "fullDescription": {"text": "Containers should not run with allowPrivilegeEscalation"}, "help": {"text": "Containers should not run with allowPrivilegeEscalation\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-19"}, {"id": "CKV_K8S_31", "name": "Ensure that the seccomp profile is set to docker/default or runtime/default", "shortDescription": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "fullDescription": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "help": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-29"}, {"id": "CKV_K8S_40", "name": "Containers should run as a high UID to avoid host conflict", "shortDescription": {"text": "Containers should run as a high UID to avoid host conflict"}, "fullDescription": {"text": "Containers should run as a high UID to avoid host conflict"}, "help": {"text": "Containers should run as a high UID to avoid host conflict\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-37"}, {"id": "CKV_K8S_12", "name": "Memory requests should be set", "shortDescription": {"text": "Memory requests should be set"}, "fullDescription": {"text": "Memory requests should be set"}, "help": {"text": "Memory requests should be set\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-11"}, {"id": "CKV_K8S_14", "name": "Image Tag should be fixed - not latest or blank", "shortDescription": {"text": "Image Tag should be fixed - not latest or blank"}, "fullDescription": {"text": "Image Tag should be fixed - not latest or blank"}, "help": {"text": "Image Tag should be fixed - not latest or blank\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-13"}, {"id": "CKV_K8S_11", "name": "CPU limits should be set", "shortDescription": {"text": "CPU limits should be set"}, "fullDescription": {"text": "CPU limits should be set"}, "help": {"text": "CPU limits should be set\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-10"}, {"id": "CKV_K8S_21", "name": "The default namespace should not be used", "shortDescription": {"text": "The default namespace should not be used"}, "fullDescription": {"text": "The default namespace should not be used"}, "help": {"text": "The default namespace should not be used\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-20"}, {"id": "CKV_K8S_9", "name": "Readiness Probe Should be Configured", "shortDescription": {"text": "Readiness Probe Should be Configured"}, "fullDescription": {"text": "Readiness Probe Should be Configured"}, "help": {"text": "Readiness Probe Should be Configured\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-8"}, {"id": "CKV_K8S_43", "name": "Image should use digest", "shortDescription": {"text": "Image should use digest"}, "fullDescription": {"text": "Image should use digest"}, "help": {"text": "Image should use digest\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-39"}, {"id": "CKV_K8S_10", "name": "CPU requests should be set", "shortDescription": {"text": "CPU requests should be set"}, "fullDescription": {"text": "CPU requests should be set"}, "help": {"text": "CPU requests should be set\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-9"}, {"id": "CKV_K8S_23", "name": "Minimize the admission of root containers", "shortDescription": {"text": "Minimize the admission of root containers"}, "fullDescription": {"text": "Minimize the admission of root containers"}, "help": {"text": "Minimize the admission of root containers\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-22"}, {"id": "CKV_K8S_28", "name": "Minimize the admission of containers with the NET_RAW capability", "shortDescription": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "fullDescription": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "help": {"text": "Minimize the admission of containers with the NET_RAW capability\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-27"}, {"id": "CKV_K8S_29", "name": "Apply security context to your pods and containers", "shortDescription": {"text": "Apply security context to your pods and containers"}, "fullDescription": {"text": "Apply security context to your pods and containers"}, "help": {"text": "Apply security context to your pods and containers\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/ensure-securitycontext-is-applied-to-pods-and-containers"}, {"id": "CKV_K8S_22", "name": "Use read-only filesystem for containers where possible", "shortDescription": {"text": "Use read-only filesystem for containers where possible"}, "fullDescription": {"text": "Use read-only filesystem for containers where possible"}, "help": {"text": "Use read-only filesystem for containers where possible\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-21"}, {"id": "CKV_K8S_37", "name": "Minimize the admission of containers with capabilities assigned", "shortDescription": {"text": "Minimize the admission of containers with capabilities assigned"}, "fullDescription": {"text": "Minimize the admission of containers with capabilities assigned"}, "help": {"text": "Minimize the admission of containers with capabilities assigned\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-34"}, {"id": "CKV_K8S_8", "name": "Liveness Probe Should be Configured", "shortDescription": {"text": "Liveness Probe Should be Configured"}, "fullDescription": {"text": "Liveness Probe Should be Configured"}, "help": {"text": "Liveness Probe Should be Configured\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-7"}, {"id": "CKV_K8S_38", "name": "Ensure that Service Account Tokens are only mounted where necessary", "shortDescription": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "fullDescription": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "help": {"text": "Ensure that Service Account Tokens are only mounted where necessary\nResource: Deployment.default.production-app"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-35"}, {"id": "CKV_K8S_35", "name": "Prefer using secrets as files over secrets as environment variables", "shortDescription": {"text": "Prefer using secrets as files over secrets as environment variables"}, "fullDescription": {"text": "Prefer using secrets as files over secrets as environment variables"}, "help": {"text": "Prefer using secrets as files over secrets as environment variables\nResource: Deployment.pixel-voice.postgres"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-33"}, {"id": "CKV_K8S_15", "name": "Image Pull Policy should be Always", "shortDescription": {"text": "Image Pull Policy should be Always"}, "fullDescription": {"text": "Image Pull Policy should be Always"}, "help": {"text": "Image Pull Policy should be Always\nResource: Deployment.pixel-voice.postgres"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/kubernetes-policies/kubernetes-policy-index/bc-k8s-14"}, {"id": "CKV_AZURE_189", "name": "Ensure that Azure Key Vault disables public network access", "shortDescription": {"text": "Ensure that Azure Key Vault disables public network access"}, "fullDescription": {"text": "Ensure that Azure Key Vault disables public network access"}, "help": {"text": "Ensure that Azure Key Vault disables public network access\nResource: Microsoft.KeyVault/vaults.[format('{0}-kv-{1}', pixel, [uniqueString(subscription().id, resourceGroup().id, parameters('environmentName'))])]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/azure-policies/azure-networking-policies/azr-networking-189"}, {"id": "CKV_AZURE_109", "name": "Ensure that key vault allows firewall rules settings", "shortDescription": {"text": "Ensure that key vault allows firewall rules settings"}, "fullDescription": {"text": "Ensure that key vault allows firewall rules settings"}, "help": {"text": "Ensure that key vault allows firewall rules settings\nResource: Microsoft.KeyVault/vaults.[format('{0}-kv-{1}', pixel, [uniqueString(subscription().id, resourceGroup().id, parameters('environmentName'))])]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/azure-policies/azure-networking-policies/ensure-that-key-vault-allows-firewall-rules-settings"}, {"id": "CKV_AZURE_166", "name": "Ensure container image quarantine, scan, and mark images verified", "shortDescription": {"text": "Ensure container image quarantine, scan, and mark images verified"}, "fullDescription": {"text": "Ensure container image quarantine, scan, and mark images verified"}, "help": {"text": "Ensure container image quarantine, scan, and mark images verified\nResource: Microsoft.ContainerRegistry/registries.pixelatedcr"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/azure-policies/azure-general-policies/azr-general-166"}, {"id": "CKV_DOCKER_2", "name": "Ensure that HEALTHCHECK instructions have been added to container images", "shortDescription": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "fullDescription": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "help": {"text": "Ensure that HEALTHCHECK instructions have been added to container images\nResource: /ai/back/Dockerfile."}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-that-healthcheck-instructions-have-been-added-to-container-images"}, {"id": "CKV_DOCKER_6", "name": "Ensure that LABEL maintainer is used instead of MAINTAINER (deprecated)", "shortDescription": {"text": "Ensure that LABEL maintainer is used instead of MAINTAINER (deprecated)"}, "fullDescription": {"text": "Ensure that LABEL maintainer is used instead of MAINTAINER (deprecated)"}, "help": {"text": "Ensure that LABEL maintainer is used instead of MAINTAINER (deprecated)\nResource: /ai/datasets/counsel-chat/docker/Dockerfile.MAINTAINER"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-that-label-maintainer-is-used-instead-of-maintainer-deprecated"}, {"id": "CKV_DOCKER_3", "name": "Ensure that a user for the container has been created", "shortDescription": {"text": "Ensure that a user for the container has been created"}, "fullDescription": {"text": "Ensure that a user for the container has been created"}, "help": {"text": "Ensure that a user for the container has been created\nResource: /ai/datasets/counsel-chat/docker/Dockerfile."}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/docker-policies/docker-policy-index/ensure-that-a-user-for-the-container-has-been-created"}, {"id": "CKV_SECRET_6", "name": "Base64 High Entropy String", "shortDescription": {"text": "Base64 High Entropy String"}, "fullDescription": {"text": "Base64 High Entropy String"}, "help": {"text": "Base64 High Entropy String\nResource: 9681edd3b5414380bd4cacae8c4781bb4cd5ec20"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/secrets-policies/secrets-policy-index/git-secrets-6"}, {"id": "CKV_SECRET_4", "name": "Basic Auth Credentials", "shortDescription": {"text": "Basic Auth Credentials"}, "fullDescription": {"text": "Basic Auth Credentials"}, "help": {"text": "Basic Auth Credentials\nResource: 9d4e1e23bd5b727046a9e3b4b7db57bd8d6ee684"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/secrets-policies/secrets-policy-index/git-secrets-4"}, {"id": "CKV2_GHA_1", "name": "Ensure top-level permissions are not set to write-all", "shortDescription": {"text": "Ensure top-level permissions are not set to write-all"}, "fullDescription": {"text": "Ensure top-level permissions are not set to write-all"}, "help": {"text": "Ensure top-level permissions are not set to write-all\nResource: on(Pixel Voice CI/CD Pipeline)"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZURE_212", "name": "Ensure App Service has a minimum number of instances for failover", "shortDescription": {"text": "Ensure App Service has a minimum number of instances for failover"}, "fullDescription": {"text": "Ensure App Service has a minimum number of instances for failover"}, "help": {"text": "Ensure App Service has a minimum number of instances for failover\nResource: Microsoft.Web/sites.appService"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/azure-policies/azure-general-policies/azr-general-212"}, {"id": "CKV_OPENAPI_21", "name": "Ensure that arrays have a maximum number of items", "shortDescription": {"text": "Ensure that arrays have a maximum number of items"}, "fullDescription": {"text": "Ensure that arrays have a maximum number of items"}, "help": {"text": "Ensure that arrays have a maximum number of items\nResource: paths"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/api-policies/openapi-policies/bc-openapi-21"}, {"id": "CKV_AZUREPIPELINES_1", "name": "Ensure container job uses a non latest version tag", "shortDescription": {"text": "Ensure container job uses a non latest version tag"}, "fullDescription": {"text": "Ensure container job uses a non latest version tag"}, "help": {"text": "Ensure container job uses a non latest version tag\nResource: stages[1](Deploy Infrastructure).jobs[0](Deploy Container Apps Infrastructure)"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AZUREPIPELINES_2", "name": "Ensure container job uses a version digest", "shortDescription": {"text": "Ensure container job uses a version digest"}, "fullDescription": {"text": "Ensure container job uses a version digest"}, "help": {"text": "Ensure container job uses a version digest\nResource: stages[1](Deploy Infrastructure).jobs[0](Deploy Container Apps Infrastructure)"}, "defaultConfiguration": {"level": "error"}}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_310", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 369, "endLine": 419, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static_assets\" {\n  origin {\n    domain_name = aws_s3_bucket.app_data.bucket_regional_domain_name\n    origin_id   = \"S3-${aws_s3_bucket.app_data.id}\"\n    \n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.static_assets.cloudfront_access_identity_path\n    }\n  }\n  \n  enabled             = true\n  is_ipv6_enabled     = true\n  default_root_object = \"index.html\"\n  \n  aliases = [\"static.${var.domain_name}\"]\n  \n  default_cache_behavior {\n    allowed_methods        = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    target_origin_id       = \"S3-${aws_s3_bucket.app_data.id}\"\n    compress               = true\n    viewer_protocol_policy = \"redirect-to-https\"\n    \n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n    \n    min_ttl     = 0\n    default_ttl = 3600\n    max_ttl     = 86400\n  }\n  \n  price_class = \"PriceClass_100\"\n  \n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n  \n  viewer_certificate {\n    acm_certificate_arn      = var.ssl_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n  \n  tags = local.common_tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_86", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has Access Logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 369, "endLine": 419, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static_assets\" {\n  origin {\n    domain_name = aws_s3_bucket.app_data.bucket_regional_domain_name\n    origin_id   = \"S3-${aws_s3_bucket.app_data.id}\"\n    \n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.static_assets.cloudfront_access_identity_path\n    }\n  }\n  \n  enabled             = true\n  is_ipv6_enabled     = true\n  default_root_object = \"index.html\"\n  \n  aliases = [\"static.${var.domain_name}\"]\n  \n  default_cache_behavior {\n    allowed_methods        = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    target_origin_id       = \"S3-${aws_s3_bucket.app_data.id}\"\n    compress               = true\n    viewer_protocol_policy = \"redirect-to-https\"\n    \n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n    \n    min_ttl     = 0\n    default_ttl = 3600\n    max_ttl     = 86400\n  }\n  \n  price_class = \"PriceClass_100\"\n  \n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n  \n  viewer_certificate {\n    acm_certificate_arn      = var.ssl_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n  \n  tags = local.common_tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_68", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "CloudFront Distribution should have WAF enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 369, "endLine": 419, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static_assets\" {\n  origin {\n    domain_name = aws_s3_bucket.app_data.bucket_regional_domain_name\n    origin_id   = \"S3-${aws_s3_bucket.app_data.id}\"\n    \n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.static_assets.cloudfront_access_identity_path\n    }\n  }\n  \n  enabled             = true\n  is_ipv6_enabled     = true\n  default_root_object = \"index.html\"\n  \n  aliases = [\"static.${var.domain_name}\"]\n  \n  default_cache_behavior {\n    allowed_methods        = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    target_origin_id       = \"S3-${aws_s3_bucket.app_data.id}\"\n    compress               = true\n    viewer_protocol_policy = \"redirect-to-https\"\n    \n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n    \n    min_ttl     = 0\n    default_ttl = 3600\n    max_ttl     = 86400\n  }\n  \n  price_class = \"PriceClass_100\"\n  \n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n  \n  viewer_certificate {\n    acm_certificate_arn      = var.ssl_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n  \n  tags = local.common_tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_374", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 369, "endLine": 419, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static_assets\" {\n  origin {\n    domain_name = aws_s3_bucket.app_data.bucket_regional_domain_name\n    origin_id   = \"S3-${aws_s3_bucket.app_data.id}\"\n    \n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.static_assets.cloudfront_access_identity_path\n    }\n  }\n  \n  enabled             = true\n  is_ipv6_enabled     = true\n  default_root_object = \"index.html\"\n  \n  aliases = [\"static.${var.domain_name}\"]\n  \n  default_cache_behavior {\n    allowed_methods        = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    target_origin_id       = \"S3-${aws_s3_bucket.app_data.id}\"\n    compress               = true\n    viewer_protocol_policy = \"redirect-to-https\"\n    \n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n    \n    min_ttl     = 0\n    default_ttl = 3600\n    max_ttl     = 86400\n  }\n  \n  price_class = \"PriceClass_100\"\n  \n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n  \n  viewer_certificate {\n    acm_certificate_arn      = var.ssl_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n  \n  tags = local.common_tags\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_62", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure S3 buckets should have event notifications enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 335, "endLine": 337, "snippet": {"text": "resource \"aws_s3_bucket\" \"app_data\" {\n  bucket = \"${local.name_prefix}-app-data\"\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_47", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 369, "endLine": 419, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static_assets\" {\n  origin {\n    domain_name = aws_s3_bucket.app_data.bucket_regional_domain_name\n    origin_id   = \"S3-${aws_s3_bucket.app_data.id}\"\n    \n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.static_assets.cloudfront_access_identity_path\n    }\n  }\n  \n  enabled             = true\n  is_ipv6_enabled     = true\n  default_root_object = \"index.html\"\n  \n  aliases = [\"static.${var.domain_name}\"]\n  \n  default_cache_behavior {\n    allowed_methods        = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    target_origin_id       = \"S3-${aws_s3_bucket.app_data.id}\"\n    compress               = true\n    viewer_protocol_policy = \"redirect-to-https\"\n    \n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n    \n    min_ttl     = 0\n    default_ttl = 3600\n    max_ttl     = 86400\n  }\n  \n  price_class = \"PriceClass_100\"\n  \n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n  \n  viewer_certificate {\n    acm_certificate_arn      = var.ssl_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n  \n  tags = local.common_tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 335, "endLine": 337, "snippet": {"text": "resource \"aws_s3_bucket\" \"app_data\" {\n  bucket = \"${local.name_prefix}-app-data\"\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_32", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 369, "endLine": 419, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static_assets\" {\n  origin {\n    domain_name = aws_s3_bucket.app_data.bucket_regional_domain_name\n    origin_id   = \"S3-${aws_s3_bucket.app_data.id}\"\n    \n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.static_assets.cloudfront_access_identity_path\n    }\n  }\n  \n  enabled             = true\n  is_ipv6_enabled     = true\n  default_root_object = \"index.html\"\n  \n  aliases = [\"static.${var.domain_name}\"]\n  \n  default_cache_behavior {\n    allowed_methods        = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    target_origin_id       = \"S3-${aws_s3_bucket.app_data.id}\"\n    compress               = true\n    viewer_protocol_policy = \"redirect-to-https\"\n    \n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n    \n    min_ttl     = 0\n    default_ttl = 3600\n    max_ttl     = 86400\n  }\n  \n  price_class = \"PriceClass_100\"\n  \n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n  \n  viewer_certificate {\n    acm_certificate_arn      = var.ssl_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n  \n  tags = local.common_tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 335, "endLine": 337, "snippet": {"text": "resource \"aws_s3_bucket\" \"app_data\" {\n  bucket = \"${local.name_prefix}-app-data\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main.tf"}, "region": {"startLine": 268, "endLine": 277, "snippet": {"text": "resource \"aws_s3_bucket\" \"assets\" {\n  bucket = \"${var.project_name}-assets-${random_string.bucket_suffix.result}\"\n\n  # Enable versioning for replication\n  versioning {\n    enabled = true\n  }\n\n  tags = var.common_tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_145", "ruleIndex": 9, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 335, "endLine": 337, "snippet": {"text": "resource \"aws_s3_bucket\" \"app_data\" {\n  bucket = \"${local.name_prefix}-app-data\"\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_69", "ruleIndex": 10, "level": "error", "attachments": [], "message": {"text": "Ensure AWS RDS database instance configured with encryption in transit"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform/main.tf"}, "region": {"startLine": 96, "endLine": 132, "snippet": {"text": "resource \"aws_db_instance\" \"main\" {\n  identifier = \"${var.project_name}-db\"\n\n  engine         = \"postgres\"\n  engine_version = var.postgres_version\n  instance_class = var.db_instance_class\n\n  allocated_storage     = var.db_allocated_storage\n  max_allocated_storage = var.db_max_allocated_storage\n  storage_encrypted     = true\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = var.db_password\n\n  vpc_security_group_ids = [aws_security_group.rds.id]\n  db_subnet_group_name   = aws_db_subnet_group.main.name\n\n  backup_retention_period = var.db_backup_retention_period\n  backup_window          = var.db_backup_window\n  maintenance_window     = var.db_maintenance_window\n\n  multi_az = true\n  performance_insights_enabled = true\n  performance_insights_kms_key_id = var.rds_performance_insights_kms_key_id\n  enabled_cloudwatch_logs_exports = [\"postgresql\", \"upgrade\", \"error\", \"general\", \"slowquery\"]\n  monitoring_interval = 60\n  iam_database_authentication_enabled = true\n  auto_minor_version_upgrade = true\n  deletion_protection = true\n  copy_tags_to_snapshot = true\n  parameter_group_name = aws_db_parameter_group.main.name\n  final_snapshot_identifier = \"${var.project_name}-db-final-snapshot\"\n  skip_final_snapshot = false\n\n  tags = var.common_tags\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_61", "ruleIndex": 11, "level": "error", "attachments": [], "message": {"text": "Ensure that an S3 bucket has a lifecycle configuration"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/infrastructure/environments/production/main.tf"}, "region": {"startLine": 335, "endLine": 337, "snippet": {"text": "resource \"aws_s3_bucket\" \"app_data\" {\n  bucket = \"${local.name_prefix}-app-data\"\n}\n"}}}}]}, {"ruleId": "CKV_K8S_13", "ruleIndex": 12, "level": "error", "attachments": [], "message": {"text": "Memory limits should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_12", "ruleIndex": 17, "level": "error", "attachments": [], "message": {"text": "Memory requests should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_14", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Image Tag should be fixed - not latest or blank"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_11", "ruleIndex": 19, "level": "error", "attachments": [], "message": {"text": "CPU limits should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_21", "ruleIndex": 20, "level": "error", "attachments": [], "message": {"text": "The default namespace should not be used"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_9", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Readiness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_10", "ruleIndex": 23, "level": "error", "attachments": [], "message": {"text": "CPU requests should be set"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_8", "ruleIndex": 29, "level": "error", "attachments": [], "message": {"text": "Liveness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/kubernetes_deployment.yaml"}, "region": {"startLine": 1, "endLine": 19, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: production-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: production-app\n  template:\n    metadata:\n      labels:\n        app: production-app\n    spec:\n      containers:\n      - name: app\n        image: production-app:latest\n        ports:\n        - containerPort: 8080\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_14", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Image Tag should be fixed - not latest or blank"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_21", "ruleIndex": 20, "level": "error", "attachments": [], "message": {"text": "The default namespace should not be used"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 1, "endLine": 9, "snippet": {"text": "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: postgres-config\ndata:\n  POSTGRES_DB: \"pixelated_empathy\"\n  POSTGRES_USER: \"postgres\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_21", "ruleIndex": 20, "level": "error", "attachments": [], "message": {"text": "The default namespace should not be used"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 10, "endLine": 19, "snippet": {"text": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: postgres-secrets\ntype: Opaque\nstringData:\n  POSTGRES_PASSWORD: \"pixelated_empathy_prod_2025\"\n  DATABASE_URL: \"postgresql://postgres:pixelated_empathy_prod_2025@postgres-service:5432/pixelated_empathy\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_21", "ruleIndex": 20, "level": "error", "attachments": [], "message": {"text": "The default namespace should not be used"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 21, "endLine": 91, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-database\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          value: \"/var/lib/postgresql/data/pgdata\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_21", "ruleIndex": 20, "level": "error", "attachments": [], "message": {"text": "The default namespace should not be used"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 105, "endLine": 118, "snippet": {"text": "apiVersion: v1\nkind: Service\nmetadata:\n  name: postgres-service\n  labels:\n    app: postgres\nspec:\n  type: ClusterIP\n  ports:\n  - port: 5432\n    targetPort: 5432\n    protocol: TCP\n  selector:\n    app: postgres\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/data-migration-job.yaml"}, "region": {"startLine": 231, "endLine": 299, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: data-migration\n  namespace: pixelated-empathy-data\n  labels:\n    app: data-migration\n    component: migration\nspec:\n  template:\n    metadata:\n      labels:\n        app: data-migration\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: migration\n        image: python:3.11-slim\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Installing dependencies...\"\n          pip install psycopg2-binary requests\n          \n          echo \"Running migration script...\"\n          python /scripts/migrate_conversations.py\n        env:\n        - name: POSTGRES_HOST\n          value: \"postgres-service\"\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: BACKUP_URL\n          value: \"\"  # Set this to your Azure Storage backup URL if needed\n        volumeMounts:\n        - name: migration-scripts\n          mountPath: /scripts\n        - name: data-volume\n          mountPath: /data\n          readOnly: true\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n      volumes:\n      - name: migration-scripts\n        configMap:\n          name: migration-scripts\n          defaultMode: 0755\n      - name: data-volume\n        emptyDir: {}  # Replace with actual data volume or Azure File Share\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 47, "endLine": 131, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres\n    component: database\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        - name: PGDATA\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-config\n              key: PGDATA\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - postgres\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/database-production.yaml"}, "region": {"startLine": 151, "endLine": 229, "snippet": {"text": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-init\n  namespace: pixelated-empathy-data\n  labels:\n    app: postgres-init\n    component: database-init\nspec:\n  template:\n    metadata:\n      labels:\n        app: postgres-init\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: postgres-init\n        image: postgres:15\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Waiting for PostgreSQL to be ready...\"\n          until pg_isready -h postgres-service -p 5432 -U postgres; do\n            echo \"PostgreSQL is not ready yet. Waiting...\"\n            sleep 2\n          done\n          \n          echo \"PostgreSQL is ready. Creating extensions...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"pg_trgm\\\";\n            CREATE EXTENSION IF NOT EXISTS \\\"btree_gin\\\";\n          \"\n          \n          echo \"Creating conversation tables...\"\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres-service -U postgres -d pixelated_empathy -c \"\n            CREATE TABLE IF NOT EXISTS conversations (\n                id VARCHAR PRIMARY KEY,\n                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                category VARCHAR,\n                tier VARCHAR,\n                source VARCHAR,\n                conversation_count INTEGER DEFAULT 1,\n                total_messages INTEGER DEFAULT 0,\n                avg_message_length FLOAT DEFAULT 0.0,\n                quality_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE TABLE IF NOT EXISTS messages (\n                id VARCHAR PRIMARY KEY,\n                conversation_id VARCHAR REFERENCES conversations(id),\n                role VARCHAR NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                word_count INTEGER DEFAULT 0,\n                sentiment_score FLOAT DEFAULT 0.0\n            );\n            \n            CREATE INDEX IF NOT EXISTS idx_conversations_source ON conversations(source);\n            CREATE INDEX IF NOT EXISTS idx_conversations_tier ON conversations(tier);\n            CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);\n            CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);\n          \"\n          \n          echo \"Database initialization completed successfully!\"\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_14", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Image Tag should be fixed - not latest or blank"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 120, "endLine": 189, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: prometheus\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus\n        - name: prometheus-storage\n          mountPath: /prometheus\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: 9090\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: 9090\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_14", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Image Tag should be fixed - not latest or blank"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/monitoring-production.yaml"}, "region": {"startLine": 280, "endLine": 347, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: pixelated-empathy-monitoring\n  labels:\n    app: grafana\n    component: monitoring\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n        component: monitoring\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: grafana\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"pixelated_empathy_admin\"\n        - name: GF_USERS_ALLOW_SIGN_UP\n          value: \"false\"\n        - name: GF_SERVER_ROOT_URL\n          value: \"https://monitoring.pixelatedempathy.tech\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n        - name: grafana-datasources\n          mountPath: /etc/grafana/provisioning/datasources\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: grafana-storage\n        persistentVolumeClaim:\n          claimName: grafana-storage\n      - name: grafana-datasources\n        configMap:\n          name: grafana-datasources\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_14", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Image Tag should be fixed - not latest or blank"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 46, "endLine": 146, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-api\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: api\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"inference.pixelated_empathy_inference\"]\n        args: [\"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DEBUG\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_14", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Image Tag should be fixed - not latest or blank"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_9", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Readiness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_8", "ruleIndex": 29, "level": "error", "attachments": [], "message": {"text": "Liveness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 166, "endLine": 241, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixelated-empathy-pipeline-worker\n  namespace: pixelated-empathy\n  labels:\n    app: pixelated-empathy\n    component: pipeline-worker\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: pixelated-empathy\n      component: pipeline-worker\n  template:\n    metadata:\n      labels:\n        app: pixelated-empathy\n        component: pipeline-worker\n    spec:\n      containers:\n      - name: pipeline-worker\n        image: pixelated-empathy:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"-m\", \"pipelines.process_datasets\"]\n        args: [\"--worker\"]\n        env:\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: ENV\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_HOST\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_PORT\n        - name: DB_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: DB_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: REDIS_PORT\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_9", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Readiness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_8", "ruleIndex": 29, "level": "error", "attachments": [], "message": {"text": "Liveness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 242, "endLine": 272, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixelated-empathy\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_9", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Readiness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_8", "ruleIndex": 29, "level": "error", "attachments": [], "message": {"text": "Liveness Probe Should be Configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 289, "endLine": 341, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: pixelated-empathy\n  labels:\n    app: postgresql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgresql\n  template:\n    metadata:\n      labels:\n        app: postgresql\n    spec:\n      containers:\n      - name: postgresql\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_NAME\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: pixelated-empathy-config\n              key: DB_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: pixelated-empathy-secrets\n              key: DB_PASS\n        volumeMounts:\n        - name: postgresql-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: postgresql-data\n        emptyDir: {}\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_14", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Image Tag should be fixed - not latest or blank"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/postgres.yaml"}, "region": {"startLine": 1, "endLine": 66, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: pixel-voice\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: \"pixel_voice\"\n        - name: POSTGRES_USER\n          value: \"pixel_voice\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - pixel_voice\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_15", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Image Pull Policy should be Always"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/redis.yaml"}, "region": {"startLine": 1, "endLine": 60, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: pixel-voice\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --maxmemory\n        - \"512mb\"\n        - --maxmemory-policy\n        - \"allkeys-lru\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\n"}}}}]}, {"ruleId": "CKV_K8S_30", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Apply security context to your containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_20", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Containers should not run with allowPrivilegeEscalation"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_31", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that the seccomp profile is set to docker/default or runtime/default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_40", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Containers should run as a high UID to avoid host conflict"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_35", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Prefer using secrets as files over secrets as environment variables"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_14", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Image Tag should be fixed - not latest or blank"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_43", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Image should use digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_23", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of root containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_28", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with the NET_RAW capability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_29", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Apply security context to your pods and containers"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_22", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Use read-only filesystem for containers where possible"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_37", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Minimize the admission of containers with capabilities assigned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_K8S_38", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure that Service Account Tokens are only mounted where necessary"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/api-deployment.yaml"}, "region": {"startLine": 1, "endLine": 110, "snippet": {"text": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pixel-voice-api\n  namespace: pixel-voice\n  labels:\n    app: pixel-voice-api\n    component: api\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: pixel-voice-api\n  template:\n    metadata:\n      labels:\n        app: pixel-voice-api\n        component: api\n    spec:\n      containers:\n      - name: api\n        image: pixel-voice:latest\n        imagePullPolicy: Always\n        command: [\"uv\", \"run\", \"python\", \"start_api.py\"]\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: PIXEL_VOICE_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_ENV\n        - name: PIXEL_VOICE_DEBUG\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_DEBUG\n        - name: PIXEL_VOICE_API_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_HOST\n        - name: PIXEL_VOICE_API_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: pixel-voice-config\n              key: PIXEL_VOICE_API_PORT\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: REDIS_URL\n        - name: SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: SECRET_KEY\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: pixel-voice-secrets\n              key: JWT_SECRET\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n        - name: logs-volume\n          mountPath: /app/logs\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-data-pvc\n      - name: logs-volume\n        persistentVolumeClaim:\n          claimName: pixel-voice-logs-pvc\n      \n---\n"}}}}]}, {"ruleId": "CKV_AZURE_189", "ruleIndex": 33, "level": "error", "attachments": [], "message": {"text": "Ensure that Azure Key Vault disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infra/main_backup.json"}, "region": {"startLine": 93, "endLine": 121, "snippet": {"text": "    {\n      \"type\": \"Microsoft.KeyVault/vaults\",\n      \"apiVersion\": \"2015-06-01\",\n      \"name\": \"[format('{0}-kv-{1}', parameters('resourcePrefix'), variables('resourceToken'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"tags\": {\n        \"Environment\": \"[parameters('environmentName')]\",\n        \"Project\": \"PixelatedEmpathy\",\n        \"ManagedBy\": \"AzureDevOps\",\n        \"CreatedDate\": \"[parameters('createdDate')]\"\n      },\n      \"properties\": {\n        \"tenantId\": \"[subscription().tenantId]\",\n        \"sku\": {\n          \"family\": \"A\",\n          \"name\": \"standard\"\n        },\n        \"accessPolicies\": [],\n        \"enabledForDeployment\": true,\n        \"enabledForTemplateDeployment\": true,\n        \"enableSoftDelete\": true,\n        \"enablePurgeProtection\": true,\n        \"softDeleteRetentionInDays\": 7,\n        \"networkAcls\": {\n          \"bypass\": \"AzureServices\",\n          \"defaultAction\": \"Allow\"\n        }\n      }\n    },\n"}}}}]}, {"ruleId": "CKV_AZURE_109", "ruleIndex": 34, "level": "error", "attachments": [], "message": {"text": "Ensure that key vault allows firewall rules settings"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infra/main_backup.json"}, "region": {"startLine": 93, "endLine": 121, "snippet": {"text": "    {\n      \"type\": \"Microsoft.KeyVault/vaults\",\n      \"apiVersion\": \"2015-06-01\",\n      \"name\": \"[format('{0}-kv-{1}', parameters('resourcePrefix'), variables('resourceToken'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"tags\": {\n        \"Environment\": \"[parameters('environmentName')]\",\n        \"Project\": \"PixelatedEmpathy\",\n        \"ManagedBy\": \"AzureDevOps\",\n        \"CreatedDate\": \"[parameters('createdDate')]\"\n      },\n      \"properties\": {\n        \"tenantId\": \"[subscription().tenantId]\",\n        \"sku\": {\n          \"family\": \"A\",\n          \"name\": \"standard\"\n        },\n        \"accessPolicies\": [],\n        \"enabledForDeployment\": true,\n        \"enabledForTemplateDeployment\": true,\n        \"enableSoftDelete\": true,\n        \"enablePurgeProtection\": true,\n        \"softDeleteRetentionInDays\": 7,\n        \"networkAcls\": {\n          \"bypass\": \"AzureServices\",\n          \"defaultAction\": \"Allow\"\n        }\n      }\n    },\n"}}}}]}, {"ruleId": "CKV_AZURE_166", "ruleIndex": 35, "level": "error", "attachments": [], "message": {"text": "Ensure container image quarantine, scan, and mark images verified"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infra/main_backup.json"}, "region": {"startLine": 122, "endLine": 141, "snippet": {"text": "    {\n      \"type\": \"Microsoft.ContainerRegistry/registries\",\n      \"apiVersion\": \"2017-10-01\",\n      \"name\": \"pixelatedcr\",\n      \"location\": \"[parameters('location')]\",\n      \"tags\": {\n        \"Environment\": \"[parameters('environmentName')]\",\n        \"Project\": \"PixelatedEmpathy\",\n        \"ManagedBy\": \"AzureDevOps\",\n        \"CreatedDate\": \"[parameters('createdDate')]\"\n      },\n      \"sku\": {\n        \"name\": \"Standard\"\n      },\n      \"properties\": {\n        \"adminUserEnabled\": false,\n        \"publicNetworkAccess\": \"Disabled\",\n        \"dataEndpointEnabled\": false\n      }\n    },\n"}}}}]}, {"ruleId": "CKV_AZURE_189", "ruleIndex": 33, "level": "error", "attachments": [], "message": {"text": "Ensure that Azure Key Vault disables public network access"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infra/main.json"}, "region": {"startLine": 44, "endLine": 123, "snippet": {"text": "    \"commonTags\": {\n      \"Environment\": \"[parameters('environmentName')]\",\n      \"Project\": \"PixelatedEmpathy\",\n      \"ManagedBy\": \"AzureDevOps\",\n      \"CreatedDate\": \"[parameters('createdDate')]\",\n      \"azd-env-name\": \"[parameters('environmentName')]\"\n    }\n  },\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Resources/tags\",\n      \"apiVersion\": \"2021-04-01\",\n      \"name\": \"default\",\n      \"properties\": {\n        \"tags\": {\n          \"azd-env-name\": \"[parameters('environmentName')]\",\n          \"Environment\": \"[parameters('environmentName')]\",\n          \"Project\": \"PixelatedEmpathy\",\n          \"ManagedBy\": \"AzureDevOps\",\n          \"CreatedDate\": \"[parameters('createdDate')]\"\n        }\n      }\n    },\n    {\n      \"type\": \"Microsoft.OperationalInsights/workspaces\",\n      \"apiVersion\": \"2022-10-01\",\n      \"name\": \"[format('{0}-logs', variables('baseName'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"tags\": \"[variables('commonTags')]\",\n      \"properties\": {\n        \"sku\": {\n          \"name\": \"PerGB2018\"\n        },\n        \"retentionInDays\": 30,\n        \"workspaceCapping\": {\n          \"dailyQuotaGb\": 1\n        }\n      }\n    },\n    {\n      \"type\": \"Microsoft.Insights/components\",\n      \"apiVersion\": \"2020-02-02\",\n      \"name\": \"[format('{0}-insights', variables('baseName'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"kind\": \"web\",\n      \"tags\": \"[variables('commonTags')]\",\n      \"properties\": {\n        \"Application_Type\": \"web\",\n        \"WorkspaceResourceId\": \"[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-logs', variables('baseName')))]\",\n        \"DisableIpMasking\": false,\n        \"DisableLocalAuth\": false\n      },\n      \"dependsOn\": [\n        \"[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-logs', variables('baseName')))]\"\n      ]\n    },\n    {\n      \"type\": \"Microsoft.KeyVault/vaults\",\n      \"apiVersion\": \"2023-02-01\",\n      \"name\": \"[format('{0}-vault', variables('baseName'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"tags\": \"[variables('commonTags')]\",\n      \"properties\": {\n        \"tenantId\": \"[subscription().tenantId]\",\n        \"sku\": {\n          \"family\": \"A\",\n          \"name\": \"standard\"\n        },\n        \"accessPolicies\": [],\n        \"enabledForDeployment\": true,\n        \"enabledForTemplateDeployment\": true,\n        \"enableSoftDelete\": true,\n        \"enablePurgeProtection\": true,\n        \"softDeleteRetentionInDays\": 7,\n        \"networkAcls\": {\n          \"bypass\": \"AzureServices\",\n          \"defaultAction\": \"Allow\"\n        }\n      }\n    },\n"}}}}]}, {"ruleId": "CKV_AZURE_109", "ruleIndex": 34, "level": "error", "attachments": [], "message": {"text": "Ensure that key vault allows firewall rules settings"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infra/main.json"}, "region": {"startLine": 44, "endLine": 123, "snippet": {"text": "    \"commonTags\": {\n      \"Environment\": \"[parameters('environmentName')]\",\n      \"Project\": \"PixelatedEmpathy\",\n      \"ManagedBy\": \"AzureDevOps\",\n      \"CreatedDate\": \"[parameters('createdDate')]\",\n      \"azd-env-name\": \"[parameters('environmentName')]\"\n    }\n  },\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Resources/tags\",\n      \"apiVersion\": \"2021-04-01\",\n      \"name\": \"default\",\n      \"properties\": {\n        \"tags\": {\n          \"azd-env-name\": \"[parameters('environmentName')]\",\n          \"Environment\": \"[parameters('environmentName')]\",\n          \"Project\": \"PixelatedEmpathy\",\n          \"ManagedBy\": \"AzureDevOps\",\n          \"CreatedDate\": \"[parameters('createdDate')]\"\n        }\n      }\n    },\n    {\n      \"type\": \"Microsoft.OperationalInsights/workspaces\",\n      \"apiVersion\": \"2022-10-01\",\n      \"name\": \"[format('{0}-logs', variables('baseName'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"tags\": \"[variables('commonTags')]\",\n      \"properties\": {\n        \"sku\": {\n          \"name\": \"PerGB2018\"\n        },\n        \"retentionInDays\": 30,\n        \"workspaceCapping\": {\n          \"dailyQuotaGb\": 1\n        }\n      }\n    },\n    {\n      \"type\": \"Microsoft.Insights/components\",\n      \"apiVersion\": \"2020-02-02\",\n      \"name\": \"[format('{0}-insights', variables('baseName'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"kind\": \"web\",\n      \"tags\": \"[variables('commonTags')]\",\n      \"properties\": {\n        \"Application_Type\": \"web\",\n        \"WorkspaceResourceId\": \"[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-logs', variables('baseName')))]\",\n        \"DisableIpMasking\": false,\n        \"DisableLocalAuth\": false\n      },\n      \"dependsOn\": [\n        \"[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-logs', variables('baseName')))]\"\n      ]\n    },\n    {\n      \"type\": \"Microsoft.KeyVault/vaults\",\n      \"apiVersion\": \"2023-02-01\",\n      \"name\": \"[format('{0}-vault', variables('baseName'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"tags\": \"[variables('commonTags')]\",\n      \"properties\": {\n        \"tenantId\": \"[subscription().tenantId]\",\n        \"sku\": {\n          \"family\": \"A\",\n          \"name\": \"standard\"\n        },\n        \"accessPolicies\": [],\n        \"enabledForDeployment\": true,\n        \"enabledForTemplateDeployment\": true,\n        \"enableSoftDelete\": true,\n        \"enablePurgeProtection\": true,\n        \"softDeleteRetentionInDays\": 7,\n        \"networkAcls\": {\n          \"bypass\": \"AzureServices\",\n          \"defaultAction\": \"Allow\"\n        }\n      }\n    },\n"}}}}]}, {"ruleId": "CKV_AZURE_166", "ruleIndex": 35, "level": "error", "attachments": [], "message": {"text": "Ensure container image quarantine, scan, and mark images verified"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infra/main.json"}, "region": {"startLine": 44, "endLine": 138, "snippet": {"text": "    \"commonTags\": {\n      \"Environment\": \"[parameters('environmentName')]\",\n      \"Project\": \"PixelatedEmpathy\",\n      \"ManagedBy\": \"AzureDevOps\",\n      \"CreatedDate\": \"[parameters('createdDate')]\",\n      \"azd-env-name\": \"[parameters('environmentName')]\"\n    }\n  },\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Resources/tags\",\n      \"apiVersion\": \"2021-04-01\",\n      \"name\": \"default\",\n      \"properties\": {\n        \"tags\": {\n          \"azd-env-name\": \"[parameters('environmentName')]\",\n          \"Environment\": \"[parameters('environmentName')]\",\n          \"Project\": \"PixelatedEmpathy\",\n          \"ManagedBy\": \"AzureDevOps\",\n          \"CreatedDate\": \"[parameters('createdDate')]\"\n        }\n      }\n    },\n    {\n      \"type\": \"Microsoft.OperationalInsights/workspaces\",\n      \"apiVersion\": \"2022-10-01\",\n      \"name\": \"[format('{0}-logs', variables('baseName'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"tags\": \"[variables('commonTags')]\",\n      \"properties\": {\n        \"sku\": {\n          \"name\": \"PerGB2018\"\n        },\n        \"retentionInDays\": 30,\n        \"workspaceCapping\": {\n          \"dailyQuotaGb\": 1\n        }\n      }\n    },\n    {\n      \"type\": \"Microsoft.Insights/components\",\n      \"apiVersion\": \"2020-02-02\",\n      \"name\": \"[format('{0}-insights', variables('baseName'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"kind\": \"web\",\n      \"tags\": \"[variables('commonTags')]\",\n      \"properties\": {\n        \"Application_Type\": \"web\",\n        \"WorkspaceResourceId\": \"[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-logs', variables('baseName')))]\",\n        \"DisableIpMasking\": false,\n        \"DisableLocalAuth\": false\n      },\n      \"dependsOn\": [\n        \"[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-logs', variables('baseName')))]\"\n      ]\n    },\n    {\n      \"type\": \"Microsoft.KeyVault/vaults\",\n      \"apiVersion\": \"2023-02-01\",\n      \"name\": \"[format('{0}-vault', variables('baseName'))]\",\n      \"location\": \"[parameters('location')]\",\n      \"tags\": \"[variables('commonTags')]\",\n      \"properties\": {\n        \"tenantId\": \"[subscription().tenantId]\",\n        \"sku\": {\n          \"family\": \"A\",\n          \"name\": \"standard\"\n        },\n        \"accessPolicies\": [],\n        \"enabledForDeployment\": true,\n        \"enabledForTemplateDeployment\": true,\n        \"enableSoftDelete\": true,\n        \"enablePurgeProtection\": true,\n        \"softDeleteRetentionInDays\": 7,\n        \"networkAcls\": {\n          \"bypass\": \"AzureServices\",\n          \"defaultAction\": \"Allow\"\n        }\n      }\n    },\n    {\n      \"type\": \"Microsoft.ContainerRegistry/registries\",\n      \"apiVersion\": \"2023-07-01\",\n      \"name\": \"[variables('uniqueBaseName')]\",\n      \"location\": \"[parameters('location')]\",\n      \"tags\": \"[variables('commonTags')]\",\n      \"sku\": {\n        \"name\": \"Standard\"\n      },\n      \"properties\": {\n        \"adminUserEnabled\": false,\n        \"publicNetworkAccess\": \"Disabled\",\n        \"dataEndpointEnabled\": false\n      }\n    },\n"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/back/Dockerfile"}, "region": {"startLine": 1, "endLine": 85, "snippet": {"text": "# Multi-stage Dockerfile for Pixelated Empathy AI\n# Build stage\nFROM python:3.11-slim as builder\n\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    gcc \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && pip install uv\n\n# Set working directory\nWORKDIR /app\n\n# Copy project configuration\nCOPY pyproject.toml ./\n\n# Create virtual environment and install dependencies\nRUN uv venv .venv\nENV VIRTUAL_ENV=/app/.venv\nENV PATH=/app/.venv/bin:$PATH\n\n# Install dependencies using uv\nRUN uv sync\n\n# Production stage\nFROM python:3.11-slim\n\n# Set environment variables\nENV PYTHONUNBUFFERED=1\nENV PYTHONDONTWRITEBYTECODE=1\nENV UV_CACHE_DIR=/tmp/uv-cache\n\n# Install runtime dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ffmpeg \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && curl -LsSf https://astral.sh/uv/install.sh | sh \\\n    && echo PATH=\"/root/.cargo/bin:$PATH\"\n\n# Install uv in production image\nENV PATH=\"/root/.cargo/bin:$PATH\"\n\n# Create app directory\nWORKDIR /app\n\n# Copy virtual environment from builder stage\nCOPY --from=builder /app/.venv /app/.venv\n\n# Activate virtual environment\nENV VIRTUAL_ENV=/app/.venv\nENV PATH=/app/.venv/bin:$PATH\n\n# Copy application code\nCOPY . .\n\n# Create necessary directories\nRUN mkdir -p data/processed \\\n    data/batch_processing \\\n    models/checkpoints \\\n    logs \\\n    reports\n\n# Expose ports\nEXPOSE 8000 8001\n\n# Create entrypoint script\nRUN echo '#!/bin/bash\\n\\\nif [ \"$1\" = \"train\" ]; then\\n\\\n    uv run python -m training.train_pixelated_empathy \"$@\"\\n\\\nelif [ \"$1\" = \"inference\" ]; then\\n\\\n    uv run python -m inference.pixelated_empathy_inference \"$@\"\\n\\\nelif [ \"$1\" = \"pipeline\" ]; then\\n\\\n    uv run python -m pipelines.process_datasets \"$@\"\\n\\\nelif [ \"$1\" = \"api\" ]; then\\n\\\n    uv run python -m inference.api.main \"$@\"\\n\\\nelse\\n\\\n    echo \"Usage: docker run <image> [train|inference|pipeline|api] [args...]\"\\n\\\n    exit 1\\n\\\nfi' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh\n\n# Set entrypoint\nENTRYPOINT [\"/app/entrypoint.sh\"]\nCMD [\"api\"]\nUSER nobody"}}}}]}, {"ruleId": "CKV_DOCKER_6", "ruleIndex": 37, "level": "error", "attachments": [], "message": {"text": "Ensure that LABEL maintainer is used instead of MAINTAINER (deprecated)"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/datasets/counsel-chat/docker/Dockerfile"}, "region": {"startLine": 3, "endLine": 3, "snippet": {"text": "MAINTAINER Loreto Parisi loretoparisi@gmail.com\n"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/datasets/counsel-chat/docker/Dockerfile"}, "region": {"startLine": 1, "endLine": 37, "snippet": {"text": "FROM ubuntu:18.04\n\nMAINTAINER Loreto Parisi loretoparisi@gmail.com\n\n########################################  BASE SYSTEM\n# set noninteractive installation\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y apt-utils\nRUN apt-get install -y --no-install-recommends \\\n    build-essential \\\n    pkg-config \\\n    tzdata \\\n    curl\n\n######################################## PYTHON3\nRUN apt-get install -y \\\n    python3 \\\n    python3-pip\n\n# set local timezone\nRUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && \\\n    dpkg-reconfigure --frontend noninteractive tzdata\n\n# transfer-learning-conv-ai\nENV PYTHONPATH /usr/local/lib/python3.6\nCOPY . .\nCOPY docker/requirements.txt /tmp/requirements.txt\nRUN pip3 install --upgrade pip && pip3 install -r /tmp/requirements.txt\n\n# model zoo\nRUN mkdir models && \\\n    curl https://s3.amazonaws.com/models.huggingface.co/transfer-learning-chatbot/finetuned_chatbot_gpt.tar.gz > models/finetuned_chatbot_gpt.tar.gz && \\\n    cd models/ && \\\n    tar -xvzf finetuned_chatbot_gpt.tar.gz && \\\n    rm finetuned_chatbot_gpt.tar.gz\n    \nCMD [\"bash\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 38, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/datasets/counsel-chat/docker/Dockerfile"}, "region": {"startLine": 1, "endLine": 37, "snippet": {"text": "FROM ubuntu:18.04\n\nMAINTAINER Loreto Parisi loretoparisi@gmail.com\n\n########################################  BASE SYSTEM\n# set noninteractive installation\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y apt-utils\nRUN apt-get install -y --no-install-recommends \\\n    build-essential \\\n    pkg-config \\\n    tzdata \\\n    curl\n\n######################################## PYTHON3\nRUN apt-get install -y \\\n    python3 \\\n    python3-pip\n\n# set local timezone\nRUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && \\\n    dpkg-reconfigure --frontend noninteractive tzdata\n\n# transfer-learning-conv-ai\nENV PYTHONPATH /usr/local/lib/python3.6\nCOPY . .\nCOPY docker/requirements.txt /tmp/requirements.txt\nRUN pip3 install --upgrade pip && pip3 install -r /tmp/requirements.txt\n\n# model zoo\nRUN mkdir models && \\\n    curl https://s3.amazonaws.com/models.huggingface.co/transfer-learning-chatbot/finetuned_chatbot_gpt.tar.gz > models/finetuned_chatbot_gpt.tar.gz && \\\n    cd models/ && \\\n    tar -xvzf finetuned_chatbot_gpt.tar.gz && \\\n    rm finetuned_chatbot_gpt.tar.gz\n    \nCMD [\"bash\"]"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/Dockerfile"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "# syntax=docker/dockerfile:1\n\nFROM nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04\nLABEL maintainer=\"convlab\"\n\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update\nRUN apt-get install -y python3.8 python3-pip build-essential\nRUN pip install --no-cache-dir --upgrade pip\n\nWORKDIR /root\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple\nRUN [ \"python3\", \"-c\", \"import nltk; nltk.download('stopwords'); nltk.download('punkt'); nltk.download('wordnet')\" ]\n\nCOPY . .\nRUN pip install -e .\n\nRUN ln -f -s /usr/bin/python3 /usr/bin/python\n\nCMD [\"/bin/bash\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 38, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/Dockerfile"}, "region": {"startLine": 1, "endLine": 22, "snippet": {"text": "# syntax=docker/dockerfile:1\n\nFROM nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04\nLABEL maintainer=\"convlab\"\n\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update\nRUN apt-get install -y python3.8 python3-pip build-essential\nRUN pip install --no-cache-dir --upgrade pip\n\nWORKDIR /root\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple\nRUN [ \"python3\", \"-c\", \"import nltk; nltk.download('stopwords'); nltk.download('punkt'); nltk.download('wordnet')\" ]\n\nCOPY . .\nRUN pip install -e .\n\nRUN ln -f -s /usr/bin/python3 /usr/bin/python\n\nCMD [\"/bin/bash\"]"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/Dockerfile"}, "region": {"startLine": 1, "endLine": 63, "snippet": {"text": "# Dockerfile for Pixel Voice API and MCP Server using uv\nFROM python:3.11-slim\n\n# Set environment variables\nENV PYTHONUNBUFFERED=1\nENV PYTHONDONTWRITEBYTECODE=1\nENV PIXEL_VOICE_ENV=production\nENV UV_CACHE_DIR=/tmp/uv-cache\n\n# Install system dependencies including uv\nRUN apt-get update && apt-get install -y \\\n    ffmpeg \\\n    git \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install uv\nRUN curl -LsSf https://astral.sh/uv/install.sh | sh\nENV PATH=\"/root/.cargo/bin:$PATH\"\n\n# Create app directory\nWORKDIR /app\n\n# Copy project configuration first for better caching\nCOPY pyproject.toml .\nCOPY requirements_api.txt .\nCOPY requirements/pixel_voice_pipeline.txt ./requirements/\n\n# Create virtual environment and install dependencies using uv\nRUN uv venv .venv\nENV VIRTUAL_ENV=/app/.venv\nENV PATH=\"/app/.venv/bin:$PATH\"\n\n# Install dependencies using uv\nRUN uv pip install -e .\nRUN uv pip install -r requirements/pixel_voice_pipeline.txt\n\n# Copy application code\nCOPY . .\n\n# Create necessary directories\nRUN mkdir -p data/voice_raw data/voice_segments data/voice_transcripts \\\n    data/voice_transcripts_filtered data/voice_features data/dialogue_pairs \\\n    data/therapeutic_pairs data/voice_consistency data/voice_optimized \\\n    logs reports\n\n# Expose ports\nEXPOSE 8000 8001\n\n# Create startup script using uv\nRUN echo '#!/bin/bash\\n\\\nif [ \"$1\" = \"api\" ]; then\\n\\\n    uv run python start_api.py\\n\\\nelif [ \"$1\" = \"mcp\" ]; then\\n\\\n    uv run python start_mcp.py\\n\\\nelse\\n\\\n    echo \"Usage: docker run <image> [api|mcp]\"\\n\\\n    exit 1\\n\\\nfi' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh\n\n# Set entrypoint\nENTRYPOINT [\"/app/entrypoint.sh\"]\nCMD [\"api\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 38, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/Dockerfile"}, "region": {"startLine": 1, "endLine": 63, "snippet": {"text": "# Dockerfile for Pixel Voice API and MCP Server using uv\nFROM python:3.11-slim\n\n# Set environment variables\nENV PYTHONUNBUFFERED=1\nENV PYTHONDONTWRITEBYTECODE=1\nENV PIXEL_VOICE_ENV=production\nENV UV_CACHE_DIR=/tmp/uv-cache\n\n# Install system dependencies including uv\nRUN apt-get update && apt-get install -y \\\n    ffmpeg \\\n    git \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install uv\nRUN curl -LsSf https://astral.sh/uv/install.sh | sh\nENV PATH=\"/root/.cargo/bin:$PATH\"\n\n# Create app directory\nWORKDIR /app\n\n# Copy project configuration first for better caching\nCOPY pyproject.toml .\nCOPY requirements_api.txt .\nCOPY requirements/pixel_voice_pipeline.txt ./requirements/\n\n# Create virtual environment and install dependencies using uv\nRUN uv venv .venv\nENV VIRTUAL_ENV=/app/.venv\nENV PATH=\"/app/.venv/bin:$PATH\"\n\n# Install dependencies using uv\nRUN uv pip install -e .\nRUN uv pip install -r requirements/pixel_voice_pipeline.txt\n\n# Copy application code\nCOPY . .\n\n# Create necessary directories\nRUN mkdir -p data/voice_raw data/voice_segments data/voice_transcripts \\\n    data/voice_transcripts_filtered data/voice_features data/dialogue_pairs \\\n    data/therapeutic_pairs data/voice_consistency data/voice_optimized \\\n    logs reports\n\n# Expose ports\nEXPOSE 8000 8001\n\n# Create startup script using uv\nRUN echo '#!/bin/bash\\n\\\nif [ \"$1\" = \"api\" ]; then\\n\\\n    uv run python start_api.py\\n\\\nelif [ \"$1\" = \"mcp\" ]; then\\n\\\n    uv run python start_mcp.py\\n\\\nelse\\n\\\n    echo \"Usage: docker run <image> [api|mcp]\"\\n\\\n    exit 1\\n\\\nfi' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh\n\n# Set entrypoint\nENTRYPOINT [\"/app/entrypoint.sh\"]\nCMD [\"api\"]"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/Dockerfile"}, "region": {"startLine": 1, "endLine": 5, "snippet": {"text": "FROM python:3.9\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 38, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/Dockerfile"}, "region": {"startLine": 1, "endLine": 5, "snippet": {"text": "FROM python:3.9\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]"}}}}]}, {"ruleId": "CKV_DOCKER_2", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure that HEALTHCHECK instructions have been added to container images"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/Dockerfile"}, "region": {"startLine": 1, "endLine": 63, "snippet": {"text": "# Dockerfile for Pixel Voice API and MCP Server using uv\nFROM python:3.11-slim\n\n# Set environment variables\nENV PYTHONUNBUFFERED=1\nENV PYTHONDONTWRITEBYTECODE=1\nENV PIXEL_VOICE_ENV=production\nENV UV_CACHE_DIR=/tmp/uv-cache\n\n# Install system dependencies including uv\nRUN apt-get update && apt-get install -y \\\n    ffmpeg \\\n    git \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install uv\nRUN curl -LsSf https://astral.sh/uv/install.sh | sh\nENV PATH=\"/root/.cargo/bin:$PATH\"\n\n# Create app directory\nWORKDIR /app\n\n# Copy project configuration first for better caching\nCOPY pyproject.toml .\nCOPY requirements_api.txt .\nCOPY requirements/pixel_voice_pipeline.txt ./requirements/\n\n# Create virtual environment and install dependencies using uv\nRUN uv venv .venv\nENV VIRTUAL_ENV=/app/.venv\nENV PATH=\"/app/.venv/bin:$PATH\"\n\n# Install dependencies using uv\nRUN uv pip install -e .\nRUN uv pip install -r requirements/pixel_voice_pipeline.txt\n\n# Copy application code\nCOPY . .\n\n# Create necessary directories\nRUN mkdir -p data/voice_raw data/voice_segments data/voice_transcripts \\\n    data/voice_transcripts_filtered data/voice_features data/dialogue_pairs \\\n    data/therapeutic_pairs data/voice_consistency data/voice_optimized \\\n    logs reports\n\n# Expose ports\nEXPOSE 8000 8001\n\n# Create startup script using uv\nRUN echo '#!/bin/bash\\n\\\nif [ \"$1\" = \"api\" ]; then\\n\\\n    uv run python start_api.py\\n\\\nelif [ \"$1\" = \"mcp\" ]; then\\n\\\n    uv run python start_mcp.py\\n\\\nelse\\n\\\n    echo \"Usage: docker run <image> [api|mcp]\"\\n\\\n    exit 1\\n\\\nfi' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh\n\n# Set entrypoint\nENTRYPOINT [\"/app/entrypoint.sh\"]\nCMD [\"api\"]"}}}}]}, {"ruleId": "CKV_DOCKER_3", "ruleIndex": 38, "level": "error", "attachments": [], "message": {"text": "Ensure that a user for the container has been created"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/Dockerfile"}, "region": {"startLine": 1, "endLine": 63, "snippet": {"text": "# Dockerfile for Pixel Voice API and MCP Server using uv\nFROM python:3.11-slim\n\n# Set environment variables\nENV PYTHONUNBUFFERED=1\nENV PYTHONDONTWRITEBYTECODE=1\nENV PIXEL_VOICE_ENV=production\nENV UV_CACHE_DIR=/tmp/uv-cache\n\n# Install system dependencies including uv\nRUN apt-get update && apt-get install -y \\\n    ffmpeg \\\n    git \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install uv\nRUN curl -LsSf https://astral.sh/uv/install.sh | sh\nENV PATH=\"/root/.cargo/bin:$PATH\"\n\n# Create app directory\nWORKDIR /app\n\n# Copy project configuration first for better caching\nCOPY pyproject.toml .\nCOPY requirements_api.txt .\nCOPY requirements/pixel_voice_pipeline.txt ./requirements/\n\n# Create virtual environment and install dependencies using uv\nRUN uv venv .venv\nENV VIRTUAL_ENV=/app/.venv\nENV PATH=\"/app/.venv/bin:$PATH\"\n\n# Install dependencies using uv\nRUN uv pip install -e .\nRUN uv pip install -r requirements/pixel_voice_pipeline.txt\n\n# Copy application code\nCOPY . .\n\n# Create necessary directories\nRUN mkdir -p data/voice_raw data/voice_segments data/voice_transcripts \\\n    data/voice_transcripts_filtered data/voice_features data/dialogue_pairs \\\n    data/therapeutic_pairs data/voice_consistency data/voice_optimized \\\n    logs reports\n\n# Expose ports\nEXPOSE 8000 8001\n\n# Create startup script using uv\nRUN echo '#!/bin/bash\\n\\\nif [ \"$1\" = \"api\" ]; then\\n\\\n    uv run python start_api.py\\n\\\nelif [ \"$1\" = \"mcp\" ]; then\\n\\\n    uv run python start_mcp.py\\n\\\nelse\\n\\\n    echo \"Usage: docker run <image> [api|mcp]\"\\n\\\n    exit 1\\n\\\nfi' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh\n\n# Set entrypoint\nENTRYPOINT [\"/app/entrypoint.sh\"]\nCMD [\"api\"]"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/api/phase3_completion_report_20250822_001708.json"}, "region": {"startLine": 172, "endLine": 173, "snippet": {"text": "            \"secrets_management\": \"Do**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/config/mcp.json"}, "region": {"startLine": 33, "endLine": 34, "snippet": {"text": "        \"OPENMEMORY_API_KEY\": \"om-8u4**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/config/production/production_config/monitoring.json"}, "region": {"startLine": 12, "endLine": 13, "snippet": {"text": "    \"admin_password\": \"d1-Gn**********\"\n"}}}}]}, {"ruleId": "CKV_SECRET_4", "ruleIndex": 40, "level": "error", "attachments": [], "message": {"text": "Basic Auth Credentials"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/docs/deployment_integration_guides.json"}, "region": {"startLine": 298, "endLine": 299, "snippet": {"text": "          \"configuration\": \"DATABASE_URL=postgresql://user:p**********@host:5432/dbname\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 16, "endLine": 17, "snippet": {"text": "  POSTGRES_PASSWORD: \"pixela**********\"\n"}}}}]}, {"ruleId": "CKV_SECRET_4", "ruleIndex": 40, "level": "error", "attachments": [], "message": {"text": "Basic Auth Credentials"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/azure/container-apps-database.yaml"}, "region": {"startLine": 17, "endLine": 18, "snippet": {"text": "  DATABASE_URL: \"postgresql://postgres:pixela**********@postgres-service:5432/pixelated_empathy\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/helm/pixelated-empathy/values.yaml"}, "region": {"startLine": 57, "endLine": 58, "snippet": {"text": "      adminPasswordKey: post**********\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 41, "endLine": 42, "snippet": {"text": "  DB_PASS: \"cGF**********\"  # password\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 42, "endLine": 43, "snippet": {"text": "  SECRET_KEY: \"eW91c**********\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/core-components.yaml"}, "region": {"startLine": 43, "endLine": 44, "snippet": {"text": "  JWT_SECRET: \"and3**********\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/k8s/ingress-production.yaml"}, "region": {"startLine": 12, "endLine": 13, "snippet": {"text": "    nginx.ingress.kubernetes.io/auth-secret: mon**********\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/production_deployment/monitoring_config.json"}, "region": {"startLine": 12, "endLine": 13, "snippet": {"text": "    \"admin_password\": \"d1-Gn**********\"\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-1B-redpajama.json"}, "region": {"startLine": 40, "endLine": 41, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-30B-bf16.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-30B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-7B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-1B-redpajama.json"}, "region": {"startLine": 40, "endLine": 41, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-30B-bf16.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-30B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-7B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/MERTools/MER2025/MER2025_Track23/Otter/otter/utils/Otter-MPT7B-config.json"}, "region": {"startLine": 101, "endLine": 102, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-1B-redpajama.json"}, "region": {"startLine": 40, "endLine": 41, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-30B-bf16.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-30B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-7B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-1B-redpajama.json"}, "region": {"startLine": 40, "endLine": 41, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-30B-bf16.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-30B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-7B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/models/third_party/MERTools/MER2025/MER2025_Track23/Otter/otter/utils/Otter-MPT7B-config.json"}, "region": {"startLine": 101, "endLine": 102, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/configmap.yaml"}, "region": {"startLine": 28, "endLine": 29, "snippet": {"text": "  SECRET_KEY: eW91ci**********\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/k8s/configmap.yaml"}, "region": {"startLine": 29, "endLine": 30, "snippet": {"text": "  JWT_SECRET: eW91ci**********\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel/utils/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-1B-redpajama.json"}, "region": {"startLine": 40, "endLine": 41, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel/utils/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-30B-bf16.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel/utils/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-30B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel/utils/MERTools/MER2025/MER2025_Track23/Otter/flamingo/flamingo-mpt-7B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel/utils/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-1B-redpajama.json"}, "region": {"startLine": 40, "endLine": 41, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel/utils/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-30B-bf16.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel/utils/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-30B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel/utils/MERTools/MER2025/MER2025_Track23/Otter/flamingo/utils/flamingo-mpt-7B.json"}, "region": {"startLine": 99, "endLine": 100, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel/utils/MERTools/MER2025/MER2025_Track23/Otter/otter/utils/Otter-MPT7B-config.json"}, "region": {"startLine": 101, "endLine": 102, "snippet": {"text": "    \"tokenizer_name\": \"Eleut**********\",\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/configmap.yaml"}, "region": {"startLine": 28, "endLine": 29, "snippet": {"text": "  SECRET_KEY: eW91ci**********\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/k8s/configmap.yaml"}, "region": {"startLine": 29, "endLine": 30, "snippet": {"text": "  JWT_SECRET: eW91ci**********\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/configmap.yaml"}, "region": {"startLine": 28, "endLine": 29, "snippet": {"text": "  SECRET_KEY: eW91ci**********\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/k8s/configmap.yaml"}, "region": {"startLine": 29, "endLine": 30, "snippet": {"text": "  JWT_SECRET: eW91ci**********\n"}}}}]}, {"ruleId": "CKV_SECRET_6", "ruleIndex": 39, "level": "error", "attachments": [], "message": {"text": "Base64 High Entropy String"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/training/models/pixelated_ai_v1/tokenizer_config.json"}, "region": {"startLine": 21, "endLine": 22, "snippet": {"text": "  \"tokenizer_class\": \"GPT**********\",\n"}}}}]}, {"ruleId": "CKV2_GHA_1", "ruleIndex": 41, "level": "error", "attachments": [], "message": {"text": "Ensure top-level permissions are not set to write-all"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_ai.egg-info/pixel_voice/.github/workflows/ci-cd.yml"}, "region": {"startLine": 80, "endLine": 81, "snippet": {"text": ""}}}}]}, {"ruleId": "CKV2_GHA_1", "ruleIndex": 41, "level": "error", "attachments": [], "message": {"text": "Ensure top-level permissions are not set to write-all"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/inference/deployment/production_deployment/.github/workflows/deploy.yml"}, "region": {"startLine": 1, "endLine": 1, "snippet": {"text": ""}}}}]}, {"ruleId": "CKV2_GHA_1", "ruleIndex": 41, "level": "error", "attachments": [], "message": {"text": "Ensure top-level permissions are not set to write-all"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pixel_voice/.github/workflows/ci-cd.yml"}, "region": {"startLine": 80, "endLine": 81, "snippet": {"text": ""}}}}]}, {"ruleId": "CKV2_GHA_1", "ruleIndex": 41, "level": "error", "attachments": [], "message": {"text": "Ensure top-level permissions are not set to write-all"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/pipelines/pixel_voice/.github/workflows/ci-cd.yml"}, "region": {"startLine": 80, "endLine": 81, "snippet": {"text": ""}}}}]}, {"ruleId": "CKV_AZURE_166", "ruleIndex": 35, "level": "error", "attachments": [], "message": {"text": "Ensure container image quarantine, scan, and mark images verified"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infra/main.bicep"}, "region": {"startLine": 7, "endLine": 36, "snippet": {"text": "resource acr 'Microsoft.ContainerRegistry/registries@2023-01-01-preview' = {\n  name: containerRegistryName\n  location: azureLocation\n  sku: {\n    name: 'Standard'\n  }\n  properties: {\n    adminUserEnabled: false\n    publicNetworkAccess: 'Disabled'\n    quarantinePolicy: {\n      status: 'enabled'\n    }\n    trustPolicy: {\n      type: 'Notary'\n      status: 'enabled'\n    }\n    retentionPolicy: {\n      days: 7\n      status: 'enabled'\n    }\n    policies: {\n      azureADAuthenticationAsArmPolicy: {\n        status: 'enabled'\n      }\n      exportPolicy: {\n        status: 'enabled'\n      }\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AZURE_212", "ruleIndex": 42, "level": "error", "attachments": [], "message": {"text": "Ensure App Service has a minimum number of instances for failover"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infra/main.bicep"}, "region": {"startLine": 143, "endLine": 186, "snippet": {"text": "resource appService 'Microsoft.Web/sites@2023-01-01' = {\n  name: appServiceName\n  location: azureLocation\n  kind: 'app,linux,container'\n  properties: {\n    serverFarmId: appServicePlan.id\n    httpsOnly: true\n    clientCertEnabled: true\n    publicNetworkAccess: 'Disabled'\n    siteConfig: {\n      minTlsVersion: '1.2'\n      http20Enabled: true\n      appSettings: [\n        {\n          name: 'NODE_ENV'\n          value: environment\n        }\n        {\n          name: 'PORT'\n          value: '3000'\n        }\n        {\n          name: 'WEBSITES_PORT'\n          value: '3000'\n        }\n        {\n          name: 'WEBSITES_ENABLE_APP_SERVICE_STORAGE'\n          value: 'false'\n        }\n        {\n          name: 'DOCKER_REGISTRY_SERVER_URL'\n          value: 'https://${acr.properties.loginServer}'\n        }\n      ]\n      linuxFxVersion: 'DOCKER|${acr.properties.loginServer}/pixelated:latest'\n      healthCheckPath: '/api/health'\n      ftpsState: 'Disabled'\n      acrUseManagedIdentityCreds: true\n    }\n  }\n  identity: {\n    type: 'SystemAssigned'\n  }\n}\n"}}}}]}, {"ruleId": "CKV_OPENAPI_21", "ruleIndex": 43, "level": "error", "attachments": [], "message": {"text": "Ensure that arrays have a maximum number of items"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/docs/api/openapi.yaml"}, "region": {"startLine": 349, "endLine": 363, "snippet": {"text": "          type: array\n          items:\n            type: object\n            properties:\n              role:\n                type: string\n                enum: [user, assistant, system]\n              content:\n                type: string\n              timestamp:\n                type: string\n                format: date-time\n          description: List of messages in the conversation\n        quality_score:\n          type: number\n"}}}}]}, {"ruleId": "CKV_OPENAPI_21", "ruleIndex": 43, "level": "error", "attachments": [], "message": {"text": "Ensure that arrays have a maximum number of items"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "ai/dataset_pipeline/api_documentation/openapi.json"}, "region": {"startLine": 50, "endLine": 62, "snippet": {"text": "          \"turns\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"speaker\": {\n                  \"type\": \"string\"\n                },\n                \"text\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n"}}}}]}, {"ruleId": "CKV_AZUREPIPELINES_1", "ruleIndex": 44, "level": "error", "attachments": [], "message": {"text": "Ensure container job uses a non latest version tag"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "azure-pipelines.yml"}, "region": {"startLine": 193, "endLine": 290, "snippet": {"text": "      - deployment: InfrastructureDeployment\n        displayName: Deploy Container Apps Infrastructure\n        environment:\n          name: \"azure-infrastructure\"\n        pool:\n          name: \"Default\"\n        container: mcr.microsoft.com/azure-cli:latest\n        strategy:\n          runOnce:\n            deploy:\n              steps:\n                - script: |\n                    set -eo pipefail\n                    echo \"Ensuring Azure CLI is available...\"\n                    export PYTHONWARNINGS=\"ignore::FutureWarning\"\n                    export AZURE_CLI_DISABLE_CONNECTION_VERIFICATION=1\n                    if ! command -v az >/dev/null 2>&1; then\n                      echo \"Azure CLI not found; bootstrapping via uv...\"\n                      # Ensure uv is installed without sudo/apt\n                      if ! command -v uv >/dev/null 2>&1; then\n                        curl -LsSf https://astral.sh/uv/install.sh | sh\n                        export PATH=\"$HOME/.local/bin:$PATH\"\n                      fi\n                      # Create venv and install azure-cli\n                      uv venv \"$HOME/azure-cli-env\"\n                      \"$HOME/azure-cli-env/bin/python\" -m pip install --upgrade pip\n                      \"$HOME/azure-cli-env/bin/pip\" install \"azure-cli==2.73.0\"\n                      echo \"##vso[task.prependpath]$HOME/azure-cli-env/bin\"\n                    fi\n                    az version\n                  displayName: Ensure Azure CLI available (uv fallback)\n\n                - task: AzureCLI@2\n                  displayName: Deploy Container Apps Infrastructure\n                  inputs:\n                    azureSubscription: $(azureSubscription)\n                    scriptType: bash\n                    scriptLocation: inlineScript\n                    inlineScript: |\n                      # Debug: Show the actual parameter values being passed\n                      echo \"=== Deployment Parameters ===\"\n                      echo \"Resource Group: $(resourceGroupName)\"\n                      echo \"Azure Location: $(azureLocation)\"\n                      echo \"Environment: $(environment)\"\n                      echo \"============================\"\n\n                      # Try primary deployment method\n                      chmod +x scripts/deploy-infrastructure.sh\n                      echo \"Attempting primary deployment method...\"\n\n                      if ./scripts/deploy-infrastructure.sh '$(resourceGroupName)' '$(azureLocation)' '$(environment)'; then\n                          echo \"\u2705 Primary deployment method succeeded\"\n                      else\n                          echo \"\u274c Primary deployment failed, trying alternative REST API method...\"\n                          \n                          # Install jq for JSON processing\n                          if ! command -v jq &> /dev/null; then\n                              echo \"Installing jq for JSON processing...\"\n                              sudo apt-get update -qq && sudo apt-get install -y jq\n                          fi\n                          \n                          # Try REST API deployment\n                          chmod +x scripts/deploy-infrastructure-rest.sh\n                          if ./scripts/deploy-infrastructure-rest.sh '$(resourceGroupName)' '$(azureLocation)' '$(environment)'; then\n                              echo \"\u2705 Alternative REST API deployment succeeded\"\n                          else\n                              echo \"\u274c Both standard deployment methods failed\"\n                              echo \"Trying emergency deployment as final fallback...\"\n                              \n                              # Emergency deployment with individual Azure CLI commands\n                              chmod +x scripts/emergency-deploy.sh\n                              if ./scripts/emergency-deploy.sh '$(resourceGroupName)' '$(azureLocation)' '$(environment)'; then\n                                  echo \"\u2705 Emergency deployment succeeded\"\n                              else\n                                  echo \"\u274c All deployment methods failed including emergency fallback\"\n                                  exit 1\n                              fi\n                          fi\n                      fi\n\n                - task: AzureCLI@2\n                  displayName: Validate Infrastructure Deployment\n                  inputs:\n                    azureSubscription: $(azureSubscription)\n                    scriptType: bash\n                    scriptLocation: inlineScript\n                    inlineScript: |\n                      # Make diagnose script non-blocking\n                      echo \"Running infrastructure diagnostics...\"\n                      chmod +x scripts/diagnose-containerapp.sh\n                      ./scripts/diagnose-containerapp.sh '$(resourceGroupName)' || {\n                        echo \"\u26a0\ufe0f  Diagnostics failed, but continuing with deployment\"\n                        echo \"This is not critical for the deployment process\"\n                      }\n                  continueOnError: true\n\n  - stage: DockerBuild\n    displayName: Build Docker Image\n"}}}}]}, {"ruleId": "CKV_AZUREPIPELINES_1", "ruleIndex": 44, "level": "error", "attachments": [], "message": {"text": "Ensure container job uses a non latest version tag"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "azure-pipelines.yml"}, "region": {"startLine": 293, "endLine": 552, "snippet": {"text": "      - job: BuildDockerImage\n        displayName: Build and Push Docker Image\n        pool:\n          name: \"Default\"\n        container: mcr.microsoft.com/azure-cli:latest\n        steps:\n          - script: |\n              set -e\n              echo \"Installing Docker CLI in container...\"\n              apt-get update -qq\n              # Prefer docker.io for Debian/Ubuntu-based images\n              apt-get install -y docker.io\n\n              # Verify Docker daemon is accessible\n              if ! docker version >/dev/null 2>&1; then\n                echo \"\u274c Docker daemon not accessible. Checking Docker socket...\"\n                ls -la /var/run/docker.sock || echo \"Docker socket not found\"\n                echo \"Docker service status:\"\n                systemctl status docker || echo \"Cannot check Docker service status\"\n                exit 1\n              fi\n\n              echo \"\u2705 Docker CLI installed and daemon accessible\"\n              docker version\n            displayName: Install Docker CLI (inside container)\n          - task: DownloadBuildArtifacts@0\n            displayName: Download build artifacts\n            inputs:\n              buildType: \"current\"\n              downloadType: \"single\"\n              artifactName: \"dist\"\n              downloadPath: \"$(System.ArtifactsDirectory)\"\n\n          - script: |\n              echo \"Cleaning up old Docker containers before build...\"\n              if command -v docker &> /dev/null; then\n                docker ps -a --filter \"name=pixel\" --format '{{.ID}} {{.Names}}' | while read id name; do\n                  echo \"Removing container $name ($id)\"\n                  docker rm -f \"$id\" || true\n                done\n              else\n                echo \"Docker not installed, skipping container cleanup.\"\n              fi\n            displayName: Clean up old Docker containers\n\n          - script: |\n              echo \"Cleaning up disk space before Docker build...\"\n              # Check current disk usage\n              df -h /\n\n              # Clean up Docker system\n              docker system prune -af --volumes || true\n\n              # Clean package caches\n              sudo apt-get clean || true\n              sudo rm -rf /var/cache/apt/archives/* || true\n\n              # Clean temporary files\n              sudo rm -rf /tmp/* || true\n              sudo rm -rf /var/tmp/* || true\n\n              # Clean old log files\n              sudo find /var/log -name \"*.log\" -type f -mtime +7 -delete || true\n\n              # Check disk usage after cleanup\n              df -h /\n\n              DISK_USAGE=$(df / | awk 'END{print $(NF-1)}' | sed 's/%//')\n              if [ \"$DISK_USAGE\" -gt 90 ]; then\n                echo \"##[warning]Disk usage is still high: ${DISK_USAGE}%\"\n              else\n                echo \"Disk usage after cleanup: ${DISK_USAGE}%\"\n              fi\n            displayName: Clean up disk space\n\n          - script: |\n              set -eo pipefail\n              echo \"Ensuring Azure CLI is available...\"\n              export PYTHONWARNINGS=\"ignore::FutureWarning\"\n              export AZURE_CLI_DISABLE_CONNECTION_VERIFICATION=1\n              if ! command -v az >/dev/null 2>&1; then\n                echo \"Azure CLI not found; bootstrapping via uv...\"\n                if ! command -v uv >/dev/null 2>&1; then\n                  curl -LsSf https://astral.sh/uv/install.sh | sh\n                  export PATH=\"$HOME/.local/bin:$PATH\"\n                fi\n                uv venv \"$HOME/azure-cli-env\"\n                \"$HOME/azure-cli-env/bin/python\" -m pip install --upgrade pip\n                \"$HOME/azure-cli-env/bin/pip\" install \"azure-cli==2.73.0\"\n                echo \"##vso[task.prependpath]$HOME/azure-cli-env/bin\"\n              fi\n              az version\n            displayName: Ensure Azure CLI available (uv fallback)\n\n          - task: AzureCLI@2\n            displayName: Build and push Docker image\n            inputs:\n              azureSubscription: $(azureSubscription)\n              scriptType: bash\n              scriptLocation: inlineScript\n              inlineScript: |\n                echo \"Looking for container registry 'pixelatedcr'\"\n\n                # Use the existing pixelatedcr registry\n                ACR_NAME=\"pixelatedcr\"\n\n                # Verify it exists, create if it doesn't\n                if ! az acr show --name \"$ACR_NAME\" --resource-group $(resourceGroupName) &>/dev/null; then\n                  echo \"Container registry 'pixelatedcr' not found. Creating it...\"\n                  az acr create \\\n                    --name \"$ACR_NAME\" \\\n                    --resource-group $(resourceGroupName) \\\n                    --location $(azureLocation) \\\n                    --sku Standard \\\n                    --admin-enabled true\n                  \n                  echo \"Created Container Registry: $ACR_NAME\"\n                else\n                  echo \"Found existing Container Registry: $ACR_NAME\"\n                fi\n\n                # Login to the container registry\n                az acr login --name \"$ACR_NAME\"\n\n                # Get the login server\n                ACR_LOGIN_SERVER=$(az acr show --name \"$ACR_NAME\" --resource-group $(resourceGroupName) --query loginServer --output tsv)\n\n                echo \"Container Registry Login Server: $ACR_LOGIN_SERVER\"\n\n                # Copy build artifacts to current directory\n                if [ -d \"$(System.ArtifactsDirectory)/dist\" ]; then\n                  cp -r $(System.ArtifactsDirectory)/dist ./\n                  echo \"\u2705 Copied build artifacts to current directory\"\n                  echo \"Build artifacts contents:\"\n                  ls -la dist/ | head -10\n                else\n                  echo \"\u274c Build artifacts not found at $(System.ArtifactsDirectory)/dist\"\n                  echo \"Available artifacts:\"\n                  ls -la $(System.ArtifactsDirectory)/ || echo \"No artifacts directory found\"\n                  exit 1\n                fi\n\n                # Build and push Docker images with advanced multi-stage cache optimization\n                echo \"Building Docker image with multi-stage cache optimization...\"\n\n                # Use Dockerfile.azure if it exists, otherwise use Dockerfile\n                DOCKERFILE=\"Dockerfile\"\n                if [ -f \"Dockerfile.azure\" ]; then\n                  DOCKERFILE=\"Dockerfile.azure\"\n                  echo \"\u2705 Using Azure-specific Dockerfile: $DOCKERFILE\"\n                elif [ -f \"Dockerfile\" ]; then\n                  DOCKERFILE=\"Dockerfile\"\n                  echo \"\u2705 Using default Dockerfile: $DOCKERFILE\"\n                else\n                  echo \"\u274c No Dockerfile found! Available files:\"\n                  ls -la | grep -i docker || echo \"No Docker-related files found\"\n                  exit 1\n                fi\n\n                echo \"Dockerfile contents preview:\"\n                head -20 \"$DOCKERFILE\"\n\n                # Enable Docker BuildKit for advanced caching\n                export DOCKER_BUILDKIT=1\n\n                # Pull existing images for cache layers\n                echo \"Pulling existing images for cache optimization...\"\n                docker pull \"$ACR_LOGIN_SERVER/$(imageName):latest\" || echo \"No latest image found, proceeding without cache\"\n                docker pull \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" || echo \"No base cache found\"\n                docker pull \"$ACR_LOGIN_SERVER/$(imageName):cache-build\" || echo \"No build cache found\"\n\n                # Check if Dockerfile has multi-stage targets before attempting stage-specific builds\n                if grep -q \"FROM.*AS base\" \"$DOCKERFILE\" 2>/dev/null; then\n                  echo \"Multi-stage Dockerfile detected, building base stage for cache...\"\n                  docker build \\\n                    -f \"$DOCKERFILE\" \\\n                    --target base \\\n                    --cache-from \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" \\\n                    --cache-from \"$ACR_LOGIN_SERVER/$(imageName):latest\" \\\n                    --build-arg BUILDKIT_INLINE_CACHE=1 \\\n                    --build-arg NODE_VERSION=22 \\\n                    --build-arg PNPM_VERSION=10.15.0 \\\n                    -t \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" \\\n                    . || echo \"Base stage build failed, continuing...\"\n                else\n                  echo \"Single-stage Dockerfile detected, skipping base stage build\"\n                fi\n                  \n                if grep -q \"FROM.*AS build\" \"$DOCKERFILE\" 2>/dev/null; then\n                  echo \"Build stage detected, building for cache...\"\n                  docker build \\\n                    -f \"$DOCKERFILE\" \\\n                    --target build \\\n                    --cache-from \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" \\\n                    --cache-from \"$ACR_LOGIN_SERVER/$(imageName):cache-build\" \\\n                    --cache-from \"$ACR_LOGIN_SERVER/$(imageName):latest\" \\\n                    --build-arg BUILDKIT_INLINE_CACHE=1 \\\n                    --build-arg NODE_VERSION=22 \\\n                    --build-arg PNPM_VERSION=10.15.0 \\\n                    -t \"$ACR_LOGIN_SERVER/$(imageName):cache-build\" \\\n                    . || echo \"Build stage build failed, continuing...\"\n                else\n                  echo \"No build stage detected, skipping build stage cache\"\n                fi\n                  \n                # Final production build with all cache layers\n                echo \"Building final production image...\"\n                docker build \\\n                  -f \"$DOCKERFILE\" \\\n                  --cache-from \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" \\\n                  --cache-from \"$ACR_LOGIN_SERVER/$(imageName):cache-build\" \\\n                  --cache-from \"$ACR_LOGIN_SERVER/$(imageName):latest\" \\\n                  --build-arg BUILDKIT_INLINE_CACHE=1 \\\n                  --build-arg NODE_VERSION=22 \\\n                  --build-arg PNPM_VERSION=10.15.0 \\\n                  -t \"$ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\" \\\n                  -t \"$ACR_LOGIN_SERVER/$(imageName):latest\" \\\n                  .\n\n                echo \"Pushing Docker images and cache layers...\"\n                # Push cache layers first for next build optimization\n                docker push \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" || echo \"Base cache push failed\"\n                docker push \"$ACR_LOGIN_SERVER/$(imageName):cache-build\" || echo \"Build cache push failed\"\n\n                # Push main images\n                docker push \"$ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\"\n                docker push \"$ACR_LOGIN_SERVER/$(imageName):latest\"\n\n\n\n                # Verify the push was successful\n                echo \"Verifying image push was successful...\"\n                sleep 5  # Give ACR a moment to process the push\n\n                # Check if the image exists in the registry\n                IMAGE_CHECK=$(az acr repository show-tags \\\n                  --name \"$ACR_NAME\" \\\n                  --repository \"$(imageName)\" \\\n                  --query \"[?contains(@, '$(dockerTag)')].length(@)\" \\\n                  --output tsv 2>/dev/null || echo \"0\")\n\n                if [ \"$IMAGE_CHECK\" = \"0\" ]; then\n                  echo \"\u274c Failed to verify image push. Image $(imageName):$(dockerTag) not found in registry\"\n                  echo \"Available tags:\"\n                  az acr repository show-tags \\\n                    --name \"$ACR_NAME\" \\\n                    --repository \"$(imageName)\" \\\n                    --output table 2>/dev/null || echo \"No tags found\"\n                  exit 1\n                else\n                  echo \"\u2705 Successfully verified image $(imageName):$(dockerTag) exists in registry\"\n                fi\n\n                # Clean up local images to save space\n                docker rmi \"$ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\" || true\n                docker rmi \"$ACR_LOGIN_SERVER/$(imageName):latest\" || true\n                docker system prune -f\n\n  - stage: Deploy\n    displayName: Deploy Container App\n"}}}}]}, {"ruleId": "CKV_AZUREPIPELINES_1", "ruleIndex": 44, "level": "error", "attachments": [], "message": {"text": "Ensure container job uses a non latest version tag"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "azure-pipelines.yml"}, "region": {"startLine": 559, "endLine": 823, "snippet": {"text": "      - deployment: ContainerAppDeployment\n        displayName: Deploy to Container Apps\n        environment:\n          name: azure-production\n        pool:\n          name: \"Default\"\n        container: mcr.microsoft.com/azure-cli:latest\n        strategy:\n          runOnce:\n            deploy:\n              steps:\n                - script: |\n                    set -eo pipefail\n                    echo \"Ensuring Azure CLI is available...\"\n                    export PYTHONWARNINGS=\"ignore::FutureWarning\"\n                    export AZURE_CLI_DISABLE_CONNECTION_VERIFICATION=1\n                    if ! command -v az >/dev/null 2>&1; then\n                      echo \"Azure CLI not found; bootstrapping via uv...\"\n                      if ! command -v uv >/dev/null 2>&1; then\n                        curl -LsSf https://astral.sh/uv/install.sh | sh\n                        export PATH=\"$HOME/.local/bin:$PATH\"\n                      fi\n                      uv venv \"$HOME/azure-cli-env\"\n                      \"$HOME/azure-cli-env/bin/python\" -m pip install --upgrade pip\n                      \"$HOME/azure-cli-env/bin/pip\" install \"azure-cli==2.73.0\"\n                      echo \"##vso[task.prependpath]$HOME/azure-cli-env/bin\"\n                    fi\n                    az version\n                  displayName: Ensure Azure CLI available (uv fallback)\n\n                - task: AzureCLI@2\n                  displayName: Deploy Container App\n                  inputs:\n                    azureSubscription: $(azureSubscription)\n                    scriptType: bash\n                    scriptLocation: inlineScript\n                    inlineScript: |\n                      echo \"Deploying Container App: $(containerAppName)\"\n                      CONTAINER_APP_NAME=\"$(containerAppName)\"\n\n                      # Check if the container app already exists\n                      if az containerapp show --name \"$CONTAINER_APP_NAME\" --resource-group $(resourceGroupName) >/dev/null 2>&1; then\n                        echo \"Container App exists, updating with new image...\"\n                        UPDATE_MODE=\"update\"\n                      else\n                        echo \"Container App doesn't exist, creating new one...\"\n                        UPDATE_MODE=\"create\"\n                      fi\n\n                      # Use the existing pixelatedcr registry\n                      ACR_NAME=\"pixelatedcr\"\n\n                      # Verify it exists\n                      if ! az acr show --name \"$ACR_NAME\" --resource-group $(resourceGroupName) &>/dev/null; then\n                        echo \"\u274c Container Registry 'pixelatedcr' not found in resource group\"\n                        echo \"Available registries:\"\n                        az acr list --resource-group $(resourceGroupName) --query \"[].name\" --output table\n                        exit 1\n                      fi\n\n                      ACR_LOGIN_SERVER=$(az acr show --name \"$ACR_NAME\" --resource-group $(resourceGroupName) --query loginServer --output tsv)\n                      echo \"Using Container Registry: $ACR_NAME ($ACR_LOGIN_SERVER)\"\n\n                      # Enable admin user on ACR if not already enabled\n                      echo \"Ensuring ACR admin user is enabled...\"\n                      az acr update --name \"$ACR_NAME\" --admin-enabled true\n\n                      # Get ACR admin credentials\n                      ACR_USERNAME=$(az acr credential show --name \"$ACR_NAME\" --query username --output tsv)\n                      ACR_PASSWORD=$(az acr credential show --name \"$ACR_NAME\" --query passwords[0].value --output tsv)\n                      echo \"Retrieved ACR credentials for user: $ACR_USERNAME\"\n\n                      # Verify the Docker image exists before deployment\n                      echo \"Verifying Docker image exists: $ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\"\n                      IMAGE_EXISTS=$(az acr repository show-tags \\\n                        --name \"$ACR_NAME\" \\\n                        --repository \"$(imageName)\" \\\n                        --query \"[?contains(@, '$(dockerTag)')].length(@)\" \\\n                        --output tsv)\n\n                      if [ -z \"$IMAGE_EXISTS\" ] || [ \"$IMAGE_EXISTS\" = \"0\" ]; then\n                        echo \"\u274c Docker image $(imageName):$(dockerTag) not found in registry\"\n                        echo \"Available tags for $(imageName):\"\n                        az acr repository show-tags \\\n                          --name \"$ACR_NAME\" \\\n                          --repository \"$(imageName)\" \\\n                          --output table || echo \"No tags found or repository doesn't exist\"\n                        \n                        echo \"Available repositories:\"\n                        az acr repository list \\\n                          --name \"$ACR_NAME\" \\\n                          --output table\n                        \n                        echo \"Attempting to use 'latest' tag as fallback...\"\n                        DOCKER_IMAGE_TAG=\"latest\"\n                      else\n                        echo \"\u2705 Docker image $(imageName):$(dockerTag) found in registry\"\n                        DOCKER_IMAGE_TAG=\"$(dockerTag)\"\n                      fi\n\n                      # Find Container App Environment\n                      APP_ENV_NAME=$(az containerapp env list \\\n                        --resource-group $(resourceGroupName) \\\n                        --query \"[?starts_with(name, 'pixel-env')].name | [0]\" \\\n                        --output tsv)\n\n                      if [ -z \"$APP_ENV_NAME\" ]; then\n                        echo \"No Container App Environment found. Creating one...\"\n                        # Generate unique suffix for resources\n                        UNIQUE_SUFFIX=$(echo -n \"$(resourceGroupName)-$(environment)\" | sha256sum | cut -c1-8)\n                        APP_ENV_NAME=\"pixel-env-${UNIQUE_SUFFIX}\"\n                        \n                        az containerapp env create \\\n                          --name \"$APP_ENV_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --location $(azureLocation) \\\n                          --only-show-errors\n                        \n                        if [ $? -ne 0 ]; then\n                          echo \"\u274c Failed to create Container App Environment\"\n                          exit 1\n                        fi\n                        echo \"\u2705 Created Container App Environment: $APP_ENV_NAME\"\n                      else\n                        echo \"Found Container App Environment: $APP_ENV_NAME\"\n                      fi\n\n                      echo \"Container App operation mode: $UPDATE_MODE\"\n                      echo \"Using Docker image: $ACR_LOGIN_SERVER/$(imageName):$DOCKER_IMAGE_TAG\"\n\n                      if [ \"$UPDATE_MODE\" = \"update\" ]; then\n                        echo \"Updating existing Container App: $CONTAINER_APP_NAME\"\n                        \n                        az containerapp update \\\n                          --name \"$CONTAINER_APP_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --image \"$ACR_LOGIN_SERVER/$(imageName):$DOCKER_IMAGE_TAG\" \\\n                          --cpu 1.0 \\\n                          --memory 2Gi \\\n                          --min-replicas 1 \\\n                          --max-replicas 10 \\\n                          --set-env-vars \\\n                            \"BUILD_ID=$(dockerTag)\" \\\n                            \"NODE_ENV=production\" \\\n                            \"PORT=4321\" \\\n                            \"PUBLIC_CLERK_PUBLISHABLE_KEY=$(CLERK_PUBLISHABLE_KEY)\" \\\n                            \"CLERK_SECRET_KEY=$(CLERK_SECRET_KEY)\" \\\n                          --only-show-errors\n\n                        if [ $? -eq 0 ]; then\n                          echo \"\u2705 Container App updated successfully\"\n                        else\n                          echo \"\u274c Container App update failed\"\n                          exit 1\n                        fi\n                      else\n                        echo \"Creating new Container App: $CONTAINER_APP_NAME\"\n                        \n                        az containerapp create \\\n                          --name \"$CONTAINER_APP_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --environment \"$APP_ENV_NAME\" \\\n                          --image \"$ACR_LOGIN_SERVER/$(imageName):$DOCKER_IMAGE_TAG\" \\\n                          --target-port 4321 \\\n                          --ingress 'external' \\\n                          --registry-server \"$ACR_LOGIN_SERVER\" \\\n                          --registry-username \"$ACR_USERNAME\" \\\n                          --registry-password \"$ACR_PASSWORD\" \\\n                          --cpu 1.0 \\\n                          --memory 2Gi \\\n                          --min-replicas 1 \\\n                          --max-replicas 10 \\\n                          --env-vars \\\n                            \"BUILD_ID=$(dockerTag)\" \\\n                            \"NODE_ENV=production\" \\\n                            \"PORT=4321\" \\\n                            \"PUBLIC_CLERK_PUBLISHABLE_KEY=$(CLERK_PUBLISHABLE_KEY)\" \\\n                            \"CLERK_SECRET_KEY=$(CLERK_SECRET_KEY)\" \\\n                          --only-show-errors\n\n                        if [ $? -eq 0 ]; then\n                          echo \"\u2705 Container App created successfully\"\n                        else\n                          echo \"\u274c Container App creation failed\"\n                          exit 1\n                        fi\n                      fi\n\n                      # Configure custom domain if specified\n                      CUSTOM_DOMAIN=\"$(customDomain)\"\n                      if [ ! -z \"$CUSTOM_DOMAIN\" ] && [ \"$CUSTOM_DOMAIN\" != \"\" ]; then\n                        echo \"Configuring custom domain: $CUSTOM_DOMAIN\"\n                        \n                        # Add custom domain to the Container App\n                        az containerapp hostname add \\\n                          --hostname \"$CUSTOM_DOMAIN\" \\\n                          --name \"$CONTAINER_APP_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --only-show-errors || {\n                          echo \"\u26a0\ufe0f  Failed to add custom domain $CUSTOM_DOMAIN\"\n                          echo \"Make sure:\"\n                          echo \"1. DNS CNAME record points $CUSTOM_DOMAIN to the Container App FQDN\"\n                          echo \"2. Domain ownership is verified\"\n                          echo \"3. You have necessary permissions\"\n                        }\n                        \n                        # Create managed certificate for the custom domain\n                        echo \"Creating managed certificate for $CUSTOM_DOMAIN...\"\n                        az containerapp env certificate create \\\n                          --name \"${CUSTOM_DOMAIN//./-}-cert\" \\\n                          --environment \"$APP_ENV_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --hostname \"$CUSTOM_DOMAIN\" \\\n                          --validation-method CNAME \\\n                          --only-show-errors || {\n                          echo \"\u26a0\ufe0f  Failed to create managed certificate for $CUSTOM_DOMAIN\"\n                          echo \"You may need to manually create and bind an SSL certificate\"\n                        }\n                        \n                        # Bind the certificate to the hostname\n                        CERT_ID=$(az containerapp env certificate list \\\n                          --environment \"$APP_ENV_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --query \"[?properties.subjectName=='$CUSTOM_DOMAIN'].id | [0]\" \\\n                          --output tsv)\n                        \n                        if [ ! -z \"$CERT_ID\" ]; then\n                          echo \"Binding certificate to hostname...\"\n                          az containerapp hostname bind \\\n                            --hostname \"$CUSTOM_DOMAIN\" \\\n                            --name \"$CONTAINER_APP_NAME\" \\\n                            --resource-group $(resourceGroupName) \\\n                            --certificate \"$CERT_ID\" \\\n                            --only-show-errors || {\n                            echo \"\u26a0\ufe0f  Failed to bind certificate to $CUSTOM_DOMAIN\"\n                          }\n                        fi\n                        \n                        echo \"\u2705 Custom domain configuration completed for: $CUSTOM_DOMAIN\"\n                      else\n                        echo \"No custom domain specified, using default Container App URL\"\n                      fi\n\n                      # Get and display the Container App URL\n                      APP_URL=$(az containerapp show \\\n                        --name \"$CONTAINER_APP_NAME\" \\\n                        --resource-group $(resourceGroupName) \\\n                        --query properties.configuration.ingress.fqdn \\\n                        --output tsv)\n\n                      if [ ! -z \"$APP_URL\" ]; then\n                        echo \"\ud83d\ude80 Container App deployed to: https://$APP_URL\"\n                        echo \"##vso[task.setvariable variable=containerAppUrl]https://$APP_URL\"\n                        \n                        # Also show custom domain if configured\n                        CUSTOM_DOMAIN=\"$(customDomain)\"\n                        if [ ! -z \"$CUSTOM_DOMAIN\" ] && [ \"$CUSTOM_DOMAIN\" != \"\" ]; then\n                          echo \"\ud83c\udf10 Custom domain: https://$CUSTOM_DOMAIN\"\n                        fi\n                      else\n                        echo \"\u26a0\ufe0f  Could not retrieve Container App URL\"\n                      fi\n\n  - stage: DeployAppService\n    displayName: Deploy to App Service\n"}}}}]}, {"ruleId": "CKV_AZUREPIPELINES_1", "ruleIndex": 44, "level": "error", "attachments": [], "message": {"text": "Ensure container job uses a non latest version tag"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "azure-pipelines.yml"}, "region": {"startLine": 830, "endLine": 929, "snippet": {"text": "      - deployment: AppServiceDeployment\n        displayName: Deploy to App Service\n        environment:\n          name: azure-production\n        pool:\n          name: \"Default\"\n        container: mcr.microsoft.com/azure-cli:latest\n        strategy:\n          runOnce:\n            deploy:\n              steps:\n                - script: |\n                    set -eo pipefail\n                    echo \"Ensuring Azure CLI is available...\"\n                    export PYTHONWARNINGS=\"ignore::FutureWarning\"\n                    export AZURE_CLI_DISABLE_CONNECTION_VERIFICATION=1\n                    if ! command -v az >/dev/null 2>&1; then\n                      echo \"Azure CLI not found; bootstrapping via uv...\"\n                      if ! command -v uv >/dev/null 2>&1; then\n                        curl -LsSf https://astral.sh/uv/install.sh | sh\n                        export PATH=\"$HOME/.local/bin:$PATH\"\n                      fi\n                      uv venv \"$HOME/azure-cli-env\"\n                      \"$HOME/azure-cli-env/bin/python\" -m pip install --upgrade pip\n                      \"$HOME/azure-cli-env/bin/pip\" install \"azure-cli==2.73.0\"\n                      echo \"##vso[task.prependpath]$HOME/azure-cli-env/bin\"\n                    fi\n                    az version\n                  displayName: Ensure Azure CLI available (uv fallback)\n\n                - task: AzureCLI@2\n                  displayName: Deploy to App Service\n                  inputs:\n                    azureSubscription: $(azureSubscription)\n                    scriptType: bash\n                    scriptLocation: inlineScript\n                    inlineScript: |\n                      echo \"Deploying to App Service: $(appServiceName)\"\n                      APP_SERVICE_NAME=\"$(appServiceName)\"\n\n                      # Use the existing pixelatedcr registry\n                      ACR_NAME=\"pixelatedcr\"\n                      ACR_LOGIN_SERVER=$(az acr show --name \"$ACR_NAME\" --resource-group $(resourceGroupName) --query loginServer --output tsv)\n\n                      echo \"Using Container Registry: $ACR_NAME ($ACR_LOGIN_SERVER)\"\n                      echo \"Using Docker image: $ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\"\n\n                      # Get ACR credentials first\n                      ACR_USERNAME=$(az acr credential show --name \"$ACR_NAME\" --query username --output tsv)\n                      ACR_PASSWORD=$(az acr credential show --name \"$ACR_NAME\" --query passwords[0].value --output tsv)\n\n                      echo \"Using ACR credentials: $ACR_USERNAME\"\n\n                      # Configure App Service for container deployment using new syntax\n                      echo \"Configuring App Service container settings...\"\n                      az webapp config container set \\\n                        --name \"$APP_SERVICE_NAME\" \\\n                        --resource-group $(resourceGroupName) \\\n                        --container-image-name \"$ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\" \\\n                        --container-registry-url \"https://$ACR_LOGIN_SERVER\" \\\n                        --container-registry-user \"$ACR_USERNAME\" \\\n                        --container-registry-password \"$ACR_PASSWORD\"\n\n                      # Configure App Service app settings\n                      echo \"Configuring App Service environment variables...\"\n                      az webapp config appsettings set \\\n                        --name \"$APP_SERVICE_NAME\" \\\n                        --resource-group $(resourceGroupName) \\\n                        --settings \\\n                          BUILD_ID=$(dockerTag) \\\n                          NODE_ENV=production \\\n                          PORT=4321 \\\n                          WEBSITES_PORT=4321 \\\n                          PUBLIC_CLERK_PUBLISHABLE_KEY=\"$(CLERK_PUBLISHABLE_KEY)\" \\\n                          CLERK_SECRET_KEY=\"$(CLERK_SECRET_KEY)\" \\\n                          WEBSITES_ENABLE_APP_SERVICE_STORAGE=false\n\n                      # Restart App Service to pick up new container\n                      echo \"Restarting App Service to deploy new container...\"\n                      az webapp restart \\\n                        --name \"$APP_SERVICE_NAME\" \\\n                        --resource-group $(resourceGroupName)\n\n                      # Get App Service URL\n                      APP_URL=$(az webapp show \\\n                        --name \"$APP_SERVICE_NAME\" \\\n                        --resource-group $(resourceGroupName) \\\n                        --query defaultHostName \\\n                        --output tsv)\n\n                      if [ ! -z \"$APP_URL\" ]; then\n                        echo \"\ud83d\ude80 App Service deployed to: https://$APP_URL\"\n                        echo \"\ud83c\udf10 Custom domain: https://$(customDomain)\"\n                        echo \"##vso[task.setvariable variable=appServiceUrl]https://$APP_URL\"\n                      else\n                        echo \"\u26a0\ufe0f  Could not retrieve App Service URL\"\n                      fi\n\n  - stage: PostDeploymentTests\n    displayName: Post Deployment Tests\n"}}}}]}, {"ruleId": "CKV_AZUREPIPELINES_2", "ruleIndex": 45, "level": "error", "attachments": [], "message": {"text": "Ensure container job uses a version digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "azure-pipelines.yml"}, "region": {"startLine": 193, "endLine": 290, "snippet": {"text": "      - deployment: InfrastructureDeployment\n        displayName: Deploy Container Apps Infrastructure\n        environment:\n          name: \"azure-infrastructure\"\n        pool:\n          name: \"Default\"\n        container: mcr.microsoft.com/azure-cli:latest\n        strategy:\n          runOnce:\n            deploy:\n              steps:\n                - script: |\n                    set -eo pipefail\n                    echo \"Ensuring Azure CLI is available...\"\n                    export PYTHONWARNINGS=\"ignore::FutureWarning\"\n                    export AZURE_CLI_DISABLE_CONNECTION_VERIFICATION=1\n                    if ! command -v az >/dev/null 2>&1; then\n                      echo \"Azure CLI not found; bootstrapping via uv...\"\n                      # Ensure uv is installed without sudo/apt\n                      if ! command -v uv >/dev/null 2>&1; then\n                        curl -LsSf https://astral.sh/uv/install.sh | sh\n                        export PATH=\"$HOME/.local/bin:$PATH\"\n                      fi\n                      # Create venv and install azure-cli\n                      uv venv \"$HOME/azure-cli-env\"\n                      \"$HOME/azure-cli-env/bin/python\" -m pip install --upgrade pip\n                      \"$HOME/azure-cli-env/bin/pip\" install \"azure-cli==2.73.0\"\n                      echo \"##vso[task.prependpath]$HOME/azure-cli-env/bin\"\n                    fi\n                    az version\n                  displayName: Ensure Azure CLI available (uv fallback)\n\n                - task: AzureCLI@2\n                  displayName: Deploy Container Apps Infrastructure\n                  inputs:\n                    azureSubscription: $(azureSubscription)\n                    scriptType: bash\n                    scriptLocation: inlineScript\n                    inlineScript: |\n                      # Debug: Show the actual parameter values being passed\n                      echo \"=== Deployment Parameters ===\"\n                      echo \"Resource Group: $(resourceGroupName)\"\n                      echo \"Azure Location: $(azureLocation)\"\n                      echo \"Environment: $(environment)\"\n                      echo \"============================\"\n\n                      # Try primary deployment method\n                      chmod +x scripts/deploy-infrastructure.sh\n                      echo \"Attempting primary deployment method...\"\n\n                      if ./scripts/deploy-infrastructure.sh '$(resourceGroupName)' '$(azureLocation)' '$(environment)'; then\n                          echo \"\u2705 Primary deployment method succeeded\"\n                      else\n                          echo \"\u274c Primary deployment failed, trying alternative REST API method...\"\n                          \n                          # Install jq for JSON processing\n                          if ! command -v jq &> /dev/null; then\n                              echo \"Installing jq for JSON processing...\"\n                              sudo apt-get update -qq && sudo apt-get install -y jq\n                          fi\n                          \n                          # Try REST API deployment\n                          chmod +x scripts/deploy-infrastructure-rest.sh\n                          if ./scripts/deploy-infrastructure-rest.sh '$(resourceGroupName)' '$(azureLocation)' '$(environment)'; then\n                              echo \"\u2705 Alternative REST API deployment succeeded\"\n                          else\n                              echo \"\u274c Both standard deployment methods failed\"\n                              echo \"Trying emergency deployment as final fallback...\"\n                              \n                              # Emergency deployment with individual Azure CLI commands\n                              chmod +x scripts/emergency-deploy.sh\n                              if ./scripts/emergency-deploy.sh '$(resourceGroupName)' '$(azureLocation)' '$(environment)'; then\n                                  echo \"\u2705 Emergency deployment succeeded\"\n                              else\n                                  echo \"\u274c All deployment methods failed including emergency fallback\"\n                                  exit 1\n                              fi\n                          fi\n                      fi\n\n                - task: AzureCLI@2\n                  displayName: Validate Infrastructure Deployment\n                  inputs:\n                    azureSubscription: $(azureSubscription)\n                    scriptType: bash\n                    scriptLocation: inlineScript\n                    inlineScript: |\n                      # Make diagnose script non-blocking\n                      echo \"Running infrastructure diagnostics...\"\n                      chmod +x scripts/diagnose-containerapp.sh\n                      ./scripts/diagnose-containerapp.sh '$(resourceGroupName)' || {\n                        echo \"\u26a0\ufe0f  Diagnostics failed, but continuing with deployment\"\n                        echo \"This is not critical for the deployment process\"\n                      }\n                  continueOnError: true\n\n  - stage: DockerBuild\n    displayName: Build Docker Image\n"}}}}]}, {"ruleId": "CKV_AZUREPIPELINES_2", "ruleIndex": 45, "level": "error", "attachments": [], "message": {"text": "Ensure container job uses a version digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "azure-pipelines.yml"}, "region": {"startLine": 293, "endLine": 552, "snippet": {"text": "      - job: BuildDockerImage\n        displayName: Build and Push Docker Image\n        pool:\n          name: \"Default\"\n        container: mcr.microsoft.com/azure-cli:latest\n        steps:\n          - script: |\n              set -e\n              echo \"Installing Docker CLI in container...\"\n              apt-get update -qq\n              # Prefer docker.io for Debian/Ubuntu-based images\n              apt-get install -y docker.io\n\n              # Verify Docker daemon is accessible\n              if ! docker version >/dev/null 2>&1; then\n                echo \"\u274c Docker daemon not accessible. Checking Docker socket...\"\n                ls -la /var/run/docker.sock || echo \"Docker socket not found\"\n                echo \"Docker service status:\"\n                systemctl status docker || echo \"Cannot check Docker service status\"\n                exit 1\n              fi\n\n              echo \"\u2705 Docker CLI installed and daemon accessible\"\n              docker version\n            displayName: Install Docker CLI (inside container)\n          - task: DownloadBuildArtifacts@0\n            displayName: Download build artifacts\n            inputs:\n              buildType: \"current\"\n              downloadType: \"single\"\n              artifactName: \"dist\"\n              downloadPath: \"$(System.ArtifactsDirectory)\"\n\n          - script: |\n              echo \"Cleaning up old Docker containers before build...\"\n              if command -v docker &> /dev/null; then\n                docker ps -a --filter \"name=pixel\" --format '{{.ID}} {{.Names}}' | while read id name; do\n                  echo \"Removing container $name ($id)\"\n                  docker rm -f \"$id\" || true\n                done\n              else\n                echo \"Docker not installed, skipping container cleanup.\"\n              fi\n            displayName: Clean up old Docker containers\n\n          - script: |\n              echo \"Cleaning up disk space before Docker build...\"\n              # Check current disk usage\n              df -h /\n\n              # Clean up Docker system\n              docker system prune -af --volumes || true\n\n              # Clean package caches\n              sudo apt-get clean || true\n              sudo rm -rf /var/cache/apt/archives/* || true\n\n              # Clean temporary files\n              sudo rm -rf /tmp/* || true\n              sudo rm -rf /var/tmp/* || true\n\n              # Clean old log files\n              sudo find /var/log -name \"*.log\" -type f -mtime +7 -delete || true\n\n              # Check disk usage after cleanup\n              df -h /\n\n              DISK_USAGE=$(df / | awk 'END{print $(NF-1)}' | sed 's/%//')\n              if [ \"$DISK_USAGE\" -gt 90 ]; then\n                echo \"##[warning]Disk usage is still high: ${DISK_USAGE}%\"\n              else\n                echo \"Disk usage after cleanup: ${DISK_USAGE}%\"\n              fi\n            displayName: Clean up disk space\n\n          - script: |\n              set -eo pipefail\n              echo \"Ensuring Azure CLI is available...\"\n              export PYTHONWARNINGS=\"ignore::FutureWarning\"\n              export AZURE_CLI_DISABLE_CONNECTION_VERIFICATION=1\n              if ! command -v az >/dev/null 2>&1; then\n                echo \"Azure CLI not found; bootstrapping via uv...\"\n                if ! command -v uv >/dev/null 2>&1; then\n                  curl -LsSf https://astral.sh/uv/install.sh | sh\n                  export PATH=\"$HOME/.local/bin:$PATH\"\n                fi\n                uv venv \"$HOME/azure-cli-env\"\n                \"$HOME/azure-cli-env/bin/python\" -m pip install --upgrade pip\n                \"$HOME/azure-cli-env/bin/pip\" install \"azure-cli==2.73.0\"\n                echo \"##vso[task.prependpath]$HOME/azure-cli-env/bin\"\n              fi\n              az version\n            displayName: Ensure Azure CLI available (uv fallback)\n\n          - task: AzureCLI@2\n            displayName: Build and push Docker image\n            inputs:\n              azureSubscription: $(azureSubscription)\n              scriptType: bash\n              scriptLocation: inlineScript\n              inlineScript: |\n                echo \"Looking for container registry 'pixelatedcr'\"\n\n                # Use the existing pixelatedcr registry\n                ACR_NAME=\"pixelatedcr\"\n\n                # Verify it exists, create if it doesn't\n                if ! az acr show --name \"$ACR_NAME\" --resource-group $(resourceGroupName) &>/dev/null; then\n                  echo \"Container registry 'pixelatedcr' not found. Creating it...\"\n                  az acr create \\\n                    --name \"$ACR_NAME\" \\\n                    --resource-group $(resourceGroupName) \\\n                    --location $(azureLocation) \\\n                    --sku Standard \\\n                    --admin-enabled true\n                  \n                  echo \"Created Container Registry: $ACR_NAME\"\n                else\n                  echo \"Found existing Container Registry: $ACR_NAME\"\n                fi\n\n                # Login to the container registry\n                az acr login --name \"$ACR_NAME\"\n\n                # Get the login server\n                ACR_LOGIN_SERVER=$(az acr show --name \"$ACR_NAME\" --resource-group $(resourceGroupName) --query loginServer --output tsv)\n\n                echo \"Container Registry Login Server: $ACR_LOGIN_SERVER\"\n\n                # Copy build artifacts to current directory\n                if [ -d \"$(System.ArtifactsDirectory)/dist\" ]; then\n                  cp -r $(System.ArtifactsDirectory)/dist ./\n                  echo \"\u2705 Copied build artifacts to current directory\"\n                  echo \"Build artifacts contents:\"\n                  ls -la dist/ | head -10\n                else\n                  echo \"\u274c Build artifacts not found at $(System.ArtifactsDirectory)/dist\"\n                  echo \"Available artifacts:\"\n                  ls -la $(System.ArtifactsDirectory)/ || echo \"No artifacts directory found\"\n                  exit 1\n                fi\n\n                # Build and push Docker images with advanced multi-stage cache optimization\n                echo \"Building Docker image with multi-stage cache optimization...\"\n\n                # Use Dockerfile.azure if it exists, otherwise use Dockerfile\n                DOCKERFILE=\"Dockerfile\"\n                if [ -f \"Dockerfile.azure\" ]; then\n                  DOCKERFILE=\"Dockerfile.azure\"\n                  echo \"\u2705 Using Azure-specific Dockerfile: $DOCKERFILE\"\n                elif [ -f \"Dockerfile\" ]; then\n                  DOCKERFILE=\"Dockerfile\"\n                  echo \"\u2705 Using default Dockerfile: $DOCKERFILE\"\n                else\n                  echo \"\u274c No Dockerfile found! Available files:\"\n                  ls -la | grep -i docker || echo \"No Docker-related files found\"\n                  exit 1\n                fi\n\n                echo \"Dockerfile contents preview:\"\n                head -20 \"$DOCKERFILE\"\n\n                # Enable Docker BuildKit for advanced caching\n                export DOCKER_BUILDKIT=1\n\n                # Pull existing images for cache layers\n                echo \"Pulling existing images for cache optimization...\"\n                docker pull \"$ACR_LOGIN_SERVER/$(imageName):latest\" || echo \"No latest image found, proceeding without cache\"\n                docker pull \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" || echo \"No base cache found\"\n                docker pull \"$ACR_LOGIN_SERVER/$(imageName):cache-build\" || echo \"No build cache found\"\n\n                # Check if Dockerfile has multi-stage targets before attempting stage-specific builds\n                if grep -q \"FROM.*AS base\" \"$DOCKERFILE\" 2>/dev/null; then\n                  echo \"Multi-stage Dockerfile detected, building base stage for cache...\"\n                  docker build \\\n                    -f \"$DOCKERFILE\" \\\n                    --target base \\\n                    --cache-from \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" \\\n                    --cache-from \"$ACR_LOGIN_SERVER/$(imageName):latest\" \\\n                    --build-arg BUILDKIT_INLINE_CACHE=1 \\\n                    --build-arg NODE_VERSION=22 \\\n                    --build-arg PNPM_VERSION=10.15.0 \\\n                    -t \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" \\\n                    . || echo \"Base stage build failed, continuing...\"\n                else\n                  echo \"Single-stage Dockerfile detected, skipping base stage build\"\n                fi\n                  \n                if grep -q \"FROM.*AS build\" \"$DOCKERFILE\" 2>/dev/null; then\n                  echo \"Build stage detected, building for cache...\"\n                  docker build \\\n                    -f \"$DOCKERFILE\" \\\n                    --target build \\\n                    --cache-from \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" \\\n                    --cache-from \"$ACR_LOGIN_SERVER/$(imageName):cache-build\" \\\n                    --cache-from \"$ACR_LOGIN_SERVER/$(imageName):latest\" \\\n                    --build-arg BUILDKIT_INLINE_CACHE=1 \\\n                    --build-arg NODE_VERSION=22 \\\n                    --build-arg PNPM_VERSION=10.15.0 \\\n                    -t \"$ACR_LOGIN_SERVER/$(imageName):cache-build\" \\\n                    . || echo \"Build stage build failed, continuing...\"\n                else\n                  echo \"No build stage detected, skipping build stage cache\"\n                fi\n                  \n                # Final production build with all cache layers\n                echo \"Building final production image...\"\n                docker build \\\n                  -f \"$DOCKERFILE\" \\\n                  --cache-from \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" \\\n                  --cache-from \"$ACR_LOGIN_SERVER/$(imageName):cache-build\" \\\n                  --cache-from \"$ACR_LOGIN_SERVER/$(imageName):latest\" \\\n                  --build-arg BUILDKIT_INLINE_CACHE=1 \\\n                  --build-arg NODE_VERSION=22 \\\n                  --build-arg PNPM_VERSION=10.15.0 \\\n                  -t \"$ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\" \\\n                  -t \"$ACR_LOGIN_SERVER/$(imageName):latest\" \\\n                  .\n\n                echo \"Pushing Docker images and cache layers...\"\n                # Push cache layers first for next build optimization\n                docker push \"$ACR_LOGIN_SERVER/$(imageName):cache-base\" || echo \"Base cache push failed\"\n                docker push \"$ACR_LOGIN_SERVER/$(imageName):cache-build\" || echo \"Build cache push failed\"\n\n                # Push main images\n                docker push \"$ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\"\n                docker push \"$ACR_LOGIN_SERVER/$(imageName):latest\"\n\n\n\n                # Verify the push was successful\n                echo \"Verifying image push was successful...\"\n                sleep 5  # Give ACR a moment to process the push\n\n                # Check if the image exists in the registry\n                IMAGE_CHECK=$(az acr repository show-tags \\\n                  --name \"$ACR_NAME\" \\\n                  --repository \"$(imageName)\" \\\n                  --query \"[?contains(@, '$(dockerTag)')].length(@)\" \\\n                  --output tsv 2>/dev/null || echo \"0\")\n\n                if [ \"$IMAGE_CHECK\" = \"0\" ]; then\n                  echo \"\u274c Failed to verify image push. Image $(imageName):$(dockerTag) not found in registry\"\n                  echo \"Available tags:\"\n                  az acr repository show-tags \\\n                    --name \"$ACR_NAME\" \\\n                    --repository \"$(imageName)\" \\\n                    --output table 2>/dev/null || echo \"No tags found\"\n                  exit 1\n                else\n                  echo \"\u2705 Successfully verified image $(imageName):$(dockerTag) exists in registry\"\n                fi\n\n                # Clean up local images to save space\n                docker rmi \"$ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\" || true\n                docker rmi \"$ACR_LOGIN_SERVER/$(imageName):latest\" || true\n                docker system prune -f\n\n  - stage: Deploy\n    displayName: Deploy Container App\n"}}}}]}, {"ruleId": "CKV_AZUREPIPELINES_2", "ruleIndex": 45, "level": "error", "attachments": [], "message": {"text": "Ensure container job uses a version digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "azure-pipelines.yml"}, "region": {"startLine": 559, "endLine": 823, "snippet": {"text": "      - deployment: ContainerAppDeployment\n        displayName: Deploy to Container Apps\n        environment:\n          name: azure-production\n        pool:\n          name: \"Default\"\n        container: mcr.microsoft.com/azure-cli:latest\n        strategy:\n          runOnce:\n            deploy:\n              steps:\n                - script: |\n                    set -eo pipefail\n                    echo \"Ensuring Azure CLI is available...\"\n                    export PYTHONWARNINGS=\"ignore::FutureWarning\"\n                    export AZURE_CLI_DISABLE_CONNECTION_VERIFICATION=1\n                    if ! command -v az >/dev/null 2>&1; then\n                      echo \"Azure CLI not found; bootstrapping via uv...\"\n                      if ! command -v uv >/dev/null 2>&1; then\n                        curl -LsSf https://astral.sh/uv/install.sh | sh\n                        export PATH=\"$HOME/.local/bin:$PATH\"\n                      fi\n                      uv venv \"$HOME/azure-cli-env\"\n                      \"$HOME/azure-cli-env/bin/python\" -m pip install --upgrade pip\n                      \"$HOME/azure-cli-env/bin/pip\" install \"azure-cli==2.73.0\"\n                      echo \"##vso[task.prependpath]$HOME/azure-cli-env/bin\"\n                    fi\n                    az version\n                  displayName: Ensure Azure CLI available (uv fallback)\n\n                - task: AzureCLI@2\n                  displayName: Deploy Container App\n                  inputs:\n                    azureSubscription: $(azureSubscription)\n                    scriptType: bash\n                    scriptLocation: inlineScript\n                    inlineScript: |\n                      echo \"Deploying Container App: $(containerAppName)\"\n                      CONTAINER_APP_NAME=\"$(containerAppName)\"\n\n                      # Check if the container app already exists\n                      if az containerapp show --name \"$CONTAINER_APP_NAME\" --resource-group $(resourceGroupName) >/dev/null 2>&1; then\n                        echo \"Container App exists, updating with new image...\"\n                        UPDATE_MODE=\"update\"\n                      else\n                        echo \"Container App doesn't exist, creating new one...\"\n                        UPDATE_MODE=\"create\"\n                      fi\n\n                      # Use the existing pixelatedcr registry\n                      ACR_NAME=\"pixelatedcr\"\n\n                      # Verify it exists\n                      if ! az acr show --name \"$ACR_NAME\" --resource-group $(resourceGroupName) &>/dev/null; then\n                        echo \"\u274c Container Registry 'pixelatedcr' not found in resource group\"\n                        echo \"Available registries:\"\n                        az acr list --resource-group $(resourceGroupName) --query \"[].name\" --output table\n                        exit 1\n                      fi\n\n                      ACR_LOGIN_SERVER=$(az acr show --name \"$ACR_NAME\" --resource-group $(resourceGroupName) --query loginServer --output tsv)\n                      echo \"Using Container Registry: $ACR_NAME ($ACR_LOGIN_SERVER)\"\n\n                      # Enable admin user on ACR if not already enabled\n                      echo \"Ensuring ACR admin user is enabled...\"\n                      az acr update --name \"$ACR_NAME\" --admin-enabled true\n\n                      # Get ACR admin credentials\n                      ACR_USERNAME=$(az acr credential show --name \"$ACR_NAME\" --query username --output tsv)\n                      ACR_PASSWORD=$(az acr credential show --name \"$ACR_NAME\" --query passwords[0].value --output tsv)\n                      echo \"Retrieved ACR credentials for user: $ACR_USERNAME\"\n\n                      # Verify the Docker image exists before deployment\n                      echo \"Verifying Docker image exists: $ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\"\n                      IMAGE_EXISTS=$(az acr repository show-tags \\\n                        --name \"$ACR_NAME\" \\\n                        --repository \"$(imageName)\" \\\n                        --query \"[?contains(@, '$(dockerTag)')].length(@)\" \\\n                        --output tsv)\n\n                      if [ -z \"$IMAGE_EXISTS\" ] || [ \"$IMAGE_EXISTS\" = \"0\" ]; then\n                        echo \"\u274c Docker image $(imageName):$(dockerTag) not found in registry\"\n                        echo \"Available tags for $(imageName):\"\n                        az acr repository show-tags \\\n                          --name \"$ACR_NAME\" \\\n                          --repository \"$(imageName)\" \\\n                          --output table || echo \"No tags found or repository doesn't exist\"\n                        \n                        echo \"Available repositories:\"\n                        az acr repository list \\\n                          --name \"$ACR_NAME\" \\\n                          --output table\n                        \n                        echo \"Attempting to use 'latest' tag as fallback...\"\n                        DOCKER_IMAGE_TAG=\"latest\"\n                      else\n                        echo \"\u2705 Docker image $(imageName):$(dockerTag) found in registry\"\n                        DOCKER_IMAGE_TAG=\"$(dockerTag)\"\n                      fi\n\n                      # Find Container App Environment\n                      APP_ENV_NAME=$(az containerapp env list \\\n                        --resource-group $(resourceGroupName) \\\n                        --query \"[?starts_with(name, 'pixel-env')].name | [0]\" \\\n                        --output tsv)\n\n                      if [ -z \"$APP_ENV_NAME\" ]; then\n                        echo \"No Container App Environment found. Creating one...\"\n                        # Generate unique suffix for resources\n                        UNIQUE_SUFFIX=$(echo -n \"$(resourceGroupName)-$(environment)\" | sha256sum | cut -c1-8)\n                        APP_ENV_NAME=\"pixel-env-${UNIQUE_SUFFIX}\"\n                        \n                        az containerapp env create \\\n                          --name \"$APP_ENV_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --location $(azureLocation) \\\n                          --only-show-errors\n                        \n                        if [ $? -ne 0 ]; then\n                          echo \"\u274c Failed to create Container App Environment\"\n                          exit 1\n                        fi\n                        echo \"\u2705 Created Container App Environment: $APP_ENV_NAME\"\n                      else\n                        echo \"Found Container App Environment: $APP_ENV_NAME\"\n                      fi\n\n                      echo \"Container App operation mode: $UPDATE_MODE\"\n                      echo \"Using Docker image: $ACR_LOGIN_SERVER/$(imageName):$DOCKER_IMAGE_TAG\"\n\n                      if [ \"$UPDATE_MODE\" = \"update\" ]; then\n                        echo \"Updating existing Container App: $CONTAINER_APP_NAME\"\n                        \n                        az containerapp update \\\n                          --name \"$CONTAINER_APP_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --image \"$ACR_LOGIN_SERVER/$(imageName):$DOCKER_IMAGE_TAG\" \\\n                          --cpu 1.0 \\\n                          --memory 2Gi \\\n                          --min-replicas 1 \\\n                          --max-replicas 10 \\\n                          --set-env-vars \\\n                            \"BUILD_ID=$(dockerTag)\" \\\n                            \"NODE_ENV=production\" \\\n                            \"PORT=4321\" \\\n                            \"PUBLIC_CLERK_PUBLISHABLE_KEY=$(CLERK_PUBLISHABLE_KEY)\" \\\n                            \"CLERK_SECRET_KEY=$(CLERK_SECRET_KEY)\" \\\n                          --only-show-errors\n\n                        if [ $? -eq 0 ]; then\n                          echo \"\u2705 Container App updated successfully\"\n                        else\n                          echo \"\u274c Container App update failed\"\n                          exit 1\n                        fi\n                      else\n                        echo \"Creating new Container App: $CONTAINER_APP_NAME\"\n                        \n                        az containerapp create \\\n                          --name \"$CONTAINER_APP_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --environment \"$APP_ENV_NAME\" \\\n                          --image \"$ACR_LOGIN_SERVER/$(imageName):$DOCKER_IMAGE_TAG\" \\\n                          --target-port 4321 \\\n                          --ingress 'external' \\\n                          --registry-server \"$ACR_LOGIN_SERVER\" \\\n                          --registry-username \"$ACR_USERNAME\" \\\n                          --registry-password \"$ACR_PASSWORD\" \\\n                          --cpu 1.0 \\\n                          --memory 2Gi \\\n                          --min-replicas 1 \\\n                          --max-replicas 10 \\\n                          --env-vars \\\n                            \"BUILD_ID=$(dockerTag)\" \\\n                            \"NODE_ENV=production\" \\\n                            \"PORT=4321\" \\\n                            \"PUBLIC_CLERK_PUBLISHABLE_KEY=$(CLERK_PUBLISHABLE_KEY)\" \\\n                            \"CLERK_SECRET_KEY=$(CLERK_SECRET_KEY)\" \\\n                          --only-show-errors\n\n                        if [ $? -eq 0 ]; then\n                          echo \"\u2705 Container App created successfully\"\n                        else\n                          echo \"\u274c Container App creation failed\"\n                          exit 1\n                        fi\n                      fi\n\n                      # Configure custom domain if specified\n                      CUSTOM_DOMAIN=\"$(customDomain)\"\n                      if [ ! -z \"$CUSTOM_DOMAIN\" ] && [ \"$CUSTOM_DOMAIN\" != \"\" ]; then\n                        echo \"Configuring custom domain: $CUSTOM_DOMAIN\"\n                        \n                        # Add custom domain to the Container App\n                        az containerapp hostname add \\\n                          --hostname \"$CUSTOM_DOMAIN\" \\\n                          --name \"$CONTAINER_APP_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --only-show-errors || {\n                          echo \"\u26a0\ufe0f  Failed to add custom domain $CUSTOM_DOMAIN\"\n                          echo \"Make sure:\"\n                          echo \"1. DNS CNAME record points $CUSTOM_DOMAIN to the Container App FQDN\"\n                          echo \"2. Domain ownership is verified\"\n                          echo \"3. You have necessary permissions\"\n                        }\n                        \n                        # Create managed certificate for the custom domain\n                        echo \"Creating managed certificate for $CUSTOM_DOMAIN...\"\n                        az containerapp env certificate create \\\n                          --name \"${CUSTOM_DOMAIN//./-}-cert\" \\\n                          --environment \"$APP_ENV_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --hostname \"$CUSTOM_DOMAIN\" \\\n                          --validation-method CNAME \\\n                          --only-show-errors || {\n                          echo \"\u26a0\ufe0f  Failed to create managed certificate for $CUSTOM_DOMAIN\"\n                          echo \"You may need to manually create and bind an SSL certificate\"\n                        }\n                        \n                        # Bind the certificate to the hostname\n                        CERT_ID=$(az containerapp env certificate list \\\n                          --environment \"$APP_ENV_NAME\" \\\n                          --resource-group $(resourceGroupName) \\\n                          --query \"[?properties.subjectName=='$CUSTOM_DOMAIN'].id | [0]\" \\\n                          --output tsv)\n                        \n                        if [ ! -z \"$CERT_ID\" ]; then\n                          echo \"Binding certificate to hostname...\"\n                          az containerapp hostname bind \\\n                            --hostname \"$CUSTOM_DOMAIN\" \\\n                            --name \"$CONTAINER_APP_NAME\" \\\n                            --resource-group $(resourceGroupName) \\\n                            --certificate \"$CERT_ID\" \\\n                            --only-show-errors || {\n                            echo \"\u26a0\ufe0f  Failed to bind certificate to $CUSTOM_DOMAIN\"\n                          }\n                        fi\n                        \n                        echo \"\u2705 Custom domain configuration completed for: $CUSTOM_DOMAIN\"\n                      else\n                        echo \"No custom domain specified, using default Container App URL\"\n                      fi\n\n                      # Get and display the Container App URL\n                      APP_URL=$(az containerapp show \\\n                        --name \"$CONTAINER_APP_NAME\" \\\n                        --resource-group $(resourceGroupName) \\\n                        --query properties.configuration.ingress.fqdn \\\n                        --output tsv)\n\n                      if [ ! -z \"$APP_URL\" ]; then\n                        echo \"\ud83d\ude80 Container App deployed to: https://$APP_URL\"\n                        echo \"##vso[task.setvariable variable=containerAppUrl]https://$APP_URL\"\n                        \n                        # Also show custom domain if configured\n                        CUSTOM_DOMAIN=\"$(customDomain)\"\n                        if [ ! -z \"$CUSTOM_DOMAIN\" ] && [ \"$CUSTOM_DOMAIN\" != \"\" ]; then\n                          echo \"\ud83c\udf10 Custom domain: https://$CUSTOM_DOMAIN\"\n                        fi\n                      else\n                        echo \"\u26a0\ufe0f  Could not retrieve Container App URL\"\n                      fi\n\n  - stage: DeployAppService\n    displayName: Deploy to App Service\n"}}}}]}, {"ruleId": "CKV_AZUREPIPELINES_2", "ruleIndex": 45, "level": "error", "attachments": [], "message": {"text": "Ensure container job uses a version digest"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "azure-pipelines.yml"}, "region": {"startLine": 830, "endLine": 929, "snippet": {"text": "      - deployment: AppServiceDeployment\n        displayName: Deploy to App Service\n        environment:\n          name: azure-production\n        pool:\n          name: \"Default\"\n        container: mcr.microsoft.com/azure-cli:latest\n        strategy:\n          runOnce:\n            deploy:\n              steps:\n                - script: |\n                    set -eo pipefail\n                    echo \"Ensuring Azure CLI is available...\"\n                    export PYTHONWARNINGS=\"ignore::FutureWarning\"\n                    export AZURE_CLI_DISABLE_CONNECTION_VERIFICATION=1\n                    if ! command -v az >/dev/null 2>&1; then\n                      echo \"Azure CLI not found; bootstrapping via uv...\"\n                      if ! command -v uv >/dev/null 2>&1; then\n                        curl -LsSf https://astral.sh/uv/install.sh | sh\n                        export PATH=\"$HOME/.local/bin:$PATH\"\n                      fi\n                      uv venv \"$HOME/azure-cli-env\"\n                      \"$HOME/azure-cli-env/bin/python\" -m pip install --upgrade pip\n                      \"$HOME/azure-cli-env/bin/pip\" install \"azure-cli==2.73.0\"\n                      echo \"##vso[task.prependpath]$HOME/azure-cli-env/bin\"\n                    fi\n                    az version\n                  displayName: Ensure Azure CLI available (uv fallback)\n\n                - task: AzureCLI@2\n                  displayName: Deploy to App Service\n                  inputs:\n                    azureSubscription: $(azureSubscription)\n                    scriptType: bash\n                    scriptLocation: inlineScript\n                    inlineScript: |\n                      echo \"Deploying to App Service: $(appServiceName)\"\n                      APP_SERVICE_NAME=\"$(appServiceName)\"\n\n                      # Use the existing pixelatedcr registry\n                      ACR_NAME=\"pixelatedcr\"\n                      ACR_LOGIN_SERVER=$(az acr show --name \"$ACR_NAME\" --resource-group $(resourceGroupName) --query loginServer --output tsv)\n\n                      echo \"Using Container Registry: $ACR_NAME ($ACR_LOGIN_SERVER)\"\n                      echo \"Using Docker image: $ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\"\n\n                      # Get ACR credentials first\n                      ACR_USERNAME=$(az acr credential show --name \"$ACR_NAME\" --query username --output tsv)\n                      ACR_PASSWORD=$(az acr credential show --name \"$ACR_NAME\" --query passwords[0].value --output tsv)\n\n                      echo \"Using ACR credentials: $ACR_USERNAME\"\n\n                      # Configure App Service for container deployment using new syntax\n                      echo \"Configuring App Service container settings...\"\n                      az webapp config container set \\\n                        --name \"$APP_SERVICE_NAME\" \\\n                        --resource-group $(resourceGroupName) \\\n                        --container-image-name \"$ACR_LOGIN_SERVER/$(imageName):$(dockerTag)\" \\\n                        --container-registry-url \"https://$ACR_LOGIN_SERVER\" \\\n                        --container-registry-user \"$ACR_USERNAME\" \\\n                        --container-registry-password \"$ACR_PASSWORD\"\n\n                      # Configure App Service app settings\n                      echo \"Configuring App Service environment variables...\"\n                      az webapp config appsettings set \\\n                        --name \"$APP_SERVICE_NAME\" \\\n                        --resource-group $(resourceGroupName) \\\n                        --settings \\\n                          BUILD_ID=$(dockerTag) \\\n                          NODE_ENV=production \\\n                          PORT=4321 \\\n                          WEBSITES_PORT=4321 \\\n                          PUBLIC_CLERK_PUBLISHABLE_KEY=\"$(CLERK_PUBLISHABLE_KEY)\" \\\n                          CLERK_SECRET_KEY=\"$(CLERK_SECRET_KEY)\" \\\n                          WEBSITES_ENABLE_APP_SERVICE_STORAGE=false\n\n                      # Restart App Service to pick up new container\n                      echo \"Restarting App Service to deploy new container...\"\n                      az webapp restart \\\n                        --name \"$APP_SERVICE_NAME\" \\\n                        --resource-group $(resourceGroupName)\n\n                      # Get App Service URL\n                      APP_URL=$(az webapp show \\\n                        --name \"$APP_SERVICE_NAME\" \\\n                        --resource-group $(resourceGroupName) \\\n                        --query defaultHostName \\\n                        --output tsv)\n\n                      if [ ! -z \"$APP_URL\" ]; then\n                        echo \"\ud83d\ude80 App Service deployed to: https://$APP_URL\"\n                        echo \"\ud83c\udf10 Custom domain: https://$(customDomain)\"\n                        echo \"##vso[task.setvariable variable=appServiceUrl]https://$APP_URL\"\n                      else\n                        echo \"\u26a0\ufe0f  Could not retrieve App Service URL\"\n                      fi\n\n  - stage: PostDeploymentTests\n    displayName: Post Deployment Tests\n"}}}}]}]}]}