---
// Pixelated Empathy Training Portal - Main Landing Page
// Integrates seamlessly with existing Astro architecture

import Button from '@/components/ui/Button.astro'
import Card from '@/components/ui/Card.astro'
import Layout from '@/layouts/Layout.astro'
import { getSession } from '@/lib/auth'

const session = await getSession(Astro.request)
if (!session) {
  return Astro.redirect('/auth/login')
}

const userRole = session.user.role // 'trainee', 'supervisor', 'admin'

// Get active training sessions for this user
const activeTrainingSessions = await fetch(
  `${import.meta.env.API_BASE_URL}/training/sessions/active`,
  {
    headers: { Authorization: `Bearer ${session.accessToken}` },
  },
)
  .then((res) => res.json())
  .catch(() => [])

// Get available training programs
const trainingPrograms = await fetch(
  `${import.meta.env.API_BASE_URL}/training/programs`,
  {
    headers: { Authorization: `Bearer ${session.accessToken}` },
  },
)
  .then((res) => res.json())
  .catch(() => [])
---

<Layout
  title="Pixelated Empathy - Therapeutic Training Platform"
  description="Advanced AI-powered therapeutic training simulation platform"
>
  <main
    class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50"
  >
    <!-- Hero Section -->
    <section class="relative px-4 py-16 mx-auto max-w-7xl sm:px-6 lg:px-8">
      <div class="text-center">
        <div class="flex items-center justify-center mb-6">
          <div
            class="w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-600 rounded-2xl flex items-center justify-center mr-4"
          >
            <span class="text-2xl">üé≠</span>
          </div>
          <h1 class="text-4xl font-bold text-gray-900 sm:text-5xl lg:text-6xl">
            Pixelated <span
              class="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"
              >Empathy</span
            >
          </h1>
        </div>

        <p class="max-w-3xl mx-auto text-xl text-gray-600 sm:text-2xl">
          Revolutionary therapeutic training platform where AI role-plays as
          difficult clients for comprehensive therapist education and supervisor
          evaluation.
        </p>

        <div class="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
          {
            userRole === 'trainee' && (
              <Button
                href="/training/session/new"
                size="lg"
                class="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
              >
                üé¨ Start Training Session
              </Button>
            )
          }
          {
            userRole === 'supervisor' && (
              <Button
                href="/training/supervisor/dashboard"
                size="lg"
                class="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700"
              >
                üë®‚Äçüè´ Supervisor Dashboard
              </Button>
            )
          }
          <Button
            href="/training/progress"
            variant="outline"
            size="lg"
            class="border-2 border-purple-600 text-purple-600 hover:bg-purple-50"
          >
            üìä View Progress
          </Button>
        </div>
      </div>
    </section>

    <!-- Active Sessions Section -->
    {
      activeTrainingSessions.length > 0 && (
        <section class="px-4 py-12 mx-auto max-w-7xl sm:px-6 lg:px-8">
          <h2 class="text-3xl font-bold text-gray-900 mb-8 text-center">
            Active Training Sessions
          </h2>
          <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {activeTrainingSessions.map((session: any) => (
              <Card class="p-6 hover:shadow-lg transition-shadow border-l-4 border-l-blue-500">
                <div class="flex items-start justify-between mb-4">
                  <div>
                    <h3 class="text-lg font-semibold text-gray-900">
                      {session.clientProfile.name}
                    </h3>
                    <p class="text-sm text-gray-600">
                      {session.clientProfile.personalityType}
                    </p>
                  </div>
                  <span
                    class={`px-2 py-1 text-xs font-medium rounded-full ${
                      session.status === 'active'
                        ? 'bg-green-100 text-green-800'
                        : 'bg-yellow-100 text-yellow-800'
                    }`}
                  >
                    {session.status}
                  </span>
                </div>

                <div class="space-y-2 mb-4">
                  <div class="flex justify-between text-sm">
                    <span class="text-gray-600">Duration:</span>
                    <span class="font-medium">{session.duration}</span>
                  </div>
                  <div class="flex justify-between text-sm">
                    <span class="text-gray-600">Difficulty:</span>
                    <span class="font-medium">
                      Level {session.difficultyLevel}
                    </span>
                  </div>
                  <div class="flex justify-between text-sm">
                    <span class="text-gray-600">Progress:</span>
                    <span class="font-medium">
                      {session.therapeuticProgress}%
                    </span>
                  </div>
                </div>

                <Button
                  href={`/training/session/${session.sessionId}`}
                  class="w-full"
                  size="sm"
                >
                  {userRole === 'supervisor'
                    ? 'üëÄ Monitor Session'
                    : 'üé≠ Continue Training'}
                </Button>
              </Card>
            ))}
          </div>
        </section>
      )
    }

    <!-- Training Programs Section -->
    <section class="px-4 py-12 mx-auto max-w-7xl sm:px-6 lg:px-8">
      <h2 class="text-3xl font-bold text-gray-900 mb-8 text-center">
        Training Programs
      </h2>
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        {
          trainingPrograms.map((program: any) => (
            <Card class="p-8 hover:shadow-xl transition-all duration-300 border-2 hover:border-purple-200">
              <div class="text-center mb-6">
                <div class="w-16 h-16 bg-gradient-to-br from-purple-500 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span class="text-2xl">{program.icon || 'üéì'}</span>
                </div>
                <h3 class="text-xl font-bold text-gray-900 mb-2">
                  {program.name}
                </h3>
                <p class="text-gray-600">{program.description}</p>
              </div>

              <div class="space-y-3 mb-6">
                <div class="flex justify-between text-sm">
                  <span class="text-gray-600">Target Level:</span>
                  <span class="font-medium capitalize">
                    {program.targetLevel}
                  </span>
                </div>
                <div class="flex justify-between text-sm">
                  <span class="text-gray-600">Sessions Required:</span>
                  <span class="font-medium">{program.requiredSessions}</span>
                </div>
                <div class="flex justify-between text-sm">
                  <span class="text-gray-600">Completion Rate:</span>
                  <span class="font-medium">{program.completionRate}%</span>
                </div>
              </div>

              <div class="mb-6">
                <h4 class="text-sm font-semibold text-gray-900 mb-2">
                  Key Skills:
                </h4>
                <div class="flex flex-wrap gap-2">
                  {program.keySkills?.slice(0, 3).map((skill: string) => (
                    <span class="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                      {skill}
                    </span>
                  ))}
                </div>
              </div>

              <Button
                href={`/training/program/${program.programId}`}
                class="w-full"
                variant={program.enrolled ? 'default' : 'outline'}
              >
                {program.enrolled ? 'üìö Continue Program' : 'üöÄ Start Program'}
              </Button>
            </Card>
          ))
        }
      </div>
    </section>

    <!-- Quick Stats Section -->
    <section class="px-4 py-12 bg-gray-50 mx-auto max-w-7xl sm:px-6 lg:px-8">
      <div class="grid gap-8 md:grid-cols-4">
        <div class="text-center">
          <div class="text-3xl font-bold text-blue-600 mb-2">8,000+</div>
          <div class="text-gray-600">Training Conversations</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-purple-600 mb-2">6</div>
          <div class="text-gray-600">Difficult Client Types</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-green-600 mb-2">5</div>
          <div class="text-gray-600">Competency Levels</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-orange-600 mb-2">98%</div>
          <div class="text-gray-600">Training Effectiveness</div>
        </div>
      </div>
    </section>
  </main>
</Layout>

<style>
  /* Custom styles for Pixelated Empathy branding */
  .hero-gradient {
    background: linear-gradient(
      135deg,
      rgba(59, 130, 246, 0.1) 0%,
      rgba(147, 51, 234, 0.1) 100%
    );
  }

  .card-hover {
    transition: all 0.3s ease;
  }

  .card-hover:hover {
    transform: translateY(-2px);
  }
</style>
