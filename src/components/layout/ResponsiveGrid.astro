---
export interface Props {
  columns?: 1 | 2 | 3 | 4 | 5 | 6 | 'auto'
  gap?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'
  minCardWidth?: string
  className?: string
  alignItems?: 'start' | 'center' | 'end' | 'stretch'
  justifyItems?: 'start' | 'center' | 'end' | 'stretch'
  breakpoints?: {
    sm?: number | 'auto'
    md?: number | 'auto'
    lg?: number | 'auto'
    xl?: number | 'auto'
  }
}

const {
  columns = 'auto',
  gap = 'md',
  minCardWidth = '280px',
  className = '',
  alignItems = 'stretch',
  justifyItems = 'stretch',
  breakpoints = {},
  ...props
} = Astro.props

// Default responsive breakpoints if not specified
const defaultBreakpoints = {
  sm: 1,
  md: 2,
  lg: 3,
  xl: 4,
  ...breakpoints,
}

// Gap size mapping
const gapClasses = {
  xs: 'gap-responsive-xs',
  sm: 'gap-responsive-sm',
  md: 'gap-responsive-md',
  lg: 'gap-responsive-lg',
  xl: 'gap-responsive-xl',
}

// Alignment classes
const alignmentClasses = {
  alignItems: alignItems !== 'stretch' ? `items-${alignItems}` : '',
  justifyItems:
    justifyItems !== 'stretch' ? `justify-items-${justifyItems}` : '',
}

// Build responsive classes
const getGridColumns = (cols: number | 'auto') => {
  if (cols === 'auto') return 'auto'
  return `repeat(${cols}, 1fr)`
}

const gridClass = [
  'grid-responsive',
  gapClasses[gap],
  alignmentClasses.alignItems,
  alignmentClasses.justifyItems,
  className,
]
  .filter(Boolean)
  .join(' ')

// Generate dynamic CSS for responsive grid
const responsiveGridStyles = () => {
  if (columns === 'auto') {
    return `
      grid-template-columns: repeat(auto-fit, minmax(${minCardWidth}, 1fr));
    `
  }

  let styles = `
    grid-template-columns: 1fr;
  `

  // Add breakpoint-specific styles
  if (defaultBreakpoints.sm) {
    styles += `
      @media (min-width: 640px) {
        grid-template-columns: ${getGridColumns(defaultBreakpoints.sm)};
      }
    `
  }

  if (defaultBreakpoints.md) {
    styles += `
      @media (min-width: 768px) {
        grid-template-columns: ${getGridColumns(defaultBreakpoints.md)};
      }
    `
  }

  if (defaultBreakpoints.lg) {
    styles += `
      @media (min-width: 1024px) {
        grid-template-columns: ${getGridColumns(defaultBreakpoints.lg)};
      }
    `
  }

  if (defaultBreakpoints.xl) {
    styles += `
      @media (min-width: 1280px) {
        grid-template-columns: ${getGridColumns(defaultBreakpoints.xl)};
      }
    `
  }

  return styles
}
---

<div class={gridClass} {...props}>
  <slot />
</div>

<style define:vars={{ gridStyles: responsiveGridStyles() }}>
  .grid-responsive {
    display: grid;
    width: 100%;
    /* Apply dynamic responsive styles */
    grid-template-columns: var(--grid-columns, 1fr);
  }

  /* Dynamic responsive grid styles are injected here */
  .grid-responsive {
    grid-template-columns: 1fr;
  }

  /* Auto-fit grid for automatic responsive columns */
  .grid-auto-fit {
    grid-template-columns: repeat(
      auto-fit,
      minmax(var(--min-card-width, 280px), 1fr)
    );
  }

  /* Gap size classes using CSS custom properties */
  .gap-responsive-xs {
    gap: var(--space-responsive-xs);
  }
  .gap-responsive-sm {
    gap: var(--space-responsive-sm);
  }
  .gap-responsive-md {
    gap: var(--space-responsive-md);
  }
  .gap-responsive-lg {
    gap: var(--space-responsive-lg);
  }
  .gap-responsive-xl {
    gap: var(--space-responsive-xl);
  }

  /* Ensure grid items don't overflow */
  .grid-responsive > * {
    min-width: 0;
    overflow-wrap: break-word;
  }

  /* Auto-responsive grid based on container width */
  @container (min-width: 640px) {
    .grid-responsive.container-aware {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @container (min-width: 768px) {
    .grid-responsive.container-aware {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @container (min-width: 1024px) {
    .grid-responsive.container-aware {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  /* Mobile-first responsive grid */
  @media (min-width: 640px) {
    .grid-responsive-2-sm {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 768px) {
    .grid-responsive-3-md {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .grid-responsive-4-lg {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  @media (min-width: 1280px) {
    .grid-responsive-5-xl {
      grid-template-columns: repeat(5, 1fr);
    }

    .grid-responsive-6-xl {
      grid-template-columns: repeat(6, 1fr);
    }
  }
</style>

<script define:vars={{ columns, minCardWidth, breakpoints: defaultBreakpoints }}
>
  // Apply dynamic grid styles for auto-responsive behavior
  if (typeof window !== 'undefined') {
    const applyResponsiveGrid = () => {
      const gridElement = document.querySelector('.grid-responsive')
      if (!gridElement) return

      if (columns === 'auto') {
        gridElement.style.gridTemplateColumns = `repeat(auto-fit, minmax(${minCardWidth}, 1fr))`
        return
      }

      const width = window.innerWidth
      let cols = 1

      if (width >= 1280 && breakpoints.xl) cols = breakpoints.xl
      else if (width >= 1024 && breakpoints.lg) cols = breakpoints.lg
      else if (width >= 768 && breakpoints.md) cols = breakpoints.md
      else if (width >= 640 && breakpoints.sm) cols = breakpoints.sm

      if (typeof cols === 'number') {
        gridElement.style.gridTemplateColumns = `repeat(${cols}, 1fr)`
      }
    }

    // Apply on load and resize
    applyResponsiveGrid()
    window.addEventListener('resize', applyResponsiveGrid)
  }
</script>
