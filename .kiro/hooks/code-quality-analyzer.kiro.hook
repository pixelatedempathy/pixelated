{
  "enabled": true,
  "name": "Code Quality Analyzer",
  "description": "Monitors source code files for changes and analyzes them for potential improvements including code smells, design patterns, best practices, readability, maintainability, and performance optimizations",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.ts",
      "src/**/*.tsx",
      "src/**/*.js",
      "src/**/*.jsx",
      "ai/**/*.py",
      "scripts/**/*.py",
      "scripts/**/*.js",
      "scripts/**/*.sh",
      "*.py",
      "*.ts",
      "*.js",
      "*.tsx",
      "*.jsx"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Analyze the modified code files for potential improvements. Focus on:\n\n1. **Code Smells**: Identify any code smells such as duplicated code, long methods, large classes, excessive parameters, or inappropriate intimacy between classes.\n\n2. **Design Patterns**: Suggest applicable design patterns that could improve the code structure and maintainability.\n\n3. **Best Practices**: Check adherence to language-specific best practices, naming conventions, and coding standards.\n\n4. **Readability**: Evaluate code clarity, comment quality, variable naming, and overall code organization.\n\n5. **Maintainability**: Assess modularity, coupling, cohesion, and suggest refactoring opportunities.\n\n6. **Performance**: Identify potential performance bottlenecks, inefficient algorithms, unnecessary computations, or memory leaks.\n\nFor each issue found, provide:\n- Clear description of the problem\n- Location in the code (file and line if possible)\n- Specific suggestion for improvement\n- Example of improved code when applicable\n\nMaintain the existing functionality while suggesting improvements. Prioritize suggestions by impact and effort required."
  }
}