#!/bin/bash
set -e

# Pixelated Empathy - Build Script
# ================================

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="pixelated-empathy"
NODE_VERSION="18"
BUILD_DIR="dist"
CACHE_DIR=".build-cache"

# Functions
log_info() {
    echo -e "${BLUE}[BUILD]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_prerequisites() {
    log_info "Checking build prerequisites..."
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js is not installed"
        exit 1
    fi
    
    local node_version=$(node --version | sed 's/v//')
    local major_version=$(echo $node_version | cut -d. -f1)
    
    if [ "$major_version" -lt "$NODE_VERSION" ]; then
        log_warning "Node.js version $node_version is older than recommended $NODE_VERSION"
    fi
    
    # Check npm/pnpm
    if command -v pnpm &> /dev/null; then
        log_info "Using pnpm as package manager"
        PACKAGE_MANAGER="pnpm"
    elif command -v npm &> /dev/null; then
        log_info "Using npm as package manager"
        PACKAGE_MANAGER="npm"
    else
        log_error "No package manager found (npm or pnpm required)"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

setup_environment() {
    log_info "Setting up build environment..."
    
    # Create cache directory
    mkdir -p "$CACHE_DIR"
    
    # Set build environment variables
    export NODE_ENV=production
    export CI=true
    export GENERATE_SOURCEMAP=false
    
    # Load environment variables if .env exists
    if [ -f ".env" ]; then
        log_info "Loading environment variables from .env"
        set -a
        source .env
        set +a
    elif [ -f ".env.example" ]; then
        log_warning "No .env file found, using .env.example"
        cp .env.example .env
        set -a
        source .env
        set +a
    fi
    
    log_success "Build environment configured"
}

install_dependencies() {
    log_info "Installing dependencies..."
    
    # Check if node_modules exists and is up to date
    if [ -f "package-lock.json" ] && [ -d "node_modules" ]; then
        if [ "package.json" -nt "node_modules" ] || [ "package-lock.json" -nt "node_modules" ]; then
            log_info "Dependencies are outdated, reinstalling..."
            rm -rf node_modules
        fi
    fi
    
    # Install dependencies
    case $PACKAGE_MANAGER in
        "pnpm")
            pnpm install --frozen-lockfile --prefer-offline || {
                log_error "Failed to install dependencies with pnpm"
                exit 1
            }
            ;;
        "npm")
            npm ci --prefer-offline || {
                log_error "Failed to install dependencies with npm"
                exit 1
            }
            ;;
    esac
    
    log_success "Dependencies installed successfully"
}

run_linting() {
    log_info "Running code linting..."
    
    # ESLint
    if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
        $PACKAGE_MANAGER run lint || {
            log_warning "Linting issues found, but continuing build"
        }
    else
        log_warning "No ESLint configuration found, skipping linting"
    fi
    
    # TypeScript type checking
    if [ -f "tsconfig.json" ]; then
        log_info "Running TypeScript type checking..."
        $PACKAGE_MANAGER run typecheck || npx tsc --noEmit || {
            log_warning "TypeScript type checking issues found"
        }
    fi
    
    log_success "Code quality checks completed"
}

run_tests() {
    log_info "Running test suite..."
    
    # Unit tests
    if grep -q '"test"' package.json; then
        $PACKAGE_MANAGER run test || {
            log_error "Unit tests failed"
            exit 1
        }
    else
        log_warning "No test script found in package.json"
    fi
    
    # Integration tests
    if grep -q '"test:integration"' package.json; then
        $PACKAGE_MANAGER run test:integration || {
            log_warning "Integration tests failed, but continuing"
        }
    fi
    
    log_success "Tests completed"
}

build_application() {
    log_info "Building application..."
    
    # Clean previous build
    if [ -d "$BUILD_DIR" ]; then
        log_info "Cleaning previous build..."
        rm -rf "$BUILD_DIR"
    fi
    
    # Build the application
    if grep -q '"build"' package.json; then
        $PACKAGE_MANAGER run build || {
            log_error "Application build failed"
            exit 1
        }
    else
        log_error "No build script found in package.json"
        exit 1
    fi
    
    # Verify build output
    if [ ! -d "$BUILD_DIR" ]; then
        log_error "Build directory $BUILD_DIR was not created"
        exit 1
    fi
    
    local build_size=$(du -sh "$BUILD_DIR" | cut -f1)
    log_success "Application built successfully (Size: $build_size)"
}

optimize_build() {
    log_info "Optimizing build output..."
    
    # Compress static assets if available
    if command -v gzip &> /dev/null; then
        find "$BUILD_DIR" -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec gzip -k {} \;
        log_info "Static assets compressed with gzip"
    fi
    
    # Generate build manifest
    local build_info="{
        \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
        \"commit\": \"$(git rev-parse HEAD 2>/dev/null || echo 'unknown')\",
        \"branch\": \"$(git branch --show-current 2>/dev/null || echo 'unknown')\",
        \"node_version\": \"$(node --version)\",
        \"build_size\": \"$(du -sh $BUILD_DIR | cut -f1)\"
    }"
    
    echo "$build_info" > "$BUILD_DIR/build-info.json"
    
    log_success "Build optimization completed"
}

generate_artifacts() {
    log_info "Generating build artifacts..."
    
    # Create artifacts directory
    mkdir -p "artifacts"
    
    # Create build archive
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local archive_name="artifacts/${PROJECT_NAME}_build_${timestamp}.tar.gz"
    
    tar -czf "$archive_name" -C "$BUILD_DIR" . || {
        log_error "Failed to create build archive"
        exit 1
    }
    
    # Generate checksums
    if command -v sha256sum &> /dev/null; then
        sha256sum "$archive_name" > "${archive_name}.sha256"
        log_info "Generated SHA256 checksum"
    fi
    
    log_success "Build artifacts generated: $archive_name"
}

cleanup_build() {
    log_info "Cleaning up build artifacts..."
    
    # Clean temporary files
    rm -rf .tmp
    rm -rf "$CACHE_DIR"
    
    # Clean node_modules if requested
    if [ "$CLEAN_DEPS" = "true" ]; then
        log_info "Cleaning dependencies..."
        rm -rf node_modules
    fi
    
    log_success "Build cleanup completed"
}

show_help() {
    echo "Pixelated Empathy Build Script"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --clean-deps    Clean node_modules after build"
    echo "  --skip-tests    Skip running tests"
    echo "  --skip-lint     Skip linting and type checking"
    echo "  --optimize      Enable build optimization"
    echo "  --artifacts     Generate build artifacts"
    echo "  --help          Show this help message"
    echo ""
    echo "Environment Variables:"
    echo "  NODE_ENV        Build environment (default: production)"
    echo "  CLEAN_DEPS      Clean dependencies after build (true/false)"
    echo "  SKIP_TESTS      Skip tests (true/false)"
    echo "  SKIP_LINT       Skip linting (true/false)"
    echo ""
    echo "Examples:"
    echo "  $0                          # Full build with all checks"
    echo "  $0 --skip-tests             # Build without running tests"
    echo "  $0 --clean-deps --artifacts # Build with cleanup and artifacts"
}

# Parse command line arguments
CLEAN_DEPS=false
SKIP_TESTS=false
SKIP_LINT=false
OPTIMIZE=false
GENERATE_ARTIFACTS=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --clean-deps)
            CLEAN_DEPS=true
            shift
            ;;
        --skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        --skip-lint)
            SKIP_LINT=true
            shift
            ;;
        --optimize)
            OPTIMIZE=true
            shift
            ;;
        --artifacts)
            GENERATE_ARTIFACTS=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Main build process
main() {
    log_info "Starting build process for $PROJECT_NAME"
    
    check_prerequisites
    setup_environment
    install_dependencies
    
    if [ "$SKIP_LINT" != "true" ]; then
        run_linting
    fi
    
    if [ "$SKIP_TESTS" != "true" ]; then
        run_tests
    fi
    
    build_application
    
    if [ "$OPTIMIZE" = "true" ]; then
        optimize_build
    fi
    
    if [ "$GENERATE_ARTIFACTS" = "true" ]; then
        generate_artifacts
    fi
    
    cleanup_build
    
    log_success "Build process completed successfully!"
}

# Run main function
main