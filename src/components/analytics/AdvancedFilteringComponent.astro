---
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Slider } from '@/components/ui/slider'
import { Switch } from '@/components/ui/switch'

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Checkbox } from '@/components/ui/Checkbox'
import { IconFilter, IconX } from '@/components/ui/icons'

import { cn } from '@/lib/utils'

const {
  availableEmotionTypes = [],
  availablePatternTypes = [],
  availablePatternCategories = [],
  className = '',
  compact = false,
} = Astro.props
---

<div
  class={cn(
    'bg-card border rounded-md shadow-sm overflow-hidden',
    compact ? 'p-2' : 'p-4',
    className,
  )}
  id="advanced-filtering-component"
>
  <div class="space-y-4">
    <!-- Tab Navigation -->
    <div class="flex border-b">
      <button
        class="tab-button px-3 py-2 border-b-2 border-primary"
        data-tab="time"
      >
        Time Range
      </button>
      <button
        class="tab-button px-3 py-2 border-b-2 border-transparent"
        data-tab="emotions"
      >
        Emotions
      </button>
      <button
        class="tab-button px-3 py-2 border-b-2 border-transparent"
        data-tab="patterns"
      >
        Patterns
      </button>
      <button
        class="tab-button px-3 py-2 border-b-2 border-transparent"
        data-tab="visualization"
      >
        Visualization
      </button>
    </div>

    <!-- Filter Sections -->
    <div id="filter-sections">
      <!-- Time Filters -->
      <div class="filter-section space-y-4" data-section="time">
        <div class="space-y-2">
          <Label>Time Range</Label>
          <Select id="time-range-select">
            <SelectTrigger class="w-full">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="day">Last 24 hours</SelectItem>
              <SelectItem value="week">Last 7 days</SelectItem>
              <SelectItem value="month">Last 30 days</SelectItem>
              <SelectItem value="quarter">Last 90 days</SelectItem>
              <SelectItem value="year">Last 365 days</SelectItem>
              <SelectItem value="custom">Custom range</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div id="custom-date-range" class="grid grid-cols-2 gap-4 hidden">
          <div class="space-y-2">
            <Label htmlFor="start-date">Start Date</Label>
            <Input id="start-date" type="date" />
          </div>
          <div class="space-y-2">
            <Label htmlFor="end-date">End Date</Label>
            <Input id="end-date" type="date" />
          </div>
        </div>
      </div>

      <!-- Emotions Filters -->
      <div class="filter-section space-y-4 hidden" data-section="emotions">
        <div class="space-y-2">
          <Label>Emotion Types</Label>
          <div class="grid grid-cols-2 sm:grid-cols-3 gap-2 mt-1">
            {availableEmotionTypes.map((type) => (
              <div class="flex items-center space-x-2">
                <Checkbox
                  id={`emotion-${type}`}
                  value={type}
                  class="emotion-type-checkbox"
                />
                <Label htmlFor={`emotion-${type}`} class="cursor-pointer">
                  {type}
                </Label>
              </div>
            ))}
          </div>
        </div>

        <div class="space-y-2">
          <div class="flex justify-between">
            <Label>Intensity Range</Label>
            <span class="text-xs text-gray-500" id="intensity-range-display">
              0.0 - 1.0
            </span>
          </div>
          <div class="pt-2 px-2">
            <Slider
              id="intensity-range-slider"
              data-min="0"
              data-max="1"
              data-start="0"
              data-end="1"
            />
          </div>
        </div>

        <div class="space-y-2">
          <Label>Dimensional Ranges</Label>

          <div class="p-2 border rounded-md space-y-3">
            <div class="space-y-1">
              <div class="flex justify-between">
                <Label>Valence (Negative - Positive)</Label>
                <span class="text-xs text-gray-500" id="valence-range-display">
                  -1.0 - 1.0
                </span>
              </div>
              <div class="pt-1 px-2">
                <Slider
                  id="valence-range-slider"
                  data-min="-1"
                  data-max="1"
                  data-start="-1"
                  data-end="1"
                />
              </div>
            </div>

            <div class="space-y-1">
              <div class="flex justify-between">
                <Label>Arousal (Calm - Excited)</Label>
                <span class="text-xs text-gray-500" id="arousal-range-display">
                  -1.0 - 1.0
                </span>
              </div>
              <div class="pt-1 px-2">
                <Slider
                  id="arousal-range-slider"
                  data-min="-1"
                  data-max="1"
                  data-start="-1"
                  data-end="1"
                />
              </div>
            </div>

            <div class="space-y-1">
              <div class="flex justify-between">
                <Label>Dominance (Submissive - Dominant)</Label>
                <span
                  class="text-xs text-gray-500"
                  id="dominance-range-display"
                >
                  -1.0 - 1.0
                </span>
              </div>
              <div class="pt-1 px-2">
                <Slider
                  id="dominance-range-slider"
                  data-min="-1"
                  data-max="1"
                  data-start="-1"
                  data-end="1"
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Patterns Filters -->
      <div class="filter-section space-y-4 hidden" data-section="patterns">
        <div class="space-y-2">
          <Label>Pattern Types</Label>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 mt-1">
            {
              availablePatternTypes.map((type: string) => (
                <div class="flex items-center space-x-2">
                  <Checkbox
                    id={`pattern-${type}`}
                    value={type}
                    class="pattern-type-checkbox"
                  />
                  <Label htmlFor={`pattern-${type}`} class="cursor-pointer">
                    {type}
                  </Label>
                </div>
              ))
            }
          </div>
        </div>

        <div class="space-y-2">
          <div class="flex justify-between">
            <Label>Minimum Strength</Label>
            <span class="text-xs text-gray-500" id="strength-display">
              0.0
            </span>
          </div>
          <div class="pt-2 px-2">
            <Slider
              id="strength-slider"
              data-min="0"
              data-max="1"
              data-value="0"
            />
          </div>
        </div>

        <div class="space-y-2">
          <div class="flex justify-between">
            <Label>Minimum Confidence</Label>
            <span class="text-xs text-gray-500" id="confidence-display">
              0.0
            </span>
          </div>
          <div class="pt-2 px-2">
            <Slider
              id="confidence-slider"
              data-min="0"
              data-max="1"
              data-value="0"
            />
          </div>
        </div>

        <div class="space-y-2">
          <Label>Pattern Categories</Label>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 mt-1">
            {
              availablePatternCategories.map((category: string) => (
                <div class="flex items-center space-x-2">
                  <Checkbox
                    id={`category-${category}`}
                    value={category}
                    class="pattern-category-checkbox"
                  />
                  <Label
                    htmlFor={`category-${category}`}
                    class="cursor-pointer"
                  >
                    {category}
                  </Label>
                </div>
              ))
            }
          </div>
        </div>
      </div>

      <!-- Visualization Filters -->
      <div class="filter-section space-y-4 hidden" data-section="visualization">
        <div class="space-y-2">
          <Label>Group By</Label>
          <Select>
            <SelectTrigger id="group-by-select" class="w-full">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="session">Session</SelectItem>
              <SelectItem value="day">Day</SelectItem>
              <SelectItem value="week">Week</SelectItem>
              <SelectItem value="month">Month</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div class="space-y-2">
          <div class="flex justify-between">
            <Label>Smoothing</Label>
            <span class="text-xs text-gray-500" id="smoothing-display">
              0
            </span>
          </div>
          <div class="pt-2 px-2">
            <Slider
              id="smoothing-slider"
              data-min="0"
              data-max="10"
              data-value="0"
              data-step="1"
            />
          </div>
        </div>

        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <Label htmlFor="show-raw-data">Show Raw Data</Label>
            <Switch id="show-raw-data" />
          </div>

          <div class="flex items-center justify-between">
            <Label htmlFor="show-trendlines">Show Trendlines</Label>
            <Switch id="show-trendlines" />
          </div>

          <div class="flex items-center justify-between">
            <Label htmlFor="show-confidence-intervals"
              >Show Confidence Intervals</Label
            >
            <Switch id="show-confidence-intervals" />
          </div>

          <div class="flex items-center justify-between">
            <Label htmlFor="show-annotations">Show Annotations</Label>
            <Switch id="show-annotations" />
          </div>
        </div>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="flex justify-between pt-2">
      <Button variant="outline" size="sm" id="reset-filters">
        <IconX class="mr-1 h-4 w-4" />
        Reset
      </Button>
      <Button id="apply-filters">
        <IconFilter class="mr-1 h-4 w-4" />
        Apply Filters
      </Button>
    </div>
  </div>
</div>

<script>
  // We need to initialize the component when it loads
  document.addEventListener('DOMContentLoaded', initializeAdvancedFiltering)

  function initializeAdvancedFiltering() {
    const component = document.getElementById('advanced-filtering-component')
    if (!component) return

    // JS object to track the current filter state
    const options = {
      timeRange: {},
      emotions: {
        dimensionalRanges: {},
      },
      patterns: {},
      visualization: {},
    }

    // Elements
    const tabButtons = component.querySelectorAll('.tab-button')
    const filterSections = component.querySelectorAll('.filter-section')
    const timeRangeSelect = component.querySelector('#time-range-select')
    const customDateRange = component.querySelector('#custom-date-range')
    const startDateInput = component.querySelector('#start-date')
    const endDateInput = component.querySelector('#end-date')
    const emotionTypeCheckboxes = component.querySelectorAll('.emotion-type-checkbox')
    const intensityRangeSlider = component.querySelector('#intensity-range-slider')
    const intensityRangeDisplay = component.querySelector('#intensity-range-display')
    const valenceRangeSlider = component.querySelector('#valence-range-slider')
    const valenceRangeDisplay = component.querySelector('#valence-range-display')
    const arousalRangeSlider = component.querySelector('#arousal-range-slider')
    const arousalRangeDisplay = component.querySelector('#arousal-range-display')
    const dominanceRangeSlider = component.querySelector('#dominance-range-slider')
    const dominanceRangeDisplay = component.querySelector('#dominance-range-display')
    const patternTypeCheckboxes = component.querySelectorAll('.pattern-type-checkbox')
    const strengthSlider = component.querySelector('#strength-slider')
    const strengthDisplay = component.querySelector('#strength-display')
    const confidenceSlider = component.querySelector('#confidence-slider')
    const confidenceDisplay = component.querySelector('#confidence-display')
    const patternCategoryCheckboxes = component.querySelectorAll('.pattern-category-checkbox')
    const groupBySelect = component.querySelector('#group-by-select')
    const smoothingSlider = component.querySelector('#smoothing-slider')
    const smoothingDisplay = component.querySelector('#smoothing-display')
    const showRawDataSwitch = component.querySelector('#show-raw-data')
    const showTrendlinesSwitch = component.querySelector('#show-trendlines')
    const showConfidenceIntervalsSwitch = component.querySelector('#show-confidence-intervals')
    const showAnnotationsSwitch = component.querySelector('#show-annotations')
    const resetButton = component.querySelector('#reset-filters')
    const applyButton = component.querySelector('#apply-filters')

    // Tab switching
    tabButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const tab = button.getAttribute('data-tab')

        // Update active tab button
        tabButtons.forEach((btn) => {
          btn.classList.remove('border-primary')
          btn.classList.add('border-transparent')
        })
        button.classList.remove('border-transparent')
        button.classList.add('border-primary')

        // Show active section
        filterSections.forEach((section) => {
          if (section.getAttribute('data-section') === tab) {
            section.classList.remove('hidden')
          } else {
            section.classList.add('hidden')
          }
        })
      })
    })

    // Time range select
    if (timeRangeSelect) {
      timeRangeSelect.addEventListener(
        'valueChange',
        (e) => {
          const value = e.detail
          options.timeRange.presetRange = value

          if (value === 'custom') {
            customDateRange.classList.remove('hidden')
          } else {
            customDateRange.classList.add('hidden')

            // Calculate dates based on preset
            const today = new Date()
            let startDate

            switch (value) {
              case 'day':
                startDate = new Date(today)
                startDate.setDate(today.getDate() - 1)
                break
              case 'week':
                startDate = new Date(today)
                startDate.setDate(today.getDate() - 7)
                break
              case 'month':
                startDate = new Date(today)
                startDate.setMonth(today.getMonth() - 1)
                break
              case 'quarter':
                startDate = new Date(today)
                startDate.setMonth(today.getMonth() - 3)
                break
              case 'year':
                startDate = new Date(today)
                startDate.setFullYear(today.getFullYear() - 1)
                break
            }

            if (startDate) {
              options.timeRange.startDate = startDate
              options.timeRange.endDate = today
            }
          }
        },
      )
    }

    // Date inputs
    if (startDateInput) {
      startDateInput.addEventListener('change', () => {
        options.timeRange.startDate = startDateInput.valueAsDate ?? undefined
      })
    }

    if (endDateInput) {
      endDateInput.addEventListener('change', () => {
        options.timeRange.endDate = endDateInput.valueAsDate ?? undefined
      })
    }

    // Initialize sliders
    initializeSlider(
      intensityRangeSlider,
      intensityRangeDisplay,
      (values) => {
        if (values.length === 2) {
          const [min, max] = values
          options.emotions.minIntensity = min
          options.emotions.maxIntensity = max
          if (intensityRangeDisplay) intensityRangeDisplay.textContent = `${min.toFixed(1)} - ${max.toFixed(1)}`
        }
      },
    )

    initializeSlider(
      valenceRangeSlider,
      valenceRangeDisplay,
      (values) => {
        if (values.length === 2) {
          const [min, max] = values
          if (!options.emotions.dimensionalRanges) {
            options.emotions.dimensionalRanges = {}
          }
          options.emotions.dimensionalRanges.valence = [min, max]
          if (valenceRangeDisplay) valenceRangeDisplay.textContent = `${min.toFixed(1)} - ${max.toFixed(1)}`
        }
      },
    )

    initializeSlider(
      arousalRangeSlider,
      arousalRangeDisplay,
      (values) => {
        if (values.length === 2) {
          const [min, max] = values
          if (!options.emotions.dimensionalRanges) {
            options.emotions.dimensionalRanges = {}
          }
          options.emotions.dimensionalRanges.arousal = [min, max]
          if (arousalRangeDisplay) arousalRangeDisplay.textContent = `${min.toFixed(1)} - ${max.toFixed(1)}`
        }
      },
    )

    initializeSlider(
      dominanceRangeSlider,
      dominanceRangeDisplay,
      (values) => {
        if (values.length === 2) {
          const [min, max] = values
          if (!options.emotions.dimensionalRanges) {
            options.emotions.dimensionalRanges = {}
          }
          options.emotions.dimensionalRanges.dominance = [min, max]
          if (dominanceRangeDisplay) dominanceRangeDisplay.textContent = `${min.toFixed(1)} - ${max.toFixed(1)}`
        }
      },
    )

    initializeSlider(
      strengthSlider,
      strengthDisplay,
      (values) => {
        if (values.length === 1) {
          const [value] = values
          options.patterns.minStrength = value
          if (strengthDisplay) strengthDisplay.textContent = value.toFixed(1)
        }
      },
      true,
    )

    initializeSlider(
      confidenceSlider,
      confidenceDisplay,
      (values) => {
        if (values.length === 1) {
          const [value] = values
          options.patterns.minConfidence = value
          if (confidenceDisplay) confidenceDisplay.textContent = value.toFixed(1)
        }
      },
      true,
    )

    initializeSlider(
      smoothingSlider,
      smoothingDisplay,
      (values) => {
        if (values.length === 1) {
          const [value] = values
          options.visualization.smoothing = value
          if (smoothingDisplay) smoothingDisplay.textContent = String(value)
        }
      },
      true,
    )

    // Initialize checkbox collections
    emotionTypeCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('change', (e) => {
        const target = e.target
        updateCheckboxArray(target, 'emotions', 'types')
      })
    })

    patternTypeCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('change', (e) => {
        const target = e.target
        updateCheckboxArray(target, 'patterns', 'types')
      })
    })

    patternCategoryCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('change', (e) => {
        const target = e.target
        updateCheckboxArray(target, 'patterns', 'categories')
      })
    })

    // Initialize switches
    initializeSwitch(showRawDataSwitch, (checked) => {
      options.visualization.showRawData = checked
    })

    initializeSwitch(showTrendlinesSwitch, (checked) => {
      options.visualization.showTrendlines = checked
    })

    initializeSwitch(showConfidenceIntervalsSwitch, (checked) => {
      options.visualization.showConfidenceIntervals = checked
    })

    initializeSwitch(showAnnotationsSwitch, (checked) => {
      options.visualization.showAnnotations = checked
    })

    // Group by select
    if (groupBySelect) {
      groupBySelect.addEventListener(
        'valueChange',
        (e) => {
          options.visualization.groupBy = e.detail
        },
      )
    }

    // Reset button
    if (resetButton) {
      resetButton.addEventListener('click', () => {
        // Reset the options object
        options.timeRange = {}
        options.emotions = { dimensionalRanges: {} }
        options.patterns = {}
        options.visualization = {}

        // Reset UI elements
        // This would require resetting all the UI elements to their default state
        // For brevity, we're not implementing the full reset here

        // Dispatch change event
        dispatchOptionsChange(options)
      })
    }

    // Apply button
    if (applyButton) {
      applyButton.addEventListener('click', () => {
        dispatchApplyEvent()
      })
    }

    // Helper for slider initialization
    function initializeSlider(
      slider,
      _display,
      onChange,
      singleValue = false,
    ) {
      if (!slider) return

      let initialValues
      if (singleValue) {
        const value = parseFloat(slider.getAttribute('data-value') || '0')
        initialValues = [value]
      } else {
        const start = parseFloat(slider.getAttribute('data-start') || '0')
        const end = parseFloat(slider.getAttribute('data-end') || '1')
        initialValues = [start, end]
      }

      // For demonstration, we'll just simulate the change event
      onChange(initialValues)

      // Add event listener for value changes
      slider.addEventListener('sliderValueChange', (e) => {
        onChange(e.detail.values)
      })
    }

    // Helper for switch initialization
    function initializeSwitch(
      switchEl,
      onChange,
    ) {
      if (!switchEl) return

      // Initialize with default state
      onChange(false)

      // Add event listener for changes
      switchEl.addEventListener('checkedChange', (e) => {
        onChange(e.detail)
      })
    }

    // Helper for checkbox array updates
    function updateCheckboxArray(
      checkbox,
      category,
      key,
    ) {
      const value = checkbox.value
      const checked = checkbox.checked

      // Ensure the property exists and is an array
      if (!options[category][key]) {
        options[category][key] = []
      }

      const values = options[category][key]

      if (checked) {
        // Add to array if not already present
        if (!values.includes(value)) {
          values.push(value)
        }
      } else {
        // Remove from array
        options[category][key] = values.filter(
          (item) => item !== value,
        )
      }

      // Dispatch change event
      dispatchOptionsChange(options)
    }

    // Dispatch options change event
    function dispatchOptionsChange(filterOptions) {
      if (!component) return

      const event = new CustomEvent('advancedFilterOptionsChange', {
        detail: { options: filterOptions },
        bubbles: true,
      })
      component.dispatchEvent(event)
    }

    // Dispatch apply event
    function dispatchApplyEvent() {
      if (!component) return

      const event = new CustomEvent('advancedFilterApply', {
        bubbles: true,
      })
      component.dispatchEvent(event)
    }
  }
</script>

<style>
  /* Any component-specific styles can go here */
  .filter-section {
    transition: all 0.2s ease-in-out;
  }

  .tab-button {
    transition: all 0.2s ease-in-out;
  }

  .tab-button:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }
</style>
