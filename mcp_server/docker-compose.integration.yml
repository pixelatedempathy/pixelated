version: '3.8'

services:
  # MCP Server with WebSocket and Flask Integration
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-server-integration
    ports:
      - "8080:8080"
      - "8081:8081" # WebSocket port
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8080
      - MONGODB_URI=mongodb://mongodb:27017/mcp_server
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=your-jwt-secret-key-here-minimum-32-characters
      - FLASK_API_URL=http://flask-service:5000
      - WEBSOCKET_ENABLED=true
      - WEBSOCKET_MAX_CONNECTIONS=1000
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    depends_on:
      - mongodb
      - redis
      - flask-service
    networks:
      - mcp-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Flask Service for 6-stage Pipeline
  flask-service:
    build:
      context: ../flask_service # Adjust path as needed
      dockerfile: Dockerfile
    container_name: flask-pipeline-service
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_PORT=5000
      - REDIS_URL=redis://redis:6379/1
      - MONGODB_URI=mongodb://mongodb:27017/flask_pipeline
      - BIAS_DETECTION_URL=http://bias-detection:8000
    depends_on:
      - mongodb
      - redis
      - bias-detection
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bias Detection Service
  bias-detection:
    build:
      context: ../bias_detection # Adjust path as needed
      dockerfile: Dockerfile
    container_name: bias-detection-service
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models
      - REDIS_URL=redis://redis:6379/2
    volumes:
      - ./models:/app/models
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: mcp-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=mcp_server
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Traefik Load Balancer
  traefik:
    image: traefik:v3.2
    container_name: mcp-traefik
    ports:
      - "80:80"
      - "443:443"
      - "8082:8082"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik:/etc/traefik:ro
      - traefik_certs:/letsencrypt
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--metrics.prometheus=true"
    depends_on:
      - mcp-server
      - flask-service
    networks:
      - mcp-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mcp-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - mcp-network
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:
