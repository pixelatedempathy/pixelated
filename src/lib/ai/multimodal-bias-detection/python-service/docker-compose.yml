version: '3.8'

services:
  # Multi-Modal Bias Detection Service
  multimodal-bias-detection:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: pixelated-multimodal-bias-detection
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - APP_ENV=production
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8001
      - WORKERS=4
      - DATABASE_URL=postgresql://multimodal_user:multimodal_password@postgres:5432/multimodal_bias_detection
      - REDIS_URL=redis://redis:6379/1
      - MODEL_CACHE_DIR=/app/models
      - VISION_MODEL_PATH=/app/models/vision
      - AUDIO_MODEL_PATH=/app/models/audio
      - VIDEO_MODEL_PATH=/app/models/video
      - MULTIMODAL_MODEL_PATH=/app/models/multimodal
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - ENABLE_CACHING=true
      - CACHE_TTL_SECONDS=1800
      - ENABLE_ASYNC_PROCESSING=true
      - ENABLE_GPU_ACCELERATION=true
      - RATE_LIMIT_PER_MINUTE=30
      - MAX_IMAGE_SIZE=10485760  # 10MB
      - MAX_AUDIO_SIZE=52428800  # 50MB
      - MAX_VIDEO_SIZE=104857600  # 100MB
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - multimodal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.pixelated.service=multimodal-bias-detection"
      - "com.pixelated.environment=production"
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]

  # PostgreSQL Database for Multi-Modal
  postgres:
    image: postgres:15-alpine
    container_name: pixelated-multimodal-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=multimodal_bias_detection
      - POSTGRES_USER=multimodal_user
      - POSTGRES_PASSWORD=multimodal_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
    ports:
      - "5433:5432"  # Different port from text service
    volumes:
      - postgres_multimodal_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - multimodal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U multimodal_user -d multimodal_bias_detection"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.pixelated.service=postgres-multimodal"
      - "com.pixelated.environment=production"

  # Redis Cache for Multi-Modal
  redis:
    image: redis:7-alpine
    container_name: pixelated-multimodal-redis
    restart: unless-stopped
    ports:
      - "6380:6379"  # Different port from text service
    volumes:
      - redis_multimodal_data:/data
    networks:
      - multimodal-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    labels:
      - "com.pixelated.service=redis-multimodal"
      - "com.pixelated.environment=production"

  # Prometheus for Multi-Modal Metrics
  prometheus-multimodal:
    image: prom/prometheus:latest
    container_name: pixelated-prometheus-multimodal
    restart: unless-stopped
    ports:
      - "9091:9090"  # Different port from text service
    volumes:
      - ./monitoring/prometheus-multimodal.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_multimodal_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - multimodal-network
    depends_on:
      - multimodal-bias-detection
    labels:
      - "com.pixelated.service=prometheus-multimodal"
      - "com.pixelated.environment=production"

  # Grafana for Multi-Modal Dashboards
  grafana-multimodal:
    image: grafana/grafana:latest
    container_name: pixelated-grafana-multimodal
    restart: unless-stopped
    ports:
      - "3001:3000"  # Different port from text service
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001/grafana/
    volumes:
      - grafana_multimodal_data:/var/lib/grafana
      - ./monitoring/grafana/multimodal-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/multimodal-datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - multimodal-network
    depends_on:
      - prometheus-multimodal
    labels:
      - "com.pixelated.service=grafana-multimodal"
      - "com.pixelated.environment=production"

  # Nginx Reverse Proxy for Multi-Modal
  nginx-multimodal:
    image: nginx:alpine
    container_name: pixelated-nginx-multimodal
    restart: unless-stopped
    ports:
      - "81:80"  # Different port from text service
      - "444:443"
    volumes:
      - ./nginx/nginx-multimodal.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - multimodal-network
    depends_on:
      - multimodal-bias-detection
    labels:
      - "com.pixelated.service=nginx-multimodal"
      - "com.pixelated.environment=production"

  # File Storage Service
  minio:
    image: minio/minio:latest
    container_name: pixelated-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - multimodal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "com.pixelated.service=minio"
      - "com.pixelated.environment=production"

volumes:
  postgres_multimodal_data:
    driver: local
  redis_multimodal_data:
    driver: local
  prometheus_multimodal_data:
    driver: local
  grafana_multimodal_data:
    driver: local
  minio_data:
    driver: local

networks:
  multimodal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16