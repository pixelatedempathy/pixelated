name: GKE Monitoring & Alerting

permissions:
  contents: read
  id-token: write
  issues: write

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours (reduced frequency to minimize log spam)
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check to perform'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - basic
          - performance
          - security
      environment:
        description: 'Environment to monitor'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_NAMESPACE: ${{ secrets.GKE_NAMESPACE }}

jobs:
  health-monitoring:
    name: Health Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          universe: googleapis.com
          cleanup_credentials: true
          access_token_lifetime: 3600s
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform
          id_token_include_email: false

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Run comprehensive health checks
        id: health-check
        env:
          CHECK_TYPE: ${{ github.event.inputs.check_type || 'comprehensive' }}
          ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          GKE_ENVIRONMENT_URL: ${{ secrets.GKE_ENVIRONMENT_URL }}
        run: |
          echo "🏥 Running $CHECK_TYPE health monitoring for $ENVIRONMENT..."
          
          # Check deployment health
          echo "📊 Deployment status:"
          kubectl get deployment pixelated -o wide
          
          # Check pod health
          echo "🔍 Pod health:"
          kubectl get pods -l app=pixelated -o wide
          
          # Check service status
          echo "🌐 Service status:"
          kubectl get service ${{ secrets.GKE_SERVICE_NAME }}
          
          # Detailed health metrics
          READY_PODS=$(kubectl get pods -l app=pixelated -o json | jq '[.items[] | select(.status.phase == "Running" and (.status.containerStatuses[]?.ready // false))] | length')
          TOTAL_PODS=$(kubectl get pods -l app=pixelated -o json | jq '.items | length')
          RESTART_COUNT=$(kubectl get pods -l app=pixelated -o json | jq '[.items[] | .status.containerStatuses[]?.restartCount // 0] | add')
          
          echo "📈 Health metrics:"
          echo "  - Ready pods: $READY_PODS/$TOTAL_PODS"
          echo "  - Total restart count: $RESTART_COUNT"
          
          # Set health status
          if [ "$READY_PODS" -eq 0 ]; then
            echo "❌ No healthy pods found"
            echo "health_status=critical" >> $GITHUB_OUTPUT
            echo "alert_needed=true" >> $GITHUB_OUTPUT
          elif [ "$READY_PODS" -lt "$TOTAL_PODS" ]; then
            echo "⚠️ Some pods are not ready"
            echo "health_status=degraded" >> $GITHUB_OUTPUT
            echo "alert_needed=true" >> $GITHUB_OUTPUT
          elif [ "$RESTART_COUNT" -gt 10 ]; then
            echo "⚠️ High restart count detected"
            echo "health_status=warning" >> $GITHUB_OUTPUT
            echo "alert_needed=true" >> $GITHUB_OUTPUT
          else
            echo "✅ All pods are healthy"
            echo "health_status=healthy" >> $GITHUB_OUTPUT
            echo "alert_needed=false" >> $GITHUB_OUTPUT
          fi
          
          # External health check
          if [ -n "$GKE_ENVIRONMENT_URL" ]; then
            echo "🌐 Testing external connectivity..."
            if curl -f --connect-timeout 10 --max-time 30 "$GKE_ENVIRONMENT_URL/api/health" >/dev/null 2>&1; then
              echo "✅ External health check passed"
              echo "external_health=healthy" >> $GITHUB_OUTPUT
            else
              echo "❌ External health check failed"
              echo "external_health=unhealthy" >> $GITHUB_OUTPUT
              echo "alert_needed=true" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Performance check for comprehensive monitoring
          if [ "$CHECK_TYPE" = "comprehensive" ] || [ "$CHECK_TYPE" = "performance" ]; then
            echo "📊 Running performance checks..."
            
            # Check resource usage
            kubectl top pods -l app=pixelated --no-headers | while read -r name cpu mem; do
              CPU_USAGE=$(echo $cpu | sed 's/m//')
              MEM_USAGE=$(echo $mem | sed 's/Mi//')
              
              if [ "$CPU_USAGE" -gt 80 ]; then
                echo "⚠️ High CPU usage in pod $name: ${cpu}"
                echo "performance_alert=true" >> $GITHUB_OUTPUT
              fi
              
              if [ "$MEM_USAGE" -gt 1500 ]; then
                echo "⚠️ High memory usage in pod $name: ${mem}"
                echo "performance_alert=true" >> $GITHUB_OUTPUT
              fi
            done
            
            # Check response time
            if [ -n "$GKE_ENVIRONMENT_URL" ]; then
              RESPONSE_TIME=$(curl -w "%{time_total}" -o /dev/null -s "$GKE_ENVIRONMENT_URL/api/health")
              if (( $(echo "$RESPONSE_TIME > 5" | bc -l) )); then
                echo "⚠️ Slow response time: ${RESPONSE_TIME}s"
                echo "performance_alert=true" >> $GITHUB_OUTPUT
              fi
            fi
          fi
          
          echo "✅ Health monitoring completed"

      - name: Security monitoring
        if: github.event.inputs.check_type == 'security' || github.event.schedule == '0 */6 * * *'
        id: security-check
        run: |
          echo "🔒 Running security monitoring..."
          
          # Check for privileged containers
          PRIVILEGED_PODS=$(kubectl get pods -l app=pixelated -o json | jq '[.items[] | select(.spec.containers[]?.securityContext?.privileged == true)] | length')
          if [ "$PRIVILEGED_PODS" -gt 0 ]; then
            echo "❌ Found privileged containers"
            echo "security_alert=true" >> $GITHUB_OUTPUT
          fi
          
          # Check for containers running as root
          ROOT_PODS=$(kubectl get pods -l app=pixelated -o json | jq '[.items[] | select(.spec.containers[]?.securityContext?.runAsUser == 0 or .spec.containers[]?.securityContext?.runAsUser == null)] | length')
          if [ "$ROOT_PODS" -gt 0 ]; then
            echo "⚠️ Found containers running as root"
            echo "security_alert=true" >> $GITHUB_OUTPUT
          fi
          
          # Check network policies
          NETWORK_POLICIES=$(kubectl get networkpolicies -n ${{ secrets.GKE_NAMESPACE }} 2>/dev/null | wc -l)
          if [ "$NETWORK_POLICIES" -eq 0 ]; then
            echo "⚠️ No network policies found"
            echo "security_alert=true" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ Security monitoring completed"

      - name: Generate monitoring report
        if: always()
        id: report
        run: |
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          HEALTH_STATUS="${{ steps.health-check.outputs.health_status }}"
          EXTERNAL_HEALTH="${{ steps.health-check.outputs.external_health }}"
          ALERT_NEEDED="${{ steps.health-check.outputs.alert_needed }}"
          PERFORMANCE_ALERT="${{ steps.health-check.outputs.performance_alert }}"
          SECURITY_ALERT="${{ steps.security-check.outputs.security_alert }}"
          
          # Create monitoring report
          cat > monitoring-report.json << EOF
          {
            "timestamp": "$TIMESTAMP",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "check_type": "${{ github.event.inputs.check_type || 'comprehensive' }}",
            "health_status": "$HEALTH_STATUS",
            "external_health": "$EXTERNAL_HEALTH",
            "alert_needed": $ALERT_NEEDED,
            "performance_alert": $PERFORMANCE_ALERT,
            "security_alert": $SECURITY_ALERT,
            "cluster": "${{ secrets.GKE_CLUSTER_NAME }}",
            "namespace": "${{ secrets.GKE_NAMESPACE }}"
          }
          EOF
          
          echo "📊 Monitoring report generated"
          cat monitoring-report.json

      - name: Upload monitoring report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report-${{ github.run_number }}
          path: monitoring-report.json
          retention-days: 30

      - name: Create GitHub issue for critical alerts
        if: steps.health-check.outputs.alert_needed == 'true' && steps.health-check.outputs.health_status == 'critical'
        uses: actions/github-script@v7
        with:
          script: |
            const report = require('./monitoring-report.json');
            
            const issueBody = `
            ## 🚨 Critical Health Alert Detected
            
            **Environment:** ${report.environment}
            **Timestamp:** ${report.timestamp}
            **Health Status:** ${report.health_status}
            **External Health:** ${report.external_health}
            
            ### Cluster Information
            - **Cluster:** ${report.cluster}
            - **Namespace:** ${report.namespace}
            
            ### Alert Details
            - Performance Alert: ${report.performance_alert}
            - Security Alert: ${report.security_alert}
            
            ### Action Required
            Immediate intervention may be required. Please check the GKE cluster status and take appropriate action.
            
            [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical Health Alert - ${report.environment}`,
              body: issueBody,
              labels: ['critical', 'monitoring', 'gke']
            });

      - name: Send Slack notification
        if: steps.health-check.outputs.alert_needed == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            HEALTH_STATUS="${{ steps.health-check.outputs.health_status }}"
            EXTERNAL_HEALTH="${{ steps.health-check.outputs.external_health }}"
            
            # Determine color based on health status
            case "$HEALTH_STATUS" in
              critical) COLOR="danger" ;;
              degraded) COLOR="warning" ;;
              warning) COLOR="warning" ;;
              healthy) COLOR="good" ;;
              *) COLOR="warning" ;;
            esac
            
            curl -X POST \
              -H "Content-Type: application/json" \
              -d "{
                \"text\": \"🚨 GKE Health Alert\",\n
                \"attachments\": [\n
                  {\n
                    \"color\": \"$COLOR\",\n
                    \"fields\": [\n
                      {\"title\": \"Environment\", \"value\": \"${{ github.event.inputs.environment || 'production' }}\", \"short\": true},\n
                      {\"title\": \"Health Status\", \"value\": \"$HEALTH_STATUS\", \"short\": true},\n
                      {\"title\": \"External Health\", \"value\": \"$EXTERNAL_HEALTH\", \"short\": true},\n
                      {\"title\": \"Cluster\", \"value\": \"${{ secrets.GKE_CLUSTER_NAME }}\", \"short\": true}\n
                    ]\n
                  }\n
                ]\n
              }" \
              "$SLACK_WEBHOOK_URL" || echo "⚠️ Slack notification failed"
          fi

  resource-monitoring:
    name: Resource Monitoring
    runs-on: ubuntu-latest
    if: github.event.schedule == '*/5 * * * *' || github.event.inputs.check_type == 'performance'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          universe: googleapis.com
          cleanup_credentials: true
          access_token_lifetime: 3600s
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform
          id_token_include_email: false

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Monitor cluster resources
        run: |
          echo "📊 Monitoring cluster resources..."
          
          # Node resource usage
          echo "📋 Node resource usage:"
          kubectl top nodes --no-headers | while read -r name cpu mem; do
            CPU_USAGE=$(echo $cpu | sed 's/%//')
            MEM_USAGE=$(echo $mem | sed 's/%//')
            
            echo "Node $name: CPU ${cpu}, Memory ${mem}"
            
            if [ "$CPU_USAGE" -gt 85 ]; then
              echo "⚠️ High CPU usage on node $name: ${cpu}"
            fi
            
            if [ "$MEM_USAGE" -gt 85 ]; then
              echo "⚠️ High memory usage on node $name: ${mem}"
            fi
          done
          
          # Pod resource requests vs limits
          echo "📋 Pod resource analysis:"
          kubectl get pods -n ${{ secrets.GKE_NAMESPACE }} -l app=pixelated -o json | \
            jq -r '.items[] | "\(.metadata.name) CPU: \(.spec.containers[0].resources.requests.cpu // "none") -> \(.spec.containers[0].resources.limits.cpu // "none") Memory: \(.spec.containers[0].resources.requests.memory // "none") -> \(.spec.containers[0].resources.limits.memory // "none")"'
          
          # Persistent volume usage
          echo "📋 Persistent volume usage:"
          kubectl get pvc -n ${{ secrets.GKE_NAMESPACE }} -o json | \
            jq -r '.items[] | select(.status.phase == "Bound") | "\(.metadata.name): \(.status.capacity.storage) used"'
          
          echo "✅ Resource monitoring completed"

      - name: Check for resource alerts
        id: resource-alerts
        run: |
          # Check if any nodes are overutilized
          OVERUTILIZED_NODES=$(kubectl top nodes --no-headers | awk '{if ($3+0 > 85 || $5+0 > 85) print $1}' | wc -l)
          
          if [ "$OVERUTILIZED_NODES" -gt 0 ]; then
            echo "⚠️ Found $OVERUTILIZED_NODES overutilized nodes"
            echo "resource_alert=true" >> $GITHUB_OUTPUT
          fi
          
          # Check for pending pods
          PENDING_PODS=$(kubectl get pods -n ${{ secrets.GKE_NAMESPACE }} --field-selector=status.phase=Pending | wc -l)
          
          if [ "$PENDING_PODS" -gt 2 ]; then
            echo "⚠️ Found $PENDING_PODS pending pods"
            echo "resource_alert=true" >> $GITHUB_OUTPUT
          fi

  log-analysis:
    name: Log Analysis
    runs-on: ubuntu-latest
    if: github.event.schedule == '*/5 * * * *'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          universe: googleapis.com
          cleanup_credentials: true
          access_token_lifetime: 3600s
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform
          id_token_include_email: false

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Analyze recent logs
        run: |
          echo "📋 Analyzing recent logs..."
          
          # Get recent error logs
          ERROR_COUNT=$(kubectl logs -n ${{ secrets.GKE_NAMESPACE }} -l app=pixelated --tail=1000 --since=5m | grep -i error | wc -l)
          
          if [ "$ERROR_COUNT" -gt 10 ]; then
            echo "⚠️ High error count in recent logs: $ERROR_COUNT"
            echo "log_alert=true" >> $GITHUB_OUTPUT
            
            # Show sample errors
            echo "Sample recent errors:"
            kubectl logs -n ${{ secrets.GKE_NAMESPACE }} -l app=pixelated --tail=100 --since=5m | grep -i error | head -5
          fi
          
          # Check for crash loops
          CRASH_LOOPS=$(kubectl get pods -n ${{ secrets.GKE_NAMESPACE }} -l app=pixelated -o json | \
            jq '[.items[] | select(.status.containerStatuses[]?.restartCount > 5)] | length')
          
          if [ "$CRASH_LOOPS" -gt 0 ]; then
            echo "❌ Found $CRASH_LOOPS pods with crash loops"
            echo "crash_loop_alert=true" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ Log analysis completed"